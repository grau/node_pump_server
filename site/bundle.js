"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b ||= {})
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props2, context, updater) {
            this.props = props2;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props2, context, updater) {
            this.props = props2;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type2;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type2) {
            return type2.displayName || "Context";
          }
          function getComponentNameFromType(type2) {
            if (type2 == null) {
              return null;
            }
            {
              if (typeof type2.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type2 === "function") {
              return type2.displayName || type2.name || null;
            }
            if (typeof type2 === "string") {
              return type2;
            }
            switch (type2) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type2;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type2;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type2, type2.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type2.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type2.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props2, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props2, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props2, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props2, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type2, key, ref, self2, source, owner, props2) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type: type2,
              key,
              ref,
              props: props2,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement13(type2, config, children) {
            var propName;
            var props2 = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props2[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props2.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props2.children = childArray;
            }
            if (type2 && type2.defaultProps) {
              var defaultProps2 = type2.defaultProps;
              for (propName in defaultProps2) {
                if (props2[propName] === void 0) {
                  props2[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
                if (key) {
                  defineKeyPropWarningGetter(props2, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props2, displayName);
                }
              }
            }
            return ReactElement(type2, key, ref, self2, source, ReactCurrentOwner.current, props2);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement5(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props2 = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props2[propName] = defaultProps2[propName];
                  } else {
                    props2[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props2.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props2.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props2);
          }
          function isValidElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type2 = typeof children;
            if (type2 === "undefined" || type2 === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type2) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement3(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type2 === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement3(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext5(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef28(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type2) {
            if (typeof type2 === "string" || typeof type2 === "function") {
              return true;
            }
            if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type2 === "object" && type2 !== null) {
              if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type2, compare) {
            {
              if (!isValidElementType(type2)) {
                error("memo: The first argument must be a component. Instead received: %s", type2 === null ? "null" : typeof type2);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type: type2,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type2.name && !type2.displayName) {
                    type2.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext7(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState11(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef7(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect8(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback3(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo5(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle3(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props2 = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props2,
                  log: props2,
                  warn: props2,
                  error: props2,
                  group: props2,
                  groupCollapsed: props2,
                  groupEnd: props2
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props2 = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props2, {
                    value: prevLog
                  }),
                  info: assign({}, props2, {
                    value: prevInfo
                  }),
                  warn: assign({}, props2, {
                    value: prevWarn
                  }),
                  error: assign({}, props2, {
                    value: prevError
                  }),
                  group: assign({}, props2, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props2, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props2, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
            if (type2 == null) {
              return "";
            }
            if (typeof type2 === "function") {
              {
                return describeNativeComponentFrame(type2, shouldConstruct(type2));
              }
            }
            if (typeof type2 === "string") {
              return describeBuiltInComponentFrame(type2);
            }
            switch (type2) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type2.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement3(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement3(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement3(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type2 = element.type;
              if (type2 === null || type2 === void 0 || typeof type2 === "string") {
                return;
              }
              var propTypes;
              if (typeof type2 === "function") {
                propTypes = type2.propTypes;
              } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type2.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type2);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type2);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type2, props2, children) {
            var validType = isValidElementType(type2);
            if (!validType) {
              var info = "";
              if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props2);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type2 === null) {
                typeString = "null";
              } else if (isArray2(type2)) {
                typeString = "array";
              } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type2;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement13.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type2);
              }
            }
            if (type2 === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type2) {
            var validatedFactory = createElementWithValidation.bind(null, type2);
            validatedFactory.type = type2;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type2
                  });
                  return type2;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props2, children) {
            var newElement = cloneElement5.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task2) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task2);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children4 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children4;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext5;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef28;
          exports.isValidElement = isValidElement3;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback3;
          exports.useContext = useContext7;
          exports.useDebugValue = useDebugValue2;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect8;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle3;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo5;
          exports.useReducer = useReducer;
          exports.useRef = useRef7;
          exports.useState = useState11;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task2, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay2 = options.delay;
              if (typeof delay2 === "number" && delay2 > 0) {
                startTime2 = currentTime + delay2;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task2) {
            task2.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React59 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React59.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment4 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type2;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type2, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type2 === BOOLEANISH_STRING || type2 === BOOLEAN || type2 === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type2;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              name,
              null,
              false,
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              name,
              null,
              false,
              false
            );
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type2 = propertyInfo.type;
                node[propertyName] = type2 === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props2 = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props2,
                  log: props2,
                  warn: props2,
                  error: props2,
                  group: props2,
                  groupCollapsed: props2,
                  groupEnd: props2
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props2 = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props2, {
                    value: prevLog
                  }),
                  info: assign({}, props2, {
                    value: prevInfo
                  }),
                  warn: assign({}, props2, {
                    value: prevWarn
                  }),
                  error: assign({}, props2, {
                    value: prevError
                  }),
                  group: assign({}, props2, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props2, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props2, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
            if (type2 == null) {
              return "";
            }
            if (typeof type2 === "function") {
              {
                return describeNativeComponentFrame(type2, shouldConstruct(type2));
              }
            }
            if (typeof type2 === "string") {
              return describeBuiltInComponentFrame(type2);
            }
            switch (type2) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type2.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type2) {
            return type2.displayName || "Context";
          }
          function getComponentNameFromType(type2) {
            if (type2 == null) {
              return null;
            }
            {
              if (typeof type2.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type2 === "function") {
              return type2.displayName || type2.name || null;
            }
            if (typeof type2 === "string") {
              return type2;
            }
            switch (type2) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type2;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type2;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type2, type2.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type2.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type2.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type2) {
            return type2.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type2 = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type2;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type2;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type2, type2.render, "ForwardRef");
              case Fragment4:
                return "Fragment";
              case HostComponent:
                return type2;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type2);
              case Mode:
                if (type2 === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type2 === "function") {
                  return type2.displayName || type2.name || null;
                }
                if (typeof type2 === "string") {
                  return type2;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props2) {
            {
              if (!(hasReadOnlyValue[props2.type] || props2.onChange || props2.onInput || props2.readOnly || props2.disabled || props2.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props2.onChange || props2.readOnly || props2.disabled || props2.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type2 = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type2 === "checkbox" || type2 === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props2) {
            var usesChecked = props2.type === "checkbox" || props2.type === "radio";
            return usesChecked ? props2.checked != null : props2.value != null;
          }
          function getHostProps(element, props2) {
            var node = element;
            var checked = props2.checked;
            var hostProps = assign({}, props2, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props2) {
            {
              checkControlledValueProps("input", props2);
              if (props2.checked !== void 0 && props2.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props2.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props2.value !== void 0 && props2.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props2.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props2.defaultValue == null ? "" : props2.defaultValue;
            node._wrapperState = {
              initialChecked: props2.checked != null ? props2.checked : props2.defaultChecked,
              initialValue: getToStringValue(props2.value != null ? props2.value : defaultValue),
              controlled: isControlled(props2)
            };
          }
          function updateChecked(element, props2) {
            var node = element;
            var checked = props2.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props2) {
            var node = element;
            {
              var controlled = isControlled(props2);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props2);
            var value = getToStringValue(props2.value);
            var type2 = props2.type;
            if (value != null) {
              if (type2 === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString2(value);
                }
              } else if (node.value !== toString2(value)) {
                node.value = toString2(value);
              }
            } else if (type2 === "submit" || type2 === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props2.hasOwnProperty("value")) {
                setDefaultValue(node, props2.type, value);
              } else if (props2.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props2.type, getToStringValue(props2.defaultValue));
              }
            }
            {
              if (props2.checked == null && props2.defaultChecked != null) {
                node.defaultChecked = !!props2.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props2, isHydrating2) {
            var node = element;
            if (props2.hasOwnProperty("value") || props2.hasOwnProperty("defaultValue")) {
              var type2 = props2.type;
              var isButton = type2 === "submit" || type2 === "reset";
              if (isButton && (props2.value === void 0 || props2.value === null)) {
                return;
              }
              var initialValue = toString2(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props2) {
            var node = element;
            updateWrapper(node, props2);
            updateNamedCousins(node, props2);
          }
          function updateNamedCousins(rootNode, props2) {
            var name = props2.name;
            if (props2.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type2, value) {
            if (type2 !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString2(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString2(value)) {
                node.defaultValue = toString2(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props2) {
            {
              if (props2.value == null) {
                if (typeof props2.children === "object" && props2.children !== null) {
                  React59.Children.forEach(props2.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props2.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props2.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props2) {
            if (props2.value != null) {
              element.setAttribute("value", toString2(getToStringValue(props2.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props2) {
            {
              checkControlledValueProps("select", props2);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props2[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props2[propName]);
                if (props2.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props2.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props2) {
            return assign({}, props2, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props2) {
            var node = element;
            {
              checkSelectPropTypes(props2);
            }
            node._wrapperState = {
              wasMultiple: !!props2.multiple
            };
            {
              if (props2.value !== void 0 && props2.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props2) {
            var node = element;
            node.multiple = !!props2.multiple;
            var value = props2.value;
            if (value != null) {
              updateOptions(node, !!props2.multiple, value, false);
            } else if (props2.defaultValue != null) {
              updateOptions(node, !!props2.multiple, props2.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props2) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props2.multiple;
            var value = props2.value;
            if (value != null) {
              updateOptions(node, !!props2.multiple, value, false);
            } else if (wasMultiple !== !!props2.multiple) {
              if (props2.defaultValue != null) {
                updateOptions(node, !!props2.multiple, props2.defaultValue, true);
              } else {
                updateOptions(node, !!props2.multiple, props2.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props2) {
            var node = element;
            var value = props2.value;
            if (value != null) {
              updateOptions(node, !!props2.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props2) {
            var node = element;
            if (props2.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props2, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props2) {
            var node = element;
            {
              checkControlledValueProps("textarea", props2);
              if (props2.value !== void 0 && props2.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props2.value;
            if (initialValue == null) {
              var children = props2.children, defaultValue = props2.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props2) {
            var node = element;
            var value = getToStringValue(props2.value);
            var defaultValue = getToStringValue(props2.defaultValue);
            if (value != null) {
              var newValue = toString2(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props2.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element, props2) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props2) {
            updateWrapper$1(element, props2);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type2) {
            switch (type2) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type2) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type2);
            }
            if (parentNamespace === SVG_NAMESPACE && type2 === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_3, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles3) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles3) {
                if (!styles3.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles3[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles3) {
            var style3 = node.style;
            for (var styleName in styles3) {
              if (!styles3.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles3[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles3[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue);
              } else {
                style3[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles3) {
            var expanded = {};
            for (var key in styles3) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props2) {
            if (!props2) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props2.children != null || props2.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props2.dangerouslySetInnerHTML != null) {
              if (props2.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props2.dangerouslySetInnerHTML !== "object" || !(HTML in props2.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props2.suppressContentEditableWarning && props2.contentEditable && props2.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props2.style != null && typeof props2.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props2) {
            if (tagName.indexOf("-") === -1) {
              return typeof props2.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type2, props2) {
            {
              var invalidProps = [];
              for (var key in props2) {
                var isValid = validateProperty(type2, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
              }
            }
          }
          function validateProperties(type2, props2) {
            if (isCustomComponent(type2, props2)) {
              return;
            }
            warnInvalidARIAProps(type2, props2);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type2, props2) {
            {
              if (type2 !== "input" && type2 !== "textarea" && type2 !== "select") {
                return;
              }
              if (props2 != null && props2.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type2 === "select" && props2.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type2);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type2);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type2, props2, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props2) {
                var isValid = validateProperty$1(type2, key, props2[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
              }
            }
          };
          function validateProperties$2(type2, props2, eventRegistry) {
            if (isCustomComponent(type2, props2)) {
              return;
            }
            warnUnknownProperties(type2, props2, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type2, props2) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props2.disabled && isInteractive(type2));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props2 = getFiberCurrentPropsFromNode(stateNode);
            if (props2 === null) {
              return null;
            }
            var listener = props2[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props2)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent2;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style2 = {};
          if (canUseDOM) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type2 = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type2, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container2 = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container2, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container2 !== null) {
                        var parentNode = getClosestInstanceFromNode(container2);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container2 = container2.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common2 = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type2, props2) {
              validateProperties(type2, props2);
              validateProperties$1(type2, props2);
              validateProperties$2(type2, props2, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement13(type2, props2, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type2);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type2, props2);
                if (!isCustomComponentTag && type2 !== type2.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type2);
                }
              }
              if (type2 === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props2.is === "string") {
                domElement = ownerDocument.createElement(type2, {
                  is: props2.is
                });
              } else {
                domElement = ownerDocument.createElement(type2);
                if (type2 === "select") {
                  var node = domElement;
                  if (props2.multiple) {
                    node.multiple = true;
                  } else if (props2.size) {
                    node.size = props2.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type2);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type2)) {
                  warnedUnknownTags[type2] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type2);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props2;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props2 = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props2 = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props2 = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props2 = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props2 = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props2 = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props2 = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props2 = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props2 = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props2 = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props2 = rawProps;
            }
            assertValidProps(tag, props2);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props2, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props2.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props2) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props2) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props2);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props2);
                return;
              case "select":
                restoreControlledState$1(domElement, props2);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type2;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type2 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container2.namespaceURI || null;
                type2 = container2.tagName;
                namespace = getChildNamespace(ownNamespace, type2);
                break;
              }
            }
            {
              var validatedTag = type2.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type2, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type2);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type2);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type2, props2, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type2, null, hostContextDev.ancestorInfo);
              if (typeof props2.children === "string" || typeof props2.children === "number") {
                var string = "" + props2.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement13(type2, props2, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props2);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type2, props2, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type2, props2, rootContainerInstance);
            switch (type2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props2.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type2, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type2, oldProps, newProps);
          }
          function shouldSetTextContent(type2, props2) {
            return type2 === "textarea" || type2 === "noscript" || typeof props2.children === "string" || typeof props2.children === "number" || typeof props2.dangerouslySetInnerHTML === "object" && props2.dangerouslySetInnerHTML !== null && props2.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type2, newProps, internalInstanceHandle) {
            switch (type2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type2, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type2, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container2, child) {
            var parentNode;
            if (container2.nodeType === COMMENT_NODE) {
              parentNode = container2.parentNode;
              parentNode.insertBefore(child, container2);
            } else {
              parentNode = container2;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container2._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container2, child, beforeChild) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.insertBefore(child, beforeChild);
            } else {
              container2.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container2, child) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.removeChild(child);
            } else {
              container2.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
            if (container2.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container2.parentNode, suspenseInstance);
            } else if (container2.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container2, suspenseInstance);
            }
            retryIfBlockedOn(container2);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props2) {
            instance = instance;
            var styleProp = props2[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container2) {
            if (container2.nodeType === ELEMENT_NODE) {
              container2.textContent = "";
            } else if (container2.nodeType === DOCUMENT_NODE) {
              if (container2.documentElement) {
                container2.removeChild(container2.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type2, props2) {
            if (instance.nodeType !== ELEMENT_NODE || type2.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type2, props2, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props2);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type2, props2, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container2) {
            retryIfBlockedOn(container2);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type2, props2) {
            {
              warnForInsertedHydratedElement(parentContainer, type2);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type2, props2) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type2);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type2, props2, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type2);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props2) {
            node[internalPropsKey] = props2;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type2 = workInProgress2.type;
              var contextTypes = type2.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type2) {
            {
              var childContextTypes = type2.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type2, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type2.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type2, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type2, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type2 = fiber.type;
                      var props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type2);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type2 = fiber.type;
                var props2 = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type2);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props2 = assign({}, baseProps);
              var defaultProps2 = Component.defaultProps;
              for (var propName in defaultProps2) {
                if (props2[propName] === void 0) {
                  props2[propName] = defaultProps2[propName];
                }
              }
              return props2;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props2, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props2, instance);
                  var callback = update.callback;
                  if (callback !== null && update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React59.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type2, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type2) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props2) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props2, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props2, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment4) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment4) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props2 = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props2, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props2, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props2, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type2 = Component.type;
              if (isSimpleFunctionComponent(type2) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type2;
                {
                  resolvedType = resolveFunctionForHotReloading(type2);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type2);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(type2)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type2 = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type2, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type2, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props2 = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props2);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props2 = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props2, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props2, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props2, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type2 = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type2, index2, type2);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    _tail,
                    null,
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    null,
                    null,
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type2 = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type2 ? _unresolvedProps2 : resolveDefaultProps(type2, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type2, _resolvedProps2, renderLanes2);
              }
              case Fragment4:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment4:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type2 = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type2, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type2, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type2, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type2 = finishedWork.type;
                    var props2 = finishedWork.memoizedProps;
                    commitMount(_instance2, type2, props2);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type2 = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type2, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (executionContext & RenderContext) !== NoContext;
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type2) {
            {
              if (resolveFamily === null) {
                return type2;
              }
              var family = resolveFamily(type2);
              if (family === void 0) {
                return type2;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type2) {
            return resolveFunctionForHotReloading(type2);
          }
          function resolveForwardRefForHotReloading(type2) {
            {
              if (resolveFamily === null) {
                return type2;
              }
              var family = resolveFamily(type2);
              if (family === void 0) {
                if (type2 !== null && type2 !== void 0 && typeof type2.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type2.render);
                  if (type2.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type2.displayName !== void 0) {
                      syntheticType.displayName = type2.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type2;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type2;
                  break;
                case ForwardRef:
                  candidateType = type2.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type2;
                  break;
                case ForwardRef:
                  candidateType = type2.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type2) {
            return typeof type2 === "function" && !shouldConstruct$1(type2) && type2.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type2;
            if (typeof type2 === "function") {
              if (shouldConstruct$1(type2)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type2 === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type2) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type2 === "object" && type2 !== null) {
                      switch (type2.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type2 == null ? type2 : typeof type2) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type2;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type2 = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment4, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer2(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container2, parentComponent, callback) {
            {
              onScheduleRoot(container2, element);
            }
            var current$1 = container2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container2.context === null) {
              container2.context = context;
            } else {
              container2.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container2) {
            var containerFiber = container2.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container2 = root3.containerInfo;
              if (container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container2 = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container2);
            }
          };
          function createRoot2(container2, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer2(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container2, initialChildren, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container2);
            listenToAllSupportedEvents(container2);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container2) {
            {
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container2)) {
                if (container2._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container2) {
              if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container2._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container2) {
            if (!container2) {
              return null;
            }
            if (container2.nodeType === DOCUMENT_NODE) {
              return container2.documentElement;
            } else {
              return container2.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container2,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container2._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container2);
              var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container2.lastChild) {
                container2.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer2(
                container2,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container2._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container2);
              var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container2);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container2._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container2, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, true, callback);
          }
          function render(element, container2, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container2) {
            if (!isValidContainerLegacy(container2)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container2._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container2);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                  container2._reactRootContainer = null;
                  unmarkContainerAsRoot(container2);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container2);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container2) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container2, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container2, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container2, options2);
          }
          function hydrateRoot$1(container2, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container2, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends2() {
        module.exports = _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _extends2.apply(this, arguments);
      }
      module.exports = _extends2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js
  var require_emotion_memoize_cjs_dev = __commonJS({
    "node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize(fn) {
        var cache = /* @__PURE__ */ Object.create(null);
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize;
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js
  var require_emotion_memoize_cjs = __commonJS({
    "node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_memoize_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.dev.js
  var require_emotion_is_prop_valid_cjs_dev = __commonJS({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var memoize = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize);
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var isPropValid = /* @__PURE__ */ memoize__default["default"](
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
      );
      exports.default = isPropValid;
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.js
  var require_emotion_is_prop_valid_cjs = __commonJS({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_is_prop_valid_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js
  var require_emotion_sheet_cjs_dev = __commonJS({
    "node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function sheetForTag(tag) {
        if (tag.sheet) {
          return tag.sheet;
        }
        for (var i = 0; i < document.styleSheets.length; i++) {
          if (document.styleSheets[i].ownerNode === tag) {
            return document.styleSheets[i];
          }
        }
      }
      function createStyleElement(options) {
        var tag = document.createElement("style");
        tag.setAttribute("data-emotion", options.key);
        if (options.nonce !== void 0) {
          tag.setAttribute("nonce", options.nonce);
        }
        tag.appendChild(document.createTextNode(""));
        tag.setAttribute("data-s", "");
        return tag;
      }
      var StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (true) {
            var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
              console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
          }
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
              if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
                console.error('There was a problem inserting the following rule: "' + rule + '"', e);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          if (true) {
            this._alreadyInsertedOrderInsensitiveRule = false;
          }
        };
        return StyleSheet2;
      }();
      exports.StyleSheet = StyleSheet;
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js
  var require_emotion_sheet_cjs = __commonJS({
    "node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_sheet_cjs_dev();
      }
    }
  });

  // node_modules/stylis/dist/umd/stylis.js
  var require_stylis = __commonJS({
    "node_modules/stylis/dist/umd/stylis.js"(exports, module) {
      (function(e, r) {
        typeof exports === "object" && typeof module !== "undefined" ? r(exports) : typeof define === "function" && define.amd ? define(["exports"], r) : (e = e || self, r(e.stylis = {}));
      })(exports, function(e) {
        "use strict";
        var r = "-ms-";
        var a = "-moz-";
        var c = "-webkit-";
        var t = "comm";
        var n = "rule";
        var s = "decl";
        var i = "@page";
        var u = "@media";
        var o = "@import";
        var f = "@charset";
        var l = "@viewport";
        var h = "@supports";
        var p = "@document";
        var v = "@namespace";
        var b = "@keyframes";
        var d = "@font-face";
        var m = "@counter-style";
        var w = "@font-feature-values";
        var k = Math.abs;
        var $ = String.fromCharCode;
        var g = Object.assign;
        function x(e2, r2) {
          return (((r2 << 2 ^ O(e2, 0)) << 2 ^ O(e2, 1)) << 2 ^ O(e2, 2)) << 2 ^ O(e2, 3);
        }
        function E(e2) {
          return e2.trim();
        }
        function y(e2, r2) {
          return (e2 = r2.exec(e2)) ? e2[0] : e2;
        }
        function T(e2, r2, a2) {
          return e2.replace(r2, a2);
        }
        function A(e2, r2) {
          return e2.indexOf(r2);
        }
        function O(e2, r2) {
          return e2.charCodeAt(r2) | 0;
        }
        function C(e2, r2, a2) {
          return e2.slice(r2, a2);
        }
        function M(e2) {
          return e2.length;
        }
        function S(e2) {
          return e2.length;
        }
        function R(e2, r2) {
          return r2.push(e2), e2;
        }
        function z(e2, r2) {
          return e2.map(r2).join("");
        }
        e.line = 1;
        e.column = 1;
        e.length = 0;
        e.position = 0;
        e.character = 0;
        e.characters = "";
        function N(r2, a2, c2, t2, n2, s2, i2) {
          return { value: r2, root: a2, parent: c2, type: t2, props: n2, children: s2, line: e.line, column: e.column, length: i2, return: "" };
        }
        function P(e2, r2) {
          return g(N("", null, null, "", null, null, 0), e2, { length: -e2.length }, r2);
        }
        function j() {
          return e.character;
        }
        function U() {
          e.character = e.position > 0 ? O(e.characters, --e.position) : 0;
          if (e.column--, e.character === 10)
            e.column = 1, e.line--;
          return e.character;
        }
        function _3() {
          e.character = e.position < e.length ? O(e.characters, e.position++) : 0;
          if (e.column++, e.character === 10)
            e.column = 1, e.line++;
          return e.character;
        }
        function F() {
          return O(e.characters, e.position);
        }
        function I() {
          return e.position;
        }
        function L(r2, a2) {
          return C(e.characters, r2, a2);
        }
        function D(e2) {
          switch (e2) {
            case 0:
            case 9:
            case 10:
            case 13:
            case 32:
              return 5;
            case 33:
            case 43:
            case 44:
            case 47:
            case 62:
            case 64:
            case 126:
            case 59:
            case 123:
            case 125:
              return 4;
            case 58:
              return 3;
            case 34:
            case 39:
            case 40:
            case 91:
              return 2;
            case 41:
            case 93:
              return 1;
          }
          return 0;
        }
        function K(r2) {
          return e.line = e.column = 1, e.length = M(e.characters = r2), e.position = 0, [];
        }
        function V(r2) {
          return e.characters = "", r2;
        }
        function W(r2) {
          return E(L(e.position - 1, Z(r2 === 91 ? r2 + 2 : r2 === 40 ? r2 + 1 : r2)));
        }
        function Y(e2) {
          return V(G(K(e2)));
        }
        function B(r2) {
          while (e.character = F())
            if (e.character < 33)
              _3();
            else
              break;
          return D(r2) > 2 || D(e.character) > 3 ? "" : " ";
        }
        function G(r2) {
          while (_3())
            switch (D(e.character)) {
              case 0:
                R(J(e.position - 1), r2);
                break;
              case 2:
                R(W(e.character), r2);
                break;
              default:
                R($(e.character), r2);
            }
          return r2;
        }
        function H(r2, a2) {
          while (--a2 && _3())
            if (e.character < 48 || e.character > 102 || e.character > 57 && e.character < 65 || e.character > 70 && e.character < 97)
              break;
          return L(r2, I() + (a2 < 6 && F() == 32 && _3() == 32));
        }
        function Z(r2) {
          while (_3())
            switch (e.character) {
              case r2:
                return e.position;
              case 34:
              case 39:
                if (r2 !== 34 && r2 !== 39)
                  Z(e.character);
                break;
              case 40:
                if (r2 === 41)
                  Z(r2);
                break;
              case 92:
                _3();
                break;
            }
          return e.position;
        }
        function q(r2, a2) {
          while (_3())
            if (r2 + e.character === 47 + 10)
              break;
            else if (r2 + e.character === 42 + 42 && F() === 47)
              break;
          return "/*" + L(a2, e.position - 1) + "*" + $(r2 === 47 ? r2 : _3());
        }
        function J(r2) {
          while (!D(F()))
            _3();
          return L(r2, e.position);
        }
        function Q(e2) {
          return V(X("", null, null, null, [""], e2 = K(e2), 0, [0], e2));
        }
        function X(e2, r2, a2, c2, t2, n2, s2, i2, u2) {
          var o2 = 0;
          var f2 = 0;
          var l2 = s2;
          var h2 = 0;
          var p2 = 0;
          var v2 = 0;
          var b2 = 1;
          var d2 = 1;
          var m2 = 1;
          var w2 = 0;
          var k2 = "";
          var g2 = t2;
          var x2 = n2;
          var E2 = c2;
          var y2 = k2;
          while (d2)
            switch (v2 = w2, w2 = _3()) {
              case 40:
                if (v2 != 108 && y2.charCodeAt(l2 - 1) == 58) {
                  if (A(y2 += T(W(w2), "&", "&\f"), "&\f") != -1)
                    m2 = -1;
                  break;
                }
              case 34:
              case 39:
              case 91:
                y2 += W(w2);
                break;
              case 9:
              case 10:
              case 13:
              case 32:
                y2 += B(v2);
                break;
              case 92:
                y2 += H(I() - 1, 7);
                continue;
              case 47:
                switch (F()) {
                  case 42:
                  case 47:
                    R(re(q(_3(), I()), r2, a2), u2);
                    break;
                  default:
                    y2 += "/";
                }
                break;
              case 123 * b2:
                i2[o2++] = M(y2) * m2;
              case 125 * b2:
              case 59:
              case 0:
                switch (w2) {
                  case 0:
                  case 125:
                    d2 = 0;
                  case 59 + f2:
                    if (p2 > 0 && M(y2) - l2)
                      R(p2 > 32 ? ae(y2 + ";", c2, a2, l2 - 1) : ae(T(y2, " ", "") + ";", c2, a2, l2 - 2), u2);
                    break;
                  case 59:
                    y2 += ";";
                  default:
                    R(E2 = ee(y2, r2, a2, o2, f2, t2, i2, k2, g2 = [], x2 = [], l2), n2);
                    if (w2 === 123)
                      if (f2 === 0)
                        X(y2, r2, E2, E2, g2, n2, l2, i2, x2);
                      else
                        switch (h2) {
                          case 100:
                          case 109:
                          case 115:
                            X(e2, E2, E2, c2 && R(ee(e2, E2, E2, 0, 0, t2, i2, k2, t2, g2 = [], l2), x2), t2, x2, l2, i2, c2 ? g2 : x2);
                            break;
                          default:
                            X(y2, E2, E2, E2, [""], x2, 0, i2, x2);
                        }
                }
                o2 = f2 = p2 = 0, b2 = m2 = 1, k2 = y2 = "", l2 = s2;
                break;
              case 58:
                l2 = 1 + M(y2), p2 = v2;
              default:
                if (b2 < 1) {
                  if (w2 == 123)
                    --b2;
                  else if (w2 == 125 && b2++ == 0 && U() == 125)
                    continue;
                }
                switch (y2 += $(w2), w2 * b2) {
                  case 38:
                    m2 = f2 > 0 ? 1 : (y2 += "\f", -1);
                    break;
                  case 44:
                    i2[o2++] = (M(y2) - 1) * m2, m2 = 1;
                    break;
                  case 64:
                    if (F() === 45)
                      y2 += W(_3());
                    h2 = F(), f2 = l2 = M(k2 = y2 += J(I())), w2++;
                    break;
                  case 45:
                    if (v2 === 45 && M(y2) == 2)
                      b2 = 0;
                }
            }
          return n2;
        }
        function ee(e2, r2, a2, c2, t2, s2, i2, u2, o2, f2, l2) {
          var h2 = t2 - 1;
          var p2 = t2 === 0 ? s2 : [""];
          var v2 = S(p2);
          for (var b2 = 0, d2 = 0, m2 = 0; b2 < c2; ++b2)
            for (var w2 = 0, $2 = C(e2, h2 + 1, h2 = k(d2 = i2[b2])), g2 = e2; w2 < v2; ++w2)
              if (g2 = E(d2 > 0 ? p2[w2] + " " + $2 : T($2, /&\f/g, p2[w2])))
                o2[m2++] = g2;
          return N(e2, r2, a2, t2 === 0 ? n : u2, o2, f2, l2);
        }
        function re(e2, r2, a2) {
          return N(e2, r2, a2, t, $(j()), C(e2, 2, -2), 0);
        }
        function ae(e2, r2, a2, c2) {
          return N(e2, r2, a2, s, C(e2, 0, c2), C(e2, c2 + 1, -1), c2);
        }
        function ce(e2, t2) {
          switch (x(e2, t2)) {
            case 5103:
              return c + "print-" + e2 + e2;
            case 5737:
            case 4201:
            case 3177:
            case 3433:
            case 1641:
            case 4457:
            case 2921:
            case 5572:
            case 6356:
            case 5844:
            case 3191:
            case 6645:
            case 3005:
            case 6391:
            case 5879:
            case 5623:
            case 6135:
            case 4599:
            case 4855:
            case 4215:
            case 6389:
            case 5109:
            case 5365:
            case 5621:
            case 3829:
              return c + e2 + e2;
            case 5349:
            case 4246:
            case 4810:
            case 6968:
            case 2756:
              return c + e2 + a + e2 + r + e2 + e2;
            case 6828:
            case 4268:
              return c + e2 + r + e2 + e2;
            case 6165:
              return c + e2 + r + "flex-" + e2 + e2;
            case 5187:
              return c + e2 + T(e2, /(\w+).+(:[^]+)/, c + "box-$1$2" + r + "flex-$1$2") + e2;
            case 5443:
              return c + e2 + r + "flex-item-" + T(e2, /flex-|-self/, "") + e2;
            case 4675:
              return c + e2 + r + "flex-line-pack" + T(e2, /align-content|flex-|-self/, "") + e2;
            case 5548:
              return c + e2 + r + T(e2, "shrink", "negative") + e2;
            case 5292:
              return c + e2 + r + T(e2, "basis", "preferred-size") + e2;
            case 6060:
              return c + "box-" + T(e2, "-grow", "") + c + e2 + r + T(e2, "grow", "positive") + e2;
            case 4554:
              return c + T(e2, /([^-])(transform)/g, "$1" + c + "$2") + e2;
            case 6187:
              return T(T(T(e2, /(zoom-|grab)/, c + "$1"), /(image-set)/, c + "$1"), e2, "") + e2;
            case 5495:
            case 3959:
              return T(e2, /(image-set\([^]*)/, c + "$1$`$1");
            case 4968:
              return T(T(e2, /(.+:)(flex-)?(.*)/, c + "box-pack:$3" + r + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + c + e2 + e2;
            case 4095:
            case 3583:
            case 4068:
            case 2532:
              return T(e2, /(.+)-inline(.+)/, c + "$1$2") + e2;
            case 8116:
            case 7059:
            case 5753:
            case 5535:
            case 5445:
            case 5701:
            case 4933:
            case 4677:
            case 5533:
            case 5789:
            case 5021:
            case 4765:
              if (M(e2) - 1 - t2 > 6)
                switch (O(e2, t2 + 1)) {
                  case 109:
                    if (O(e2, t2 + 4) !== 45)
                      break;
                  case 102:
                    return T(e2, /(.+:)(.+)-([^]+)/, "$1" + c + "$2-$3$1" + a + (O(e2, t2 + 3) == 108 ? "$3" : "$2-$3")) + e2;
                  case 115:
                    return ~A(e2, "stretch") ? ce(T(e2, "stretch", "fill-available"), t2) + e2 : e2;
                }
              break;
            case 4949:
              if (O(e2, t2 + 1) !== 115)
                break;
            case 6444:
              switch (O(e2, M(e2) - 3 - (~A(e2, "!important") && 10))) {
                case 107:
                  return T(e2, ":", ":" + c) + e2;
                case 101:
                  return T(e2, /(.+:)([^;!]+)(;|!.+)?/, "$1" + c + (O(e2, 14) === 45 ? "inline-" : "") + "box$3$1" + c + "$2$3$1" + r + "$2box$3") + e2;
              }
              break;
            case 5936:
              switch (O(e2, t2 + 11)) {
                case 114:
                  return c + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "tb") + e2;
                case 108:
                  return c + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "tb-rl") + e2;
                case 45:
                  return c + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "lr") + e2;
              }
              return c + e2 + r + e2 + e2;
          }
          return e2;
        }
        function te(e2, r2) {
          var a2 = "";
          var c2 = S(e2);
          for (var t2 = 0; t2 < c2; t2++)
            a2 += r2(e2[t2], t2, e2, r2) || "";
          return a2;
        }
        function ne(e2, r2, a2, c2) {
          switch (e2.type) {
            case o:
            case s:
              return e2.return = e2.return || e2.value;
            case t:
              return "";
            case b:
              return e2.return = e2.value + "{" + te(e2.children, c2) + "}";
            case n:
              e2.value = e2.props.join(",");
          }
          return M(a2 = te(e2.children, c2)) ? e2.return = e2.value + "{" + a2 + "}" : "";
        }
        function se(e2) {
          var r2 = S(e2);
          return function(a2, c2, t2, n2) {
            var s2 = "";
            for (var i2 = 0; i2 < r2; i2++)
              s2 += e2[i2](a2, c2, t2, n2) || "";
            return s2;
          };
        }
        function ie(e2) {
          return function(r2) {
            if (!r2.root) {
              if (r2 = r2.return)
                e2(r2);
            }
          };
        }
        function ue(e2, t2, i2, u2) {
          if (e2.length > -1) {
            if (!e2.return)
              switch (e2.type) {
                case s:
                  e2.return = ce(e2.value, e2.length);
                  break;
                case b:
                  return te([P(e2, { value: T(e2.value, "@", "@" + c) })], u2);
                case n:
                  if (e2.length)
                    return z(e2.props, function(t3) {
                      switch (y(t3, /(::plac\w+|:read-\w+)/)) {
                        case ":read-only":
                        case ":read-write":
                          return te([P(e2, { props: [T(t3, /:(read-\w+)/, ":" + a + "$1")] })], u2);
                        case "::placeholder":
                          return te([P(e2, { props: [T(t3, /:(plac\w+)/, ":" + c + "input-$1")] }), P(e2, { props: [T(t3, /:(plac\w+)/, ":" + a + "$1")] }), P(e2, { props: [T(t3, /:(plac\w+)/, r + "input-$1")] })], u2);
                      }
                      return "";
                    });
              }
          }
        }
        function oe(e2) {
          switch (e2.type) {
            case n:
              e2.props = e2.props.map(function(r2) {
                return z(Y(r2), function(r3, a2, c2) {
                  switch (O(r3, 0)) {
                    case 12:
                      return C(r3, 1, M(r3));
                    case 0:
                    case 40:
                    case 43:
                    case 62:
                    case 126:
                      return r3;
                    case 58:
                      if (c2[++a2] === "global")
                        c2[a2] = "", c2[++a2] = "\f" + C(c2[a2], a2 = 1, -1);
                    case 32:
                      return a2 === 1 ? "" : r3;
                    default:
                      switch (a2) {
                        case 0:
                          e2 = r3;
                          return S(c2) > 1 ? "" : r3;
                        case (a2 = S(c2) - 1):
                        case 2:
                          return a2 === 2 ? r3 + e2 + e2 : r3 + e2;
                        default:
                          return r3;
                      }
                  }
                });
              });
          }
        }
        e.CHARSET = f;
        e.COMMENT = t;
        e.COUNTER_STYLE = m;
        e.DECLARATION = s;
        e.DOCUMENT = p;
        e.FONT_FACE = d;
        e.FONT_FEATURE_VALUES = w;
        e.IMPORT = o;
        e.KEYFRAMES = b;
        e.MEDIA = u;
        e.MOZ = a;
        e.MS = r;
        e.NAMESPACE = v;
        e.PAGE = i;
        e.RULESET = n;
        e.SUPPORTS = h;
        e.VIEWPORT = l;
        e.WEBKIT = c;
        e.abs = k;
        e.alloc = K;
        e.append = R;
        e.assign = g;
        e.caret = I;
        e.char = j;
        e.charat = O;
        e.combine = z;
        e.comment = re;
        e.commenter = q;
        e.compile = Q;
        e.copy = P;
        e.dealloc = V;
        e.declaration = ae;
        e.delimit = W;
        e.delimiter = Z;
        e.escaping = H;
        e.from = $;
        e.hash = x;
        e.identifier = J;
        e.indexof = A;
        e.match = y;
        e.middleware = se;
        e.namespace = oe;
        e.next = _3;
        e.node = N;
        e.parse = X;
        e.peek = F;
        e.prefix = ce;
        e.prefixer = ue;
        e.prev = U;
        e.replace = T;
        e.ruleset = ee;
        e.rulesheet = ie;
        e.serialize = te;
        e.sizeof = S;
        e.slice = L;
        e.stringify = ne;
        e.strlen = M;
        e.substr = C;
        e.token = D;
        e.tokenize = Y;
        e.tokenizer = G;
        e.trim = E;
        e.whitespace = B;
        Object.defineProperty(e, "__esModule", { value: true });
      });
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.dev.js
  var require_emotion_weak_memoize_cjs_dev = __commonJS({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var weakMemoize = function weakMemoize2(func) {
        var cache = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache.has(arg)) {
            return cache.get(arg);
          }
          var ret = func(arg);
          cache.set(arg, ret);
          return ret;
        };
      };
      exports.default = weakMemoize;
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.js
  var require_emotion_weak_memoize_cjs = __commonJS({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_weak_memoize_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js
  var require_emotion_cache_cjs_dev = __commonJS({
    "node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var sheet = require_emotion_sheet_cjs();
      var stylis = require_stylis();
      var weakMemoize = require_emotion_weak_memoize_cjs();
      var memoize = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize);
      var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
        var previous = 0;
        var character = 0;
        while (true) {
          previous = character;
          character = stylis.peek();
          if (previous === 38 && character === 12) {
            points[index] = 1;
          }
          if (stylis.token(character)) {
            break;
          }
          stylis.next();
        }
        return stylis.slice(begin, stylis.position);
      };
      var toRules = function toRules2(parsed, points) {
        var index = -1;
        var character = 44;
        do {
          switch (stylis.token(character)) {
            case 0:
              if (character === 38 && stylis.peek() === 12) {
                points[index] = 1;
              }
              parsed[index] += identifierWithPointTracking(stylis.position - 1, points, index);
              break;
            case 2:
              parsed[index] += stylis.delimit(character);
              break;
            case 4:
              if (character === 44) {
                parsed[++index] = stylis.peek() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
              }
            default:
              parsed[index] += stylis.from(character);
          }
        } while (character = stylis.next());
        return parsed;
      };
      var getRules = function getRules2(value, points) {
        return stylis.dealloc(toRules(stylis.alloc(value), points));
      };
      var fixedElements = /* @__PURE__ */ new WeakMap();
      var compat = function compat2(element) {
        if (element.type !== "rule" || !element.parent || element.length < 1) {
          return;
        }
        var value = element.value, parent = element.parent;
        var isImplicitRule = element.column === parent.column && element.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent)
            return;
        }
        if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i = 0, k = 0; i < rules.length; i++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
          }
        }
      };
      var removeLabel = function removeLabel2(element) {
        if (element.type === "decl") {
          var value = element.value;
          if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
            element["return"] = "";
            element.value = "";
          }
        }
      };
      var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
      var isIgnoringComment = function isIgnoringComment2(element) {
        return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
      };
      var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
        return function(element, index, children) {
          if (element.type !== "rule" || cache.compat)
            return;
          var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
          if (unsafePseudoClasses) {
            var isNested = element.parent === children[0];
            var commentContainer = isNested ? children[0].children : children;
            for (var i = commentContainer.length - 1; i >= 0; i--) {
              var node = commentContainer[i];
              if (node.line < element.line) {
                break;
              }
              if (node.column < element.column) {
                if (isIgnoringComment(node)) {
                  return;
                }
                break;
              }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
              console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
          }
        };
      };
      var isImportRule = function isImportRule2(element) {
        return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
      };
      var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
        for (var i = index - 1; i >= 0; i--) {
          if (!isImportRule(children[i])) {
            return true;
          }
        }
        return false;
      };
      var nullifyElement = function nullifyElement2(element) {
        element.type = "";
        element.value = "";
        element["return"] = "";
        element.children = "";
        element.props = "";
      };
      var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
        if (!isImportRule(element)) {
          return;
        }
        if (element.parent) {
          console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
          nullifyElement(element);
        } else if (isPrependedWithRegularRules(index, children)) {
          console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
          nullifyElement(element);
        }
      };
      var isBrowser = typeof document !== "undefined";
      var getServerStylisCache = isBrowser ? void 0 : weakMemoize__default["default"](function() {
        return memoize__default["default"](function() {
          var cache = {};
          return function(name) {
            return cache[name];
          };
        });
      });
      var defaultStylisPlugins = [stylis.prefixer];
      var createCache = function createCache2(options) {
        var key = options.key;
        if (!key) {
          throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
        }
        if (isBrowser && key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node) {
            var dataEmotionAttribute = node.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node);
            node.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container2;
        var nodesToHydrate = [];
        if (isBrowser) {
          container2 = options.container || document.head;
          Array.prototype.forEach.call(
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function(node) {
              var attrib = node.getAttribute("data-emotion").split(" ");
              for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
              }
              nodesToHydrate.push(node);
            }
          );
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        if (true) {
          omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
              return cache.compat;
            }
          }), incorrectImportAlarm);
        }
        if (isBrowser) {
          var currentSheet;
          var finalizingPlugins = [stylis.stringify, true ? function(element) {
            if (!element.root) {
              if (element["return"]) {
                currentSheet.insert(element["return"]);
              } else if (element.value && element.type !== stylis.COMMENT) {
                currentSheet.insert(element.value + "{}");
              }
            }
          } : stylis.rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis$1 = function stylis$12(styles3) {
            return stylis.serialize(stylis.compile(styles3), serializer);
          };
          _insert = function insert(selector, serialized, sheet2, shouldCache) {
            currentSheet = sheet2;
            if (serialized.map !== void 0) {
              currentSheet = {
                insert: function insert2(rule) {
                  sheet2.insert(rule + serialized.map);
                }
              };
            }
            stylis$1(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache.inserted[serialized.name] = true;
            }
          };
        } else {
          var _finalizingPlugins = [stylis.stringify];
          var _serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
          var _stylis = function _stylis2(styles3) {
            return stylis.serialize(stylis.compile(styles3), _serializer);
          };
          var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
          var getRules2 = function getRules3(selector, serialized) {
            var name = serialized.name;
            if (serverStylisCache[name] === void 0) {
              serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            }
            return serverStylisCache[name];
          };
          _insert = function _insert2(selector, serialized, sheet2, shouldCache) {
            var name = serialized.name;
            var rules = getRules2(selector, serialized);
            if (cache.compat === void 0) {
              if (shouldCache) {
                cache.inserted[name] = true;
              }
              if (serialized.map !== void 0) {
                return rules + serialized.map;
              }
              return rules;
            } else {
              if (shouldCache) {
                cache.inserted[name] = rules;
              } else {
                return rules;
              }
            }
          };
        }
        var cache = {
          key,
          sheet: new sheet.StyleSheet({
            key,
            container: container2,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache.sheet.hydrate(nodesToHydrate);
        return cache;
      };
      exports.default = createCache;
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.cjs.js
  var require_emotion_cache_cjs = __commonJS({
    "node_modules/@emotion/cache/dist/emotion-cache.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_cache_cjs_dev();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type2) {
            return typeof type2 === "string" || typeof type2 === "function" || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_CONCURRENT_MODE_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || typeof type2 === "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_RESPONDER_TYPE || type2.$$typeof === REACT_SCOPE_TYPE || type2.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type2 = object.type;
                  switch (type2) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type2;
                    default:
                      var $$typeofType = type2 && type2.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode2;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty2 = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys2 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys2.length; ++i) {
            var key = keys2[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor2(sourceComponent, key);
              try {
                defineProperty2(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js
  var require_emotion_react_isolated_hnrs_cjs_dev = __commonJS({
    "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hoistNonReactStatics$1 = require_hoist_non_react_statics_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var hoistNonReactStatics__default = /* @__PURE__ */ _interopDefault(hoistNonReactStatics$1);
      var hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return hoistNonReactStatics__default["default"](targetComponent, sourceComponent);
      };
      exports.default = hoistNonReactStatics;
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js
  var require_emotion_utils_cjs_dev = __commonJS({
    "node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var isBrowser = typeof document !== "undefined";
      function getRegisteredStyles(registered, registeredStyles, classNames) {
        var rawClassName = "";
        classNames.split(" ").forEach(function(className) {
          if (registered[className] !== void 0) {
            registeredStyles.push(registered[className] + ";");
          } else {
            rawClassName += className + " ";
          }
        });
        return rawClassName;
      }
      var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
        var className = cache.key + "-" + serialized.name;
        if ((isStringTag === false || isBrowser === false && cache.compat !== void 0) && cache.registered[className] === void 0) {
          cache.registered[className] = serialized.styles;
        }
      };
      var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
        registerStyles(cache, serialized, isStringTag);
        var className = cache.key + "-" + serialized.name;
        if (cache.inserted[serialized.name] === void 0) {
          var stylesForSSR = "";
          var current = serialized;
          do {
            var maybeStyles = cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            if (!isBrowser && maybeStyles !== void 0) {
              stylesForSSR += maybeStyles;
            }
            current = current.next;
          } while (current !== void 0);
          if (!isBrowser && stylesForSSR.length !== 0) {
            return stylesForSSR;
          }
        }
      };
      exports.getRegisteredStyles = getRegisteredStyles;
      exports.insertStyles = insertStyles;
      exports.registerStyles = registerStyles;
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.cjs.js
  var require_emotion_utils_cjs = __commonJS({
    "node_modules/@emotion/utils/dist/emotion-utils.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_utils_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.cjs.dev.js
  var require_emotion_hash_cjs_dev = __commonJS({
    "node_modules/@emotion/hash/dist/emotion-hash.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function murmur2(str) {
        var h = 0;
        var k, i = 0, len = str.length;
        for (; len >= 4; ++i, len -= 4) {
          k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
          k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
          k ^= k >>> 24;
          h = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        }
        switch (len) {
          case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16;
          case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8;
          case 1:
            h ^= str.charCodeAt(i) & 255;
            h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        }
        h ^= h >>> 13;
        h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        return ((h ^ h >>> 15) >>> 0).toString(36);
      }
      exports.default = murmur2;
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.cjs.js
  var require_emotion_hash_cjs = __commonJS({
    "node_modules/@emotion/hash/dist/emotion-hash.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_hash_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.cjs.dev.js
  var require_emotion_unitless_cjs_dev = __commonJS({
    "node_modules/@emotion/unitless/dist/emotion-unitless.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
      exports.default = unitlessKeys;
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.cjs.js
  var require_emotion_unitless_cjs = __commonJS({
    "node_modules/@emotion/unitless/dist/emotion-unitless.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_unitless_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js
  var require_emotion_serialize_cjs_dev = __commonJS({
    "node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hashString = require_emotion_hash_cjs();
      var unitless = require_emotion_unitless_cjs();
      var memoize = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var hashString__default = /* @__PURE__ */ _interopDefault(hashString);
      var unitless__default = /* @__PURE__ */ _interopDefault(unitless);
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize);
      var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      var hyphenateRegex = /[A-Z]|^ms/g;
      var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      var isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      var isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      var processStyleName = /* @__PURE__ */ memoize__default["default"](function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      var processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitless__default["default"][key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(var|attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        contentValues = ["normal", "none", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue2(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      var contentValuePattern;
      var contentValues;
      var oldProcessStyleValue;
      var msPattern;
      var hyphenPattern;
      var hyphenatedCache;
      var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      function handleInterpolation(mergedProps, registered, interpolation) {
        if (interpolation == null) {
          return "";
        }
        if (interpolation.__emotion_styles !== void 0) {
          if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
            throw new Error(noComponentSelectorMessage);
          }
          return interpolation;
        }
        switch (typeof interpolation) {
          case "boolean": {
            return "";
          }
          case "object": {
            if (interpolation.anim === 1) {
              cursor = {
                name: interpolation.name,
                styles: interpolation.styles,
                next: cursor
              };
              return interpolation.name;
            }
            if (interpolation.styles !== void 0) {
              var next = interpolation.next;
              if (next !== void 0) {
                while (next !== void 0) {
                  cursor = {
                    name: next.name,
                    styles: next.styles,
                    next: cursor
                  };
                  next = next.next;
                }
              }
              var styles3 = interpolation.styles + ";";
              if (interpolation.map !== void 0) {
                styles3 += interpolation.map;
              }
              return styles3;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
          }
          case "function": {
            if (mergedProps !== void 0) {
              var previousCursor = cursor;
              var result = interpolation(mergedProps);
              cursor = previousCursor;
              return handleInterpolation(mergedProps, registered, result);
            } else if (true) {
              console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            }
            break;
          }
          case "string":
            if (true) {
              var matched = [];
              var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
                return "${" + fakeVarName + "}";
              });
              if (matched.length) {
                console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
              }
            }
            break;
        }
        if (registered == null) {
          return interpolation;
        }
        var cached = registered[interpolation];
        return cached !== void 0 ? cached : interpolation;
      }
      function createStringFromObject(mergedProps, registered, obj) {
        var string = "";
        if (Array.isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
          }
        } else {
          for (var _key in obj) {
            var value = obj[_key];
            if (typeof value !== "object") {
              if (registered != null && registered[value] !== void 0) {
                string += _key + "{" + registered[value] + "}";
              } else if (isProcessableValue(value)) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
              }
            } else {
              if (_key === "NO_COMPONENT_SELECTOR" && true) {
                throw new Error(noComponentSelectorMessage);
              }
              if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
                for (var _i = 0; _i < value.length; _i++) {
                  if (isProcessableValue(value[_i])) {
                    string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                  }
                }
              } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch (_key) {
                  case "animation":
                  case "animationName": {
                    string += processStyleName(_key) + ":" + interpolated + ";";
                    break;
                  }
                  default: {
                    if (_key === "undefined") {
                      console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                    }
                    string += _key + "{" + interpolated + "}";
                  }
                }
              }
            }
          }
        }
        return string;
      }
      var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
      var sourceMapPattern;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
      }
      var cursor;
      var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles3 = "";
        cursor = void 0;
        var strings = args[0];
        if (strings == null || strings.raw === void 0) {
          stringMode = false;
          styles3 += handleInterpolation(mergedProps, registered, strings);
        } else {
          if (strings[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles3 += strings[0];
        }
        for (var i = 1; i < args.length; i++) {
          styles3 += handleInterpolation(mergedProps, registered, args[i]);
          if (stringMode) {
            if (strings[i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles3 += strings[i];
          }
        }
        var sourceMap;
        if (true) {
          styles3 = styles3.replace(sourceMapPattern, function(match2) {
            sourceMap = match2;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match;
        while ((match = labelPattern.exec(styles3)) !== null) {
          identifierName += "-" + match[1];
        }
        var name = hashString__default["default"](styles3) + identifierName;
        if (true) {
          return {
            name,
            styles: styles3,
            map: sourceMap,
            next: cursor,
            toString: function toString2() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name,
          styles: styles3,
          next: cursor
        };
      };
      exports.serializeStyles = serializeStyles;
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js
  var require_emotion_serialize_cjs = __commonJS({
    "node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_serialize_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.dev.js
  var require_emotion_use_insertion_effect_with_fallbacks_cjs_dev = __commonJS({
    "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var React59 = require_react();
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React59);
      var isBrowser = typeof document !== "undefined";
      var syncFallback = function syncFallback2(create) {
        return create();
      };
      var useInsertionEffect = React__namespace["useInsertionEffect"] ? React__namespace["useInsertionEffect"] : false;
      var useInsertionEffectAlwaysWithSyncFallback = !isBrowser ? syncFallback : useInsertionEffect || syncFallback;
      var useInsertionEffectWithLayoutFallback = useInsertionEffect || React59.useLayoutEffect;
      exports.useInsertionEffectAlwaysWithSyncFallback = useInsertionEffectAlwaysWithSyncFallback;
      exports.useInsertionEffectWithLayoutFallback = useInsertionEffectWithLayoutFallback;
    }
  });

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.js
  var require_emotion_use_insertion_effect_with_fallbacks_cjs = __commonJS({
    "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_use_insertion_effect_with_fallbacks_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/react/dist/emotion-element-b63ca7c6.cjs.dev.js
  var require_emotion_element_b63ca7c6_cjs_dev = __commonJS({
    "node_modules/@emotion/react/dist/emotion-element-b63ca7c6.cjs.dev.js"(exports) {
      "use strict";
      var React59 = require_react();
      var createCache = require_emotion_cache_cjs();
      var _extends2 = require_extends();
      var weakMemoize = require_emotion_weak_memoize_cjs();
      var _isolatedHnrs_dist_emotionReact_isolatedHnrs = require_emotion_react_isolated_hnrs_cjs_dev();
      var utils = require_emotion_utils_cjs();
      var serialize = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var createCache__default = /* @__PURE__ */ _interopDefault(createCache);
      var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
      var isBrowser = typeof document !== "undefined";
      var hasOwnProperty = {}.hasOwnProperty;
      var EmotionCacheContext = /* @__PURE__ */ React59.createContext(
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache__default["default"]({
          key: "css"
        }) : null
      );
      if (true) {
        EmotionCacheContext.displayName = "EmotionCacheContext";
      }
      var CacheProvider = EmotionCacheContext.Provider;
      var __unsafe_useEmotionCache = function useEmotionCache() {
        return React59.useContext(EmotionCacheContext);
      };
      exports.withEmotionCache = function withEmotionCache(func) {
        return /* @__PURE__ */ React59.forwardRef(function(props2, ref) {
          var cache = React59.useContext(EmotionCacheContext);
          return func(props2, cache, ref);
        });
      };
      if (!isBrowser) {
        exports.withEmotionCache = function withEmotionCache(func) {
          return function(props2) {
            var cache = React59.useContext(EmotionCacheContext);
            if (cache === null) {
              cache = createCache__default["default"]({
                key: "css"
              });
              return /* @__PURE__ */ React59.createElement(EmotionCacheContext.Provider, {
                value: cache
              }, func(props2, cache));
            } else {
              return func(props2, cache);
            }
          };
        };
      }
      var ThemeContext = /* @__PURE__ */ React59.createContext({});
      if (true) {
        ThemeContext.displayName = "EmotionThemeContext";
      }
      var useTheme2 = function useTheme3() {
        return React59.useContext(ThemeContext);
      };
      var getTheme = function getTheme2(outerTheme, theme2) {
        if (typeof theme2 === "function") {
          var mergedTheme = theme2(outerTheme);
          if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (theme2 == null || typeof theme2 !== "object" || Array.isArray(theme2)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends2({}, outerTheme, theme2);
      };
      var createCacheWithTheme = /* @__PURE__ */ weakMemoize__default["default"](function(outerTheme) {
        return weakMemoize__default["default"](function(theme2) {
          return getTheme(outerTheme, theme2);
        });
      });
      var ThemeProvider2 = function ThemeProvider3(props2) {
        var theme2 = React59.useContext(ThemeContext);
        if (props2.theme !== theme2) {
          theme2 = createCacheWithTheme(theme2)(props2.theme);
        }
        return /* @__PURE__ */ React59.createElement(ThemeContext.Provider, {
          value: theme2
        }, props2.children);
      };
      function withTheme(Component) {
        var componentName = Component.displayName || Component.name || "Component";
        var render = function render2(props2, ref) {
          var theme2 = React59.useContext(ThemeContext);
          return /* @__PURE__ */ React59.createElement(Component, _extends2({
            theme: theme2,
            ref
          }, props2));
        };
        var WithTheme = /* @__PURE__ */ React59.forwardRef(render);
        WithTheme.displayName = "WithTheme(" + componentName + ")";
        return _isolatedHnrs_dist_emotionReact_isolatedHnrs["default"](WithTheme, Component);
      }
      var getLastPart = function getLastPart2(functionName) {
        var parts = functionName.split(".");
        return parts[parts.length - 1];
      };
      var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line) {
        var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
        if (match)
          return getLastPart(match[1]);
        match = /^([A-Za-z0-9$.]+)@/.exec(line);
        if (match)
          return getLastPart(match[1]);
        return void 0;
      };
      var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
      var sanitizeIdentifier = function sanitizeIdentifier2(identifier) {
        return identifier.replace(/\$/g, "-");
      };
      var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
        if (!stackTrace)
          return void 0;
        var lines = stackTrace.split("\n");
        for (var i = 0; i < lines.length; i++) {
          var functionName = getFunctionNameFromStackTraceLine(lines[i]);
          if (!functionName)
            continue;
          if (internalReactFunctionNames.has(functionName))
            break;
          if (/^[A-Z]/.test(functionName))
            return sanitizeIdentifier(functionName);
        }
        return void 0;
      };
      var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
      var createEmotionProps = function createEmotionProps2(type2, props2) {
        if (typeof props2.css === "string" && props2.css.indexOf(":") !== -1) {
          throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props2.css + "`");
        }
        var newProps = {};
        for (var key in props2) {
          if (hasOwnProperty.call(props2, key)) {
            newProps[key] = props2[key];
          }
        }
        newProps[typePropName] = type2;
        if (!!props2.css && (typeof props2.css !== "object" || typeof props2.css.name !== "string" || props2.css.name.indexOf("-") === -1)) {
          var label = getLabelFromStackTrace(new Error().stack);
          if (label)
            newProps[labelPropName] = label;
        }
        return newProps;
      };
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        utils.registerStyles(cache, serialized, isStringTag);
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          return utils.insertStyles(cache, serialized, isStringTag);
        });
        if (!isBrowser && rules !== void 0) {
          var _ref2;
          var serializedNames = serialized.name;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            next = next.next;
          }
          return /* @__PURE__ */ React59.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var Emotion = /* @__PURE__ */ exports.withEmotionCache(function(props2, cache, ref) {
        var cssProp = props2.css;
        if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
          cssProp = cache.registered[cssProp];
        }
        var WrappedComponent = props2[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props2.className === "string") {
          className = utils.getRegisteredStyles(cache.registered, registeredStyles, props2.className);
        } else if (props2.className != null) {
          className = props2.className + " ";
        }
        var serialized = serialize.serializeStyles(registeredStyles, void 0, React59.useContext(ThemeContext));
        if (serialized.name.indexOf("-") === -1) {
          var labelFromStack = props2[labelPropName];
          if (labelFromStack) {
            serialized = serialize.serializeStyles([serialized, "label:" + labelFromStack + ";"]);
          }
        }
        className += cache.key + "-" + serialized.name;
        var newProps = {};
        for (var key in props2) {
          if (hasOwnProperty.call(props2, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
            newProps[key] = props2[key];
          }
        }
        newProps.ref = ref;
        newProps.className = className;
        return /* @__PURE__ */ React59.createElement(React59.Fragment, null, /* @__PURE__ */ React59.createElement(Insertion, {
          cache,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React59.createElement(WrappedComponent, newProps));
      });
      if (true) {
        Emotion.displayName = "EmotionCssPropInternal";
      }
      exports.CacheProvider = CacheProvider;
      exports.Emotion = Emotion;
      exports.ThemeContext = ThemeContext;
      exports.ThemeProvider = ThemeProvider2;
      exports.__unsafe_useEmotionCache = __unsafe_useEmotionCache;
      exports.createEmotionProps = createEmotionProps;
      exports.hasOwnProperty = hasOwnProperty;
      exports.isBrowser = isBrowser;
      exports.useTheme = useTheme2;
      exports.withTheme = withTheme;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.cjs.dev.js
  var require_emotion_react_cjs_dev = __commonJS({
    "node_modules/@emotion/react/dist/emotion-react.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var React59 = require_react();
      require_emotion_cache_cjs();
      var emotionElement = require_emotion_element_b63ca7c6_cjs_dev();
      require_extends();
      require_emotion_weak_memoize_cjs();
      require_hoist_non_react_statics_cjs();
      require_emotion_react_isolated_hnrs_cjs_dev();
      var utils = require_emotion_utils_cjs();
      var serialize = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      var pkg = {
        name: "@emotion/react",
        version: "11.10.4",
        main: "dist/emotion-react.cjs.js",
        module: "dist/emotion-react.esm.js",
        browser: {
          "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
        },
        exports: {
          ".": {
            module: {
              worker: "./dist/emotion-react.worker.esm.js",
              browser: "./dist/emotion-react.browser.esm.js",
              "default": "./dist/emotion-react.esm.js"
            },
            "default": "./dist/emotion-react.cjs.js"
          },
          "./jsx-runtime": {
            module: {
              worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
              browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
              "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
          },
          "./_isolated-hnrs": {
            module: {
              worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
              browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
              "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
          },
          "./jsx-dev-runtime": {
            module: {
              worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
              browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
              "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
          },
          "./package.json": "./package.json",
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": "./macro.js"
        },
        types: "types/index.d.ts",
        files: [
          "src",
          "dist",
          "jsx-runtime",
          "jsx-dev-runtime",
          "_isolated-hnrs",
          "types/*.d.ts",
          "macro.js",
          "macro.d.ts",
          "macro.js.flow"
        ],
        sideEffects: false,
        author: "Emotion Contributors",
        license: "MIT",
        scripts: {
          "test:typescript": "dtslint types"
        },
        dependencies: {
          "@babel/runtime": "^7.18.3",
          "@emotion/babel-plugin": "^11.10.0",
          "@emotion/cache": "^11.10.0",
          "@emotion/serialize": "^1.1.0",
          "@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
          "@emotion/utils": "^1.2.0",
          "@emotion/weak-memoize": "^0.3.0",
          "hoist-non-react-statics": "^3.3.1"
        },
        peerDependencies: {
          "@babel/core": "^7.0.0",
          react: ">=16.8.0"
        },
        peerDependenciesMeta: {
          "@babel/core": {
            optional: true
          },
          "@types/react": {
            optional: true
          }
        },
        devDependencies: {
          "@babel/core": "^7.18.5",
          "@definitelytyped/dtslint": "0.0.112",
          "@emotion/css": "11.10.0",
          "@emotion/css-prettifier": "1.1.0",
          "@emotion/server": "11.10.0",
          "@emotion/styled": "11.10.4",
          "html-tag-names": "^1.1.2",
          react: "16.14.0",
          "svg-tag-names": "^1.1.1",
          typescript: "^4.5.5"
        },
        repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
        publishConfig: {
          access: "public"
        },
        "umd:main": "dist/emotion-react.umd.min.js",
        preconstruct: {
          entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
          ],
          umdName: "emotionReact",
          exports: {
            envConditions: [
              "browser",
              "worker"
            ],
            extra: {
              "./types/css-prop": "./types/css-prop.d.ts",
              "./macro": "./macro.js"
            }
          }
        }
      };
      var jsx = function jsx2(type2, props2) {
        var args = arguments;
        if (props2 == null || !emotionElement.hasOwnProperty.call(props2, "css")) {
          return React59.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = emotionElement.Emotion;
        createElementArgArray[1] = emotionElement.createEmotionProps(type2, props2);
        for (var i = 2; i < argsLength; i++) {
          createElementArgArray[i] = args[i];
        }
        return React59.createElement.apply(null, createElementArgArray);
      };
      var warnedAboutCssPropForGlobal = false;
      var Global = /* @__PURE__ */ emotionElement.withEmotionCache(function(props2, cache) {
        if (!warnedAboutCssPropForGlobal && (props2.className || props2.css)) {
          console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
          warnedAboutCssPropForGlobal = true;
        }
        var styles3 = props2.styles;
        var serialized = serialize.serializeStyles([styles3], void 0, React59.useContext(emotionElement.ThemeContext));
        if (!emotionElement.isBrowser) {
          var _ref;
          var serializedNames = serialized.name;
          var serializedStyles = serialized.styles;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            serializedStyles += next.styles;
            next = next.next;
          }
          var shouldCache = cache.compat === true;
          var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
          }, cache.sheet, shouldCache);
          if (shouldCache) {
            return null;
          }
          return /* @__PURE__ */ React59.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = cache.sheet.nonce, _ref));
        }
        var sheetRef = React59.useRef();
        useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback(function() {
          var key = cache.key + "-global";
          var sheet = new cache.sheet.constructor({
            key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
          });
          var rehydrating = false;
          var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache.sheet.tags.length) {
            sheet.before = cache.sheet.tags[0];
          }
          if (node !== null) {
            rehydrating = true;
            node.setAttribute("data-emotion", key);
            sheet.hydrate([node]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache]);
        useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            utils.insertStyles(cache, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
          }
          cache.insert("", serialized, sheet, false);
        }, [cache, serialized.name]);
        return null;
      });
      if (true) {
        Global.displayName = "EmotionGlobal";
      }
      function css2() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return serialize.serializeStyles(args);
      }
      var keyframes3 = function keyframes4() {
        var insertable = css2.apply(void 0, arguments);
        var name = "animation-" + insertable.name;
        return {
          name,
          styles: "@keyframes " + name + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString2() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      var classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                if (arg.styles !== void 0 && arg.name !== void 0) {
                  console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                }
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      function merge(registered, css3, className) {
        var registeredStyles = [];
        var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className);
        if (registeredStyles.length < 2) {
          return className;
        }
        return rawClassName + css3(registeredStyles);
      }
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serializedArr = _ref.serializedArr;
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          var rules2 = "";
          for (var i = 0; i < serializedArr.length; i++) {
            var res = utils.insertStyles(cache, serializedArr[i], false);
            if (!emotionElement.isBrowser && res !== void 0) {
              rules2 += res;
            }
          }
          if (!emotionElement.isBrowser) {
            return rules2;
          }
        });
        if (!emotionElement.isBrowser && rules.length !== 0) {
          var _ref2;
          return /* @__PURE__ */ React59.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function(serialized) {
            return serialized.name;
          }).join(" "), _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var ClassNames = /* @__PURE__ */ emotionElement.withEmotionCache(function(props2, cache) {
        var hasRendered = false;
        var serializedArr = [];
        var css3 = function css4() {
          if (hasRendered && true) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serialize.serializeStyles(args, cache.registered);
          serializedArr.push(serialized);
          utils.registerStyles(cache, serialized, false);
          return cache.key + "-" + serialized.name;
        };
        var cx = function cx2() {
          if (hasRendered && true) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge(cache.registered, css3, classnames(args));
        };
        var content = {
          css: css3,
          cx,
          theme: React59.useContext(emotionElement.ThemeContext)
        };
        var ele = props2.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React59.createElement(React59.Fragment, null, /* @__PURE__ */ React59.createElement(Insertion, {
          cache,
          serializedArr
        }), ele);
      });
      if (true) {
        ClassNames.displayName = "EmotionClassNames";
      }
      if (true) {
        isBrowser = typeof document !== "undefined";
        isJest = typeof jest !== "undefined";
        if (isBrowser && !isJest) {
          globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser ? window : global;
          globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
          if (globalContext[globalKey]) {
            console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
          }
          globalContext[globalKey] = true;
        }
      }
      var isBrowser;
      var isJest;
      var globalContext;
      var globalKey;
      exports.CacheProvider = emotionElement.CacheProvider;
      exports.ThemeContext = emotionElement.ThemeContext;
      exports.ThemeProvider = emotionElement.ThemeProvider;
      exports.__unsafe_useEmotionCache = emotionElement.__unsafe_useEmotionCache;
      exports.useTheme = emotionElement.useTheme;
      Object.defineProperty(exports, "withEmotionCache", {
        enumerable: true,
        get: function() {
          return emotionElement.withEmotionCache;
        }
      });
      exports.withTheme = emotionElement.withTheme;
      exports.ClassNames = ClassNames;
      exports.Global = Global;
      exports.createElement = jsx;
      exports.css = css2;
      exports.jsx = jsx;
      exports.keyframes = keyframes3;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.cjs.js
  var require_emotion_react_cjs = __commonJS({
    "node_modules/@emotion/react/dist/emotion-react.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_react_cjs_dev();
      }
    }
  });

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.cjs.dev.js
  var require_emotion_styled_base_cjs_dev = __commonJS({
    "node_modules/@emotion/styled/base/dist/emotion-styled-base.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _extends2 = require_extends();
      var React59 = require_react();
      var isPropValid = require_emotion_is_prop_valid_cjs();
      var react = require_emotion_react_cjs();
      var utils = require_emotion_utils_cjs();
      var serialize = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var isPropValid__default = /* @__PURE__ */ _interopDefault(isPropValid);
      var testOmitPropsOnStringTag = isPropValid__default["default"];
      var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp2;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp2 !== "function" && isReal) {
          shouldForwardProp2 = tag.__emotion_forwardProp;
        }
        return shouldForwardProp2;
      };
      var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      var isBrowser = typeof document !== "undefined";
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        utils.registerStyles(cache, serialized, isStringTag);
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          return utils.insertStyles(cache, serialized, isStringTag);
        });
        if (!isBrowser && rules !== void 0) {
          var _ref2;
          var serializedNames = serialized.name;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            next = next.next;
          }
          return /* @__PURE__ */ React59.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var createStyled2 = function createStyled3(tag, options) {
        if (true) {
          if (tag === void 0) {
            throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
          }
        }
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles3 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles3.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles3.push.apply(styles3, args);
          } else {
            if (args[0][0] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles3.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for (; i < len; i++) {
              if (args[0][i] === void 0) {
                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
              }
              styles3.push(args[i], args[0][i]);
            }
          }
          var Styled = react.withEmotionCache(function(props2, cache, ref) {
            var FinalTag = shouldUseAs && props2.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props2;
            if (props2.theme == null) {
              mergedProps = {};
              for (var key in props2) {
                mergedProps[key] = props2[key];
              }
              mergedProps.theme = React59.useContext(react.ThemeContext);
            }
            if (typeof props2.className === "string") {
              className = utils.getRegisteredStyles(cache.registered, classInterpolations, props2.className);
            } else if (props2.className != null) {
              className = props2.className + " ";
            }
            var serialized = serialize.serializeStyles(styles3.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props2) {
              if (shouldUseAs && _key === "as")
                continue;
              if (finalShouldForwardProp(_key)) {
                newProps[_key] = props2[_key];
              }
            }
            newProps.className = className;
            newProps.ref = ref;
            return /* @__PURE__ */ React59.createElement(React59.Fragment, null, /* @__PURE__ */ React59.createElement(Insertion, {
              cache,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React59.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles3;
          Styled.__emotion_forwardProp = shouldForwardProp2;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && true) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled3(nextTag, _extends2({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles3);
          };
          return Styled;
        };
      };
      exports.default = createStyled2;
    }
  });

  // node_modules/@emotion/styled/dist/emotion-styled.cjs.dev.js
  var require_emotion_styled_cjs_dev = __commonJS({
    "node_modules/@emotion/styled/dist/emotion-styled.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      require_extends();
      require_react();
      require_emotion_is_prop_valid_cjs();
      var base_dist_emotionStyledBase = require_emotion_styled_base_cjs_dev();
      require_emotion_react_cjs();
      require_emotion_utils_cjs();
      require_emotion_serialize_cjs();
      require_emotion_use_insertion_effect_with_fallbacks_cjs();
      var tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      var newStyled = base_dist_emotionStyledBase["default"].bind();
      tags.forEach(function(tagName) {
        newStyled[tagName] = newStyled(tagName);
      });
      exports.default = newStyled;
    }
  });

  // node_modules/@emotion/styled/dist/emotion-styled.cjs.js
  var require_emotion_styled_cjs = __commonJS({
    "node_modules/@emotion/styled/dist/emotion-styled.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_styled_cjs_dev();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type2) {
            return typeof type2 === "string" || typeof type2 === "function" || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_CONCURRENT_MODE_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || typeof type2 === "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_RESPONDER_TYPE || type2.$$typeof === REACT_SCOPE_TYPE || type2.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type2 = object.type;
                  switch (type2) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type2;
                    default:
                      var $$typeofType = type2 && type2.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode2;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location2, componentName, getStack2) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack2 ? getStack2() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is2();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement3, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props2, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props2[propName] == null) {
              if (isRequired) {
                if (props2[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props2, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props2, propName, componentName, location2, propFullName, secret) {
            var propValue = props2[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props2, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props2[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location2, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props2, propName, componentName, location2, propFullName) {
            var propValue = props2[propName];
            if (!isValidElement3(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props2, propName, componentName, location2, propFullName) {
            var propValue = props2[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props2, propName, componentName, location2, propFullName) {
            if (!(props2[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props2[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props2, propName, componentName, location2, propFullName) {
            var propValue = props2[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type2 = getPreciseType(value);
              if (type2 === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props2, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props2[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props2, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props2, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props2, propName, componentName, location2, propFullName) {
            if (!isNode(props2[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type2) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type2 + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props2, propName, componentName, location2, propFullName) {
            var propValue = props2[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props2, propName, componentName, location2, propFullName) {
            var propValue = props2[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props2[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props2[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement3(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type2 = getPreciseType(value);
          switch (type2) {
            case "array":
            case "object":
              return "an " + type2;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type2;
            default:
              return type2;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is2();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React59 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React59.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type2) {
            if (typeof type2 === "string" || typeof type2 === "function") {
              return true;
            }
            if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type2 === "object" && type2 !== null) {
              if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type2) {
            return type2.displayName || "Context";
          }
          function getComponentNameFromType(type2) {
            if (type2 == null) {
              return null;
            }
            {
              if (typeof type2.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type2 === "function") {
              return type2.displayName || type2.name || null;
            }
            if (typeof type2 === "string") {
              return type2;
            }
            switch (type2) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type2;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type2;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type2, type2.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type2.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type2.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props2 = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props2,
                  log: props2,
                  warn: props2,
                  error: props2,
                  group: props2,
                  groupCollapsed: props2,
                  groupEnd: props2
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props2 = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props2, {
                    value: prevLog
                  }),
                  info: assign({}, props2, {
                    value: prevInfo
                  }),
                  warn: assign({}, props2, {
                    value: prevWarn
                  }),
                  error: assign({}, props2, {
                    value: prevError
                  }),
                  group: assign({}, props2, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props2, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props2, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
            if (type2 == null) {
              return "";
            }
            if (typeof type2 === "function") {
              {
                return describeNativeComponentFrame(type2, shouldConstruct(type2));
              }
            }
            if (typeof type2 === "string") {
              return describeBuiltInComponentFrame(type2);
            }
            switch (type2) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type2 === "object") {
              switch (type2.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type2.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type2;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type2;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props2, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props2, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props2, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props2, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type2, key, ref, self2, source, owner, props2) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type: type2,
              key,
              ref,
              props: props2,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type2, config, maybeKey, source, self2) {
            {
              var propName;
              var props2 = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props2[propName] = config[propName];
                }
              }
              if (type2 && type2.defaultProps) {
                var defaultProps2 = type2.defaultProps;
                for (propName in defaultProps2) {
                  if (props2[propName] === void 0) {
                    props2[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
                if (key) {
                  defineKeyPropWarningGetter(props2, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props2, displayName);
                }
              }
              return ReactElement(type2, key, ref, self2, source, ReactCurrentOwner.current, props2);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement3(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray2(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement3(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement3(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement3(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type2 = element.type;
              if (type2 === null || type2 === void 0 || typeof type2 === "string") {
                return;
              }
              var propTypes;
              if (typeof type2 === "function") {
                propTypes = type2.propTypes;
              } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type2.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type2);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type2);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type2, props2, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type2);
              if (!validType) {
                var info = "";
                if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type2 === null) {
                  typeString = "null";
                } else if (isArray2(type2)) {
                  typeString = "array";
                } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type2;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type2, props2, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props2.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray2(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type2);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type2);
                  }
                }
              }
              if (type2 === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type2, props2, key) {
            {
              return jsxWithValidation(type2, props2, key, true);
            }
          }
          function jsxWithValidationDynamic(type2, props2, key) {
            {
              return jsxWithValidation(type2, props2, key, false);
            }
          }
          var jsx = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js
  var require_StyledEngineProvider = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = StyledEngineProvider;
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = require_emotion_react_cjs();
      var _cache = _interopRequireDefault(require_emotion_cache_cjs());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache2 = _getRequireWildcardCache(nodeInterop);
        if (cache2 && cache2.has(obj)) {
          return cache2.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache2) {
          cache2.set(obj, newObj);
        }
        return newObj;
      }
      var cache = (0, _cache.default)({
        key: "css",
        prepend: true
      });
      function StyledEngineProvider(props2) {
        const {
          injectFirst,
          children
        } = props2;
        return injectFirst ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
          value: cache,
          children
        }) : children;
      }
      true ? StyledEngineProvider.propTypes = {
        children: _propTypes.default.node,
        injectFirst: _propTypes.default.bool
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js
  var require_StyledEngineProvider2 = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider());
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = GlobalStyles2;
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = require_emotion_react_cjs();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function isEmpty(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0;
      }
      function GlobalStyles2(props2) {
        const {
          styles: styles3,
          defaultTheme: defaultTheme3 = {}
        } = props2;
        const globalStyles = typeof styles3 === "function" ? (themeInput) => styles3(isEmpty(themeInput) ? defaultTheme3 : themeInput) : styles3;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles2.propTypes = {
        defaultTheme: _propTypes.default.object,
        styles: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/index.js
  var require_GlobalStyles2 = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles());
    }
  });

  // node_modules/@mui/styled-engine/node/index.js
  var require_node = __commonJS({
    "node_modules/@mui/styled-engine/node/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      Object.defineProperty(exports, "ThemeContext", {
        enumerable: true,
        get: function() {
          return _react.ThemeContext;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _react.css;
        }
      });
      exports.default = styled2;
      exports.internal_processStyles = void 0;
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _react.keyframes;
        }
      });
      var _styled = _interopRequireDefault(require_emotion_styled_cjs());
      var _react = require_emotion_react_cjs();
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider2());
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles2());
      function styled2(tag, options) {
        const stylesFactory = (0, _styled.default)(tag, options);
        if (true) {
          return (...styles3) => {
            const component = typeof tag === "string" ? `"${tag}"` : "component";
            if (styles3.length === 0) {
              console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
            } else if (styles3.some((style2) => style2 === void 0)) {
              console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
            }
            return stylesFactory(...styles3);
          };
        }
        return stylesFactory;
      }
      var internal_processStyles = (tag, processor) => {
        if (Array.isArray(tag.__emotion_styles)) {
          tag.__emotion_styles = processor(tag.__emotion_styles);
        }
      };
      exports.internal_processStyles = internal_processStyles;
    }
  });

  // node_modules/@mui/system/responsivePropType.js
  var require_responsivePropType = __commonJS({
    "node_modules/@mui/system/responsivePropType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var responsivePropType = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
      var _default = responsivePropType;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/chainPropTypes.js
  var require_chainPropTypes = __commonJS({
    "node_modules/@mui/utils/chainPropTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = chainPropTypes6;
      function chainPropTypes6(propType1, propType2) {
        if (false) {
          return () => null;
        }
        return function validate(...args) {
          return propType1(...args) || propType2(...args);
        };
      }
    }
  });

  // node_modules/@mui/utils/deepmerge.js
  var require_deepmerge = __commonJS({
    "node_modules/@mui/utils/deepmerge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deepmerge5;
      exports.isPlainObject = isPlainObject;
      var _extends2 = _interopRequireDefault(require_extends());
      function isPlainObject(item) {
        return item !== null && typeof item === "object" && item.constructor === Object;
      }
      function deepmerge5(target, source, options = {
        clone: true
      }) {
        const output = options.clone ? (0, _extends2.default)({}, target) : target;
        if (isPlainObject(target) && isPlainObject(source)) {
          Object.keys(source).forEach((key) => {
            if (key === "__proto__") {
              return;
            }
            if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
              output[key] = deepmerge5(target[key], source[key], options);
            } else {
              output[key] = source[key];
            }
          });
        }
        return output;
      }
    }
  });

  // node_modules/@mui/utils/elementAcceptingRef.js
  var require_elementAcceptingRef = __commonJS({
    "node_modules/@mui/utils/elementAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      function isClassComponent(elementType) {
        const {
          prototype = {}
        } = elementType;
        return Boolean(prototype.isReactComponent);
      }
      function acceptingRef(props2, propName, componentName, location2, propFullName) {
        const element = props2[propName];
        const safePropName = propFullName || propName;
        if (element == null || typeof window === "undefined") {
          return null;
        }
        let warningHint;
        const elementType = element.type;
        if (typeof elementType === "function" && !isClassComponent(elementType)) {
          warningHint = "Did you accidentally use a plain function component for an element instead?";
        }
        if (warningHint !== void 0) {
          return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
        }
        return null;
      }
      var elementAcceptingRef4 = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
      elementAcceptingRef4.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
      var _default = elementAcceptingRef4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/elementTypeAcceptingRef.js
  var require_elementTypeAcceptingRef = __commonJS({
    "node_modules/@mui/utils/elementTypeAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      function isClassComponent(elementType) {
        const {
          prototype = {}
        } = elementType;
        return Boolean(prototype.isReactComponent);
      }
      function elementTypeAcceptingRef2(props2, propName, componentName, location2, propFullName) {
        const propValue = props2[propName];
        const safePropName = propFullName || propName;
        if (propValue == null || typeof window === "undefined") {
          return null;
        }
        let warningHint;
        if (typeof propValue === "function" && !isClassComponent(propValue)) {
          warningHint = "Did you accidentally provide a plain function component instead?";
        }
        if (warningHint !== void 0) {
          return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
        }
        return null;
      }
      var _default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef2);
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/exactProp.js
  var require_exactProp = __commonJS({
    "node_modules/@mui/utils/exactProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exactProp;
      var _extends2 = _interopRequireDefault(require_extends());
      var specialProperty = "exact-prop: \u200B";
      function exactProp(propTypes) {
        if (false) {
          return propTypes;
        }
        return (0, _extends2.default)({}, propTypes, {
          [specialProperty]: (props2) => {
            const unsupportedProps = Object.keys(props2).filter((prop) => !propTypes.hasOwnProperty(prop));
            if (unsupportedProps.length > 0) {
              return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
            }
            return null;
          }
        });
      }
    }
  });

  // node_modules/@mui/utils/formatMuiErrorMessage.js
  var require_formatMuiErrorMessage = __commonJS({
    "node_modules/@mui/utils/formatMuiErrorMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = formatMuiErrorMessage;
      function formatMuiErrorMessage(code) {
        let url = "https://mui.com/production-error/?code=" + code;
        for (let i = 1; i < arguments.length; i += 1) {
          url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type2) {
            if (typeof type2 === "string" || typeof type2 === "function") {
              return true;
            }
            if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type2 === "object" && type2 !== null) {
              if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type2 = object.type;
                  switch (type2) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type2;
                    default:
                      var $$typeofType = type2 && type2.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode2;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/@mui/utils/getDisplayName.js
  var require_getDisplayName = __commonJS({
    "node_modules/@mui/utils/getDisplayName.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getDisplayName;
      exports.getFunctionName = getFunctionName;
      var _reactIs = require_react_is3();
      var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
      function getFunctionName(fn) {
        const match = `${fn}`.match(fnNameMatchRegex);
        const name = match && match[1];
        return name || "";
      }
      function getFunctionComponentName(Component, fallback = "") {
        return Component.displayName || Component.name || getFunctionName(Component) || fallback;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        const functionName = getFunctionComponentName(innerType);
        return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
      }
      function getDisplayName(Component) {
        if (Component == null) {
          return void 0;
        }
        if (typeof Component === "string") {
          return Component;
        }
        if (typeof Component === "function") {
          return getFunctionComponentName(Component, "Component");
        }
        if (typeof Component === "object") {
          switch (Component.$$typeof) {
            case _reactIs.ForwardRef:
              return getWrappedName(Component, Component.render, "ForwardRef");
            case _reactIs.Memo:
              return getWrappedName(Component, Component.type, "memo");
            default:
              return void 0;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/@mui/utils/HTMLElementType.js
  var require_HTMLElementType = __commonJS({
    "node_modules/@mui/utils/HTMLElementType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = HTMLElementType3;
      function HTMLElementType3(props2, propName, componentName, location2, propFullName) {
        if (false) {
          return null;
        }
        const propValue = props2[propName];
        const safePropName = propFullName || propName;
        if (propValue == null) {
          return null;
        }
        if (propValue && propValue.nodeType !== 1) {
          return new Error(`Invalid ${location2} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
        }
        return null;
      }
    }
  });

  // node_modules/@mui/utils/ponyfillGlobal.js
  var require_ponyfillGlobal = __commonJS({
    "node_modules/@mui/utils/ponyfillGlobal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/refType.js
  var require_refType = __commonJS({
    "node_modules/@mui/utils/refType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var refType2 = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);
      var _default = refType2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/@mui/utils/capitalize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = capitalize2;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage());
      function capitalize2(string) {
        if (typeof string !== "string") {
          throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : (0, _formatMuiErrorMessage2.default)(7));
        }
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
    }
  });

  // node_modules/@mui/utils/createChainedFunction.js
  var require_createChainedFunction = __commonJS({
    "node_modules/@mui/utils/createChainedFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createChainedFunction;
      function createChainedFunction(...funcs) {
        return funcs.reduce((acc, func) => {
          if (func == null) {
            return acc;
          }
          return function chainedFunction(...args) {
            acc.apply(this, args);
            func.apply(this, args);
          };
        }, () => {
        });
      }
    }
  });

  // node_modules/@mui/utils/debounce.js
  var require_debounce = __commonJS({
    "node_modules/@mui/utils/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = debounce2;
      function debounce2(func, wait = 166) {
        let timeout2;
        function debounced(...args) {
          const later = () => {
            func.apply(this, args);
          };
          clearTimeout(timeout2);
          timeout2 = setTimeout(later, wait);
        }
        debounced.clear = () => {
          clearTimeout(timeout2);
        };
        return debounced;
      }
    }
  });

  // node_modules/@mui/utils/deprecatedPropType.js
  var require_deprecatedPropType = __commonJS({
    "node_modules/@mui/utils/deprecatedPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deprecatedPropType;
      function deprecatedPropType(validator, reason) {
        if (false) {
          return () => null;
        }
        return (props2, propName, componentName, location2, propFullName) => {
          const componentNameSafe = componentName || "<<anonymous>>";
          const propFullNameSafe = propFullName || propName;
          if (typeof props2[propName] !== "undefined") {
            return new Error(`The ${location2} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
          }
          return null;
        };
      }
    }
  });

  // node_modules/@mui/utils/isMuiElement.js
  var require_isMuiElement = __commonJS({
    "node_modules/@mui/utils/isMuiElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isMuiElement;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function isMuiElement(element, muiNames) {
        return /* @__PURE__ */ React59.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
      }
    }
  });

  // node_modules/@mui/utils/ownerDocument.js
  var require_ownerDocument = __commonJS({
    "node_modules/@mui/utils/ownerDocument.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerDocument;
      function ownerDocument(node) {
        return node && node.ownerDocument || document;
      }
    }
  });

  // node_modules/@mui/utils/ownerWindow.js
  var require_ownerWindow = __commonJS({
    "node_modules/@mui/utils/ownerWindow.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerWindow2;
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      function ownerWindow2(node) {
        const doc = (0, _ownerDocument.default)(node);
        return doc.defaultView || window;
      }
    }
  });

  // node_modules/@mui/utils/requirePropFactory.js
  var require_requirePropFactory = __commonJS({
    "node_modules/@mui/utils/requirePropFactory.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = requirePropFactory2;
      var _extends2 = _interopRequireDefault(require_extends());
      function requirePropFactory2(componentNameInError, Component) {
        if (false) {
          return () => null;
        }
        const prevPropTypes = Component ? (0, _extends2.default)({}, Component.propTypes) : null;
        const requireProp = (requiredProp) => (props2, propName, componentName, location2, propFullName, ...args) => {
          const propFullNameSafe = propFullName || propName;
          const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
          if (defaultTypeChecker) {
            const typeCheckerResult = defaultTypeChecker(props2, propName, componentName, location2, propFullName, ...args);
            if (typeCheckerResult) {
              return typeCheckerResult;
            }
          }
          if (typeof props2[propName] !== "undefined" && !props2[requiredProp]) {
            return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
          }
          return null;
        };
        return requireProp;
      }
    }
  });

  // node_modules/@mui/utils/setRef.js
  var require_setRef = __commonJS({
    "node_modules/@mui/utils/setRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = setRef;
      function setRef(ref, value) {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }
  });

  // node_modules/@mui/utils/useEnhancedEffect.js
  var require_useEnhancedEffect = __commonJS({
    "node_modules/@mui/utils/useEnhancedEffect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useEnhancedEffect2 = typeof window !== "undefined" ? React59.useLayoutEffect : React59.useEffect;
      var _default = useEnhancedEffect2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/useId.js
  var require_useId = __commonJS({
    "node_modules/@mui/utils/useId.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useId;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var globalId = 0;
      function useGlobalId(idOverride) {
        const [defaultId, setDefaultId] = React59.useState(idOverride);
        const id = idOverride || defaultId;
        React59.useEffect(() => {
          if (defaultId == null) {
            globalId += 1;
            setDefaultId(`mui-${globalId}`);
          }
        }, [defaultId]);
        return id;
      }
      var maybeReactUseId = React59["useId"];
      function useId(idOverride) {
        if (maybeReactUseId !== void 0) {
          const reactId = maybeReactUseId();
          return idOverride != null ? idOverride : reactId;
        }
        return useGlobalId(idOverride);
      }
    }
  });

  // node_modules/@mui/utils/unsupportedProp.js
  var require_unsupportedProp = __commonJS({
    "node_modules/@mui/utils/unsupportedProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = unsupportedProp;
      function unsupportedProp(props2, propName, componentName, location2, propFullName) {
        if (false) {
          return null;
        }
        const propFullNameSafe = propFullName || propName;
        if (typeof props2[propName] !== "undefined") {
          return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
        }
        return null;
      }
    }
  });

  // node_modules/@mui/utils/useControlled.js
  var require_useControlled = __commonJS({
    "node_modules/@mui/utils/useControlled.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useControlled;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useControlled({
        controlled,
        default: defaultProp,
        name,
        state = "value"
      }) {
        const {
          current: isControlled
        } = React59.useRef(controlled !== void 0);
        const [valueState, setValue] = React59.useState(defaultProp);
        const value = isControlled ? controlled : valueState;
        if (true) {
          React59.useEffect(() => {
            if (isControlled !== (controlled !== void 0)) {
              console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
            }
          }, [state, name, controlled]);
          const {
            current: defaultValue
          } = React59.useRef(defaultProp);
          React59.useEffect(() => {
            if (!isControlled && defaultValue !== defaultProp) {
              console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
            }
          }, [JSON.stringify(defaultProp)]);
        }
        const setValueIfUncontrolled = React59.useCallback((newValue) => {
          if (!isControlled) {
            setValue(newValue);
          }
        }, []);
        return [value, setValueIfUncontrolled];
      }
    }
  });

  // node_modules/@mui/utils/useEventCallback.js
  var require_useEventCallback = __commonJS({
    "node_modules/@mui/utils/useEventCallback.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useEventCallback2;
      var React59 = _interopRequireWildcard(require_react());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useEventCallback2(fn) {
        const ref = React59.useRef(fn);
        (0, _useEnhancedEffect.default)(() => {
          ref.current = fn;
        });
        return React59.useCallback((...args) => (0, ref.current)(...args), []);
      }
    }
  });

  // node_modules/@mui/utils/useForkRef.js
  var require_useForkRef = __commonJS({
    "node_modules/@mui/utils/useForkRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useForkRef2;
      var React59 = _interopRequireWildcard(require_react());
      var _setRef = _interopRequireDefault(require_setRef());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useForkRef2(...refs) {
        return React59.useMemo(() => {
          if (refs.every((ref) => ref == null)) {
            return null;
          }
          return (instance) => {
            refs.forEach((ref) => {
              (0, _setRef.default)(ref, instance);
            });
          };
        }, refs);
      }
    }
  });

  // node_modules/@mui/utils/useIsFocusVisible.js
  var require_useIsFocusVisible = __commonJS({
    "node_modules/@mui/utils/useIsFocusVisible.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useIsFocusVisible2;
      exports.teardown = teardown;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var hadKeyboardEvent = true;
      var hadFocusVisibleRecently = false;
      var hadFocusVisibleRecentlyTimeout;
      var inputTypesWhitelist = {
        text: true,
        search: true,
        url: true,
        tel: true,
        email: true,
        password: true,
        number: true,
        date: true,
        month: true,
        week: true,
        time: true,
        datetime: true,
        "datetime-local": true
      };
      function focusTriggersKeyboardModality(node) {
        const {
          type: type2,
          tagName
        } = node;
        if (tagName === "INPUT" && inputTypesWhitelist[type2] && !node.readOnly) {
          return true;
        }
        if (tagName === "TEXTAREA" && !node.readOnly) {
          return true;
        }
        if (node.isContentEditable) {
          return true;
        }
        return false;
      }
      function handleKeyDown(event) {
        if (event.metaKey || event.altKey || event.ctrlKey) {
          return;
        }
        hadKeyboardEvent = true;
      }
      function handlePointerDown() {
        hadKeyboardEvent = false;
      }
      function handleVisibilityChange() {
        if (this.visibilityState === "hidden") {
          if (hadFocusVisibleRecently) {
            hadKeyboardEvent = true;
          }
        }
      }
      function prepare(doc) {
        doc.addEventListener("keydown", handleKeyDown, true);
        doc.addEventListener("mousedown", handlePointerDown, true);
        doc.addEventListener("pointerdown", handlePointerDown, true);
        doc.addEventListener("touchstart", handlePointerDown, true);
        doc.addEventListener("visibilitychange", handleVisibilityChange, true);
      }
      function teardown(doc) {
        doc.removeEventListener("keydown", handleKeyDown, true);
        doc.removeEventListener("mousedown", handlePointerDown, true);
        doc.removeEventListener("pointerdown", handlePointerDown, true);
        doc.removeEventListener("touchstart", handlePointerDown, true);
        doc.removeEventListener("visibilitychange", handleVisibilityChange, true);
      }
      function isFocusVisible(event) {
        const {
          target
        } = event;
        try {
          return target.matches(":focus-visible");
        } catch (error) {
        }
        return hadKeyboardEvent || focusTriggersKeyboardModality(target);
      }
      function useIsFocusVisible2() {
        const ref = React59.useCallback((node) => {
          if (node != null) {
            prepare(node.ownerDocument);
          }
        }, []);
        const isFocusVisibleRef = React59.useRef(false);
        function handleBlurVisible() {
          if (isFocusVisibleRef.current) {
            hadFocusVisibleRecently = true;
            window.clearTimeout(hadFocusVisibleRecentlyTimeout);
            hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
              hadFocusVisibleRecently = false;
            }, 100);
            isFocusVisibleRef.current = false;
            return true;
          }
          return false;
        }
        function handleFocusVisible(event) {
          if (isFocusVisible(event)) {
            isFocusVisibleRef.current = true;
            return true;
          }
          return false;
        }
        return {
          isFocusVisibleRef,
          onFocus: handleFocusVisible,
          onBlur: handleBlurVisible,
          ref
        };
      }
    }
  });

  // node_modules/@mui/utils/getScrollbarSize.js
  var require_getScrollbarSize = __commonJS({
    "node_modules/@mui/utils/getScrollbarSize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getScrollbarSize;
      function getScrollbarSize(doc) {
        const documentWidth = doc.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
      }
    }
  });

  // node_modules/@mui/utils/scrollLeft.js
  var require_scrollLeft = __commonJS({
    "node_modules/@mui/utils/scrollLeft.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.detectScrollType = detectScrollType;
      exports.getNormalizedScrollLeft = getNormalizedScrollLeft;
      var cachedType;
      function detectScrollType() {
        if (cachedType) {
          return cachedType;
        }
        const dummy = document.createElement("div");
        const container2 = document.createElement("div");
        container2.style.width = "10px";
        container2.style.height = "1px";
        dummy.appendChild(container2);
        dummy.dir = "rtl";
        dummy.style.fontSize = "14px";
        dummy.style.width = "4px";
        dummy.style.height = "1px";
        dummy.style.position = "absolute";
        dummy.style.top = "-1000px";
        dummy.style.overflow = "scroll";
        document.body.appendChild(dummy);
        cachedType = "reverse";
        if (dummy.scrollLeft > 0) {
          cachedType = "default";
        } else {
          dummy.scrollLeft = 1;
          if (dummy.scrollLeft === 0) {
            cachedType = "negative";
          }
        }
        document.body.removeChild(dummy);
        return cachedType;
      }
      function getNormalizedScrollLeft(element, direction) {
        const scrollLeft = element.scrollLeft;
        if (direction !== "rtl") {
          return scrollLeft;
        }
        const type2 = detectScrollType();
        switch (type2) {
          case "negative":
            return element.scrollWidth - element.clientWidth + scrollLeft;
          case "reverse":
            return element.scrollWidth - element.clientWidth - scrollLeft;
          default:
            return scrollLeft;
        }
      }
    }
  });

  // node_modules/@mui/utils/usePreviousProps.js
  var require_usePreviousProps = __commonJS({
    "node_modules/@mui/utils/usePreviousProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var usePreviousProps = (value) => {
        const ref = React59.useRef({});
        React59.useEffect(() => {
          ref.current = value;
        });
        return ref.current;
      };
      var _default = usePreviousProps;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/visuallyHidden.js
  var require_visuallyHidden = __commonJS({
    "node_modules/@mui/utils/visuallyHidden.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var visuallyHidden = {
        border: 0,
        clip: "rect(0 0 0 0)",
        height: "1px",
        margin: -1,
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        whiteSpace: "nowrap",
        width: "1px"
      };
      var _default = visuallyHidden;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/integerPropType.js
  var require_integerPropType = __commonJS({
    "node_modules/@mui/utils/integerPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTypeByValue = getTypeByValue;
      function getTypeByValue(value) {
        const valueType = typeof value;
        switch (valueType) {
          case "number":
            if (Number.isNaN(value)) {
              return "NaN";
            }
            if (!Number.isFinite(value)) {
              return "Infinity";
            }
            if (value !== Math.floor(value)) {
              return "float";
            }
            return "number";
          case "object":
            if (value === null) {
              return "null";
            }
            return value.constructor.name;
          default:
            return valueType;
        }
      }
      function ponyfillIsInteger(x) {
        return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
      }
      var isInteger = Number.isInteger || ponyfillIsInteger;
      function requiredInteger(props2, propName, componentName, location2) {
        const propValue = props2[propName];
        if (propValue == null || !isInteger(propValue)) {
          const propType = getTypeByValue(propValue);
          return new RangeError(`Invalid ${location2} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
        }
        return null;
      }
      function validator(props2, propName, ...other) {
        const propValue = props2[propName];
        if (propValue === void 0) {
          return null;
        }
        return requiredInteger(props2, propName, ...other);
      }
      function validatorNoop() {
        return null;
      }
      validator.isRequired = requiredInteger;
      validatorNoop.isRequired = validatorNoop;
      var _default = false ? validatorNoop : validator;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/resolveProps.js
  var require_resolveProps = __commonJS({
    "node_modules/@mui/utils/resolveProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = resolveProps2;
      var _extends2 = _interopRequireDefault(require_extends());
      function resolveProps2(defaultProps2, props2) {
        const output = (0, _extends2.default)({}, props2);
        Object.keys(defaultProps2).forEach((propName) => {
          if (output[propName] === void 0) {
            output[propName] = defaultProps2[propName];
          }
        });
        return output;
      }
    }
  });

  // node_modules/@mui/utils/composeClasses/composeClasses.js
  var require_composeClasses = __commonJS({
    "node_modules/@mui/utils/composeClasses/composeClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = composeClasses21;
      function composeClasses21(slots, getUtilityClass, classes) {
        const output = {};
        Object.keys(slots).forEach(
          (slot) => {
            output[slot] = slots[slot].reduce((acc, key) => {
              if (key) {
                acc.push(getUtilityClass(key));
                if (classes && classes[key]) {
                  acc.push(classes[key]);
                }
              }
              return acc;
            }, []).join(" ");
          }
        );
        return output;
      }
    }
  });

  // node_modules/@mui/utils/composeClasses/index.js
  var require_composeClasses2 = __commonJS({
    "node_modules/@mui/utils/composeClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      var _composeClasses = _interopRequireDefault(require_composeClasses());
    }
  });

  // node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js
  var require_ClassNameGenerator = __commonJS({
    "node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var defaultGenerator = (componentName) => componentName;
      var createClassNameGenerator = () => {
        let generate = defaultGenerator;
        return {
          configure(generator) {
            generate = generator;
          },
          generate(componentName) {
            return generate(componentName);
          },
          reset() {
            generate = defaultGenerator;
          }
        };
      };
      var ClassNameGenerator = createClassNameGenerator();
      var _default = ClassNameGenerator;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/ClassNameGenerator/index.js
  var require_ClassNameGenerator2 = __commonJS({
    "node_modules/@mui/utils/ClassNameGenerator/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ClassNameGenerator.default;
        }
      });
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator());
    }
  });

  // node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js
  var require_generateUtilityClass = __commonJS({
    "node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generateUtilityClass23;
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
      var globalStateClassesMapping = {
        active: "active",
        checked: "checked",
        completed: "completed",
        disabled: "disabled",
        error: "error",
        expanded: "expanded",
        focused: "focused",
        focusVisible: "focusVisible",
        required: "required",
        selected: "selected"
      };
      function generateUtilityClass23(componentName, slot, globalStatePrefix = "Mui") {
        const globalStateClass = globalStateClassesMapping[slot];
        return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClass/index.js
  var require_generateUtilityClass2 = __commonJS({
    "node_modules/@mui/utils/generateUtilityClass/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _generateUtilityClass[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js
  var require_generateUtilityClasses = __commonJS({
    "node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generateUtilityClasses23;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
      function generateUtilityClasses23(componentName, slots, globalStatePrefix = "Mui") {
        const result = {};
        slots.forEach((slot) => {
          result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
        });
        return result;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClasses/index.js
  var require_generateUtilityClasses2 = __commonJS({
    "node_modules/@mui/utils/generateUtilityClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses());
    }
  });

  // node_modules/@mui/utils/index.js
  var require_utils = __commonJS({
    "node_modules/@mui/utils/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        chainPropTypes: true,
        deepmerge: true,
        isPlainObject: true,
        elementAcceptingRef: true,
        elementTypeAcceptingRef: true,
        exactProp: true,
        formatMuiErrorMessage: true,
        getDisplayName: true,
        HTMLElementType: true,
        ponyfillGlobal: true,
        refType: true,
        unstable_capitalize: true,
        unstable_createChainedFunction: true,
        unstable_debounce: true,
        unstable_deprecatedPropType: true,
        unstable_isMuiElement: true,
        unstable_ownerDocument: true,
        unstable_ownerWindow: true,
        unstable_requirePropFactory: true,
        unstable_setRef: true,
        unstable_useEnhancedEffect: true,
        unstable_useId: true,
        unstable_unsupportedProp: true,
        unstable_useControlled: true,
        unstable_useEventCallback: true,
        unstable_useForkRef: true,
        unstable_useIsFocusVisible: true,
        unstable_getScrollbarSize: true,
        unstable_detectScrollType: true,
        unstable_getNormalizedScrollLeft: true,
        usePreviousProps: true,
        visuallyHidden: true,
        integerPropType: true,
        internal_resolveProps: true,
        unstable_composeClasses: true,
        unstable_generateUtilityClass: true,
        unstable_generateUtilityClasses: true,
        unstable_ClassNameGenerator: true
      };
      Object.defineProperty(exports, "HTMLElementType", {
        enumerable: true,
        get: function() {
          return _HTMLElementType.default;
        }
      });
      Object.defineProperty(exports, "chainPropTypes", {
        enumerable: true,
        get: function() {
          return _chainPropTypes.default;
        }
      });
      Object.defineProperty(exports, "deepmerge", {
        enumerable: true,
        get: function() {
          return _deepmerge.default;
        }
      });
      Object.defineProperty(exports, "elementAcceptingRef", {
        enumerable: true,
        get: function() {
          return _elementAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "elementTypeAcceptingRef", {
        enumerable: true,
        get: function() {
          return _elementTypeAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "exactProp", {
        enumerable: true,
        get: function() {
          return _exactProp.default;
        }
      });
      Object.defineProperty(exports, "formatMuiErrorMessage", {
        enumerable: true,
        get: function() {
          return _formatMuiErrorMessage.default;
        }
      });
      Object.defineProperty(exports, "getDisplayName", {
        enumerable: true,
        get: function() {
          return _getDisplayName.default;
        }
      });
      Object.defineProperty(exports, "integerPropType", {
        enumerable: true,
        get: function() {
          return _integerPropType.default;
        }
      });
      Object.defineProperty(exports, "internal_resolveProps", {
        enumerable: true,
        get: function() {
          return _resolveProps.default;
        }
      });
      Object.defineProperty(exports, "isPlainObject", {
        enumerable: true,
        get: function() {
          return _deepmerge.isPlainObject;
        }
      });
      Object.defineProperty(exports, "ponyfillGlobal", {
        enumerable: true,
        get: function() {
          return _ponyfillGlobal.default;
        }
      });
      Object.defineProperty(exports, "refType", {
        enumerable: true,
        get: function() {
          return _refType.default;
        }
      });
      Object.defineProperty(exports, "unstable_ClassNameGenerator", {
        enumerable: true,
        get: function() {
          return _ClassNameGenerator.default;
        }
      });
      Object.defineProperty(exports, "unstable_capitalize", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "unstable_composeClasses", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_createChainedFunction", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "unstable_debounce", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "unstable_deprecatedPropType", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "unstable_detectScrollType", {
        enumerable: true,
        get: function() {
          return _scrollLeft.detectScrollType;
        }
      });
      Object.defineProperty(exports, "unstable_generateUtilityClass", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      Object.defineProperty(exports, "unstable_generateUtilityClasses", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_getNormalizedScrollLeft", {
        enumerable: true,
        get: function() {
          return _scrollLeft.getNormalizedScrollLeft;
        }
      });
      Object.defineProperty(exports, "unstable_getScrollbarSize", {
        enumerable: true,
        get: function() {
          return _getScrollbarSize.default;
        }
      });
      Object.defineProperty(exports, "unstable_isMuiElement", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "unstable_ownerDocument", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "unstable_ownerWindow", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "unstable_requirePropFactory", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "unstable_setRef", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_unsupportedProp", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_useControlled", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "unstable_useEnhancedEffect", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      Object.defineProperty(exports, "unstable_useEventCallback", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "unstable_useForkRef", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      Object.defineProperty(exports, "unstable_useIsFocusVisible", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      Object.defineProperty(exports, "usePreviousProps", {
        enumerable: true,
        get: function() {
          return _usePreviousProps.default;
        }
      });
      Object.defineProperty(exports, "visuallyHidden", {
        enumerable: true,
        get: function() {
          return _visuallyHidden.default;
        }
      });
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
      var _deepmerge = _interopRequireWildcard(require_deepmerge());
      var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef());
      var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef());
      var _exactProp = _interopRequireDefault(require_exactProp());
      var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName());
      var _HTMLElementType = _interopRequireDefault(require_HTMLElementType());
      var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal());
      var _refType = _interopRequireDefault(require_refType());
      var _capitalize = _interopRequireDefault(require_capitalize());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction());
      var _debounce = _interopRequireDefault(require_debounce());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory());
      var _setRef = _interopRequireDefault(require_setRef());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect());
      var _useId = _interopRequireDefault(require_useId());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp());
      var _useControlled = _interopRequireDefault(require_useControlled());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
      var _useForkRef = _interopRequireDefault(require_useForkRef());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible());
      var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize());
      var _scrollLeft = require_scrollLeft();
      var _usePreviousProps = _interopRequireDefault(require_usePreviousProps());
      var _visuallyHidden = _interopRequireDefault(require_visuallyHidden());
      var _integerPropType = _interopRequireDefault(require_integerPropType());
      var _resolveProps = _interopRequireDefault(require_resolveProps());
      var _composeClasses = _interopRequireDefault(require_composeClasses2());
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass2());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _generateUtilityClass[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/merge.js
  var require_merge = __commonJS({
    "node_modules/@mui/system/merge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      function merge(acc, item) {
        if (!item) {
          return acc;
        }
        return (0, _utils.deepmerge)(acc, item, {
          clone: false
        });
      }
      var _default = merge;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/breakpoints.js
  var require_breakpoints = __commonJS({
    "node_modules/@mui/system/breakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.computeBreakpointsBase = computeBreakpointsBase;
      exports.createEmptyBreakpointObject = createEmptyBreakpointObject;
      exports.default = void 0;
      exports.handleBreakpoints = handleBreakpoints3;
      exports.mergeBreakpointsInOrder = mergeBreakpointsInOrder2;
      exports.removeUnusedBreakpoints = removeUnusedBreakpoints;
      exports.resolveBreakpointValues = resolveBreakpointValues3;
      exports.values = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _merge = _interopRequireDefault(require_merge());
      var values2 = {
        xs: 0,
        sm: 600,
        md: 900,
        lg: 1200,
        xl: 1536
      };
      exports.values = values2;
      var defaultBreakpoints = {
        keys: ["xs", "sm", "md", "lg", "xl"],
        up: (key) => `@media (min-width:${values2[key]}px)`
      };
      function handleBreakpoints3(props2, propValue, styleFromPropValue) {
        const theme2 = props2.theme || {};
        if (Array.isArray(propValue)) {
          const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
          return propValue.reduce((acc, item, index) => {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
          }, {});
        }
        if (typeof propValue === "object") {
          const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
          return Object.keys(propValue).reduce((acc, breakpoint) => {
            if (Object.keys(themeBreakpoints.values || values2).indexOf(breakpoint) !== -1) {
              const mediaKey = themeBreakpoints.up(breakpoint);
              acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
              const cssKey = breakpoint;
              acc[cssKey] = propValue[cssKey];
            }
            return acc;
          }, {});
        }
        const output = styleFromPropValue(propValue);
        return output;
      }
      function breakpoints(styleFunction) {
        const newStyleFunction = (props2) => {
          const theme2 = props2.theme || {};
          const base = styleFunction(props2);
          const themeBreakpoints = theme2.breakpoints || defaultBreakpoints;
          const extended = themeBreakpoints.keys.reduce((acc, key) => {
            if (props2[key]) {
              acc = acc || {};
              acc[themeBreakpoints.up(key)] = styleFunction((0, _extends2.default)({
                theme: theme2
              }, props2[key]));
            }
            return acc;
          }, null);
          return (0, _merge.default)(base, extended);
        };
        newStyleFunction.propTypes = true ? (0, _extends2.default)({}, styleFunction.propTypes, {
          xs: _propTypes.default.object,
          sm: _propTypes.default.object,
          md: _propTypes.default.object,
          lg: _propTypes.default.object,
          xl: _propTypes.default.object
        }) : {};
        newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
        return newStyleFunction;
      }
      function createEmptyBreakpointObject(breakpointsInput = {}) {
        var _breakpointsInput$key;
        const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
          const breakpointStyleKey = breakpointsInput.up(key);
          acc[breakpointStyleKey] = {};
          return acc;
        }, {});
        return breakpointsInOrder || {};
      }
      function removeUnusedBreakpoints(breakpointKeys, style2) {
        return breakpointKeys.reduce((acc, key) => {
          const breakpointOutput = acc[key];
          const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
          if (isBreakpointUnused) {
            delete acc[key];
          }
          return acc;
        }, style2);
      }
      function mergeBreakpointsInOrder2(breakpointsInput, ...styles3) {
        const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
        const mergedOutput = [emptyBreakpoints, ...styles3].reduce((prev, next) => (0, _utils.deepmerge)(prev, next), {});
        return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
      }
      function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
        if (typeof breakpointValues !== "object") {
          return {};
        }
        const base = {};
        const breakpointsKeys = Object.keys(themeBreakpoints);
        if (Array.isArray(breakpointValues)) {
          breakpointsKeys.forEach((breakpoint, i) => {
            if (i < breakpointValues.length) {
              base[breakpoint] = true;
            }
          });
        } else {
          breakpointsKeys.forEach((breakpoint) => {
            if (breakpointValues[breakpoint] != null) {
              base[breakpoint] = true;
            }
          });
        }
        return base;
      }
      function resolveBreakpointValues3({
        values: breakpointValues,
        breakpoints: themeBreakpoints,
        base: customBase
      }) {
        const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
        const keys2 = Object.keys(base);
        if (keys2.length === 0) {
          return breakpointValues;
        }
        let previous;
        return keys2.reduce((acc, breakpoint, i) => {
          if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
          } else if (typeof breakpointValues === "object") {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
          } else {
            acc[breakpoint] = breakpointValues;
          }
          return acc;
        }, {});
      }
      var _default = breakpoints;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/style.js
  var require_style = __commonJS({
    "node_modules/@mui/system/style.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPath = getPath;
      var _utils = require_utils();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      function getPath(obj, path, checkVars = true) {
        if (!path || typeof path !== "string") {
          return null;
        }
        if (obj && obj.vars && checkVars) {
          const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
          if (val != null) {
            return val;
          }
        }
        return path.split(".").reduce((acc, item) => {
          if (acc && acc[item] != null) {
            return acc[item];
          }
          return null;
        }, obj);
      }
      function getValue2(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
        let value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || userValue;
        } else {
          value = getPath(themeMapping, propValueFinal) || userValue;
        }
        if (transform) {
          value = transform(value);
        }
        return value;
      }
      function style2(options) {
        const {
          prop,
          cssProperty = options.prop,
          themeKey,
          transform
        } = options;
        const fn = (props2) => {
          if (props2[prop] == null) {
            return null;
          }
          const propValue = props2[prop];
          const theme2 = props2.theme;
          const themeMapping = getPath(theme2, themeKey) || {};
          const styleFromPropValue = (propValueFinal) => {
            let value = getValue2(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = getValue2(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _utils.unstable_capitalize)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props2, propValue, styleFromPropValue);
        };
        fn.propTypes = true ? {
          [prop]: _responsivePropType.default
        } : {};
        fn.filterProps = [prop];
        return fn;
      }
      var _default = style2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/compose.js
  var require_compose = __commonJS({
    "node_modules/@mui/system/compose.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _merge = _interopRequireDefault(require_merge());
      function compose(...styles3) {
        const handlers = styles3.reduce((acc, style2) => {
          style2.filterProps.forEach((prop) => {
            acc[prop] = style2;
          });
          return acc;
        }, {});
        const fn = (props2) => {
          return Object.keys(props2).reduce((acc, prop) => {
            if (handlers[prop]) {
              return (0, _merge.default)(acc, handlers[prop](props2));
            }
            return acc;
          }, {});
        };
        fn.propTypes = true ? styles3.reduce((acc, style2) => Object.assign(acc, style2.propTypes), {}) : {};
        fn.filterProps = styles3.reduce((acc, style2) => acc.concat(style2.filterProps), []);
        return fn;
      }
      var _default = compose;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/memoize.js
  var require_memoize = __commonJS({
    "node_modules/@mui/system/memoize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = memoize;
      function memoize(fn) {
        const cache = {};
        return (arg) => {
          if (cache[arg] === void 0) {
            cache[arg] = fn(arg);
          }
          return cache[arg];
        };
      }
    }
  });

  // node_modules/@mui/system/spacing.js
  var require_spacing = __commonJS({
    "node_modules/@mui/system/spacing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createUnarySpacing = createUnarySpacing2;
      exports.createUnaryUnit = createUnaryUnit;
      exports.default = void 0;
      exports.getStyleFromPropValue = getStyleFromPropValue;
      exports.getValue = getValue2;
      exports.margin = margin;
      exports.padding = padding;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      var _style = require_style();
      var _merge = _interopRequireDefault(require_merge());
      var _memoize = _interopRequireDefault(require_memoize());
      var properties = {
        m: "margin",
        p: "padding"
      };
      var directions = {
        t: "Top",
        r: "Right",
        b: "Bottom",
        l: "Left",
        x: ["Left", "Right"],
        y: ["Top", "Bottom"]
      };
      var aliases = {
        marginX: "mx",
        marginY: "my",
        paddingX: "px",
        paddingY: "py"
      };
      var getCssProperties = (0, _memoize.default)((prop) => {
        if (prop.length > 2) {
          if (aliases[prop]) {
            prop = aliases[prop];
          } else {
            return [prop];
          }
        }
        const [a, b] = prop.split("");
        const property = properties[a];
        const direction = directions[b] || "";
        return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
      });
      var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
      var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
      var spacingKeys = [...marginKeys, ...paddingKeys];
      function createUnaryUnit(theme2, themeKey, defaultValue, propName) {
        var _getPath;
        const themeSpacing = (_getPath = (0, _style.getPath)(theme2, themeKey, false)) != null ? _getPath : defaultValue;
        if (typeof themeSpacing === "number") {
          return (abs) => {
            if (typeof abs === "string") {
              return abs;
            }
            if (true) {
              if (typeof abs !== "number") {
                console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
              }
            }
            return themeSpacing * abs;
          };
        }
        if (Array.isArray(themeSpacing)) {
          return (abs) => {
            if (typeof abs === "string") {
              return abs;
            }
            if (true) {
              if (!Number.isInteger(abs)) {
                console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
              } else if (abs > themeSpacing.length - 1) {
                console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
              }
            }
            return themeSpacing[abs];
          };
        }
        if (typeof themeSpacing === "function") {
          return themeSpacing;
        }
        if (true) {
          console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
        }
        return () => void 0;
      }
      function createUnarySpacing2(theme2) {
        return createUnaryUnit(theme2, "spacing", 8, "spacing");
      }
      function getValue2(transformer, propValue) {
        if (typeof propValue === "string" || propValue == null) {
          return propValue;
        }
        const abs = Math.abs(propValue);
        const transformed = transformer(abs);
        if (propValue >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      }
      function getStyleFromPropValue(cssProperties, transformer) {
        return (propValue) => cssProperties.reduce((acc, cssProperty) => {
          acc[cssProperty] = getValue2(transformer, propValue);
          return acc;
        }, {});
      }
      function resolveCssProperty(props2, keys2, prop, transformer) {
        if (keys2.indexOf(prop) === -1) {
          return null;
        }
        const cssProperties = getCssProperties(prop);
        const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
        const propValue = props2[prop];
        return (0, _breakpoints.handleBreakpoints)(props2, propValue, styleFromPropValue);
      }
      function style2(props2, keys2) {
        const transformer = createUnarySpacing2(props2.theme);
        return Object.keys(props2).map((prop) => resolveCssProperty(props2, keys2, prop, transformer)).reduce(_merge.default, {});
      }
      function margin(props2) {
        return style2(props2, marginKeys);
      }
      margin.propTypes = true ? marginKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      margin.filterProps = marginKeys;
      function padding(props2) {
        return style2(props2, paddingKeys);
      }
      padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      padding.filterProps = paddingKeys;
      function spacing(props2) {
        return style2(props2, spacingKeys);
      }
      spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      spacing.filterProps = spacingKeys;
      var _default = spacing;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/borders.js
  var require_borders = __commonJS({
    "node_modules/@mui/system/borders.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.borderTopColor = exports.borderTop = exports.borderRightColor = exports.borderRight = exports.borderRadius = exports.borderLeftColor = exports.borderLeft = exports.borderColor = exports.borderBottomColor = exports.borderBottom = exports.border = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      function getBorder(value) {
        if (typeof value !== "number") {
          return value;
        }
        return `${value}px solid`;
      }
      var border = (0, _style.default)({
        prop: "border",
        themeKey: "borders",
        transform: getBorder
      });
      exports.border = border;
      var borderTop = (0, _style.default)({
        prop: "borderTop",
        themeKey: "borders",
        transform: getBorder
      });
      exports.borderTop = borderTop;
      var borderRight = (0, _style.default)({
        prop: "borderRight",
        themeKey: "borders",
        transform: getBorder
      });
      exports.borderRight = borderRight;
      var borderBottom = (0, _style.default)({
        prop: "borderBottom",
        themeKey: "borders",
        transform: getBorder
      });
      exports.borderBottom = borderBottom;
      var borderLeft = (0, _style.default)({
        prop: "borderLeft",
        themeKey: "borders",
        transform: getBorder
      });
      exports.borderLeft = borderLeft;
      var borderColor = (0, _style.default)({
        prop: "borderColor",
        themeKey: "palette"
      });
      exports.borderColor = borderColor;
      var borderTopColor = (0, _style.default)({
        prop: "borderTopColor",
        themeKey: "palette"
      });
      exports.borderTopColor = borderTopColor;
      var borderRightColor = (0, _style.default)({
        prop: "borderRightColor",
        themeKey: "palette"
      });
      exports.borderRightColor = borderRightColor;
      var borderBottomColor = (0, _style.default)({
        prop: "borderBottomColor",
        themeKey: "palette"
      });
      exports.borderBottomColor = borderBottomColor;
      var borderLeftColor = (0, _style.default)({
        prop: "borderLeftColor",
        themeKey: "palette"
      });
      exports.borderLeftColor = borderLeftColor;
      var borderRadius = (props2) => {
        if (props2.borderRadius !== void 0 && props2.borderRadius !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props2.theme, "shape.borderRadius", 4, "borderRadius");
          const styleFromPropValue = (propValue) => ({
            borderRadius: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props2, props2.borderRadius, styleFromPropValue);
        }
        return null;
      };
      exports.borderRadius = borderRadius;
      borderRadius.propTypes = true ? {
        borderRadius: _responsivePropType.default
      } : {};
      borderRadius.filterProps = ["borderRadius"];
      var borders = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
      var _default = borders;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/display.js
  var require_display = __commonJS({
    "node_modules/@mui/system/display.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.whiteSpace = exports.visibility = exports.textOverflow = exports.overflow = exports.displayRaw = exports.displayPrint = exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var displayPrint = (0, _style.default)({
        prop: "displayPrint",
        cssProperty: false,
        transform: (value) => ({
          "@media print": {
            display: value
          }
        })
      });
      exports.displayPrint = displayPrint;
      var displayRaw = (0, _style.default)({
        prop: "display"
      });
      exports.displayRaw = displayRaw;
      var overflow = (0, _style.default)({
        prop: "overflow"
      });
      exports.overflow = overflow;
      var textOverflow = (0, _style.default)({
        prop: "textOverflow"
      });
      exports.textOverflow = textOverflow;
      var visibility = (0, _style.default)({
        prop: "visibility"
      });
      exports.visibility = visibility;
      var whiteSpace = (0, _style.default)({
        prop: "whiteSpace"
      });
      exports.whiteSpace = whiteSpace;
      var _default = (0, _compose.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/flexbox.js
  var require_flexbox = __commonJS({
    "node_modules/@mui/system/flexbox.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.order = exports.justifySelf = exports.justifyItems = exports.justifyContent = exports.flexWrap = exports.flexShrink = exports.flexGrow = exports.flexDirection = exports.flexBasis = exports.flex = exports.default = exports.alignSelf = exports.alignItems = exports.alignContent = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var flexBasis = (0, _style.default)({
        prop: "flexBasis"
      });
      exports.flexBasis = flexBasis;
      var flexDirection = (0, _style.default)({
        prop: "flexDirection"
      });
      exports.flexDirection = flexDirection;
      var flexWrap = (0, _style.default)({
        prop: "flexWrap"
      });
      exports.flexWrap = flexWrap;
      var justifyContent = (0, _style.default)({
        prop: "justifyContent"
      });
      exports.justifyContent = justifyContent;
      var alignItems = (0, _style.default)({
        prop: "alignItems"
      });
      exports.alignItems = alignItems;
      var alignContent = (0, _style.default)({
        prop: "alignContent"
      });
      exports.alignContent = alignContent;
      var order = (0, _style.default)({
        prop: "order"
      });
      exports.order = order;
      var flex = (0, _style.default)({
        prop: "flex"
      });
      exports.flex = flex;
      var flexGrow = (0, _style.default)({
        prop: "flexGrow"
      });
      exports.flexGrow = flexGrow;
      var flexShrink = (0, _style.default)({
        prop: "flexShrink"
      });
      exports.flexShrink = flexShrink;
      var alignSelf = (0, _style.default)({
        prop: "alignSelf"
      });
      exports.alignSelf = alignSelf;
      var justifyItems = (0, _style.default)({
        prop: "justifyItems"
      });
      exports.justifyItems = justifyItems;
      var justifySelf = (0, _style.default)({
        prop: "justifySelf"
      });
      exports.justifySelf = justifySelf;
      var flexbox = (0, _compose.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
      var _default = flexbox;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/cssGrid.js
  var require_cssGrid = __commonJS({
    "node_modules/@mui/system/cssGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.rowGap = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridTemplateAreas = exports.gridRow = exports.gridColumn = exports.gridAutoRows = exports.gridAutoFlow = exports.gridAutoColumns = exports.gridArea = exports.gap = exports.default = exports.columnGap = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var gap = (props2) => {
        if (props2.gap !== void 0 && props2.gap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props2.theme, "spacing", 8, "gap");
          const styleFromPropValue = (propValue) => ({
            gap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props2, props2.gap, styleFromPropValue);
        }
        return null;
      };
      exports.gap = gap;
      gap.propTypes = true ? {
        gap: _responsivePropType.default
      } : {};
      gap.filterProps = ["gap"];
      var columnGap = (props2) => {
        if (props2.columnGap !== void 0 && props2.columnGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props2.theme, "spacing", 8, "columnGap");
          const styleFromPropValue = (propValue) => ({
            columnGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props2, props2.columnGap, styleFromPropValue);
        }
        return null;
      };
      exports.columnGap = columnGap;
      columnGap.propTypes = true ? {
        columnGap: _responsivePropType.default
      } : {};
      columnGap.filterProps = ["columnGap"];
      var rowGap = (props2) => {
        if (props2.rowGap !== void 0 && props2.rowGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props2.theme, "spacing", 8, "rowGap");
          const styleFromPropValue = (propValue) => ({
            rowGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props2, props2.rowGap, styleFromPropValue);
        }
        return null;
      };
      exports.rowGap = rowGap;
      rowGap.propTypes = true ? {
        rowGap: _responsivePropType.default
      } : {};
      rowGap.filterProps = ["rowGap"];
      var gridColumn = (0, _style.default)({
        prop: "gridColumn"
      });
      exports.gridColumn = gridColumn;
      var gridRow = (0, _style.default)({
        prop: "gridRow"
      });
      exports.gridRow = gridRow;
      var gridAutoFlow = (0, _style.default)({
        prop: "gridAutoFlow"
      });
      exports.gridAutoFlow = gridAutoFlow;
      var gridAutoColumns = (0, _style.default)({
        prop: "gridAutoColumns"
      });
      exports.gridAutoColumns = gridAutoColumns;
      var gridAutoRows = (0, _style.default)({
        prop: "gridAutoRows"
      });
      exports.gridAutoRows = gridAutoRows;
      var gridTemplateColumns = (0, _style.default)({
        prop: "gridTemplateColumns"
      });
      exports.gridTemplateColumns = gridTemplateColumns;
      var gridTemplateRows = (0, _style.default)({
        prop: "gridTemplateRows"
      });
      exports.gridTemplateRows = gridTemplateRows;
      var gridTemplateAreas = (0, _style.default)({
        prop: "gridTemplateAreas"
      });
      exports.gridTemplateAreas = gridTemplateAreas;
      var gridArea = (0, _style.default)({
        prop: "gridArea"
      });
      exports.gridArea = gridArea;
      var grid = (0, _compose.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
      var _default = grid;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/palette.js
  var require_palette = __commonJS({
    "node_modules/@mui/system/palette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.color = exports.bgcolor = exports.backgroundColor = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var color = (0, _style.default)({
        prop: "color",
        themeKey: "palette"
      });
      exports.color = color;
      var bgcolor = (0, _style.default)({
        prop: "bgcolor",
        cssProperty: "backgroundColor",
        themeKey: "palette"
      });
      exports.bgcolor = bgcolor;
      var backgroundColor = (0, _style.default)({
        prop: "backgroundColor",
        themeKey: "palette"
      });
      exports.backgroundColor = backgroundColor;
      var palette = (0, _compose.default)(color, bgcolor, backgroundColor);
      var _default = palette;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/positions.js
  var require_positions = __commonJS({
    "node_modules/@mui/system/positions.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.zIndex = exports.top = exports.right = exports.position = exports.left = exports.default = exports.bottom = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var position = (0, _style.default)({
        prop: "position"
      });
      exports.position = position;
      var zIndex2 = (0, _style.default)({
        prop: "zIndex",
        themeKey: "zIndex"
      });
      exports.zIndex = zIndex2;
      var top = (0, _style.default)({
        prop: "top"
      });
      exports.top = top;
      var right = (0, _style.default)({
        prop: "right"
      });
      exports.right = right;
      var bottom = (0, _style.default)({
        prop: "bottom"
      });
      exports.bottom = bottom;
      var left = (0, _style.default)({
        prop: "left"
      });
      exports.left = left;
      var _default = (0, _compose.default)(position, zIndex2, top, right, bottom, left);
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/shadows.js
  var require_shadows = __commonJS({
    "node_modules/@mui/system/shadows.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var boxShadow = (0, _style.default)({
        prop: "boxShadow",
        themeKey: "shadows"
      });
      var _default = boxShadow;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/sizing.js
  var require_sizing = __commonJS({
    "node_modules/@mui/system/sizing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.width = exports.sizeWidth = exports.sizeHeight = exports.minWidth = exports.minHeight = exports.maxWidth = exports.maxHeight = exports.height = exports.default = exports.boxSizing = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _breakpoints = require_breakpoints();
      function transform(value) {
        return value <= 1 && value !== 0 ? `${value * 100}%` : value;
      }
      var width = (0, _style.default)({
        prop: "width",
        transform
      });
      exports.width = width;
      var maxWidth = (props2) => {
        if (props2.maxWidth !== void 0 && props2.maxWidth !== null) {
          const styleFromPropValue = (propValue) => {
            var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
            const breakpoint = ((_props$theme = props2.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || _breakpoints.values[propValue];
            return {
              maxWidth: breakpoint || transform(propValue)
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props2, props2.maxWidth, styleFromPropValue);
        }
        return null;
      };
      exports.maxWidth = maxWidth;
      maxWidth.filterProps = ["maxWidth"];
      var minWidth = (0, _style.default)({
        prop: "minWidth",
        transform
      });
      exports.minWidth = minWidth;
      var height = (0, _style.default)({
        prop: "height",
        transform
      });
      exports.height = height;
      var maxHeight = (0, _style.default)({
        prop: "maxHeight",
        transform
      });
      exports.maxHeight = maxHeight;
      var minHeight = (0, _style.default)({
        prop: "minHeight",
        transform
      });
      exports.minHeight = minHeight;
      var sizeWidth = (0, _style.default)({
        prop: "size",
        cssProperty: "width",
        transform
      });
      exports.sizeWidth = sizeWidth;
      var sizeHeight = (0, _style.default)({
        prop: "size",
        cssProperty: "height",
        transform
      });
      exports.sizeHeight = sizeHeight;
      var boxSizing = (0, _style.default)({
        prop: "boxSizing"
      });
      exports.boxSizing = boxSizing;
      var sizing = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
      var _default = sizing;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/typography.js
  var require_typography = __commonJS({
    "node_modules/@mui/system/typography.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.typographyVariant = exports.textTransform = exports.textAlign = exports.lineHeight = exports.letterSpacing = exports.fontWeight = exports.fontStyle = exports.fontSize = exports.fontFamily = exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var fontFamily = (0, _style.default)({
        prop: "fontFamily",
        themeKey: "typography"
      });
      exports.fontFamily = fontFamily;
      var fontSize = (0, _style.default)({
        prop: "fontSize",
        themeKey: "typography"
      });
      exports.fontSize = fontSize;
      var fontStyle = (0, _style.default)({
        prop: "fontStyle",
        themeKey: "typography"
      });
      exports.fontStyle = fontStyle;
      var fontWeight = (0, _style.default)({
        prop: "fontWeight",
        themeKey: "typography"
      });
      exports.fontWeight = fontWeight;
      var letterSpacing = (0, _style.default)({
        prop: "letterSpacing"
      });
      exports.letterSpacing = letterSpacing;
      var textTransform = (0, _style.default)({
        prop: "textTransform"
      });
      exports.textTransform = textTransform;
      var lineHeight = (0, _style.default)({
        prop: "lineHeight"
      });
      exports.lineHeight = lineHeight;
      var textAlign = (0, _style.default)({
        prop: "textAlign"
      });
      exports.textAlign = textAlign;
      var typographyVariant = (0, _style.default)({
        prop: "typography",
        cssProperty: false,
        themeKey: "typography"
      });
      exports.typographyVariant = typographyVariant;
      var typography = (0, _compose.default)(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
      var _default = typography;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/getThemeValue.js
  var require_getThemeValue = __commonJS({
    "node_modules/@mui/system/getThemeValue.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.styleFunctionMapping = exports.propToStyleFunction = exports.default = void 0;
      var _borders = _interopRequireDefault(require_borders());
      var _display = _interopRequireDefault(require_display());
      var _flexbox = _interopRequireDefault(require_flexbox());
      var _cssGrid = _interopRequireDefault(require_cssGrid());
      var _positions = _interopRequireDefault(require_positions());
      var _palette = _interopRequireDefault(require_palette());
      var _shadows = _interopRequireDefault(require_shadows());
      var _sizing = _interopRequireDefault(require_sizing());
      var _spacing = _interopRequireDefault(require_spacing());
      var _typography = _interopRequireDefault(require_typography());
      var filterPropsMapping = {
        borders: _borders.default.filterProps,
        display: _display.default.filterProps,
        flexbox: _flexbox.default.filterProps,
        grid: _cssGrid.default.filterProps,
        positions: _positions.default.filterProps,
        palette: _palette.default.filterProps,
        shadows: _shadows.default.filterProps,
        sizing: _sizing.default.filterProps,
        spacing: _spacing.default.filterProps,
        typography: _typography.default.filterProps
      };
      var styleFunctionMapping = {
        borders: _borders.default,
        display: _display.default,
        flexbox: _flexbox.default,
        grid: _cssGrid.default,
        positions: _positions.default,
        palette: _palette.default,
        shadows: _shadows.default,
        sizing: _sizing.default,
        spacing: _spacing.default,
        typography: _typography.default
      };
      exports.styleFunctionMapping = styleFunctionMapping;
      var propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
        filterPropsMapping[styleFnName].forEach((propName) => {
          acc[propName] = styleFunctionMapping[styleFnName];
        });
        return acc;
      }, {});
      exports.propToStyleFunction = propToStyleFunction;
      function getThemeValue(prop, value, theme2) {
        const inputProps = {
          [prop]: value,
          theme: theme2
        };
        const styleFunction = propToStyleFunction[prop];
        return styleFunction ? styleFunction(inputProps) : {
          [prop]: value
        };
      }
      var _default = getThemeValue;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
  var require_styleFunctionSx = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx;
      var _merge = _interopRequireDefault(require_merge());
      var _getThemeValue = require_getThemeValue();
      var _breakpoints = require_breakpoints();
      function objectsHaveSameKeys(...objects) {
        const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
        const union = new Set(allKeys);
        return objects.every((object) => union.size === Object.keys(object).length);
      }
      function callIfFn(maybeFn, arg) {
        return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
      }
      function unstable_createStyleFunctionSx(styleFunctionMapping = _getThemeValue.styleFunctionMapping) {
        const propToStyleFunction = Object.keys(styleFunctionMapping).reduce((acc, styleFnName) => {
          styleFunctionMapping[styleFnName].filterProps.forEach((propName) => {
            acc[propName] = styleFunctionMapping[styleFnName];
          });
          return acc;
        }, {});
        function getThemeValue(prop, value, theme2) {
          const inputProps = {
            [prop]: value,
            theme: theme2
          };
          const styleFunction = propToStyleFunction[prop];
          return styleFunction ? styleFunction(inputProps) : {
            [prop]: value
          };
        }
        function styleFunctionSx2(props2) {
          const {
            sx,
            theme: theme2 = {}
          } = props2 || {};
          if (!sx) {
            return null;
          }
          function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === "function") {
              sxObject = sxInput(theme2);
            } else if (typeof sxInput !== "object") {
              return sxInput;
            }
            if (!sxObject) {
              return null;
            }
            const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme2.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css2 = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey) => {
              const value = callIfFn(sxObject[styleKey], theme2);
              if (value !== null && value !== void 0) {
                if (typeof value === "object") {
                  if (propToStyleFunction[styleKey]) {
                    css2 = (0, _merge.default)(css2, getThemeValue(styleKey, value, theme2));
                  } else {
                    const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                      theme: theme2
                    }, value, (x) => ({
                      [styleKey]: x
                    }));
                    if (objectsHaveSameKeys(breakpointsValues, value)) {
                      css2[styleKey] = styleFunctionSx2({
                        sx: value,
                        theme: theme2
                      });
                    } else {
                      css2 = (0, _merge.default)(css2, breakpointsValues);
                    }
                  }
                } else {
                  css2 = (0, _merge.default)(css2, getThemeValue(styleKey, value, theme2));
                }
              }
            });
            return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css2);
          }
          return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
        }
        return styleFunctionSx2;
      }
      var styleFunctionSx = unstable_createStyleFunctionSx();
      styleFunctionSx.filterProps = ["sx"];
      var _default = styleFunctionSx;
      exports.default = _default;
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports, module) {
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      module.exports = _objectWithoutPropertiesLoose2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/extendSxProp.js
  var require_extendSxProp = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = extendSxProp4;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _getThemeValue = require_getThemeValue();
      var _excluded32 = ["sx"];
      var splitProps = (props2) => {
        const result = {
          systemProps: {},
          otherProps: {}
        };
        Object.keys(props2).forEach((prop) => {
          if (_getThemeValue.propToStyleFunction[prop]) {
            result.systemProps[prop] = props2[prop];
          } else {
            result.otherProps[prop] = props2[prop];
          }
        });
        return result;
      };
      function extendSxProp4(props2) {
        const {
          sx: inSx
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          systemProps,
          otherProps
        } = splitProps(other);
        let finalSx;
        if (Array.isArray(inSx)) {
          finalSx = [systemProps, ...inSx];
        } else if (typeof inSx === "function") {
          finalSx = (...args) => {
            const result = inSx(...args);
            if (!(0, _utils.isPlainObject)(result)) {
              return systemProps;
            }
            return (0, _extends2.default)({}, systemProps, result);
          };
        } else {
          finalSx = (0, _extends2.default)({}, systemProps, inSx);
        }
        return (0, _extends2.default)({}, otherProps, {
          sx: finalSx
        });
      }
    }
  });

  // node_modules/@mui/system/styleFunctionSx/index.js
  var require_styleFunctionSx2 = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "extendSxProp", {
        enumerable: true,
        get: function() {
          return _extendSxProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
      var _extendSxProp = _interopRequireDefault(require_extendSxProp());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/sx/sx.js
  var require_sx = __commonJS({
    "node_modules/@mui/system/sx/sx.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
      function sx(styles3) {
        return ({
          theme: theme2
        }) => (0, _styleFunctionSx.default)({
          sx: styles3,
          theme: theme2
        });
      }
      var _default = sx;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/sx/index.js
  var require_sx2 = __commonJS({
    "node_modules/@mui/system/sx/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _sx.default;
        }
      });
      var _sx = _interopRequireDefault(require_sx());
    }
  });

  // node_modules/clsx/dist/clsx.js
  var require_clsx = __commonJS({
    "node_modules/clsx/dist/clsx.js"(exports, module) {
      function e(r2) {
        var o, t, f = "";
        if ("string" == typeof r2 || "number" == typeof r2)
          f += r2;
        else if ("object" == typeof r2)
          if (Array.isArray(r2))
            for (o = 0; o < r2.length; o++)
              r2[o] && (t = e(r2[o])) && (f && (f += " "), f += t);
          else
            for (o in r2)
              r2[o] && (f && (f += " "), f += o);
        return f;
      }
      function r() {
        for (var r2, o, t = 0, f = ""; t < arguments.length; )
          (r2 = arguments[t++]) && (o = e(r2)) && (f && (f += " "), f += o);
        return f;
      }
      module.exports = r, module.exports.clsx = r;
    }
  });

  // node_modules/@mui/system/createTheme/createBreakpoints.js
  var require_createBreakpoints = __commonJS({
    "node_modules/@mui/system/createTheme/createBreakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.breakpointKeys = void 0;
      exports.default = createBreakpoints;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var _excluded32 = ["values", "unit", "step"];
      var breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
      exports.breakpointKeys = breakpointKeys;
      var sortBreakpointsValues = (values2) => {
        const breakpointsAsArray = Object.keys(values2).map((key) => ({
          key,
          val: values2[key]
        })) || [];
        breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
        return breakpointsAsArray.reduce((acc, obj) => {
          return (0, _extends2.default)({}, acc, {
            [obj.key]: obj.val
          });
        }, {});
      };
      function createBreakpoints(breakpoints) {
        const {
          values: values2 = {
            xs: 0,
            sm: 600,
            md: 900,
            lg: 1200,
            xl: 1536
          },
          unit = "px",
          step = 5
        } = breakpoints, other = (0, _objectWithoutPropertiesLoose2.default)(breakpoints, _excluded32);
        const sortedValues = sortBreakpointsValues(values2);
        const keys2 = Object.keys(sortedValues);
        function up(key) {
          const value = typeof values2[key] === "number" ? values2[key] : key;
          return `@media (min-width:${value}${unit})`;
        }
        function down(key) {
          const value = typeof values2[key] === "number" ? values2[key] : key;
          return `@media (max-width:${value - step / 100}${unit})`;
        }
        function between(start, end) {
          const endIndex = keys2.indexOf(end);
          return `@media (min-width:${typeof values2[start] === "number" ? values2[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys2[endIndex]] === "number" ? values2[keys2[endIndex]] : end) - step / 100}${unit})`;
        }
        function only(key) {
          if (keys2.indexOf(key) + 1 < keys2.length) {
            return between(key, keys2[keys2.indexOf(key) + 1]);
          }
          return up(key);
        }
        function not(key) {
          const keyIndex = keys2.indexOf(key);
          if (keyIndex === 0) {
            return up(keys2[1]);
          }
          if (keyIndex === keys2.length - 1) {
            return down(keys2[keyIndex]);
          }
          return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
        }
        return (0, _extends2.default)({
          keys: keys2,
          values: sortedValues,
          up,
          down,
          between,
          only,
          not,
          unit
        }, other);
      }
    }
  });

  // node_modules/@mui/system/createTheme/shape.js
  var require_shape = __commonJS({
    "node_modules/@mui/system/createTheme/shape.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shape = {
        borderRadius: 4
      };
      var _default = shape;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createTheme/createSpacing.js
  var require_createSpacing = __commonJS({
    "node_modules/@mui/system/createTheme/createSpacing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSpacing;
      var _spacing = require_spacing();
      function createSpacing(spacingInput = 8) {
        if (spacingInput.mui) {
          return spacingInput;
        }
        const transform = (0, _spacing.createUnarySpacing)({
          spacing: spacingInput
        });
        const spacing = (...argsInput) => {
          if (true) {
            if (!(argsInput.length <= 4)) {
              console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
            }
          }
          const args = argsInput.length === 0 ? [1] : argsInput;
          return args.map((argument) => {
            const output = transform(argument);
            return typeof output === "number" ? `${output}px` : output;
          }).join(" ");
        };
        spacing.mui = true;
        return spacing;
      }
    }
  });

  // node_modules/@mui/system/createTheme/createTheme.js
  var require_createTheme = __commonJS({
    "node_modules/@mui/system/createTheme/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _shape = _interopRequireDefault(require_shape());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _excluded32 = ["breakpoints", "palette", "spacing", "shape"];
      function createTheme2(options = {}, ...args) {
        const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded32);
        const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
        const spacing = (0, _createSpacing.default)(spacingInput);
        let muiTheme = (0, _utils.deepmerge)({
          breakpoints,
          direction: "ltr",
          components: {},
          palette: (0, _extends2.default)({
            mode: "light"
          }, paletteInput),
          spacing,
          shape: (0, _extends2.default)({}, _shape.default, shapeInput)
        }, other);
        muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
        return muiTheme;
      }
      var _default = createTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createTheme/index.js
  var require_createTheme2 = __commonJS({
    "node_modules/@mui/system/createTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      var _createTheme = _interopRequireDefault(require_createTheme());
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/ThemeContext.js
  var require_ThemeContext = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/ThemeContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var ThemeContext = /* @__PURE__ */ React59.createContext(null);
      if (true) {
        ThemeContext.displayName = "ThemeContext";
      }
      var _default = ThemeContext;
      exports.default = _default;
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/useTheme.js
  var require_useTheme = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/useTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useTheme2;
      var React59 = _interopRequireWildcard(require_react());
      var _ThemeContext = _interopRequireDefault(require_ThemeContext());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useTheme2() {
        const theme2 = React59.useContext(_ThemeContext.default);
        if (true) {
          React59.useDebugValue(theme2);
        }
        return theme2;
      }
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/index.js
  var require_useTheme2 = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      var _useTheme = _interopRequireDefault(require_useTheme());
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/nested.js
  var require_nested = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/nested.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var _default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
      exports.default = _default;
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/ThemeProvider.js
  var require_ThemeProvider = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/ThemeProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _ThemeContext = _interopRequireDefault(require_ThemeContext());
      var _useTheme = _interopRequireDefault(require_useTheme2());
      var _nested = _interopRequireDefault(require_nested());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function mergeOuterLocalTheme(outerTheme, localTheme) {
        if (typeof localTheme === "function") {
          const mergedTheme = localTheme(outerTheme);
          if (true) {
            if (!mergedTheme) {
              console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
            }
          }
          return mergedTheme;
        }
        return (0, _extends2.default)({}, outerTheme, localTheme);
      }
      function ThemeProvider2(props2) {
        const {
          children,
          theme: localTheme
        } = props2;
        const outerTheme = (0, _useTheme.default)();
        if (true) {
          if (outerTheme === null && typeof localTheme === "function") {
            console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
          }
        }
        const theme2 = React59.useMemo(() => {
          const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
          if (output != null) {
            output[_nested.default] = outerTheme !== null;
          }
          return output;
        }, [localTheme, outerTheme]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeContext.default.Provider, {
          value: theme2,
          children
        });
      }
      true ? ThemeProvider2.propTypes = {
        children: _propTypes.default.node,
        theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired
      } : void 0;
      if (true) {
        true ? ThemeProvider2.propTypes = (0, _utils.exactProp)(ThemeProvider2.propTypes) : void 0;
      }
      var _default = ThemeProvider2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/index.js
  var require_ThemeProvider2 = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "unstable_nested", {
        enumerable: true,
        get: function() {
          return _nested.default;
        }
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider());
      var _nested = _interopRequireDefault(require_nested());
    }
  });

  // node_modules/@mui/private-theming/node/index.js
  var require_node2 = __commonJS({
    "node_modules/@mui/private-theming/node/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        ThemeProvider: true,
        useTheme: true
      };
      Object.defineProperty(exports, "ThemeProvider", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "useTheme", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      var _ThemeProvider = _interopRequireWildcard(require_ThemeProvider2());
      Object.keys(_ThemeProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ThemeProvider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ThemeProvider[key];
          }
        });
      });
      var _useTheme = _interopRequireDefault(require_useTheme2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/useThemeWithoutDefault.js
  var require_useThemeWithoutDefault = __commonJS({
    "node_modules/@mui/system/useThemeWithoutDefault.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _privateTheming = require_node2();
      function isObjectEmpty(obj) {
        return Object.keys(obj).length === 0;
      }
      function useTheme2(defaultTheme3 = null) {
        const contextTheme = (0, _privateTheming.useTheme)();
        return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme3 : contextTheme;
      }
      var _default = useTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/useTheme.js
  var require_useTheme3 = __commonJS({
    "node_modules/@mui/system/useTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.systemDefaultTheme = exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var systemDefaultTheme = (0, _createTheme.default)();
      exports.systemDefaultTheme = systemDefaultTheme;
      function useTheme2(defaultTheme3 = systemDefaultTheme) {
        return (0, _useThemeWithoutDefault.default)(defaultTheme3);
      }
      var _default = useTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createBox.js
  var require_createBox = __commonJS({
    "node_modules/@mui/system/createBox.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createBox2;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _clsx = _interopRequireDefault(require_clsx());
      var _styledEngine = _interopRequireDefault(require_node());
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["className", "component"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function createBox2(options = {}) {
        const {
          defaultTheme: defaultTheme3,
          defaultClassName = "MuiBox-root",
          generateClassName,
          styleFunctionSx = _styleFunctionSx.default
        } = options;
        const BoxRoot = (0, _styledEngine.default)("div", {
          shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
        })(styleFunctionSx);
        const Box2 = /* @__PURE__ */ React59.forwardRef(function Box3(inProps, ref) {
          const theme2 = (0, _useTheme.default)(defaultTheme3);
          const _extendSxProp = (0, _styleFunctionSx.extendSxProp)(inProps), {
            className,
            component = "div"
          } = _extendSxProp, other = (0, _objectWithoutPropertiesLoose2.default)(_extendSxProp, _excluded32);
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(BoxRoot, (0, _extends2.default)({
            as: component,
            ref,
            className: (0, _clsx.default)(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
            theme: theme2
          }, other));
        });
        return Box2;
      }
    }
  });

  // node_modules/@mui/system/Box/Box.js
  var require_Box = __commonJS({
    "node_modules/@mui/system/Box/Box.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createBox = _interopRequireDefault(require_createBox());
      var Box2 = (0, _createBox.default)();
      true ? Box2.propTypes = {
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      var _default = Box2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Box/index.js
  var require_Box2 = __commonJS({
    "node_modules/@mui/system/Box/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Box.default;
        }
      });
      var _Box = _interopRequireDefault(require_Box());
    }
  });

  // node_modules/@mui/system/propsToClassKey.js
  var require_propsToClassKey = __commonJS({
    "node_modules/@mui/system/propsToClassKey.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = propsToClassKey;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _excluded32 = ["variant"];
      function isEmpty(string) {
        return string.length === 0;
      }
      function propsToClassKey(props2) {
        const {
          variant
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        let classKey = variant || "";
        Object.keys(other).sort().forEach((key) => {
          if (key === "color") {
            classKey += isEmpty(classKey) ? props2[key] : (0, _utils.unstable_capitalize)(props2[key]);
          } else {
            classKey += `${isEmpty(classKey) ? key : (0, _utils.unstable_capitalize)(key)}${(0, _utils.unstable_capitalize)(props2[key].toString())}`;
          }
        });
        return classKey;
      }
    }
  });

  // node_modules/@mui/system/createStyled.js
  var require_createStyled = __commonJS({
    "node_modules/@mui/system/createStyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStyled2;
      exports.shouldForwardProp = shouldForwardProp2;
      exports.systemDefaultTheme = void 0;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var _styledEngine = _interopRequireWildcard(require_node());
      var _utils = require_utils();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _propsToClassKey = _interopRequireDefault(require_propsToClassKey());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
      var _excluded32 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
      var _excluded210 = ["theme"];
      var _excluded33 = ["theme"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function isEmpty(obj) {
        return Object.keys(obj).length === 0;
      }
      function isStringTag(tag) {
        return typeof tag === "string" && tag.charCodeAt(0) > 96;
      }
      var getStyleOverrides = (name, theme2) => {
        if (theme2.components && theme2.components[name] && theme2.components[name].styleOverrides) {
          return theme2.components[name].styleOverrides;
        }
        return null;
      };
      var getVariantStyles = (name, theme2) => {
        let variants = [];
        if (theme2 && theme2.components && theme2.components[name] && theme2.components[name].variants) {
          variants = theme2.components[name].variants;
        }
        const variantsStyles = {};
        variants.forEach((definition) => {
          const key = (0, _propsToClassKey.default)(definition.props);
          variantsStyles[key] = definition.style;
        });
        return variantsStyles;
      };
      var variantsResolver = (props2, styles3, theme2, name) => {
        var _theme$components, _theme$components$nam;
        const {
          ownerState = {}
        } = props2;
        const variantsStyles = [];
        const themeVariants = theme2 == null ? void 0 : (_theme$components = theme2.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
        if (themeVariants) {
          themeVariants.forEach((themeVariant) => {
            let isMatch = true;
            Object.keys(themeVariant.props).forEach((key) => {
              if (ownerState[key] !== themeVariant.props[key] && props2[key] !== themeVariant.props[key]) {
                isMatch = false;
              }
            });
            if (isMatch) {
              variantsStyles.push(styles3[(0, _propsToClassKey.default)(themeVariant.props)]);
            }
          });
        }
        return variantsStyles;
      };
      function shouldForwardProp2(prop) {
        return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
      }
      var systemDefaultTheme = (0, _createTheme.default)();
      exports.systemDefaultTheme = systemDefaultTheme;
      var lowercaseFirstLetter = (string) => {
        return string.charAt(0).toLowerCase() + string.slice(1);
      };
      function createStyled2(input = {}) {
        const {
          defaultTheme: defaultTheme3 = systemDefaultTheme,
          rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp2,
          slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp2,
          styleFunctionSx = _styleFunctionSx.default
        } = input;
        const systemSx = (props2) => {
          const theme2 = isEmpty(props2.theme) ? defaultTheme3 : props2.theme;
          return styleFunctionSx((0, _extends2.default)({}, props2, {
            theme: theme2
          }));
        };
        systemSx.__mui_systemSx = true;
        return (tag, inputOptions2 = {}) => {
          (0, _styledEngine.internal_processStyles)(tag, (styles3) => styles3.filter((style2) => !(style2 != null && style2.__mui_systemSx)));
          const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            overridesResolver: overridesResolver4
          } = inputOptions2, options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions2, _excluded32);
          const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : componentSlot && componentSlot !== "Root" || false;
          const skipSx = inputSkipSx || false;
          let label;
          if (true) {
            if (componentName) {
              label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
            }
          }
          let shouldForwardPropOption = shouldForwardProp2;
          if (componentSlot === "Root") {
            shouldForwardPropOption = rootShouldForwardProp2;
          } else if (componentSlot) {
            shouldForwardPropOption = slotShouldForwardProp2;
          } else if (isStringTag(tag)) {
            shouldForwardPropOption = void 0;
          }
          const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
            shouldForwardProp: shouldForwardPropOption,
            label
          }, options));
          const muiStyledResolver = (styleArg, ...expressions) => {
            const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
              return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (_ref) => {
                let {
                  theme: themeInput
                } = _ref, other = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded210);
                return stylesArg((0, _extends2.default)({
                  theme: isEmpty(themeInput) ? defaultTheme3 : themeInput
                }, other));
              } : stylesArg;
            }) : [];
            let transformedStyleArg = styleArg;
            if (componentName && overridesResolver4) {
              expressionsWithDefaultTheme.push((props2) => {
                const theme2 = isEmpty(props2.theme) ? defaultTheme3 : props2.theme;
                const styleOverrides = getStyleOverrides(componentName, theme2);
                if (styleOverrides) {
                  const resolvedStyleOverrides = {};
                  Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                    resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle((0, _extends2.default)({}, props2, {
                      theme: theme2
                    })) : slotStyle;
                  });
                  return overridesResolver4(props2, resolvedStyleOverrides);
                }
                return null;
              });
            }
            if (componentName && !skipVariantsResolver) {
              expressionsWithDefaultTheme.push((props2) => {
                const theme2 = isEmpty(props2.theme) ? defaultTheme3 : props2.theme;
                return variantsResolver(props2, getVariantStyles(componentName, theme2), theme2, componentName);
              });
            }
            if (!skipSx) {
              expressionsWithDefaultTheme.push(systemSx);
            }
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
              const placeholders = new Array(numOfCustomFnsApplied).fill("");
              transformedStyleArg = [...styleArg, ...placeholders];
              transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
            } else if (typeof styleArg === "function" && styleArg.__emotion_real !== styleArg) {
              transformedStyleArg = (_ref2) => {
                let {
                  theme: themeInput
                } = _ref2, other = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded33);
                return styleArg((0, _extends2.default)({
                  theme: isEmpty(themeInput) ? defaultTheme3 : themeInput
                }, other));
              };
            }
            const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            if (true) {
              let displayName;
              if (componentName) {
                displayName = `${componentName}${componentSlot || ""}`;
              }
              if (displayName === void 0) {
                displayName = `Styled(${(0, _utils.getDisplayName)(tag)})`;
              }
              Component.displayName = displayName;
            }
            return Component;
          };
          if (defaultStyledResolver.withConfig) {
            muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
          }
          return muiStyledResolver;
        };
      }
    }
  });

  // node_modules/@mui/system/styled.js
  var require_styled = __commonJS({
    "node_modules/@mui/system/styled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createStyled = _interopRequireDefault(require_createStyled());
      var styled2 = (0, _createStyled.default)();
      var _default = styled2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/useThemeProps/getThemeProps.js
  var require_getThemeProps = __commonJS({
    "node_modules/@mui/system/useThemeProps/getThemeProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getThemeProps;
      var _utils = require_utils();
      function getThemeProps(params) {
        const {
          theme: theme2,
          name,
          props: props2
        } = params;
        if (!theme2 || !theme2.components || !theme2.components[name] || !theme2.components[name].defaultProps) {
          return props2;
        }
        return (0, _utils.internal_resolveProps)(theme2.components[name].defaultProps, props2);
      }
    }
  });

  // node_modules/@mui/system/useThemeProps/useThemeProps.js
  var require_useThemeProps = __commonJS({
    "node_modules/@mui/system/useThemeProps/useThemeProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useThemeProps2;
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      function useThemeProps2({
        props: props2,
        name,
        defaultTheme: defaultTheme3
      }) {
        const theme2 = (0, _useTheme.default)(defaultTheme3);
        const mergedProps = (0, _getThemeProps.default)({
          theme: theme2,
          name,
          props: props2
        });
        return mergedProps;
      }
    }
  });

  // node_modules/@mui/system/useThemeProps/index.js
  var require_useThemeProps2 = __commonJS({
    "node_modules/@mui/system/useThemeProps/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useThemeProps.default;
        }
      });
      Object.defineProperty(exports, "getThemeProps", {
        enumerable: true,
        get: function() {
          return _getThemeProps.default;
        }
      });
      var _useThemeProps = _interopRequireDefault(require_useThemeProps());
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
    }
  });

  // node_modules/@mui/system/colorManipulator.js
  var require_colorManipulator = __commonJS({
    "node_modules/@mui/system/colorManipulator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.alpha = alpha8;
      exports.colorChannel = void 0;
      exports.darken = darken4;
      exports.decomposeColor = decomposeColor;
      exports.emphasize = emphasize;
      exports.getContrastRatio = getContrastRatio2;
      exports.getLuminance = getLuminance;
      exports.hexToRgb = hexToRgb;
      exports.hslToRgb = hslToRgb;
      exports.lighten = lighten4;
      exports.recomposeColor = recomposeColor;
      exports.rgbToHex = rgbToHex;
      var _utils = require_utils();
      function clamp(value, min = 0, max = 1) {
        if (true) {
          if (value < min || value > max) {
            console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
          }
        }
        return Math.min(Math.max(min, value), max);
      }
      function hexToRgb(color) {
        color = color.slice(1);
        const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, "g");
        let colors = color.match(re);
        if (colors && colors[0].length === 1) {
          colors = colors.map((n) => n + n);
        }
        return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
          return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
        }).join(", ")})` : "";
      }
      function intToHex(int) {
        const hex = int.toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }
      function decomposeColor(color) {
        if (color.type) {
          return color;
        }
        if (color.charAt(0) === "#") {
          return decomposeColor(hexToRgb(color));
        }
        const marker = color.indexOf("(");
        const type2 = color.substring(0, marker);
        if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type2) === -1) {
          throw new Error(true ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));
        }
        let values2 = color.substring(marker + 1, color.length - 1);
        let colorSpace;
        if (type2 === "color") {
          values2 = values2.split(" ");
          colorSpace = values2.shift();
          if (values2.length === 4 && values2[3].charAt(0) === "/") {
            values2[3] = values2[3].slice(1);
          }
          if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
            throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));
          }
        } else {
          values2 = values2.split(",");
        }
        values2 = values2.map((value) => parseFloat(value));
        return {
          type: type2,
          values: values2,
          colorSpace
        };
      }
      var colorChannel = (color) => {
        const decomposedColor = decomposeColor(color);
        return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
      };
      exports.colorChannel = colorChannel;
      function recomposeColor(color) {
        const {
          type: type2,
          colorSpace
        } = color;
        let {
          values: values2
        } = color;
        if (type2.indexOf("rgb") !== -1) {
          values2 = values2.map((n, i) => i < 3 ? parseInt(n, 10) : n);
        } else if (type2.indexOf("hsl") !== -1) {
          values2[1] = `${values2[1]}%`;
          values2[2] = `${values2[2]}%`;
        }
        if (type2.indexOf("color") !== -1) {
          values2 = `${colorSpace} ${values2.join(" ")}`;
        } else {
          values2 = `${values2.join(", ")}`;
        }
        return `${type2}(${values2})`;
      }
      function rgbToHex(color) {
        if (color.indexOf("#") === 0) {
          return color;
        }
        const {
          values: values2
        } = decomposeColor(color);
        return `#${values2.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
      }
      function hslToRgb(color) {
        color = decomposeColor(color);
        const {
          values: values2
        } = color;
        const h = values2[0];
        const s = values2[1] / 100;
        const l = values2[2] / 100;
        const a = s * Math.min(l, 1 - l);
        const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        let type2 = "rgb";
        const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        if (color.type === "hsla") {
          type2 += "a";
          rgb.push(values2[3]);
        }
        return recomposeColor({
          type: type2,
          values: rgb
        });
      }
      function getLuminance(color) {
        color = decomposeColor(color);
        let rgb = color.type === "hsl" || color.type === "hsla" ? decomposeColor(hslToRgb(color)).values : color.values;
        rgb = rgb.map((val) => {
          if (color.type !== "color") {
            val /= 255;
          }
          return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
        });
        return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
      }
      function getContrastRatio2(foreground, background) {
        const lumA = getLuminance(foreground);
        const lumB = getLuminance(background);
        return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
      }
      function alpha8(color, value) {
        color = decomposeColor(color);
        value = clamp(value);
        if (color.type === "rgb" || color.type === "hsl") {
          color.type += "a";
        }
        if (color.type === "color") {
          color.values[3] = `/${value}`;
        } else {
          color.values[3] = value;
        }
        return recomposeColor(color);
      }
      function darken4(color, coefficient) {
        color = decomposeColor(color);
        coefficient = clamp(coefficient);
        if (color.type.indexOf("hsl") !== -1) {
          color.values[2] *= 1 - coefficient;
        } else if (color.type.indexOf("rgb") !== -1 || color.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] *= 1 - coefficient;
          }
        }
        return recomposeColor(color);
      }
      function lighten4(color, coefficient) {
        color = decomposeColor(color);
        coefficient = clamp(coefficient);
        if (color.type.indexOf("hsl") !== -1) {
          color.values[2] += (100 - color.values[2]) * coefficient;
        } else if (color.type.indexOf("rgb") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] += (255 - color.values[i]) * coefficient;
          }
        } else if (color.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] += (1 - color.values[i]) * coefficient;
          }
        }
        return recomposeColor(color);
      }
      function emphasize(color, coefficient = 0.15) {
        return getLuminance(color) > 0.5 ? darken4(color, coefficient) : lighten4(color, coefficient);
      }
    }
  });

  // node_modules/@mui/system/ThemeProvider/ThemeProvider.js
  var require_ThemeProvider3 = __commonJS({
    "node_modules/@mui/system/ThemeProvider/ThemeProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _privateTheming = require_node2();
      var _utils = require_utils();
      var _styledEngine = require_node();
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function InnerThemeProvider(props2) {
        const theme2 = (0, _useTheme.default)();
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.ThemeContext.Provider, {
          value: typeof theme2 === "object" ? theme2 : {},
          children: props2.children
        });
      }
      true ? InnerThemeProvider.propTypes = {
        children: _propTypes.default.node
      } : void 0;
      function ThemeProvider2(props2) {
        const {
          children,
          theme: localTheme
        } = props2;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_privateTheming.ThemeProvider, {
          theme: localTheme,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(InnerThemeProvider, {
            children
          })
        });
      }
      true ? ThemeProvider2.propTypes = {
        children: _propTypes.default.node,
        theme: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]).isRequired
      } : void 0;
      if (true) {
        true ? ThemeProvider2.propTypes = (0, _utils.exactProp)(ThemeProvider2.propTypes) : void 0;
      }
      var _default = ThemeProvider2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/ThemeProvider/index.js
  var require_ThemeProvider4 = __commonJS({
    "node_modules/@mui/system/ThemeProvider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider3());
    }
  });

  // node_modules/@mui/system/cssVars/cssVarsParser.js
  var require_cssVarsParser = __commonJS({
    "node_modules/@mui/system/cssVars/cssVarsParser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.assignNestedKeys = void 0;
      exports.default = cssVarsParser;
      exports.walkObjectDeep = void 0;
      var assignNestedKeys = (obj, keys2, value, arrayKeys = []) => {
        let temp = obj;
        keys2.forEach((k, index) => {
          if (index === keys2.length - 1) {
            if (Array.isArray(temp)) {
              temp[Number(k)] = value;
            } else if (temp && typeof temp === "object") {
              temp[k] = value;
            }
          } else if (temp && typeof temp === "object") {
            if (!temp[k]) {
              temp[k] = arrayKeys.includes(k) ? [] : {};
            }
            temp = temp[k];
          }
        });
      };
      exports.assignNestedKeys = assignNestedKeys;
      var walkObjectDeep = (obj, callback, shouldSkipPaths) => {
        function recurse(object, parentKeys = [], arrayKeys = []) {
          Object.entries(object).forEach(([key, value]) => {
            if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
              if (value !== void 0 && value !== null) {
                if (typeof value === "object" && Object.keys(value).length > 0) {
                  recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
                } else {
                  callback([...parentKeys, key], value, arrayKeys);
                }
              }
            }
          });
        }
        recurse(obj);
      };
      exports.walkObjectDeep = walkObjectDeep;
      var getCssValue = (keys2, value) => {
        if (typeof value === "number") {
          if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys2.includes(prop))) {
            return value;
          }
          const lastKey = keys2[keys2.length - 1];
          if (lastKey.toLowerCase().indexOf("opacity") >= 0) {
            return value;
          }
          return `${value}px`;
        }
        return value;
      };
      function cssVarsParser(theme2, options) {
        const {
          prefix,
          shouldSkipGeneratingVar
        } = options || {};
        const css2 = {};
        const vars = {};
        const parsedTheme = {};
        walkObjectDeep(
          theme2,
          (keys2, value, arrayKeys) => {
            if (typeof value === "string" || typeof value === "number") {
              if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys2, value)) {
                const cssVar = `--${prefix ? `${prefix}-` : ""}${keys2.join("-")}`;
                Object.assign(css2, {
                  [cssVar]: getCssValue(keys2, value)
                });
                assignNestedKeys(vars, keys2, `var(${cssVar})`, arrayKeys);
              }
            }
            assignNestedKeys(parsedTheme, keys2, value, arrayKeys);
          },
          (keys2) => keys2[0] === "vars"
        );
        return {
          css: css2,
          vars,
          parsedTheme
        };
      }
    }
  });

  // node_modules/@mui/system/cssVars/getInitColorSchemeScript.js
  var require_getInitColorSchemeScript = __commonJS({
    "node_modules/@mui/system/cssVars/getInitColorSchemeScript.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DEFAULT_MODE_STORAGE_KEY = exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports.DEFAULT_ATTRIBUTE = void 0;
      exports.default = getInitColorSchemeScript;
      var React59 = _interopRequireWildcard(require_react());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var DEFAULT_MODE_STORAGE_KEY = "mode";
      exports.DEFAULT_MODE_STORAGE_KEY = DEFAULT_MODE_STORAGE_KEY;
      var DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
      exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = DEFAULT_COLOR_SCHEME_STORAGE_KEY;
      var DEFAULT_ATTRIBUTE = "data-color-scheme";
      exports.DEFAULT_ATTRIBUTE = DEFAULT_ATTRIBUTE;
      function getInitColorSchemeScript(options) {
        const {
          defaultMode = "light",
          defaultLightColorScheme = "light",
          defaultDarkColorScheme = "dark",
          modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          attribute = DEFAULT_ATTRIBUTE,
          colorSchemeNode = "document.documentElement"
        } = options || {};
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)("script", {
          dangerouslySetInnerHTML: {
            __html: `(function() { try {
        var mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
        var cssColorScheme = mode;
        var colorScheme = '';
        if (mode === 'system') {
          // handle system mode
          var mql = window.matchMedia('(prefers-color-scheme: dark)');
          if (mql.matches) {
            cssColorScheme = 'dark';
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
          } else {
            cssColorScheme = 'light';
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
          }
        }
        if (mode === 'light') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
        }
        if (mode === 'dark') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
        }
        if (colorScheme) {
          ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);
        }
      } catch (e) {} })();`
          }
        });
      }
    }
  });

  // node_modules/@mui/system/cssVars/useCurrentColorScheme.js
  var require_useCurrentColorScheme = __commonJS({
    "node_modules/@mui/system/cssVars/useCurrentColorScheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useCurrentColorScheme;
      exports.getColorScheme = getColorScheme;
      exports.getSystemMode = getSystemMode;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _getInitColorSchemeScript = require_getInitColorSchemeScript();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getSystemMode(mode) {
        if (typeof window !== "undefined" && mode === "system") {
          const mql = window.matchMedia("(prefers-color-scheme: dark)");
          if (mql.matches) {
            return "dark";
          }
          return "light";
        }
        return void 0;
      }
      function processState(state, callback) {
        if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
          return callback("light");
        }
        if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
          return callback("dark");
        }
        return void 0;
      }
      function getColorScheme(state) {
        return processState(state, (mode) => {
          if (mode === "light") {
            return state.lightColorScheme;
          }
          if (mode === "dark") {
            return state.darkColorScheme;
          }
          return void 0;
        });
      }
      function initializeValue(key, defaultValue) {
        if (typeof window === "undefined") {
          return void 0;
        }
        let value;
        try {
          value = localStorage.getItem(key) || void 0;
          if (!value) {
            localStorage.setItem(key, defaultValue);
          }
        } catch (e) {
        }
        return value || defaultValue;
      }
      function useCurrentColorScheme(options) {
        const {
          defaultMode = "light",
          defaultLightColorScheme,
          defaultDarkColorScheme,
          supportedColorSchemes = [],
          modeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          storageWindow = typeof window === "undefined" ? void 0 : window
        } = options;
        const joinedColorSchemes = supportedColorSchemes.join(",");
        const [state, setState] = React59.useState(() => {
          const initialMode = initializeValue(modeStorageKey, defaultMode);
          const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
          const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
          return {
            mode: initialMode,
            systemMode: getSystemMode(initialMode),
            lightColorScheme,
            darkColorScheme
          };
        });
        const colorScheme = getColorScheme(state);
        const setMode = React59.useCallback((mode) => {
          setState((currentState) => {
            if (mode === currentState.mode) {
              return currentState;
            }
            const newMode = !mode ? defaultMode : mode;
            try {
              localStorage.setItem(modeStorageKey, newMode);
            } catch (e) {
            }
            return (0, _extends2.default)({}, currentState, {
              mode: newMode,
              systemMode: getSystemMode(newMode)
            });
          });
        }, [modeStorageKey, defaultMode]);
        const setColorScheme = React59.useCallback((value) => {
          if (!value) {
            setState((currentState) => {
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
                localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
              } catch (e) {
              }
              return (0, _extends2.default)({}, currentState, {
                lightColorScheme: defaultLightColorScheme,
                darkColorScheme: defaultDarkColorScheme
              });
            });
          } else if (typeof value === "string") {
            if (value && !joinedColorSchemes.includes(value)) {
              console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              setState((currentState) => {
                const newState = (0, _extends2.default)({}, currentState);
                processState(currentState, (mode) => {
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);
                  } catch (e) {
                  }
                  if (mode === "light") {
                    newState.lightColorScheme = value;
                  }
                  if (mode === "dark") {
                    newState.darkColorScheme = value;
                  }
                });
                return newState;
              });
            }
          } else {
            setState((currentState) => {
              const newState = (0, _extends2.default)({}, currentState);
              const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
              const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
              if (newLightColorScheme) {
                if (!joinedColorSchemes.includes(newLightColorScheme)) {
                  console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
                } else {
                  newState.lightColorScheme = newLightColorScheme;
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);
                  } catch (error) {
                  }
                }
              }
              if (newDarkColorScheme) {
                if (!joinedColorSchemes.includes(newDarkColorScheme)) {
                  console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
                } else {
                  newState.darkColorScheme = newDarkColorScheme;
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);
                  } catch (error) {
                  }
                }
              }
              return newState;
            });
          }
        }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);
        const handleMediaQuery = React59.useCallback((e) => {
          if (state.mode === "system") {
            setState((currentState) => (0, _extends2.default)({}, currentState, {
              systemMode: e != null && e.matches ? "dark" : "light"
            }));
          }
        }, [state.mode]);
        const mediaListener = React59.useRef(handleMediaQuery);
        mediaListener.current = handleMediaQuery;
        React59.useEffect(() => {
          const handler = (...args) => mediaListener.current(...args);
          const media = window.matchMedia("(prefers-color-scheme: dark)");
          media.addListener(handler);
          handler(media);
          return () => media.removeListener(handler);
        }, []);
        React59.useEffect(() => {
          const handleStorage = (event) => {
            const value = event.newValue;
            if (typeof event.key === "string" && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
              if (event.key.endsWith("light")) {
                setColorScheme({
                  light: value
                });
              }
              if (event.key.endsWith("dark")) {
                setColorScheme({
                  dark: value
                });
              }
            }
            if (event.key === modeStorageKey && (!value || ["light", "dark", "system"].includes(value))) {
              setMode(value || defaultMode);
            }
          };
          if (storageWindow) {
            storageWindow.addEventListener("storage", handleStorage);
            return () => storageWindow.removeEventListener("storage", handleStorage);
          }
          return void 0;
        }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
        return (0, _extends2.default)({}, state, {
          colorScheme,
          setMode,
          setColorScheme
        });
      }
    }
  });

  // node_modules/@mui/system/cssVars/createCssVarsProvider.js
  var require_createCssVarsProvider = __commonJS({
    "node_modules/@mui/system/cssVars/createCssVarsProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DISABLE_CSS_TRANSITION = void 0;
      exports.default = createCssVarsProvider;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _styledEngine = require_node();
      var _cssVarsParser = _interopRequireDefault(require_cssVarsParser());
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider4());
      var _getInitColorSchemeScript = _interopRequireWildcard(require_getInitColorSchemeScript());
      var _useCurrentColorScheme = _interopRequireDefault(require_useCurrentColorScheme());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["colorSchemes", "components", "cssVarPrefix"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
      exports.DISABLE_CSS_TRANSITION = DISABLE_CSS_TRANSITION;
      function createCssVarsProvider(options) {
        const {
          theme: defaultTheme3 = {},
          attribute: defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE,
          modeStorageKey: defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey: defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          defaultMode: designSystemMode = "light",
          defaultColorScheme: designSystemColorScheme,
          disableTransitionOnChange: designSystemTransitionOnChange = false,
          shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,
          resolveTheme,
          excludeVariablesFromRoot
        } = options;
        if (!defaultTheme3.colorSchemes || typeof designSystemColorScheme === "string" && !defaultTheme3.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === "object" && !defaultTheme3.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === "object" && !defaultTheme3.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
          console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
        }
        const ColorSchemeContext = /* @__PURE__ */ React59.createContext(void 0);
        const useColorScheme = () => {
          const value = React59.useContext(ColorSchemeContext);
          if (!value) {
            throw new Error(true ? `MUI: \`useColorScheme\` must be called under <CssVarsProvider />` : (0, _utils.formatMuiErrorMessage)(19));
          }
          return value;
        };
        function CssVarsProvider({
          children,
          theme: themeProp = defaultTheme3,
          modeStorageKey = defaultModeStorageKey,
          colorSchemeStorageKey = defaultColorSchemeStorageKey,
          attribute = defaultAttribute,
          defaultMode = designSystemMode,
          defaultColorScheme = designSystemColorScheme,
          disableTransitionOnChange = designSystemTransitionOnChange,
          storageWindow = typeof window === "undefined" ? void 0 : window,
          documentNode = typeof document === "undefined" ? void 0 : document,
          colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
          colorSchemeSelector = ":root",
          shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar
        }) {
          const hasMounted = React59.useRef(false);
          const {
            colorSchemes = {},
            components = {},
            cssVarPrefix
          } = themeProp, restThemeProp = (0, _objectWithoutPropertiesLoose2.default)(themeProp, _excluded32);
          const allColorSchemes = Object.keys(colorSchemes);
          const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
          const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
          const {
            mode,
            setMode,
            systemMode,
            lightColorScheme,
            darkColorScheme,
            colorScheme,
            setColorScheme
          } = (0, _useCurrentColorScheme.default)({
            supportedColorSchemes: allColorSchemes,
            defaultLightColorScheme: defaultLightColorScheme2,
            defaultDarkColorScheme: defaultDarkColorScheme2,
            modeStorageKey,
            colorSchemeStorageKey,
            defaultMode,
            storageWindow
          });
          const calculatedMode = (() => {
            if (!mode) {
              if (defaultMode === "system") {
                return designSystemMode;
              }
              return defaultMode;
            }
            return mode;
          })();
          const calculatedColorScheme = (() => {
            if (!colorScheme) {
              if (calculatedMode === "dark") {
                return defaultDarkColorScheme2;
              }
              return defaultLightColorScheme2;
            }
            return colorScheme;
          })();
          const {
            css: rootCss,
            vars: rootVars,
            parsedTheme
          } = (0, _cssVarsParser.default)(restThemeProp, {
            prefix: cssVarPrefix,
            shouldSkipGeneratingVar
          });
          let theme2 = (0, _extends2.default)({}, parsedTheme, {
            components,
            colorSchemes,
            cssVarPrefix,
            vars: rootVars,
            getColorSchemeSelector: (targetColorScheme) => `[${attribute}="${targetColorScheme}"] &`
          });
          const defaultColorSchemeStyleSheet = {};
          const otherColorSchemesStyleSheet = {};
          Object.entries(colorSchemes).forEach(([key, scheme]) => {
            const {
              css: css2,
              vars,
              parsedTheme: parsedScheme
            } = (0, _cssVarsParser.default)(scheme, {
              prefix: cssVarPrefix,
              shouldSkipGeneratingVar
            });
            theme2.vars = (0, _utils.deepmerge)(theme2.vars, vars);
            if (key === calculatedColorScheme) {
              theme2 = (0, _extends2.default)({}, theme2, parsedScheme);
              if (theme2.palette) {
                theme2.palette.colorScheme = key;
              }
            }
            const resolvedDefaultColorScheme = (() => {
              if (typeof defaultColorScheme === "string") {
                return defaultColorScheme;
              }
              if (defaultMode === "dark") {
                return defaultColorScheme.dark;
              }
              return defaultColorScheme.light;
            })();
            if (key === resolvedDefaultColorScheme) {
              if (excludeVariablesFromRoot) {
                const excludedVariables = {};
                excludeVariablesFromRoot(cssVarPrefix).forEach((cssVar) => {
                  excludedVariables[cssVar] = css2[cssVar];
                  delete css2[cssVar];
                });
                defaultColorSchemeStyleSheet[`[${attribute}="${key}"]`] = excludedVariables;
              }
              defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}="${key}"]`] = css2;
            } else {
              otherColorSchemesStyleSheet[`${colorSchemeSelector === ":root" ? "" : colorSchemeSelector}[${attribute}="${key}"]`] = css2;
            }
          });
          React59.useEffect(() => {
            if (colorScheme && colorSchemeNode) {
              colorSchemeNode.setAttribute(attribute, colorScheme);
            }
          }, [colorScheme, attribute, colorSchemeNode]);
          React59.useEffect(() => {
            let timer;
            if (disableTransitionOnChange && hasMounted.current && documentNode) {
              const css2 = documentNode.createElement("style");
              css2.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
              documentNode.head.appendChild(css2);
              (() => window.getComputedStyle(documentNode.body))();
              timer = setTimeout(() => {
                documentNode.head.removeChild(css2);
              }, 1);
            }
            return () => {
              clearTimeout(timer);
            };
          }, [colorScheme, disableTransitionOnChange, documentNode]);
          React59.useEffect(() => {
            hasMounted.current = true;
            return () => {
              hasMounted.current = false;
            };
          }, []);
          return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(ColorSchemeContext.Provider, {
            value: {
              mode,
              systemMode,
              setMode,
              lightColorScheme,
              darkColorScheme,
              colorScheme,
              setColorScheme,
              allColorSchemes
            },
            children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
              styles: {
                [colorSchemeSelector]: rootCss
              }
            }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
              styles: defaultColorSchemeStyleSheet
            }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
              styles: otherColorSchemesStyleSheet
            }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProvider.default, {
              theme: resolveTheme ? resolveTheme(theme2) : theme2,
              children
            })]
          });
        }
        true ? CssVarsProvider.propTypes = {
          attribute: _propTypes.default.string,
          children: _propTypes.default.node,
          colorSchemeNode: _propTypes.default.any,
          colorSchemeSelector: _propTypes.default.string,
          colorSchemeStorageKey: _propTypes.default.string,
          defaultColorScheme: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
          defaultMode: _propTypes.default.string,
          disableTransitionOnChange: _propTypes.default.bool,
          documentNode: _propTypes.default.any,
          modeStorageKey: _propTypes.default.string,
          shouldSkipGeneratingVar: _propTypes.default.func,
          storageWindow: _propTypes.default.any,
          theme: _propTypes.default.object
        } : void 0;
        const defaultLightColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.light;
        const defaultDarkColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.dark;
        const getInitColorSchemeScript = (params) => (0, _getInitColorSchemeScript.default)((0, _extends2.default)({
          attribute: defaultAttribute,
          colorSchemeStorageKey: defaultColorSchemeStorageKey,
          defaultMode: designSystemMode,
          defaultLightColorScheme,
          defaultDarkColorScheme,
          modeStorageKey: defaultModeStorageKey
        }, params));
        return {
          CssVarsProvider,
          useColorScheme,
          getInitColorSchemeScript
        };
      }
    }
  });

  // node_modules/@mui/system/cssVars/createGetCssVar.js
  var require_createGetCssVar = __commonJS({
    "node_modules/@mui/system/cssVars/createGetCssVar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createGetCssVar;
      function createGetCssVar(prefix = "") {
        function appendVar(...vars) {
          if (!vars.length) {
            return "";
          }
          const value = vars[0];
          if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {
            return `, var(--${prefix ? `${prefix}-` : ""}${value}${appendVar(...vars.slice(1))})`;
          }
          return `, ${value}`;
        }
        const getCssVar = (field, ...fallbacks) => {
          return `var(--${prefix ? `${prefix}-` : ""}${field}${appendVar(...fallbacks)})`;
        };
        return getCssVar;
      }
    }
  });

  // node_modules/@mui/system/Container/createContainer.js
  var require_createContainer = __commonJS({
    "node_modules/@mui/system/Container/createContainer.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createContainer2;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _styled = _interopRequireDefault(require_styled());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme3 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiContainer",
        slot: "Root",
        overridesResolver: (props2, styles3) => {
          const {
            ownerState
          } = props2;
          return [styles3.root, styles3[`maxWidth${(0, _utils.unstable_capitalize)(String(ownerState.maxWidth))}`], ownerState.fixed && styles3.fixed, ownerState.disableGutters && styles3.disableGutters];
        }
      });
      var useThemePropsDefault = (inProps) => (0, _useThemeProps.default)({
        props: inProps,
        name: "MuiContainer",
        defaultTheme: defaultTheme3
      });
      var useUtilityClasses21 = (ownerState, componentName) => {
        const getContainerUtilityClass = (slot) => {
          return (0, _utils.unstable_generateUtilityClass)(componentName, slot);
        };
        const {
          classes,
          fixed,
          disableGutters,
          maxWidth
        } = ownerState;
        const slots = {
          root: ["root", maxWidth && `maxWidth${(0, _utils.unstable_capitalize)(String(maxWidth))}`, fixed && "fixed", disableGutters && "disableGutters"]
        };
        return (0, _utils.unstable_composeClasses)(slots, getContainerUtilityClass, classes);
      };
      function createContainer2(options = {}) {
        const {
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps2 = useThemePropsDefault,
          componentName = "MuiContainer"
        } = options;
        const ContainerRoot = createStyledComponent(({
          theme: theme2,
          ownerState
        }) => (0, _extends2.default)({
          width: "100%",
          marginLeft: "auto",
          boxSizing: "border-box",
          marginRight: "auto",
          display: "block"
        }, !ownerState.disableGutters && {
          paddingLeft: theme2.spacing(2),
          paddingRight: theme2.spacing(2),
          [theme2.breakpoints.up("sm")]: {
            paddingLeft: theme2.spacing(3),
            paddingRight: theme2.spacing(3)
          }
        }), ({
          theme: theme2,
          ownerState
        }) => ownerState.fixed && Object.keys(theme2.breakpoints.values).reduce((acc, breakpointValueKey) => {
          const breakpoint = breakpointValueKey;
          const value = theme2.breakpoints.values[breakpoint];
          if (value !== 0) {
            acc[theme2.breakpoints.up(breakpoint)] = {
              maxWidth: `${value}${theme2.breakpoints.unit}`
            };
          }
          return acc;
        }, {}), ({
          theme: theme2,
          ownerState
        }) => (0, _extends2.default)({}, ownerState.maxWidth === "xs" && {
          [theme2.breakpoints.up("xs")]: {
            maxWidth: Math.max(theme2.breakpoints.values.xs, 444)
          }
        }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
          [theme2.breakpoints.up(ownerState.maxWidth)]: {
            maxWidth: `${theme2.breakpoints.values[ownerState.maxWidth]}${theme2.breakpoints.unit}`
          }
        }));
        const Container2 = /* @__PURE__ */ React59.forwardRef(function Container3(inProps, ref) {
          const props2 = useThemeProps2(inProps);
          const {
            className,
            component = "div",
            disableGutters = false,
            fixed = false,
            maxWidth = "lg"
          } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
          const ownerState = (0, _extends2.default)({}, props2, {
            component,
            disableGutters,
            fixed,
            maxWidth
          });
          const classes = useUtilityClasses21(ownerState, componentName);
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ContainerRoot, (0, _extends2.default)({
            as: component,
            ownerState,
            className: (0, _clsx.default)(classes.root, className),
            ref
          }, other));
        });
        true ? Container2.propTypes = {
          children: _propTypes.default.node,
          classes: _propTypes.default.object,
          className: _propTypes.default.string,
          component: _propTypes.default.elementType,
          disableGutters: _propTypes.default.bool,
          fixed: _propTypes.default.bool,
          maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
        } : void 0;
        return Container2;
      }
    }
  });

  // node_modules/@mui/system/Container/Container.js
  var require_Container = __commonJS({
    "node_modules/@mui/system/Container/Container.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createContainer = _interopRequireDefault(require_createContainer());
      var Container2 = (0, _createContainer.default)();
      true ? Container2.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        component: _propTypes.default.elementType,
        disableGutters: _propTypes.default.bool,
        fixed: _propTypes.default.bool,
        maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      var _default = Container2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Container/containerClasses.js
  var require_containerClasses = __commonJS({
    "node_modules/@mui/system/Container/containerClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getContainerUtilityClass = getContainerUtilityClass;
      var _utils = require_utils();
      function getContainerUtilityClass(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiContainer", slot);
      }
      var containerClasses = (0, _utils.unstable_generateUtilityClasses)("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
      var _default = containerClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Container/index.js
  var require_Container2 = __commonJS({
    "node_modules/@mui/system/Container/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        containerClasses: true
      };
      Object.defineProperty(exports, "containerClasses", {
        enumerable: true,
        get: function() {
          return _containerClasses.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Container.default;
        }
      });
      var _Container = _interopRequireDefault(require_Container());
      var _containerClasses = _interopRequireWildcard(require_containerClasses());
      Object.keys(_containerClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _containerClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _containerClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/Unstable_Grid/gridGenerator.js
  var require_gridGenerator = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/gridGenerator.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.traverseBreakpoints = exports.generateSpacingClassNames = exports.generateSizeClassNames = exports.generateGridStyles = exports.generateGridSizeStyles = exports.generateGridRowSpacingStyles = exports.generateGridOffsetStyles = exports.generateGridDirectionStyles = exports.generateGridColumnsStyles = exports.generateGridColumnSpacingStyles = exports.generateDirectionClasses = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var traverseBreakpoints = (breakpoints, responsize, iterator) => {
        const smallestBreakpoint = breakpoints.keys[0];
        if (Array.isArray(responsize)) {
          responsize.forEach((breakpointValue, index) => {
            iterator((responsizeStyles, style2) => {
              if (index <= breakpoints.keys.length - 1) {
                if (index === 0) {
                  Object.assign(responsizeStyles, style2);
                } else {
                  responsizeStyles[breakpoints.up(breakpoints.keys[index])] = style2;
                }
              }
            }, breakpointValue);
          });
        } else if (responsize && typeof responsize === "object") {
          const keys2 = Object.keys(responsize).length > breakpoints.keys.length ? breakpoints.keys : Object.keys(responsize);
          keys2.forEach((key) => {
            if (breakpoints.keys.indexOf(key) !== -1) {
              const breakpointValue = responsize[key];
              if (breakpointValue !== void 0) {
                iterator((responsizeStyles, style2) => {
                  if (smallestBreakpoint === key) {
                    Object.assign(responsizeStyles, style2);
                  } else {
                    responsizeStyles[breakpoints.up(key)] = style2;
                  }
                }, breakpointValue);
              }
            }
          });
        } else if (typeof responsize === "number" || typeof responsize === "string") {
          iterator((responsizeStyles, style2) => {
            Object.assign(responsizeStyles, style2);
          }, responsize);
        }
      };
      exports.traverseBreakpoints = traverseBreakpoints;
      var generateGridSizeStyles = ({
        theme: theme2,
        ownerState
      }) => {
        const styles3 = {};
        traverseBreakpoints(theme2.breakpoints, ownerState.gridSize, (appendStyle, value) => {
          let style2 = {};
          if (value === true) {
            style2 = {
              flexBasis: 0,
              flexGrow: 1,
              maxWidth: "100%"
            };
          }
          if (value === "auto") {
            style2 = {
              flexBasis: "auto",
              flexGrow: 0,
              flexShrink: 0,
              maxWidth: "none",
              width: "auto"
            };
          }
          if (typeof value === "number") {
            style2 = {
              flexGrow: 0,
              flexBasis: "auto",
              width: `calc(100% * ${value} / var(--Grid-columns)${ownerState.nested && ownerState.container ? ` + var(--Grid-columnSpacing)` : ""})`
            };
          }
          appendStyle(styles3, style2);
        });
        return styles3;
      };
      exports.generateGridSizeStyles = generateGridSizeStyles;
      var generateGridOffsetStyles = ({
        theme: theme2,
        ownerState
      }) => {
        const styles3 = {};
        traverseBreakpoints(theme2.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
          let style2 = {};
          if (value === "auto") {
            style2 = {
              marginLeft: "auto"
            };
          }
          if (typeof value === "number") {
            style2 = {
              marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / var(--Grid-columns))`
            };
          }
          appendStyle(styles3, style2);
        });
        return styles3;
      };
      exports.generateGridOffsetStyles = generateGridOffsetStyles;
      var generateGridColumnsStyles = ({
        theme: theme2,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const styles3 = {
          "--Grid-columns": 12
        };
        traverseBreakpoints(theme2.breakpoints, ownerState.columns, (appendStyle, value) => {
          appendStyle(styles3, {
            "--Grid-columns": value
          });
        });
        return styles3;
      };
      exports.generateGridColumnsStyles = generateGridColumnsStyles;
      var generateGridRowSpacingStyles = ({
        theme: theme2,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const styles3 = {};
        traverseBreakpoints(theme2.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
          var _theme$spacing;
          appendStyle(styles3, {
            "--Grid-rowSpacing": typeof value === "string" ? value : (_theme$spacing = theme2.spacing) == null ? void 0 : _theme$spacing.call(theme2, value)
          });
        });
        return styles3;
      };
      exports.generateGridRowSpacingStyles = generateGridRowSpacingStyles;
      var generateGridColumnSpacingStyles = ({
        theme: theme2,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const styles3 = {};
        traverseBreakpoints(theme2.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
          var _theme$spacing2;
          appendStyle(styles3, {
            "--Grid-columnSpacing": typeof value === "string" ? value : (_theme$spacing2 = theme2.spacing) == null ? void 0 : _theme$spacing2.call(theme2, value)
          });
        });
        return styles3;
      };
      exports.generateGridColumnSpacingStyles = generateGridColumnSpacingStyles;
      var generateGridDirectionStyles = ({
        theme: theme2,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const styles3 = {};
        traverseBreakpoints(theme2.breakpoints, ownerState.direction, (appendStyle, value) => {
          appendStyle(styles3, {
            flexDirection: value
          });
        });
        return styles3;
      };
      exports.generateGridDirectionStyles = generateGridDirectionStyles;
      var generateGridStyles = ({
        ownerState
      }) => {
        return (0, _extends2.default)({
          minWidth: 0,
          boxSizing: "border-box"
        }, ownerState.container ? (0, _extends2.default)({
          display: "flex",
          flexWrap: "wrap"
        }, ownerState.wrap && ownerState.wrap !== "wrap" && {
          flexWrap: ownerState.wrap
        }, {
          margin: `calc(var(--Grid-rowSpacing) / -2) calc(var(--Grid-columnSpacing) / -2)`
        }, ownerState.disableEqualOverflow && {
          margin: `calc(var(--Grid-rowSpacing) * -1) 0px 0px calc(var(--Grid-columnSpacing) * -1)`
        }, ownerState.nested ? (0, _extends2.default)({
          padding: `calc(var(--Grid-nested-rowSpacing) / 2) calc(var(--Grid-nested-columnSpacing) / 2)`
        }, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
          padding: `calc(var(--Grid-nested-rowSpacing)) 0px 0px calc(var(--Grid-nested-columnSpacing))`
        }) : {
          "--Grid-nested-rowSpacing": "var(--Grid-rowSpacing)",
          "--Grid-nested-columnSpacing": "var(--Grid-columnSpacing)"
        }) : (0, _extends2.default)({
          padding: `calc(var(--Grid-rowSpacing) / 2) calc(var(--Grid-columnSpacing) / 2)`
        }, ownerState.disableEqualOverflow && {
          padding: `calc(var(--Grid-rowSpacing)) 0px 0px calc(var(--Grid-columnSpacing))`
        }));
      };
      exports.generateGridStyles = generateGridStyles;
      var generateSizeClassNames = (gridSize) => {
        const classNames = [];
        Object.entries(gridSize).forEach(([key, value]) => {
          if (value !== false && value !== void 0) {
            classNames.push(`grid-${key}-${String(value)}`);
          }
        });
        return classNames;
      };
      exports.generateSizeClassNames = generateSizeClassNames;
      var generateSpacingClassNames = (spacing, smallestBreakpoint = "xs") => {
        function isValidSpacing(val) {
          if (val === void 0) {
            return false;
          }
          return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
        }
        if (isValidSpacing(spacing)) {
          return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
        }
        if (typeof spacing === "object" && !Array.isArray(spacing)) {
          const classNames = [];
          Object.entries(spacing).forEach(([key, value]) => {
            if (isValidSpacing(value)) {
              classNames.push(`spacing-${key}-${String(value)}`);
            }
          });
          return classNames;
        }
        return [];
      };
      exports.generateSpacingClassNames = generateSpacingClassNames;
      var generateDirectionClasses = (direction) => {
        if (direction === void 0) {
          return [];
        }
        if (typeof direction === "object") {
          return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
        }
        return [`direction-xs-${String(direction)}`];
      };
      exports.generateDirectionClasses = generateDirectionClasses;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/createGrid.js
  var require_createGrid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/createGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createGrid;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _styled = _interopRequireDefault(require_styled());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _styleFunctionSx = require_styleFunctionSx2();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _gridGenerator = require_gridGenerator();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["className", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme3 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiGrid",
        slot: "Root",
        overridesResolver: (props2, styles3) => styles3.root
      });
      function useThemePropsDefault(props2) {
        return (0, _useThemeProps.default)({
          props: props2,
          name: "MuiGrid",
          defaultTheme: defaultTheme3
        });
      }
      function createGrid(options = {}) {
        const {
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps2 = useThemePropsDefault,
          componentName = "MuiGrid"
        } = options;
        const NestedContext = /* @__PURE__ */ React59.createContext(false);
        const OverflowContext = /* @__PURE__ */ React59.createContext(void 0);
        const useUtilityClasses21 = (ownerState, theme2) => {
          const {
            container: container2,
            direction,
            spacing,
            wrap: wrap2,
            gridSize
          } = ownerState;
          const slots = {
            root: ["root", container2 && "container", wrap2 !== "wrap" && `wrap-xs-${String(wrap2)}`, ...(0, _gridGenerator.generateDirectionClasses)(direction), ...(0, _gridGenerator.generateSizeClassNames)(gridSize), ...container2 ? (0, _gridGenerator.generateSpacingClassNames)(spacing, theme2.breakpoints.keys[0]) : []]
          };
          return (0, _utils.unstable_composeClasses)(slots, (slot) => (0, _utils.unstable_generateUtilityClass)(componentName, slot), {});
        };
        const GridRoot2 = createStyledComponent(_gridGenerator.generateGridColumnsStyles, _gridGenerator.generateGridColumnSpacingStyles, _gridGenerator.generateGridRowSpacingStyles, _gridGenerator.generateGridSizeStyles, _gridGenerator.generateGridDirectionStyles, _gridGenerator.generateGridStyles, _gridGenerator.generateGridOffsetStyles);
        const Grid3 = /* @__PURE__ */ React59.forwardRef(function Grid4(inProps, ref) {
          var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
          const theme2 = (0, _useTheme.default)();
          const themeProps = useThemeProps2(inProps);
          const props2 = (0, _styleFunctionSx.extendSxProp)(themeProps);
          const nested = React59.useContext(NestedContext);
          const overflow = React59.useContext(OverflowContext);
          const {
            className,
            columns: columnsProp = 12,
            container: container2 = false,
            component = "div",
            direction = "row",
            wrap: wrap2 = "wrap",
            spacing: spacingProp = 0,
            rowSpacing: rowSpacingProp = spacingProp,
            columnSpacing: columnSpacingProp = spacingProp,
            disableEqualOverflow: themeDisableEqualOverflow
          } = props2, rest = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
          let disableEqualOverflow = themeDisableEqualOverflow;
          if (nested && themeDisableEqualOverflow !== void 0) {
            disableEqualOverflow = inProps.disableEqualOverflow;
          }
          const gridSize = {};
          const gridOffset = {};
          const other = {};
          Object.entries(rest).forEach(([key, val]) => {
            if (theme2.breakpoints.values[key] !== void 0) {
              gridSize[key] = val;
            } else if (theme2.breakpoints.values[key.replace("Offset", "")] !== void 0) {
              gridOffset[key.replace("Offset", "")] = val;
            } else {
              other[key] = val;
            }
          });
          const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : nested ? void 0 : columnsProp;
          const spacing = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : nested ? void 0 : spacingProp;
          const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : nested ? void 0 : rowSpacingProp;
          const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : nested ? void 0 : columnSpacingProp;
          const ownerState = (0, _extends2.default)({}, props2, {
            nested,
            columns,
            container: container2,
            direction,
            wrap: wrap2,
            spacing,
            rowSpacing,
            columnSpacing,
            gridSize,
            gridOffset,
            disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow) != null ? _ref3 : false,
            parentDisableEqualOverflow: overflow
          });
          const classes = useUtilityClasses21(ownerState, theme2);
          let result = /* @__PURE__ */ (0, _jsxRuntime.jsx)(GridRoot2, (0, _extends2.default)({
            ref,
            as: component,
            ownerState,
            className: (0, _clsx.default)(classes.root, className)
          }, other));
          if (!nested) {
            result = /* @__PURE__ */ (0, _jsxRuntime.jsx)(NestedContext.Provider, {
              value: true,
              children: result
            });
          }
          if (disableEqualOverflow !== void 0 && disableEqualOverflow !== (overflow != null ? overflow : false)) {
            result = /* @__PURE__ */ (0, _jsxRuntime.jsx)(OverflowContext.Provider, {
              value: disableEqualOverflow,
              children: result
            });
          }
          return result;
        });
        true ? Grid3.propTypes = {
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
          columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          component: _propTypes.default.elementType,
          container: _propTypes.default.bool,
          direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
          disableEqualOverflow: _propTypes.default.bool,
          lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          lgOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          md: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          mdOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          smOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
          wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
          xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          xlOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          xsOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number])
        } : void 0;
        return Grid3;
      }
    }
  });

  // node_modules/@mui/system/Unstable_Grid/Grid.js
  var require_Grid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/Grid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createGrid = _interopRequireDefault(require_createGrid());
      var Grid3 = (0, _createGrid.default)();
      true ? Grid3.propTypes = {
        children: _propTypes.default.node,
        columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
        columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        container: _propTypes.default.bool,
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        disableEqualOverflow: _propTypes.default.bool,
        lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        lgOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        md: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        mdOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        smOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
        xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        xlOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        xsOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number])
      } : void 0;
      var _default = Grid3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/GridProps.js
  var require_GridProps = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/GridProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/system/Unstable_Grid/gridClasses.js
  var require_gridClasses = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/gridClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getGridUtilityClass = getGridUtilityClass2;
      var _utils = require_utils();
      function getGridUtilityClass2(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiGrid", slot);
      }
      var SPACINGS2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      var DIRECTIONS2 = ["column-reverse", "column", "row-reverse", "row"];
      var WRAPS2 = ["nowrap", "wrap-reverse", "wrap"];
      var GRID_SIZES2 = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
      var gridClasses2 = (0, _utils.unstable_generateUtilityClasses)("MuiGrid", [
        "root",
        "container",
        "item",
        ...SPACINGS2.map((spacing) => `spacing-xs-${spacing}`),
        ...DIRECTIONS2.map((direction) => `direction-xs-${direction}`),
        ...WRAPS2.map((wrap2) => `wrap-xs-${wrap2}`),
        ...GRID_SIZES2.map((size) => `grid-xs-${size}`),
        ...GRID_SIZES2.map((size) => `grid-sm-${size}`),
        ...GRID_SIZES2.map((size) => `grid-md-${size}`),
        ...GRID_SIZES2.map((size) => `grid-lg-${size}`),
        ...GRID_SIZES2.map((size) => `grid-xl-${size}`)
      ]);
      var _default = gridClasses2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/index.js
  var require_Unstable_Grid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        createGrid: true,
        gridClasses: true
      };
      Object.defineProperty(exports, "createGrid", {
        enumerable: true,
        get: function() {
          return _createGrid.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Grid.default;
        }
      });
      Object.defineProperty(exports, "gridClasses", {
        enumerable: true,
        get: function() {
          return _gridClasses.default;
        }
      });
      var _Grid = _interopRequireDefault(require_Grid());
      var _createGrid = _interopRequireDefault(require_createGrid());
      var _GridProps = require_GridProps();
      Object.keys(_GridProps).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _GridProps[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _GridProps[key];
          }
        });
      });
      var _gridClasses = _interopRequireWildcard(require_gridClasses());
      Object.keys(_gridClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _gridClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _gridClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/Stack/createStack.js
  var require_createStack = __commonJS({
    "node_modules/@mui/system/Stack/createStack.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStack;
      exports.style = void 0;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _styled = _interopRequireDefault(require_styled());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _styleFunctionSx = require_styleFunctionSx2();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _breakpoints = require_breakpoints();
      var _spacing = require_spacing();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["component", "direction", "spacing", "divider", "children", "className"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme3 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiStack",
        slot: "Root",
        overridesResolver: (props2, styles3) => styles3.root
      });
      function useThemePropsDefault(props2) {
        return (0, _useThemeProps.default)({
          props: props2,
          name: "MuiStack",
          defaultTheme: defaultTheme3
        });
      }
      function joinChildren2(children, separator) {
        const childrenArray = React59.Children.toArray(children).filter(Boolean);
        return childrenArray.reduce((output, child, index) => {
          output.push(child);
          if (index < childrenArray.length - 1) {
            output.push(/* @__PURE__ */ React59.cloneElement(separator, {
              key: `separator-${index}`
            }));
          }
          return output;
        }, []);
      }
      var getSideFromDirection2 = (direction) => {
        return {
          row: "Left",
          "row-reverse": "Right",
          column: "Top",
          "column-reverse": "Bottom"
        }[direction];
      };
      var style2 = ({
        ownerState,
        theme: theme2
      }) => {
        let styles3 = (0, _extends2.default)({
          display: "flex",
          flexDirection: "column"
        }, (0, _breakpoints.handleBreakpoints)({
          theme: theme2
        }, (0, _breakpoints.resolveBreakpointValues)({
          values: ownerState.direction,
          breakpoints: theme2.breakpoints.values
        }), (propValue) => ({
          flexDirection: propValue
        })));
        if (ownerState.spacing) {
          const transformer = (0, _spacing.createUnarySpacing)(theme2);
          const base = Object.keys(theme2.breakpoints.values).reduce((acc, breakpoint) => {
            if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
              acc[breakpoint] = true;
            }
            return acc;
          }, {});
          const directionValues = (0, _breakpoints.resolveBreakpointValues)({
            values: ownerState.direction,
            base
          });
          const spacingValues = (0, _breakpoints.resolveBreakpointValues)({
            values: ownerState.spacing,
            base
          });
          if (typeof directionValues === "object") {
            Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
              const directionValue = directionValues[breakpoint];
              if (!directionValue) {
                const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : "column";
                directionValues[breakpoint] = previousDirectionValue;
              }
            });
          }
          const styleFromPropValue = (propValue, breakpoint) => {
            return {
              "& > :not(style) + :not(style)": {
                margin: 0,
                [`margin${getSideFromDirection2(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: (0, _spacing.getValue)(transformer, propValue)
              }
            };
          };
          styles3 = (0, _utils.deepmerge)(styles3, (0, _breakpoints.handleBreakpoints)({
            theme: theme2
          }, spacingValues, styleFromPropValue));
        }
        styles3 = (0, _breakpoints.mergeBreakpointsInOrder)(theme2.breakpoints, styles3);
        return styles3;
      };
      exports.style = style2;
      function createStack(options = {}) {
        const {
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps2 = useThemePropsDefault,
          componentName = "MuiStack"
        } = options;
        const useUtilityClasses21 = () => {
          const slots = {
            root: ["root"]
          };
          return (0, _utils.unstable_composeClasses)(slots, (slot) => (0, _utils.unstable_generateUtilityClass)(componentName, slot), {});
        };
        const StackRoot2 = createStyledComponent(style2);
        const Stack3 = /* @__PURE__ */ React59.forwardRef(function Grid3(inProps, ref) {
          const themeProps = useThemeProps2(inProps);
          const props2 = (0, _styleFunctionSx.extendSxProp)(themeProps);
          const {
            component = "div",
            direction = "column",
            spacing = 0,
            divider,
            children,
            className
          } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
          const ownerState = {
            direction,
            spacing
          };
          const classes = useUtilityClasses21();
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StackRoot2, (0, _extends2.default)({
            as: component,
            ownerState,
            ref,
            className: (0, _clsx.default)(classes.root, className)
          }, other, {
            children: divider ? joinChildren2(children, divider) : children
          }));
        });
        true ? Stack3.propTypes = {
          children: _propTypes.default.node,
          direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
          divider: _propTypes.default.node,
          spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
        } : void 0;
        return Stack3;
      }
    }
  });

  // node_modules/@mui/system/Stack/Stack.js
  var require_Stack = __commonJS({
    "node_modules/@mui/system/Stack/Stack.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createStack = _interopRequireDefault(require_createStack());
      var Stack3 = (0, _createStack.default)();
      true ? Stack3.propTypes = {
        children: _propTypes.default.node,
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        divider: _propTypes.default.node,
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      var _default = Stack3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Stack/StackProps.js
  var require_StackProps = __commonJS({
    "node_modules/@mui/system/Stack/StackProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/system/Stack/stackClasses.js
  var require_stackClasses = __commonJS({
    "node_modules/@mui/system/Stack/stackClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getStackUtilityClass = getStackUtilityClass;
      var _utils = require_utils();
      function getStackUtilityClass(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiStack", slot);
      }
      var stackClasses = (0, _utils.unstable_generateUtilityClasses)("MuiStack", ["root"]);
      var _default = stackClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Stack/index.js
  var require_Stack2 = __commonJS({
    "node_modules/@mui/system/Stack/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        createStack: true,
        stackClasses: true
      };
      Object.defineProperty(exports, "createStack", {
        enumerable: true,
        get: function() {
          return _createStack.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Stack.default;
        }
      });
      Object.defineProperty(exports, "stackClasses", {
        enumerable: true,
        get: function() {
          return _stackClasses.default;
        }
      });
      var _Stack = _interopRequireDefault(require_Stack());
      var _createStack = _interopRequireDefault(require_createStack());
      var _StackProps = require_StackProps();
      Object.keys(_StackProps).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _StackProps[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _StackProps[key];
          }
        });
      });
      var _stackClasses = _interopRequireWildcard(require_stackClasses());
      Object.keys(_stackClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _stackClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _stackClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/index.js
  var require_system = __commonJS({
    "node_modules/@mui/system/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        css: true,
        keyframes: true,
        GlobalStyles: true,
        StyledEngineProvider: true,
        borders: true,
        breakpoints: true,
        handleBreakpoints: true,
        mergeBreakpointsInOrder: true,
        unstable_resolveBreakpointValues: true,
        compose: true,
        display: true,
        flexbox: true,
        grid: true,
        palette: true,
        positions: true,
        shadows: true,
        sizing: true,
        spacing: true,
        style: true,
        getPath: true,
        typography: true,
        unstable_styleFunctionSx: true,
        unstable_createStyleFunctionSx: true,
        unstable_extendSxProp: true,
        experimental_sx: true,
        unstable_getThemeValue: true,
        Box: true,
        createBox: true,
        createStyled: true,
        styled: true,
        createTheme: true,
        createBreakpoints: true,
        createSpacing: true,
        shape: true,
        useThemeProps: true,
        getThemeProps: true,
        useTheme: true,
        useThemeWithoutDefault: true,
        ThemeProvider: true,
        unstable_createCssVarsProvider: true,
        unstable_createGetCssVar: true,
        createContainer: true,
        Container: true,
        Unstable_Grid: true,
        Stack: true
      };
      Object.defineProperty(exports, "Box", {
        enumerable: true,
        get: function() {
          return _Box.default;
        }
      });
      Object.defineProperty(exports, "Container", {
        enumerable: true,
        get: function() {
          return _Container.default;
        }
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _styledEngine.GlobalStyles;
        }
      });
      Object.defineProperty(exports, "Stack", {
        enumerable: true,
        get: function() {
          return _Stack.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _styledEngine.StyledEngineProvider;
        }
      });
      Object.defineProperty(exports, "ThemeProvider", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "Unstable_Grid", {
        enumerable: true,
        get: function() {
          return _Grid.default;
        }
      });
      Object.defineProperty(exports, "borders", {
        enumerable: true,
        get: function() {
          return _borders.default;
        }
      });
      Object.defineProperty(exports, "breakpoints", {
        enumerable: true,
        get: function() {
          return _breakpoints.default;
        }
      });
      Object.defineProperty(exports, "compose", {
        enumerable: true,
        get: function() {
          return _compose.default;
        }
      });
      Object.defineProperty(exports, "createBox", {
        enumerable: true,
        get: function() {
          return _createBox.default;
        }
      });
      Object.defineProperty(exports, "createBreakpoints", {
        enumerable: true,
        get: function() {
          return _createBreakpoints.default;
        }
      });
      Object.defineProperty(exports, "createContainer", {
        enumerable: true,
        get: function() {
          return _createContainer.default;
        }
      });
      Object.defineProperty(exports, "createSpacing", {
        enumerable: true,
        get: function() {
          return _createSpacing.default;
        }
      });
      Object.defineProperty(exports, "createStyled", {
        enumerable: true,
        get: function() {
          return _createStyled.default;
        }
      });
      Object.defineProperty(exports, "createTheme", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _styledEngine.css;
        }
      });
      Object.defineProperty(exports, "display", {
        enumerable: true,
        get: function() {
          return _display.default;
        }
      });
      Object.defineProperty(exports, "experimental_sx", {
        enumerable: true,
        get: function() {
          return _sx.default;
        }
      });
      Object.defineProperty(exports, "flexbox", {
        enumerable: true,
        get: function() {
          return _flexbox.default;
        }
      });
      Object.defineProperty(exports, "getPath", {
        enumerable: true,
        get: function() {
          return _style.getPath;
        }
      });
      Object.defineProperty(exports, "getThemeProps", {
        enumerable: true,
        get: function() {
          return _useThemeProps.getThemeProps;
        }
      });
      Object.defineProperty(exports, "grid", {
        enumerable: true,
        get: function() {
          return _cssGrid.default;
        }
      });
      Object.defineProperty(exports, "handleBreakpoints", {
        enumerable: true,
        get: function() {
          return _breakpoints.handleBreakpoints;
        }
      });
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _styledEngine.keyframes;
        }
      });
      Object.defineProperty(exports, "mergeBreakpointsInOrder", {
        enumerable: true,
        get: function() {
          return _breakpoints.mergeBreakpointsInOrder;
        }
      });
      Object.defineProperty(exports, "palette", {
        enumerable: true,
        get: function() {
          return _palette.default;
        }
      });
      Object.defineProperty(exports, "positions", {
        enumerable: true,
        get: function() {
          return _positions.default;
        }
      });
      Object.defineProperty(exports, "shadows", {
        enumerable: true,
        get: function() {
          return _shadows.default;
        }
      });
      Object.defineProperty(exports, "shape", {
        enumerable: true,
        get: function() {
          return _shape.default;
        }
      });
      Object.defineProperty(exports, "sizing", {
        enumerable: true,
        get: function() {
          return _sizing.default;
        }
      });
      Object.defineProperty(exports, "spacing", {
        enumerable: true,
        get: function() {
          return _spacing.default;
        }
      });
      Object.defineProperty(exports, "style", {
        enumerable: true,
        get: function() {
          return _style.default;
        }
      });
      Object.defineProperty(exports, "styled", {
        enumerable: true,
        get: function() {
          return _styled.default;
        }
      });
      Object.defineProperty(exports, "typography", {
        enumerable: true,
        get: function() {
          return _typography.default;
        }
      });
      Object.defineProperty(exports, "unstable_createCssVarsProvider", {
        enumerable: true,
        get: function() {
          return _createCssVarsProvider.default;
        }
      });
      Object.defineProperty(exports, "unstable_createGetCssVar", {
        enumerable: true,
        get: function() {
          return _createGetCssVar.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports, "unstable_extendSxProp", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.extendSxProp;
        }
      });
      Object.defineProperty(exports, "unstable_getThemeValue", {
        enumerable: true,
        get: function() {
          return _getThemeValue.default;
        }
      });
      Object.defineProperty(exports, "unstable_resolveBreakpointValues", {
        enumerable: true,
        get: function() {
          return _breakpoints.resolveBreakpointValues;
        }
      });
      Object.defineProperty(exports, "unstable_styleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "useTheme", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      Object.defineProperty(exports, "useThemeProps", {
        enumerable: true,
        get: function() {
          return _useThemeProps.default;
        }
      });
      Object.defineProperty(exports, "useThemeWithoutDefault", {
        enumerable: true,
        get: function() {
          return _useThemeWithoutDefault.default;
        }
      });
      var _styledEngine = require_node();
      var _borders = _interopRequireWildcard(require_borders());
      Object.keys(_borders).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _borders[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _borders[key];
          }
        });
      });
      var _breakpoints = _interopRequireWildcard(require_breakpoints());
      var _compose = _interopRequireDefault(require_compose());
      var _display = _interopRequireDefault(require_display());
      var _flexbox = _interopRequireWildcard(require_flexbox());
      Object.keys(_flexbox).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _flexbox[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _flexbox[key];
          }
        });
      });
      var _cssGrid = _interopRequireWildcard(require_cssGrid());
      Object.keys(_cssGrid).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _cssGrid[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _cssGrid[key];
          }
        });
      });
      var _palette = _interopRequireWildcard(require_palette());
      Object.keys(_palette).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _palette[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _palette[key];
          }
        });
      });
      var _positions = _interopRequireWildcard(require_positions());
      Object.keys(_positions).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _positions[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _positions[key];
          }
        });
      });
      var _shadows = _interopRequireDefault(require_shadows());
      var _sizing = _interopRequireWildcard(require_sizing());
      Object.keys(_sizing).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _sizing[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _sizing[key];
          }
        });
      });
      var _spacing = _interopRequireWildcard(require_spacing());
      Object.keys(_spacing).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _spacing[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _spacing[key];
          }
        });
      });
      var _style = _interopRequireWildcard(require_style());
      var _typography = _interopRequireWildcard(require_typography());
      Object.keys(_typography).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _typography[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _typography[key];
          }
        });
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
      var _sx = _interopRequireDefault(require_sx2());
      var _getThemeValue = _interopRequireDefault(require_getThemeValue());
      var _Box = _interopRequireDefault(require_Box2());
      var _createBox = _interopRequireDefault(require_createBox());
      var _createStyled = _interopRequireWildcard(require_createStyled());
      Object.keys(_createStyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _createStyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _createStyled[key];
          }
        });
      });
      var _styled = _interopRequireDefault(require_styled());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _shape = _interopRequireDefault(require_shape());
      var _useThemeProps = _interopRequireWildcard(require_useThemeProps2());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var _colorManipulator = require_colorManipulator();
      Object.keys(_colorManipulator).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _colorManipulator[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _colorManipulator[key];
          }
        });
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider4());
      var _createCssVarsProvider = _interopRequireDefault(require_createCssVarsProvider());
      var _createGetCssVar = _interopRequireDefault(require_createGetCssVar());
      var _createContainer = _interopRequireDefault(require_createContainer());
      var _Container = _interopRequireWildcard(require_Container2());
      Object.keys(_Container).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Container[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Container[key];
          }
        });
      });
      var _Grid = _interopRequireDefault(require_Grid());
      var _Unstable_Grid = require_Unstable_Grid();
      Object.keys(_Unstable_Grid).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Unstable_Grid[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Unstable_Grid[key];
          }
        });
      });
      var _Stack = _interopRequireDefault(require_Stack());
      var _Stack2 = require_Stack2();
      Object.keys(_Stack2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Stack2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Stack2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/utils/isHostComponent.js
  var require_isHostComponent = __commonJS({
    "node_modules/@mui/base/node/utils/isHostComponent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      function isHostComponent3(element) {
        return typeof element === "string";
      }
      var _default = isHostComponent3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/utils/appendOwnerState.js
  var require_appendOwnerState = __commonJS({
    "node_modules/@mui/base/node/utils/appendOwnerState.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = appendOwnerState;
      var _extends2 = _interopRequireDefault(require_extends());
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      function appendOwnerState(elementType, otherProps = {}, ownerState) {
        if ((0, _isHostComponent.default)(elementType)) {
          return otherProps;
        }
        return (0, _extends2.default)({}, otherProps, {
          ownerState: (0, _extends2.default)({}, otherProps.ownerState, ownerState)
        });
      }
    }
  });

  // node_modules/@mui/base/node/utils/areArraysEqual.js
  var require_areArraysEqual = __commonJS({
    "node_modules/@mui/base/node/utils/areArraysEqual.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = areArraysEqual;
      function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
        return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
      }
    }
  });

  // node_modules/@mui/base/node/utils/extractEventHandlers.js
  var require_extractEventHandlers = __commonJS({
    "node_modules/@mui/base/node/utils/extractEventHandlers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = extractEventHandlers;
      function extractEventHandlers(object, excludeKeys = []) {
        if (object === void 0) {
          return {};
        }
        const result = {};
        Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
          result[prop] = object[prop];
        });
        return result;
      }
    }
  });

  // node_modules/@mui/base/node/utils/resolveComponentProps.js
  var require_resolveComponentProps = __commonJS({
    "node_modules/@mui/base/node/utils/resolveComponentProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = resolveComponentProps2;
      function resolveComponentProps2(componentProps, ownerState) {
        if (typeof componentProps === "function") {
          return componentProps(ownerState);
        }
        return componentProps;
      }
    }
  });

  // node_modules/@mui/base/node/utils/omitEventHandlers.js
  var require_omitEventHandlers = __commonJS({
    "node_modules/@mui/base/node/utils/omitEventHandlers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = omitEventHandlers;
      function omitEventHandlers(object) {
        if (object === void 0) {
          return {};
        }
        const result = {};
        Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
          result[prop] = object[prop];
        });
        return result;
      }
    }
  });

  // node_modules/@mui/base/node/utils/mergeSlotProps.js
  var require_mergeSlotProps = __commonJS({
    "node_modules/@mui/base/node/utils/mergeSlotProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = mergeSlotProps;
      var _extends2 = _interopRequireDefault(require_extends());
      var _clsx = _interopRequireDefault(require_clsx());
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      var _omitEventHandlers = _interopRequireDefault(require_omitEventHandlers());
      function mergeSlotProps(parameters) {
        const {
          getSlotProps,
          additionalProps,
          externalSlotProps,
          externalForwardedProps,
          className
        } = parameters;
        if (!getSlotProps) {
          const joinedClasses2 = (0, _clsx.default)(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
          const mergedStyle2 = (0, _extends2.default)({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
          const props3 = (0, _extends2.default)({}, additionalProps, externalForwardedProps, externalSlotProps);
          if (joinedClasses2.length > 0) {
            props3.className = joinedClasses2;
          }
          if (Object.keys(mergedStyle2).length > 0) {
            props3.style = mergedStyle2;
          }
          return {
            props: props3,
            internalRef: void 0
          };
        }
        const eventHandlers = (0, _extractEventHandlers.default)((0, _extends2.default)({}, externalForwardedProps, externalSlotProps));
        const componentsPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalSlotProps);
        const otherPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalForwardedProps);
        const internalSlotProps = getSlotProps(eventHandlers);
        const joinedClasses = (0, _clsx.default)(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
        const mergedStyle = (0, _extends2.default)({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
        const props2 = (0, _extends2.default)({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
        if (joinedClasses.length > 0) {
          props2.className = joinedClasses;
        }
        if (Object.keys(mergedStyle).length > 0) {
          props2.style = mergedStyle;
        }
        return {
          props: props2,
          internalRef: internalSlotProps.ref
        };
      }
    }
  });

  // node_modules/@mui/base/node/utils/useSlotProps.js
  var require_useSlotProps = __commonJS({
    "node_modules/@mui/base/node/utils/useSlotProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useSlotProps;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _appendOwnerState = _interopRequireDefault(require_appendOwnerState());
      var _mergeSlotProps = _interopRequireDefault(require_mergeSlotProps());
      var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps());
      var _excluded32 = ["elementType", "externalSlotProps", "ownerState"];
      function useSlotProps(parameters) {
        var _parameters$additiona;
        const {
          elementType,
          externalSlotProps,
          ownerState
        } = parameters, rest = (0, _objectWithoutPropertiesLoose2.default)(parameters, _excluded32);
        const resolvedComponentsProps = (0, _resolveComponentProps.default)(externalSlotProps, ownerState);
        const {
          props: mergedProps,
          internalRef
        } = (0, _mergeSlotProps.default)((0, _extends2.default)({}, rest, {
          externalSlotProps: resolvedComponentsProps
        }));
        const ref = (0, _utils.unstable_useForkRef)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
        const props2 = (0, _appendOwnerState.default)(elementType, (0, _extends2.default)({}, mergedProps, {
          ref
        }), ownerState);
        return props2;
      }
    }
  });

  // node_modules/@mui/base/node/utils/types.js
  var require_types = __commonJS({
    "node_modules/@mui/base/node/utils/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/utils/index.js
  var require_utils2 = __commonJS({
    "node_modules/@mui/base/node/utils/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        appendOwnerState: true,
        areArraysEqual: true,
        extractEventHandlers: true,
        isHostComponent: true,
        resolveComponentProps: true,
        useSlotProps: true
      };
      Object.defineProperty(exports, "appendOwnerState", {
        enumerable: true,
        get: function() {
          return _appendOwnerState.default;
        }
      });
      Object.defineProperty(exports, "areArraysEqual", {
        enumerable: true,
        get: function() {
          return _areArraysEqual.default;
        }
      });
      Object.defineProperty(exports, "extractEventHandlers", {
        enumerable: true,
        get: function() {
          return _extractEventHandlers.default;
        }
      });
      Object.defineProperty(exports, "isHostComponent", {
        enumerable: true,
        get: function() {
          return _isHostComponent.default;
        }
      });
      Object.defineProperty(exports, "resolveComponentProps", {
        enumerable: true,
        get: function() {
          return _resolveComponentProps.default;
        }
      });
      Object.defineProperty(exports, "useSlotProps", {
        enumerable: true,
        get: function() {
          return _useSlotProps.default;
        }
      });
      var _appendOwnerState = _interopRequireDefault(require_appendOwnerState());
      var _areArraysEqual = _interopRequireDefault(require_areArraysEqual());
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      var _resolveComponentProps = _interopRequireDefault(require_resolveComponentProps());
      var _useSlotProps = _interopRequireDefault(require_useSlotProps());
      var _types = require_types();
      Object.keys(_types).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _types[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _types[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/AutocompleteUnstyled/useAutocomplete.js
  var require_useAutocomplete = __commonJS({
    "node_modules/@mui/base/node/AutocompleteUnstyled/useAutocomplete.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createFilterOptions = createFilterOptions;
      exports.default = useAutocomplete;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function stripDiacritics(string) {
        return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
      }
      function createFilterOptions(config = {}) {
        const {
          ignoreAccents = true,
          ignoreCase = true,
          limit,
          matchFrom = "any",
          stringify,
          trim = false
        } = config;
        return (options, {
          inputValue,
          getOptionLabel
        }) => {
          let input = trim ? inputValue.trim() : inputValue;
          if (ignoreCase) {
            input = input.toLowerCase();
          }
          if (ignoreAccents) {
            input = stripDiacritics(input);
          }
          const filteredOptions = !input ? options : options.filter((option) => {
            let candidate = (stringify || getOptionLabel)(option);
            if (ignoreCase) {
              candidate = candidate.toLowerCase();
            }
            if (ignoreAccents) {
              candidate = stripDiacritics(candidate);
            }
            return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
          });
          return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
        };
      }
      function findIndex(array, comp) {
        for (let i = 0; i < array.length; i += 1) {
          if (comp(array[i])) {
            return i;
          }
        }
        return -1;
      }
      var defaultFilterOptions = createFilterOptions();
      var pageSize = 5;
      function useAutocomplete(props2) {
        const {
          autoComplete = false,
          autoHighlight = false,
          autoSelect = false,
          blurOnSelect = false,
          clearOnBlur = !props2.freeSolo,
          clearOnEscape = false,
          componentName = "useAutocomplete",
          defaultValue = props2.multiple ? [] : null,
          disableClearable = false,
          disableCloseOnSelect = false,
          disabled: disabledProp,
          disabledItemsFocusable = false,
          disableListWrap = false,
          filterOptions = defaultFilterOptions,
          filterSelectedOptions = false,
          freeSolo = false,
          getOptionDisabled,
          getOptionLabel: getOptionLabelProp = (option) => {
            var _option$label;
            return (_option$label = option.label) != null ? _option$label : option;
          },
          groupBy,
          handleHomeEndKeys = !props2.freeSolo,
          id: idProp,
          includeInputInList = false,
          inputValue: inputValueProp,
          isOptionEqualToValue = (option, value2) => option === value2,
          multiple = false,
          onChange,
          onClose,
          onHighlightChange,
          onInputChange,
          onOpen,
          open: openProp,
          openOnFocus = false,
          options,
          readOnly = false,
          selectOnFocus = !props2.freeSolo,
          value: valueProp
        } = props2;
        const id = (0, _utils.unstable_useId)(idProp);
        let getOptionLabel = getOptionLabelProp;
        getOptionLabel = (option) => {
          const optionLabel = getOptionLabelProp(option);
          if (typeof optionLabel !== "string") {
            if (true) {
              const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
              console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
            }
            return String(optionLabel);
          }
          return optionLabel;
        };
        const ignoreFocus = React59.useRef(false);
        const firstFocus = React59.useRef(true);
        const inputRef = React59.useRef(null);
        const listboxRef = React59.useRef(null);
        const [anchorEl, setAnchorEl] = React59.useState(null);
        const [focusedTag, setFocusedTag] = React59.useState(-1);
        const defaultHighlighted = autoHighlight ? 0 : -1;
        const highlightedIndexRef = React59.useRef(defaultHighlighted);
        const [value, setValueState] = (0, _utils.unstable_useControlled)({
          controlled: valueProp,
          default: defaultValue,
          name: componentName
        });
        const [inputValue, setInputValueState] = (0, _utils.unstable_useControlled)({
          controlled: inputValueProp,
          default: "",
          name: componentName,
          state: "inputValue"
        });
        const [focused, setFocused] = React59.useState(false);
        const resetInputValue = React59.useCallback((event, newValue) => {
          const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
          if (!isOptionSelected && !clearOnBlur) {
            return;
          }
          let newInputValue;
          if (multiple) {
            newInputValue = "";
          } else if (newValue == null) {
            newInputValue = "";
          } else {
            const optionLabel = getOptionLabel(newValue);
            newInputValue = typeof optionLabel === "string" ? optionLabel : "";
          }
          if (inputValue === newInputValue) {
            return;
          }
          setInputValueState(newInputValue);
          if (onInputChange) {
            onInputChange(event, newInputValue, "reset");
          }
        }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
        const prevValue = React59.useRef();
        React59.useEffect(() => {
          const valueChange = value !== prevValue.current;
          prevValue.current = value;
          if (focused && !valueChange) {
            return;
          }
          if (freeSolo && !valueChange) {
            return;
          }
          resetInputValue(null, value);
        }, [value, resetInputValue, focused, prevValue, freeSolo]);
        const [open, setOpenState] = (0, _utils.unstable_useControlled)({
          controlled: openProp,
          default: false,
          name: componentName,
          state: "open"
        });
        const [inputPristine, setInputPristine] = React59.useState(true);
        const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
        const popupOpen = open && !readOnly;
        const filteredOptions = popupOpen ? filterOptions(
          options.filter((option) => {
            if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
              return false;
            }
            return true;
          }),
          {
            inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
            getOptionLabel
          }
        ) : [];
        const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
        if (true) {
          if (value !== null && !freeSolo && options.length > 0) {
            const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
            if (missingValue.length > 0) {
              console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
            }
          }
        }
        const focusTag = (0, _utils.unstable_useEventCallback)((tagToFocus) => {
          if (tagToFocus === -1) {
            inputRef.current.focus();
          } else {
            anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
          }
        });
        React59.useEffect(() => {
          if (multiple && focusedTag > value.length - 1) {
            setFocusedTag(-1);
            focusTag(-1);
          }
        }, [value, multiple, focusedTag, focusTag]);
        function validOptionIndex(index, direction) {
          if (!listboxRef.current || index === -1) {
            return -1;
          }
          let nextFocus = index;
          while (true) {
            if (direction === "next" && nextFocus === filteredOptions.length || direction === "previous" && nextFocus === -1) {
              return -1;
            }
            const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
            const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
            if (option && !option.hasAttribute("tabindex") || nextFocusDisabled) {
              nextFocus += direction === "next" ? 1 : -1;
            } else {
              return nextFocus;
            }
          }
        }
        const setHighlightedIndex = (0, _utils.unstable_useEventCallback)(({
          event,
          index,
          reason = "auto"
        }) => {
          highlightedIndexRef.current = index;
          if (index === -1) {
            inputRef.current.removeAttribute("aria-activedescendant");
          } else {
            inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
          }
          if (onHighlightChange) {
            onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
          }
          if (!listboxRef.current) {
            return;
          }
          const prev = listboxRef.current.querySelector('[role="option"].Mui-focused');
          if (prev) {
            prev.classList.remove("Mui-focused");
            prev.classList.remove("Mui-focusVisible");
          }
          const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
          if (!listboxNode) {
            return;
          }
          if (index === -1) {
            listboxNode.scrollTop = 0;
            return;
          }
          const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
          if (!option) {
            return;
          }
          option.classList.add("Mui-focused");
          if (reason === "keyboard") {
            option.classList.add("Mui-focusVisible");
          }
          if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse") {
            const element = option;
            const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
            const elementBottom = element.offsetTop + element.offsetHeight;
            if (elementBottom > scrollBottom) {
              listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
            } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
              listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
            }
          }
        });
        const changeHighlightedIndex = (0, _utils.unstable_useEventCallback)(({
          event,
          diff,
          direction = "next",
          reason = "auto"
        }) => {
          if (!popupOpen) {
            return;
          }
          const getNextIndex = () => {
            const maxIndex = filteredOptions.length - 1;
            if (diff === "reset") {
              return defaultHighlighted;
            }
            if (diff === "start") {
              return 0;
            }
            if (diff === "end") {
              return maxIndex;
            }
            const newIndex = highlightedIndexRef.current + diff;
            if (newIndex < 0) {
              if (newIndex === -1 && includeInputInList) {
                return -1;
              }
              if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
                return 0;
              }
              return maxIndex;
            }
            if (newIndex > maxIndex) {
              if (newIndex === maxIndex + 1 && includeInputInList) {
                return -1;
              }
              if (disableListWrap || Math.abs(diff) > 1) {
                return maxIndex;
              }
              return 0;
            }
            return newIndex;
          };
          const nextIndex = validOptionIndex(getNextIndex(), direction);
          setHighlightedIndex({
            index: nextIndex,
            reason,
            event
          });
          if (autoComplete && diff !== "reset") {
            if (nextIndex === -1) {
              inputRef.current.value = inputValue;
            } else {
              const option = getOptionLabel(filteredOptions[nextIndex]);
              inputRef.current.value = option;
              const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
              if (index === 0 && inputValue.length > 0) {
                inputRef.current.setSelectionRange(inputValue.length, option.length);
              }
            }
          }
        });
        const syncHighlightedIndex = React59.useCallback(() => {
          if (!popupOpen) {
            return;
          }
          const valueItem = multiple ? value[0] : value;
          if (filteredOptions.length === 0 || valueItem == null) {
            changeHighlightedIndex({
              diff: "reset"
            });
            return;
          }
          if (!listboxRef.current) {
            return;
          }
          if (valueItem != null) {
            const currentOption = filteredOptions[highlightedIndexRef.current];
            if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
              return;
            }
            const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
            if (itemIndex === -1) {
              changeHighlightedIndex({
                diff: "reset"
              });
            } else {
              setHighlightedIndex({
                index: itemIndex
              });
            }
            return;
          }
          if (highlightedIndexRef.current >= filteredOptions.length - 1) {
            setHighlightedIndex({
              index: filteredOptions.length - 1
            });
            return;
          }
          setHighlightedIndex({
            index: highlightedIndexRef.current
          });
        }, [
          filteredOptions.length,
          multiple ? false : value,
          filterSelectedOptions,
          changeHighlightedIndex,
          setHighlightedIndex,
          popupOpen,
          inputValue,
          multiple
        ]);
        const handleListboxRef = (0, _utils.unstable_useEventCallback)((node) => {
          (0, _utils.unstable_setRef)(listboxRef, node);
          if (!node) {
            return;
          }
          syncHighlightedIndex();
        });
        if (true) {
          React59.useEffect(() => {
            if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
              if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
                console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
              } else {
                console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
              }
            }
          }, [componentName]);
        }
        React59.useEffect(() => {
          syncHighlightedIndex();
        }, [syncHighlightedIndex]);
        const handleOpen = (event) => {
          if (open) {
            return;
          }
          setOpenState(true);
          setInputPristine(true);
          if (onOpen) {
            onOpen(event);
          }
        };
        const handleClose = (event, reason) => {
          if (!open) {
            return;
          }
          setOpenState(false);
          if (onClose) {
            onClose(event, reason);
          }
        };
        const handleValue = (event, newValue, reason, details) => {
          if (multiple) {
            if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
              return;
            }
          } else if (value === newValue) {
            return;
          }
          if (onChange) {
            onChange(event, newValue, reason, details);
          }
          setValueState(newValue);
        };
        const isTouch = React59.useRef(false);
        const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
          let reason = reasonProp;
          let newValue = option;
          if (multiple) {
            newValue = Array.isArray(value) ? value.slice() : [];
            if (true) {
              const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
              if (matches.length > 1) {
                console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
              }
            }
            const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
            if (itemIndex === -1) {
              newValue.push(option);
            } else if (origin !== "freeSolo") {
              newValue.splice(itemIndex, 1);
              reason = "removeOption";
            }
          }
          resetInputValue(event, newValue);
          handleValue(event, newValue, reason, {
            option
          });
          if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
            handleClose(event, reason);
          }
          if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
            inputRef.current.blur();
          }
        };
        function validTagIndex(index, direction) {
          if (index === -1) {
            return -1;
          }
          let nextFocus = index;
          while (true) {
            if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
              return -1;
            }
            const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
            if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
              nextFocus += direction === "next" ? 1 : -1;
            } else {
              return nextFocus;
            }
          }
        }
        const handleFocusTag = (event, direction) => {
          if (!multiple) {
            return;
          }
          if (inputValue === "") {
            handleClose(event, "toggleInput");
          }
          let nextTag = focusedTag;
          if (focusedTag === -1) {
            if (inputValue === "" && direction === "previous") {
              nextTag = value.length - 1;
            }
          } else {
            nextTag += direction === "next" ? 1 : -1;
            if (nextTag < 0) {
              nextTag = 0;
            }
            if (nextTag === value.length) {
              nextTag = -1;
            }
          }
          nextTag = validTagIndex(nextTag, direction);
          setFocusedTag(nextTag);
          focusTag(nextTag);
        };
        const handleClear = (event) => {
          ignoreFocus.current = true;
          setInputValueState("");
          if (onInputChange) {
            onInputChange(event, "", "clear");
          }
          handleValue(event, multiple ? [] : null, "clear");
        };
        const handleKeyDown = (other) => (event) => {
          if (other.onKeyDown) {
            other.onKeyDown(event);
          }
          if (event.defaultMuiPrevented) {
            return;
          }
          if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
            setFocusedTag(-1);
            focusTag(-1);
          }
          if (event.which !== 229) {
            switch (event.key) {
              case "Home":
                if (popupOpen && handleHomeEndKeys) {
                  event.preventDefault();
                  changeHighlightedIndex({
                    diff: "start",
                    direction: "next",
                    reason: "keyboard",
                    event
                  });
                }
                break;
              case "End":
                if (popupOpen && handleHomeEndKeys) {
                  event.preventDefault();
                  changeHighlightedIndex({
                    diff: "end",
                    direction: "previous",
                    reason: "keyboard",
                    event
                  });
                }
                break;
              case "PageUp":
                event.preventDefault();
                changeHighlightedIndex({
                  diff: -pageSize,
                  direction: "previous",
                  reason: "keyboard",
                  event
                });
                handleOpen(event);
                break;
              case "PageDown":
                event.preventDefault();
                changeHighlightedIndex({
                  diff: pageSize,
                  direction: "next",
                  reason: "keyboard",
                  event
                });
                handleOpen(event);
                break;
              case "ArrowDown":
                event.preventDefault();
                changeHighlightedIndex({
                  diff: 1,
                  direction: "next",
                  reason: "keyboard",
                  event
                });
                handleOpen(event);
                break;
              case "ArrowUp":
                event.preventDefault();
                changeHighlightedIndex({
                  diff: -1,
                  direction: "previous",
                  reason: "keyboard",
                  event
                });
                handleOpen(event);
                break;
              case "ArrowLeft":
                handleFocusTag(event, "previous");
                break;
              case "ArrowRight":
                handleFocusTag(event, "next");
                break;
              case "Enter":
                if (highlightedIndexRef.current !== -1 && popupOpen) {
                  const option = filteredOptions[highlightedIndexRef.current];
                  const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
                  event.preventDefault();
                  if (disabled) {
                    return;
                  }
                  selectNewValue(event, option, "selectOption");
                  if (autoComplete) {
                    inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                  }
                } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
                  if (multiple) {
                    event.preventDefault();
                  }
                  selectNewValue(event, inputValue, "createOption", "freeSolo");
                }
                break;
              case "Escape":
                if (popupOpen) {
                  event.preventDefault();
                  event.stopPropagation();
                  handleClose(event, "escape");
                } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
                  event.preventDefault();
                  event.stopPropagation();
                  handleClear(event);
                }
                break;
              case "Backspace":
                if (multiple && !readOnly && inputValue === "" && value.length > 0) {
                  const index = focusedTag === -1 ? value.length - 1 : focusedTag;
                  const newValue = value.slice();
                  newValue.splice(index, 1);
                  handleValue(event, newValue, "removeOption", {
                    option: value[index]
                  });
                }
                break;
              default:
            }
          }
        };
        const handleFocus = (event) => {
          setFocused(true);
          if (openOnFocus && !ignoreFocus.current) {
            handleOpen(event);
          }
        };
        const handleBlur = (event) => {
          if (listboxRef.current !== null && listboxRef.current.parentElement.contains(document.activeElement)) {
            inputRef.current.focus();
            return;
          }
          setFocused(false);
          firstFocus.current = true;
          ignoreFocus.current = false;
          if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
            selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
          } else if (autoSelect && freeSolo && inputValue !== "") {
            selectNewValue(event, inputValue, "blur", "freeSolo");
          } else if (clearOnBlur) {
            resetInputValue(event, value);
          }
          handleClose(event, "blur");
        };
        const handleInputChange = (event) => {
          const newValue = event.target.value;
          if (inputValue !== newValue) {
            setInputValueState(newValue);
            setInputPristine(false);
            if (onInputChange) {
              onInputChange(event, newValue, "input");
            }
          }
          if (newValue === "") {
            if (!disableClearable && !multiple) {
              handleValue(event, null, "clear");
            }
          } else {
            handleOpen(event);
          }
        };
        const handleOptionMouseOver = (event) => {
          setHighlightedIndex({
            event,
            index: Number(event.currentTarget.getAttribute("data-option-index")),
            reason: "mouse"
          });
        };
        const handleOptionTouchStart = () => {
          isTouch.current = true;
        };
        const handleOptionClick = (event) => {
          const index = Number(event.currentTarget.getAttribute("data-option-index"));
          selectNewValue(event, filteredOptions[index], "selectOption");
          isTouch.current = false;
        };
        const handleTagDelete = (index) => (event) => {
          const newValue = value.slice();
          newValue.splice(index, 1);
          handleValue(event, newValue, "removeOption", {
            option: value[index]
          });
        };
        const handlePopupIndicator = (event) => {
          if (open) {
            handleClose(event, "toggleInput");
          } else {
            handleOpen(event);
          }
        };
        const handleMouseDown = (event) => {
          if (event.target.getAttribute("id") !== id) {
            event.preventDefault();
          }
        };
        const handleClick = () => {
          inputRef.current.focus();
          if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
            inputRef.current.select();
          }
          firstFocus.current = false;
        };
        const handleInputMouseDown = (event) => {
          if (inputValue === "" || !open) {
            handlePopupIndicator(event);
          }
        };
        let dirty = freeSolo && inputValue.length > 0;
        dirty = dirty || (multiple ? value.length > 0 : value !== null);
        let groupedOptions = filteredOptions;
        if (groupBy) {
          const indexBy = /* @__PURE__ */ new Map();
          let warn = false;
          groupedOptions = filteredOptions.reduce((acc, option, index) => {
            const group = groupBy(option);
            if (acc.length > 0 && acc[acc.length - 1].group === group) {
              acc[acc.length - 1].options.push(option);
            } else {
              if (true) {
                if (indexBy.get(group) && !warn) {
                  console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
                  warn = true;
                }
                indexBy.set(group, true);
              }
              acc.push({
                key: index,
                index,
                group,
                options: [option]
              });
            }
            return acc;
          }, []);
        }
        if (disabledProp && focused) {
          handleBlur();
        }
        return {
          getRootProps: (other = {}) => (0, _extends2.default)({
            "aria-owns": listboxAvailable ? `${id}-listbox` : null
          }, other, {
            onKeyDown: handleKeyDown(other),
            onMouseDown: handleMouseDown,
            onClick: handleClick
          }),
          getInputLabelProps: () => ({
            id: `${id}-label`,
            htmlFor: id
          }),
          getInputProps: () => ({
            id,
            value: inputValue,
            onBlur: handleBlur,
            onFocus: handleFocus,
            onChange: handleInputChange,
            onMouseDown: handleInputMouseDown,
            "aria-activedescendant": popupOpen ? "" : null,
            "aria-autocomplete": autoComplete ? "both" : "list",
            "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
            "aria-expanded": listboxAvailable,
            autoComplete: "off",
            ref: inputRef,
            autoCapitalize: "none",
            spellCheck: "false",
            role: "combobox"
          }),
          getClearProps: () => ({
            tabIndex: -1,
            onClick: handleClear
          }),
          getPopupIndicatorProps: () => ({
            tabIndex: -1,
            onClick: handlePopupIndicator
          }),
          getTagProps: ({
            index
          }) => (0, _extends2.default)({
            key: index,
            "data-tag-index": index,
            tabIndex: -1
          }, !readOnly && {
            onDelete: handleTagDelete(index)
          }),
          getListboxProps: () => ({
            role: "listbox",
            id: `${id}-listbox`,
            "aria-labelledby": `${id}-label`,
            ref: handleListboxRef,
            onMouseDown: (event) => {
              event.preventDefault();
            }
          }),
          getOptionProps: ({
            index,
            option
          }) => {
            const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
            return {
              key: getOptionLabel(option),
              tabIndex: -1,
              role: "option",
              id: `${id}-option-${index}`,
              onMouseOver: handleOptionMouseOver,
              onClick: handleOptionClick,
              onTouchStart: handleOptionTouchStart,
              "data-option-index": index,
              "aria-disabled": disabled,
              "aria-selected": selected
            };
          },
          id,
          inputValue,
          value,
          dirty,
          popupOpen,
          focused: focused || focusedTag !== -1,
          anchorEl,
          setAnchorEl,
          focusedTag,
          groupedOptions
        };
      }
    }
  });

  // node_modules/@mui/base/node/AutocompleteUnstyled/index.js
  var require_AutocompleteUnstyled = __commonJS({
    "node_modules/@mui/base/node/AutocompleteUnstyled/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "createFilterOptions", {
        enumerable: true,
        get: function() {
          return _useAutocomplete.createFilterOptions;
        }
      });
      Object.defineProperty(exports, "useAutocomplete", {
        enumerable: true,
        get: function() {
          return _useAutocomplete.default;
        }
      });
      var _useAutocomplete = _interopRequireWildcard(require_useAutocomplete());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/composeClasses/index.js
  var require_composeClasses3 = __commonJS({
    "node_modules/@mui/base/node/composeClasses/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.unstable_composeClasses;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/base/node/BadgeUnstyled/useBadge.js
  var require_useBadge = __commonJS({
    "node_modules/@mui/base/node/BadgeUnstyled/useBadge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useBadge;
      var _utils = require_utils();
      function useBadge(parameters) {
        const {
          badgeContent: badgeContentProp,
          invisible: invisibleProp = false,
          max: maxProp = 99,
          showZero = false
        } = parameters;
        const prevProps = (0, _utils.usePreviousProps)({
          badgeContent: badgeContentProp,
          max: maxProp
        });
        let invisible = invisibleProp;
        if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
          invisible = true;
        }
        const {
          badgeContent,
          max = maxProp
        } = invisible ? prevProps : parameters;
        const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
        return {
          badgeContent,
          invisible,
          max,
          displayValue
        };
      }
    }
  });

  // node_modules/@mui/base/node/generateUtilityClasses/index.js
  var require_generateUtilityClasses3 = __commonJS({
    "node_modules/@mui/base/node/generateUtilityClasses/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.unstable_generateUtilityClasses;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/base/node/generateUtilityClass/index.js
  var require_generateUtilityClass3 = __commonJS({
    "node_modules/@mui/base/node/generateUtilityClass/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.unstable_generateUtilityClass;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/base/node/BadgeUnstyled/badgeUnstyledClasses.js
  var require_badgeUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/BadgeUnstyled/badgeUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getBadgeUnstyledUtilityClass = getBadgeUnstyledUtilityClass;
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      function getBadgeUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("BaseBadge", slot);
      }
      var badgeUnstyledClasses = (0, _generateUtilityClasses.default)("BaseBadge", ["root", "badge", "invisible"]);
      var _default = badgeUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/BadgeUnstyled/BadgeUnstyled.js
  var require_BadgeUnstyled = __commonJS({
    "node_modules/@mui/base/node/BadgeUnstyled/BadgeUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _useBadge = _interopRequireDefault(require_useBadge());
      var _badgeUnstyledClasses = require_badgeUnstyledClasses();
      var _utils = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["badgeContent", "component", "children", "components", "componentsProps", "invisible", "max", "showZero"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          invisible
        } = ownerState;
        const slots = {
          root: ["root"],
          badge: ["badge", invisible && "invisible"]
        };
        return (0, _composeClasses.default)(slots, _badgeUnstyledClasses.getBadgeUnstyledUtilityClass, void 0);
      };
      var BadgeUnstyled = /* @__PURE__ */ React59.forwardRef(function BadgeUnstyled2(props2, ref) {
        const {
          component,
          children,
          components = {},
          componentsProps = {},
          max: maxProp = 99,
          showZero = false
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          badgeContent,
          max,
          displayValue,
          invisible
        } = (0, _useBadge.default)((0, _extends2.default)({}, props2, {
          max: maxProp
        }));
        const ownerState = (0, _extends2.default)({}, props2, {
          badgeContent,
          invisible,
          max,
          showZero
        });
        const classes = useUtilityClasses21(ownerState);
        const Root2 = component || components.Root || "span";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref
          },
          ownerState,
          className: classes.root
        });
        const Badge = components.Badge || "span";
        const badgeProps = (0, _utils.useSlotProps)({
          elementType: Badge,
          externalSlotProps: componentsProps.badge,
          ownerState,
          className: classes.badge
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root2, (0, _extends2.default)({}, rootProps, {
          children: [children, /* @__PURE__ */ (0, _jsxRuntime.jsx)(Badge, (0, _extends2.default)({}, badgeProps, {
            children: displayValue
          }))]
        }));
      });
      true ? BadgeUnstyled.propTypes = {
        badgeContent: _propTypes.default.node,
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Badge: _propTypes.default.elementType,
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          badge: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        invisible: _propTypes.default.bool,
        max: _propTypes.default.number,
        showZero: _propTypes.default.bool
      } : void 0;
      var _default = BadgeUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/BadgeUnstyled/BadgeUnstyled.types.js
  var require_BadgeUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/BadgeUnstyled/BadgeUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/BadgeUnstyled/index.js
  var require_BadgeUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/BadgeUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        useBadge: true,
        badgeUnstyledClasses: true
      };
      Object.defineProperty(exports, "badgeUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _badgeUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _BadgeUnstyled.default;
        }
      });
      Object.defineProperty(exports, "useBadge", {
        enumerable: true,
        get: function() {
          return _useBadge.default;
        }
      });
      var _BadgeUnstyled = _interopRequireDefault(require_BadgeUnstyled());
      var _useBadge = _interopRequireWildcard(require_useBadge());
      Object.keys(_useBadge).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useBadge[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useBadge[key];
          }
        });
      });
      var _BadgeUnstyled2 = require_BadgeUnstyled_types();
      Object.keys(_BadgeUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _BadgeUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _BadgeUnstyled2[key];
          }
        });
      });
      var _badgeUnstyledClasses = _interopRequireWildcard(require_badgeUnstyledClasses());
      Object.keys(_badgeUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _badgeUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _badgeUnstyledClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/ButtonUnstyled/buttonUnstyledClasses.js
  var require_buttonUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/ButtonUnstyled/buttonUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getButtonUnstyledUtilityClass = getButtonUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getButtonUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("ButtonUnstyled", slot);
      }
      var buttonUnstyledClasses = (0, _generateUtilityClasses.default)("ButtonUnstyled", ["root", "active", "disabled", "focusVisible"]);
      var _default = buttonUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/ButtonUnstyled/useButton.js
  var require_useButton = __commonJS({
    "node_modules/@mui/base/node/ButtonUnstyled/useButton.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useButton;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useButton(parameters) {
        const {
          disabled = false,
          focusableWhenDisabled,
          href,
          ref: externalRef,
          tabIndex,
          to,
          type: type2
        } = parameters;
        const buttonRef = React59.useRef();
        const [active, setActive] = React59.useState(false);
        const {
          isFocusVisibleRef,
          onFocus: handleFocusVisible,
          onBlur: handleBlurVisible,
          ref: focusVisibleRef
        } = (0, _utils.unstable_useIsFocusVisible)();
        const [focusVisible, setFocusVisible] = React59.useState(false);
        if (disabled && !focusableWhenDisabled && focusVisible) {
          setFocusVisible(false);
        }
        React59.useEffect(() => {
          isFocusVisibleRef.current = focusVisible;
        }, [focusVisible, isFocusVisibleRef]);
        const [hostElementName, setHostElementName] = React59.useState("");
        const createHandleMouseLeave = (otherHandlers) => (event) => {
          var _otherHandlers$onMous;
          if (focusVisible) {
            event.preventDefault();
          }
          (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
        };
        const createHandleBlur = (otherHandlers) => (event) => {
          var _otherHandlers$onBlur;
          handleBlurVisible(event);
          if (isFocusVisibleRef.current === false) {
            setFocusVisible(false);
          }
          (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
        };
        const createHandleFocus = (otherHandlers) => (event) => {
          var _otherHandlers$onFocu2;
          if (!buttonRef.current) {
            buttonRef.current = event.currentTarget;
          }
          handleFocusVisible(event);
          if (isFocusVisibleRef.current === true) {
            var _otherHandlers$onFocu;
            setFocusVisible(true);
            (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
          }
          (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
        };
        const isNativeButton = () => {
          const button = buttonRef.current;
          return hostElementName === "BUTTON" || hostElementName === "INPUT" && ["button", "submit", "reset"].includes(button == null ? void 0 : button.type) || hostElementName === "A" && (button == null ? void 0 : button.href);
        };
        const createHandleClick = (otherHandlers) => (event) => {
          if (!disabled) {
            var _otherHandlers$onClic;
            (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
          }
        };
        const createHandleMouseDown = (otherHandlers) => (event) => {
          var _otherHandlers$onMous2;
          if (event.target === event.currentTarget && !disabled) {
            setActive(true);
          }
          (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
        };
        const createHandleMouseUp = (otherHandlers) => (event) => {
          var _otherHandlers$onMous3;
          if (event.target === event.currentTarget) {
            setActive(false);
          }
          (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
        };
        const createHandleKeyDown = (otherHandlers) => (event) => {
          var _otherHandlers$onKeyD;
          (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
          if (event.defaultPrevented) {
            return;
          }
          if (event.target === event.currentTarget && !isNativeButton() && event.key === " ") {
            event.preventDefault();
          }
          if (event.target === event.currentTarget && event.key === " " && !disabled) {
            setActive(true);
          }
          if (event.target === event.currentTarget && !isNativeButton() && event.key === "Enter" && !disabled) {
            var _otherHandlers$onClic2;
            (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
            event.preventDefault();
          }
        };
        const createHandleKeyUp = (otherHandlers) => (event) => {
          var _otherHandlers$onKeyU;
          if (event.target === event.currentTarget) {
            setActive(false);
          }
          (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
          if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === " " && !event.defaultPrevented) {
            var _otherHandlers$onClic3;
            (_otherHandlers$onClic3 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic3.call(otherHandlers, event);
          }
        };
        const updateHostElementName = React59.useCallback((instance) => {
          var _instance$tagName;
          setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : "");
        }, []);
        const handleRef = (0, _utils.unstable_useForkRef)(updateHostElementName, externalRef, focusVisibleRef, buttonRef);
        const buttonProps = {};
        if (hostElementName === "BUTTON") {
          buttonProps.type = type2 != null ? type2 : "button";
          if (focusableWhenDisabled) {
            buttonProps["aria-disabled"] = disabled;
          } else {
            buttonProps.disabled = disabled;
          }
        } else if (hostElementName !== "") {
          if (!href && !to) {
            buttonProps.role = "button";
            buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;
          }
          if (disabled) {
            buttonProps["aria-disabled"] = disabled;
            buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;
          }
        }
        const getRootProps = (otherHandlers = {}) => {
          const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
          const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, otherHandlers);
          delete externalEventHandlers.onFocusVisible;
          return (0, _extends2.default)({
            type: type2
          }, externalEventHandlers, buttonProps, {
            onBlur: createHandleBlur(externalEventHandlers),
            onClick: createHandleClick(externalEventHandlers),
            onFocus: createHandleFocus(externalEventHandlers),
            onKeyDown: createHandleKeyDown(externalEventHandlers),
            onKeyUp: createHandleKeyUp(externalEventHandlers),
            onMouseDown: createHandleMouseDown(externalEventHandlers),
            onMouseLeave: createHandleMouseLeave(externalEventHandlers),
            onMouseUp: createHandleMouseUp(externalEventHandlers),
            ref: handleRef
          });
        };
        return {
          getRootProps,
          focusVisible,
          setFocusVisible,
          disabled,
          active
        };
      }
    }
  });

  // node_modules/@mui/base/node/ButtonUnstyled/ButtonUnstyled.js
  var require_ButtonUnstyled = __commonJS({
    "node_modules/@mui/base/node/ButtonUnstyled/ButtonUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _buttonUnstyledClasses = require_buttonUnstyledClasses();
      var _useButton = _interopRequireDefault(require_useButton());
      var _utils = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["action", "children", "component", "components", "componentsProps", "disabled", "focusableWhenDisabled", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseLeave"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          active,
          disabled,
          focusVisible
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active"]
        };
        return (0, _composeClasses.default)(slots, _buttonUnstyledClasses.getButtonUnstyledUtilityClass, {});
      };
      var ButtonUnstyled = /* @__PURE__ */ React59.forwardRef(function ButtonUnstyled2(props2, forwardedRef) {
        var _ref;
        const {
          action,
          children,
          component,
          components = {},
          componentsProps = {},
          focusableWhenDisabled = false
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const buttonRef = React59.useRef();
        const {
          active,
          focusVisible,
          setFocusVisible,
          getRootProps
        } = (0, _useButton.default)((0, _extends2.default)({}, props2, {
          focusableWhenDisabled
        }));
        React59.useImperativeHandle(action, () => ({
          focusVisible: () => {
            setFocusVisible(true);
            buttonRef.current.focus();
          }
        }), [setFocusVisible]);
        const ownerState = (0, _extends2.default)({}, props2, {
          active,
          focusableWhenDisabled,
          focusVisible
        });
        const classes = useUtilityClasses21(ownerState);
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : "button";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root2,
          getSlotProps: getRootProps,
          externalForwardedProps: other,
          externalSlotProps: componentsProps.root,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root2, (0, _extends2.default)({}, rootProps, {
          children
        }));
      });
      true ? ButtonUnstyled.propTypes = {
        action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
          current: _propTypes.default.shape({
            focusVisible: _propTypes.default.func.isRequired
          })
        })]),
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        disabled: _propTypes.default.bool,
        focusableWhenDisabled: _propTypes.default.bool,
        onBlur: _propTypes.default.func,
        onClick: _propTypes.default.func,
        onFocus: _propTypes.default.func,
        onFocusVisible: _propTypes.default.func,
        onKeyDown: _propTypes.default.func,
        onKeyUp: _propTypes.default.func,
        onMouseLeave: _propTypes.default.func
      } : void 0;
      var _default = ButtonUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/ButtonUnstyled/ButtonUnstyled.types.js
  var require_ButtonUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/ButtonUnstyled/ButtonUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/ButtonUnstyled/useButton.types.js
  var require_useButton_types = __commonJS({
    "node_modules/@mui/base/node/ButtonUnstyled/useButton.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/ButtonUnstyled/index.js
  var require_ButtonUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/ButtonUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        buttonUnstyledClasses: true,
        getButtonUnstyledUtilityClass: true,
        useButton: true
      };
      Object.defineProperty(exports, "buttonUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _buttonUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ButtonUnstyled.default;
        }
      });
      Object.defineProperty(exports, "getButtonUnstyledUtilityClass", {
        enumerable: true,
        get: function() {
          return _buttonUnstyledClasses.getButtonUnstyledUtilityClass;
        }
      });
      Object.defineProperty(exports, "useButton", {
        enumerable: true,
        get: function() {
          return _useButton.default;
        }
      });
      var _ButtonUnstyled = _interopRequireDefault(require_ButtonUnstyled());
      var _buttonUnstyledClasses = _interopRequireWildcard(require_buttonUnstyledClasses());
      var _ButtonUnstyled2 = require_ButtonUnstyled_types();
      Object.keys(_ButtonUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ButtonUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ButtonUnstyled2[key];
          }
        });
      });
      var _useButton = _interopRequireDefault(require_useButton());
      var _useButton2 = require_useButton_types();
      Object.keys(_useButton2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useButton2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useButton2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/ClickAwayListener/ClickAwayListener.js
  var require_ClickAwayListener = __commonJS({
    "node_modules/@mui/base/node/ClickAwayListener/ClickAwayListener.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function mapEventPropToEvent(eventProp) {
        return eventProp.substring(2).toLowerCase();
      }
      function clickedRootScrollbar(event, doc) {
        return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
      }
      function ClickAwayListener(props2) {
        const {
          children,
          disableReactTree = false,
          mouseEvent = "onClick",
          onClickAway,
          touchEvent = "onTouchEnd"
        } = props2;
        const movedRef = React59.useRef(false);
        const nodeRef = React59.useRef(null);
        const activatedRef = React59.useRef(false);
        const syntheticEventRef = React59.useRef(false);
        React59.useEffect(() => {
          setTimeout(() => {
            activatedRef.current = true;
          }, 0);
          return () => {
            activatedRef.current = false;
          };
        }, []);
        const handleRef = (0, _utils.unstable_useForkRef)(
          children.ref,
          nodeRef
        );
        const handleClickAway = (0, _utils.unstable_useEventCallback)((event) => {
          const insideReactTree = syntheticEventRef.current;
          syntheticEventRef.current = false;
          const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);
          if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
            return;
          }
          if (movedRef.current) {
            movedRef.current = false;
            return;
          }
          let insideDOM;
          if (event.composedPath) {
            insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
          } else {
            insideDOM = !doc.documentElement.contains(
              event.target
            ) || nodeRef.current.contains(
              event.target
            );
          }
          if (!insideDOM && (disableReactTree || !insideReactTree)) {
            onClickAway(event);
          }
        });
        const createHandleSynthetic = (handlerName) => (event) => {
          syntheticEventRef.current = true;
          const childrenPropsHandler = children.props[handlerName];
          if (childrenPropsHandler) {
            childrenPropsHandler(event);
          }
        };
        const childrenProps = {
          ref: handleRef
        };
        if (touchEvent !== false) {
          childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
        }
        React59.useEffect(() => {
          if (touchEvent !== false) {
            const mappedTouchEvent = mapEventPropToEvent(touchEvent);
            const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);
            const handleTouchMove = () => {
              movedRef.current = true;
            };
            doc.addEventListener(mappedTouchEvent, handleClickAway);
            doc.addEventListener("touchmove", handleTouchMove);
            return () => {
              doc.removeEventListener(mappedTouchEvent, handleClickAway);
              doc.removeEventListener("touchmove", handleTouchMove);
            };
          }
          return void 0;
        }, [handleClickAway, touchEvent]);
        if (mouseEvent !== false) {
          childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
        }
        React59.useEffect(() => {
          if (mouseEvent !== false) {
            const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
            const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);
            doc.addEventListener(mappedMouseEvent, handleClickAway);
            return () => {
              doc.removeEventListener(mappedMouseEvent, handleClickAway);
            };
          }
          return void 0;
        }, [handleClickAway, mouseEvent]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React59.Fragment, {
          children: /* @__PURE__ */ React59.cloneElement(children, childrenProps)
        });
      }
      true ? ClickAwayListener.propTypes = {
        children: _utils.elementAcceptingRef.isRequired,
        disableReactTree: _propTypes.default.bool,
        mouseEvent: _propTypes.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
        onClickAway: _propTypes.default.func.isRequired,
        touchEvent: _propTypes.default.oneOf(["onTouchEnd", "onTouchStart", false])
      } : void 0;
      if (true) {
        ClickAwayListener["propTypes"] = (0, _utils.exactProp)(ClickAwayListener.propTypes);
      }
      var _default = ClickAwayListener;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/ClickAwayListener/index.js
  var require_ClickAwayListener2 = __commonJS({
    "node_modules/@mui/base/node/ClickAwayListener/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ClickAwayListener.default;
        }
      });
      var _ClickAwayListener = _interopRequireWildcard(require_ClickAwayListener());
      Object.keys(_ClickAwayListener).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ClickAwayListener[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ClickAwayListener[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/FocusTrap/FocusTrap.js
  var require_FocusTrap = __commonJS({
    "node_modules/@mui/base/node/FocusTrap/FocusTrap.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
      function getTabIndex(node) {
        const tabindexAttr = parseInt(node.getAttribute("tabindex"), 10);
        if (!Number.isNaN(tabindexAttr)) {
          return tabindexAttr;
        }
        if (node.contentEditable === "true" || (node.nodeName === "AUDIO" || node.nodeName === "VIDEO" || node.nodeName === "DETAILS") && node.getAttribute("tabindex") === null) {
          return 0;
        }
        return node.tabIndex;
      }
      function isNonTabbableRadio(node) {
        if (node.tagName !== "INPUT" || node.type !== "radio") {
          return false;
        }
        if (!node.name) {
          return false;
        }
        const getRadio = (selector) => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
        let roving = getRadio(`[name="${node.name}"]:checked`);
        if (!roving) {
          roving = getRadio(`[name="${node.name}"]`);
        }
        return roving !== node;
      }
      function isNodeMatchingSelectorFocusable(node) {
        if (node.disabled || node.tagName === "INPUT" && node.type === "hidden" || isNonTabbableRadio(node)) {
          return false;
        }
        return true;
      }
      function defaultGetTabbable(root2) {
        const regularTabNodes = [];
        const orderedTabNodes = [];
        Array.from(root2.querySelectorAll(candidatesSelector)).forEach((node, i) => {
          const nodeTabIndex = getTabIndex(node);
          if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
            return;
          }
          if (nodeTabIndex === 0) {
            regularTabNodes.push(node);
          } else {
            orderedTabNodes.push({
              documentOrder: i,
              tabIndex: nodeTabIndex,
              node
            });
          }
        });
        return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
      }
      function defaultIsEnabled() {
        return true;
      }
      function FocusTrap(props2) {
        const {
          children,
          disableAutoFocus = false,
          disableEnforceFocus = false,
          disableRestoreFocus = false,
          getTabbable = defaultGetTabbable,
          isEnabled = defaultIsEnabled,
          open
        } = props2;
        const ignoreNextEnforceFocus = React59.useRef();
        const sentinelStart = React59.useRef(null);
        const sentinelEnd = React59.useRef(null);
        const nodeToRestore = React59.useRef(null);
        const reactFocusEventTarget = React59.useRef(null);
        const activated = React59.useRef(false);
        const rootRef = React59.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(children.ref, rootRef);
        const lastKeydown = React59.useRef(null);
        React59.useEffect(() => {
          if (!open || !rootRef.current) {
            return;
          }
          activated.current = !disableAutoFocus;
        }, [disableAutoFocus, open]);
        React59.useEffect(() => {
          if (!open || !rootRef.current) {
            return;
          }
          const doc = (0, _utils.unstable_ownerDocument)(rootRef.current);
          if (!rootRef.current.contains(doc.activeElement)) {
            if (!rootRef.current.hasAttribute("tabIndex")) {
              if (true) {
                console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
              }
              rootRef.current.setAttribute("tabIndex", -1);
            }
            if (activated.current) {
              rootRef.current.focus();
            }
          }
          return () => {
            if (!disableRestoreFocus) {
              if (nodeToRestore.current && nodeToRestore.current.focus) {
                ignoreNextEnforceFocus.current = true;
                nodeToRestore.current.focus();
              }
              nodeToRestore.current = null;
            }
          };
        }, [open]);
        React59.useEffect(() => {
          if (!open || !rootRef.current) {
            return;
          }
          const doc = (0, _utils.unstable_ownerDocument)(rootRef.current);
          const contain = (nativeEvent) => {
            const {
              current: rootElement
            } = rootRef;
            if (rootElement === null) {
              return;
            }
            if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
              ignoreNextEnforceFocus.current = false;
              return;
            }
            if (!rootElement.contains(doc.activeElement)) {
              if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
                reactFocusEventTarget.current = null;
              } else if (reactFocusEventTarget.current !== null) {
                return;
              }
              if (!activated.current) {
                return;
              }
              let tabbable = [];
              if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
                tabbable = getTabbable(rootRef.current);
              }
              if (tabbable.length > 0) {
                var _lastKeydown$current, _lastKeydown$current2;
                const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
                const focusNext = tabbable[0];
                const focusPrevious = tabbable[tabbable.length - 1];
                if (isShiftTab) {
                  focusPrevious.focus();
                } else {
                  focusNext.focus();
                }
              } else {
                rootElement.focus();
              }
            }
          };
          const loopFocus = (nativeEvent) => {
            lastKeydown.current = nativeEvent;
            if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
              return;
            }
            if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
              ignoreNextEnforceFocus.current = true;
              sentinelEnd.current.focus();
            }
          };
          doc.addEventListener("focusin", contain);
          doc.addEventListener("keydown", loopFocus, true);
          const interval = setInterval(() => {
            if (doc.activeElement.tagName === "BODY") {
              contain();
            }
          }, 50);
          return () => {
            clearInterval(interval);
            doc.removeEventListener("focusin", contain);
            doc.removeEventListener("keydown", loopFocus, true);
          };
        }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
        const onFocus = (event) => {
          if (nodeToRestore.current === null) {
            nodeToRestore.current = event.relatedTarget;
          }
          activated.current = true;
          reactFocusEventTarget.current = event.target;
          const childrenPropsHandler = children.props.onFocus;
          if (childrenPropsHandler) {
            childrenPropsHandler(event);
          }
        };
        const handleFocusSentinel = (event) => {
          if (nodeToRestore.current === null) {
            nodeToRestore.current = event.relatedTarget;
          }
          activated.current = true;
        };
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React59.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
            tabIndex: open ? 0 : -1,
            onFocus: handleFocusSentinel,
            ref: sentinelStart,
            "data-testid": "sentinelStart"
          }), /* @__PURE__ */ React59.cloneElement(children, {
            ref: handleRef,
            onFocus
          }), /* @__PURE__ */ (0, _jsxRuntime.jsx)("div", {
            tabIndex: open ? 0 : -1,
            onFocus: handleFocusSentinel,
            ref: sentinelEnd,
            "data-testid": "sentinelEnd"
          })]
        });
      }
      true ? FocusTrap.propTypes = {
        children: _utils.elementAcceptingRef,
        disableAutoFocus: _propTypes.default.bool,
        disableEnforceFocus: _propTypes.default.bool,
        disableRestoreFocus: _propTypes.default.bool,
        getTabbable: _propTypes.default.func,
        isEnabled: _propTypes.default.func,
        open: _propTypes.default.bool.isRequired
      } : void 0;
      if (true) {
        FocusTrap["propTypes"] = (0, _utils.exactProp)(FocusTrap.propTypes);
      }
      var _default = FocusTrap;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/FocusTrap/index.js
  var require_FocusTrap2 = __commonJS({
    "node_modules/@mui/base/node/FocusTrap/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _FocusTrap.default;
        }
      });
      var _FocusTrap = _interopRequireDefault(require_FocusTrap());
    }
  });

  // node_modules/@mui/base/node/FormControlUnstyled/FormControlUnstyledContext.js
  var require_FormControlUnstyledContext = __commonJS({
    "node_modules/@mui/base/node/FormControlUnstyled/FormControlUnstyledContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var FormControlUnstyledContext = /* @__PURE__ */ React59.createContext(void 0);
      if (true) {
        FormControlUnstyledContext.displayName = "FormControlUnstyledContext";
      }
      var _default = FormControlUnstyledContext;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/FormControlUnstyled/formControlUnstyledClasses.js
  var require_formControlUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/FormControlUnstyled/formControlUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getFormControlUnstyledUtilityClass = getFormControlUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getFormControlUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("BaseFormControl", slot);
      }
      var formControlUnstyledClasses = (0, _generateUtilityClasses.default)("BaseFormControl", ["root", "disabled", "error", "filled", "focused", "required"]);
      var _default = formControlUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/FormControlUnstyled/FormControlUnstyled.js
  var require_FormControlUnstyled = __commonJS({
    "node_modules/@mui/base/node/FormControlUnstyled/FormControlUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _FormControlUnstyledContext = _interopRequireDefault(require_FormControlUnstyledContext());
      var _formControlUnstyledClasses = require_formControlUnstyledClasses();
      var _utils2 = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["defaultValue", "children", "component", "components", "componentsProps", "disabled", "error", "onChange", "required", "value"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function hasValue(value) {
        return value != null && !(Array.isArray(value) && value.length === 0) && value !== "";
      }
      function useUtilityClasses21(ownerState) {
        const {
          disabled,
          error,
          filled,
          focused,
          required
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focused && "focused", error && "error", filled && "filled", required && "required"]
        };
        return (0, _composeClasses.default)(slots, _formControlUnstyledClasses.getFormControlUnstyledUtilityClass, {});
      }
      var FormControlUnstyled = /* @__PURE__ */ React59.forwardRef(function FormControlUnstyled2(props2, ref) {
        var _ref;
        const {
          defaultValue,
          children,
          component,
          components = {},
          componentsProps = {},
          disabled = false,
          error = false,
          onChange,
          required = false,
          value: incomingValue
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const [value, setValue] = (0, _utils.unstable_useControlled)({
          controlled: incomingValue,
          default: defaultValue,
          name: "FormControl",
          state: "value"
        });
        const filled = hasValue(value);
        const [focused, setFocused] = React59.useState(false);
        if (disabled && focused) {
          setFocused(false);
        }
        const ownerState = (0, _extends2.default)({}, props2, {
          disabled,
          error,
          filled,
          focused,
          required
        });
        const handleChange = (event) => {
          setValue(event.target.value);
          onChange == null ? void 0 : onChange(event);
        };
        const childContext = {
          disabled,
          error,
          filled,
          focused,
          onBlur: () => {
            setFocused(false);
          },
          onChange: handleChange,
          onFocus: () => {
            setFocused(true);
          },
          required,
          value: value != null ? value : ""
        };
        const classes = useUtilityClasses21(ownerState);
        const renderChildren = () => {
          if (typeof children === "function") {
            return children(childContext);
          }
          return children;
        };
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref,
            children: renderChildren()
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_FormControlUnstyledContext.default.Provider, {
          value: childContext,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root2, (0, _extends2.default)({}, rootProps))
        });
      });
      true ? FormControlUnstyled.propTypes = {
        children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        defaultValue: _propTypes.default.any,
        disabled: _propTypes.default.bool,
        error: _propTypes.default.bool,
        onChange: _propTypes.default.func,
        required: _propTypes.default.bool,
        value: _propTypes.default.any
      } : void 0;
      var _default = FormControlUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/FormControlUnstyled/useFormControlUnstyledContext.js
  var require_useFormControlUnstyledContext = __commonJS({
    "node_modules/@mui/base/node/FormControlUnstyled/useFormControlUnstyledContext.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useFormControlUnstyledContext;
      var React59 = _interopRequireWildcard(require_react());
      var _FormControlUnstyledContext = _interopRequireDefault(require_FormControlUnstyledContext());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useFormControlUnstyledContext() {
        return React59.useContext(_FormControlUnstyledContext.default);
      }
    }
  });

  // node_modules/@mui/base/node/FormControlUnstyled/index.js
  var require_FormControlUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/FormControlUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        FormControlUnstyledContext: true,
        formControlUnstyledClasses: true,
        useFormControlUnstyledContext: true
      };
      Object.defineProperty(exports, "FormControlUnstyledContext", {
        enumerable: true,
        get: function() {
          return _FormControlUnstyledContext.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _FormControlUnstyled.default;
        }
      });
      Object.defineProperty(exports, "formControlUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _formControlUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useFormControlUnstyledContext", {
        enumerable: true,
        get: function() {
          return _useFormControlUnstyledContext.default;
        }
      });
      var _FormControlUnstyled = _interopRequireDefault(require_FormControlUnstyled());
      var _FormControlUnstyledContext = _interopRequireDefault(require_FormControlUnstyledContext());
      var _formControlUnstyledClasses = _interopRequireWildcard(require_formControlUnstyledClasses());
      Object.keys(_formControlUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _formControlUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _formControlUnstyledClasses[key];
          }
        });
      });
      var _useFormControlUnstyledContext = _interopRequireDefault(require_useFormControlUnstyledContext());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/InputUnstyled/inputUnstyledClasses.js
  var require_inputUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/InputUnstyled/inputUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getInputUnstyledUtilityClass = getInputUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getInputUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiInput", slot);
      }
      var inputBaseClasses = (0, _generateUtilityClasses.default)("MuiInput", ["root", "formControl", "focused", "disabled", "error", "multiline", "input", "inputMultiline", "inputTypeSearch", "adornedStart", "adornedEnd"]);
      var _default = inputBaseClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/InputUnstyled/useInput.js
  var require_useInput = __commonJS({
    "node_modules/@mui/base/node/InputUnstyled/useInput.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useInput;
      var _extends2 = _interopRequireDefault(require_extends());
      var _utils = require_utils();
      var React59 = _interopRequireWildcard(require_react());
      var _FormControlUnstyled = require_FormControlUnstyled2();
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useInput(parameters) {
        const {
          defaultValue: defaultValueProp,
          disabled: disabledProp = false,
          error: errorProp = false,
          onBlur,
          onChange,
          onFocus,
          required: requiredProp = false,
          value: valueProp
        } = parameters;
        const formControlContext = (0, _FormControlUnstyled.useFormControlUnstyledContext)();
        let defaultValue;
        let disabled;
        let error;
        let required;
        let value;
        if (formControlContext) {
          var _formControlContext$d, _formControlContext$e, _formControlContext$r;
          defaultValue = void 0;
          disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
          error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
          required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
          value = formControlContext.value;
          if (true) {
            const definedLocalProps = ["defaultValue", "disabled", "error", "required", "value"].filter((prop) => parameters[prop] !== void 0);
            if (definedLocalProps.length > 0) {
              console.warn(["MUI: You have set props on an input that is inside a FormControlUnstyled.", "Set these props on a FormControlUnstyled instead. Otherwise they will be ignored.", `Ignored props: ${definedLocalProps.join(", ")}`].join("\n"));
            }
          }
        } else {
          defaultValue = defaultValueProp;
          disabled = disabledProp;
          error = errorProp;
          required = requiredProp;
          value = valueProp;
        }
        const {
          current: isControlled
        } = React59.useRef(value != null);
        const handleInputRefWarning = React59.useCallback((instance) => {
          if (true) {
            if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
              console.error(["MUI: You have provided a `components.Input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
            }
          }
        }, []);
        const inputRef = React59.useRef(null);
        const handleInputRef = (0, _utils.unstable_useForkRef)(inputRef, handleInputRefWarning);
        const [focused, setFocused] = React59.useState(false);
        React59.useEffect(() => {
          if (!formControlContext && disabled && focused) {
            setFocused(false);
            onBlur == null ? void 0 : onBlur();
          }
        }, [formControlContext, disabled, focused, onBlur]);
        const handleFocus = (otherHandlers) => (event) => {
          var _otherHandlers$onFocu;
          if (formControlContext != null && formControlContext.disabled) {
            event.stopPropagation();
            return;
          }
          (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
          if (formControlContext && formControlContext.onFocus) {
            var _formControlContext$o;
            formControlContext == null ? void 0 : (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);
          } else {
            setFocused(true);
          }
        };
        const handleBlur = (otherHandlers) => (event) => {
          var _otherHandlers$onBlur;
          (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
          if (formControlContext && formControlContext.onBlur) {
            formControlContext.onBlur();
          } else {
            setFocused(false);
          }
        };
        const handleChange = (otherHandlers) => (event, ...args) => {
          var _formControlContext$o2, _otherHandlers$onChan;
          if (!isControlled) {
            const element = event.target || inputRef.current;
            if (element == null) {
              throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`components.Input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, _utils.formatMuiErrorMessage)(17));
            }
          }
          formControlContext == null ? void 0 : (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event);
          (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);
        };
        const handleClick = (otherHandlers) => (event) => {
          var _otherHandlers$onClic;
          if (inputRef.current && event.currentTarget === event.target) {
            inputRef.current.focus();
          }
          (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
        };
        const getRootProps = (externalProps = {}) => {
          const propsEventHandlers = (0, _extractEventHandlers.default)(parameters, ["onBlur", "onChange", "onFocus"]);
          const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, (0, _extractEventHandlers.default)(externalProps));
          return (0, _extends2.default)({}, externalProps, externalEventHandlers, {
            onClick: handleClick(externalEventHandlers)
          });
        };
        const getInputProps = (externalProps = {}) => {
          const propsEventHandlers = {
            onBlur,
            onChange,
            onFocus
          };
          const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, (0, _extractEventHandlers.default)(externalProps));
          const mergedEventHandlers = (0, _extends2.default)({}, externalProps, externalEventHandlers, {
            onBlur: handleBlur(externalEventHandlers),
            onChange: handleChange(externalEventHandlers),
            onFocus: handleFocus(externalEventHandlers)
          });
          return (0, _extends2.default)({}, mergedEventHandlers, {
            "aria-invalid": error || void 0,
            defaultValue,
            ref: handleInputRef,
            value,
            required,
            disabled
          });
        };
        return {
          disabled,
          error,
          focused,
          formControlContext,
          getInputProps,
          getRootProps,
          required,
          value
        };
      }
    }
  });

  // node_modules/@mui/base/node/InputUnstyled/InputUnstyled.js
  var require_InputUnstyled = __commonJS({
    "node_modules/@mui/base/node/InputUnstyled/InputUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      var _inputUnstyledClasses = _interopRequireDefault(require_inputUnstyledClasses());
      var _useInput = _interopRequireDefault(require_useInput());
      var _utils = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "component", "components", "componentsProps", "defaultValue", "disabled", "endAdornment", "error", "id", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "startAdornment", "value", "type", "rows", "minRows", "maxRows"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var InputUnstyled = /* @__PURE__ */ React59.forwardRef(function InputUnstyled2(props2, forwardedRef) {
        var _ref, _components$Textarea, _components$Input;
        const {
          "aria-describedby": ariaDescribedby,
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledby,
          autoComplete,
          autoFocus,
          className,
          component,
          components = {},
          componentsProps = {},
          defaultValue,
          disabled,
          endAdornment,
          error,
          id,
          multiline = false,
          name,
          onClick,
          onChange,
          onKeyDown,
          onKeyUp,
          onFocus,
          onBlur,
          placeholder,
          readOnly,
          required,
          startAdornment,
          value,
          type: typeProp,
          rows,
          minRows,
          maxRows
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          getRootProps,
          getInputProps,
          focused,
          formControlContext,
          error: errorState,
          disabled: disabledState
        } = (0, _useInput.default)({
          disabled,
          defaultValue,
          error,
          onBlur,
          onClick,
          onChange,
          onFocus,
          required,
          value
        });
        const type2 = !multiline ? typeProp != null ? typeProp : "text" : void 0;
        const ownerState = (0, _extends2.default)({}, props2, {
          disabled: disabledState,
          error: errorState,
          focused,
          formControlContext,
          multiline,
          type: type2
        });
        const rootStateClasses = {
          [_inputUnstyledClasses.default.disabled]: disabledState,
          [_inputUnstyledClasses.default.error]: errorState,
          [_inputUnstyledClasses.default.focused]: focused,
          [_inputUnstyledClasses.default.formControl]: Boolean(formControlContext),
          [_inputUnstyledClasses.default.multiline]: multiline,
          [_inputUnstyledClasses.default.adornedStart]: Boolean(startAdornment),
          [_inputUnstyledClasses.default.adornedEnd]: Boolean(endAdornment)
        };
        const inputStateClasses = {
          [_inputUnstyledClasses.default.disabled]: disabledState,
          [_inputUnstyledClasses.default.multiline]: multiline
        };
        const propsToForward = {
          "aria-describedby": ariaDescribedby,
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledby,
          autoComplete,
          autoFocus,
          id,
          onKeyDown,
          onKeyUp,
          name,
          placeholder,
          readOnly,
          type: type2
        };
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root2,
          getSlotProps: getRootProps,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: forwardedRef
          },
          ownerState,
          className: [_inputUnstyledClasses.default.root, rootStateClasses, className]
        });
        const Input = multiline ? (_components$Textarea = components.Textarea) != null ? _components$Textarea : "textarea" : (_components$Input = components.Input) != null ? _components$Input : "input";
        const inputProps = (0, _utils.useSlotProps)({
          elementType: Input,
          getSlotProps: (otherHandlers) => getInputProps((0, _extends2.default)({}, otherHandlers, propsToForward)),
          externalSlotProps: componentsProps.input,
          additionalProps: (0, _extends2.default)({
            rows: multiline ? rows : void 0
          }, multiline && !(0, _isHostComponent.default)(Input) && {
            minRows: rows || minRows,
            maxRows: rows || maxRows
          }),
          ownerState,
          className: [_inputUnstyledClasses.default.input, inputStateClasses]
        });
        if (true) {
          if (multiline) {
            if (rows) {
              if (minRows || maxRows) {
                console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
              }
            }
          }
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root2, (0, _extends2.default)({}, rootProps, {
          children: [startAdornment, /* @__PURE__ */ (0, _jsxRuntime.jsx)(Input, (0, _extends2.default)({}, inputProps)), endAdornment]
        }));
      });
      true ? InputUnstyled.propTypes = {
        "aria-describedby": _propTypes.default.string,
        "aria-label": _propTypes.default.string,
        "aria-labelledby": _propTypes.default.string,
        autoComplete: _propTypes.default.string,
        autoFocus: _propTypes.default.bool,
        children: _propTypes.default.node,
        className: _propTypes.default.string,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Input: _propTypes.default.elementType,
          Root: _propTypes.default.elementType,
          Textarea: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        defaultValue: _propTypes.default.any,
        disabled: _propTypes.default.bool,
        endAdornment: _propTypes.default.node,
        error: _propTypes.default.bool,
        id: _propTypes.default.string,
        maxRows: _propTypes.default.number,
        minRows: _propTypes.default.number,
        multiline: _propTypes.default.bool,
        name: _propTypes.default.string,
        onBlur: _propTypes.default.func,
        onChange: _propTypes.default.func,
        onClick: _propTypes.default.func,
        onFocus: _propTypes.default.func,
        onKeyDown: _propTypes.default.func,
        onKeyUp: _propTypes.default.func,
        placeholder: _propTypes.default.string,
        readOnly: _propTypes.default.bool,
        required: _propTypes.default.bool,
        rows: _propTypes.default.number,
        startAdornment: _propTypes.default.node,
        type: _propTypes.default.oneOf(["button", "checkbox", "color", "date", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]),
        value: _propTypes.default.any
      } : void 0;
      var _default = InputUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/InputUnstyled/InputUnstyled.types.js
  var require_InputUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/InputUnstyled/InputUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/InputUnstyled/useInput.types.js
  var require_useInput_types = __commonJS({
    "node_modules/@mui/base/node/InputUnstyled/useInput.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/InputUnstyled/index.js
  var require_InputUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/InputUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        useInput: true,
        inputUnstyledClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _InputUnstyled.default;
        }
      });
      Object.defineProperty(exports, "inputUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _inputUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useInput", {
        enumerable: true,
        get: function() {
          return _useInput.default;
        }
      });
      var _InputUnstyled = _interopRequireDefault(require_InputUnstyled());
      var _InputUnstyled2 = require_InputUnstyled_types();
      Object.keys(_InputUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _InputUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _InputUnstyled2[key];
          }
        });
      });
      var _useInput = _interopRequireDefault(require_useInput());
      var _useInput2 = require_useInput_types();
      Object.keys(_useInput2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useInput2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useInput2[key];
          }
        });
      });
      var _inputUnstyledClasses = _interopRequireWildcard(require_inputUnstyledClasses());
      Object.keys(_inputUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _inputUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _inputUnstyledClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/ListboxUnstyled/useListbox.types.js
  var require_useListbox_types = __commonJS({
    "node_modules/@mui/base/node/ListboxUnstyled/useListbox.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ActionTypes = void 0;
      var ActionTypes;
      exports.ActionTypes = ActionTypes;
      (function(ActionTypes2) {
        ActionTypes2["blur"] = "blur";
        ActionTypes2["focus"] = "focus";
        ActionTypes2["keyDown"] = "keyDown";
        ActionTypes2["optionClick"] = "optionClick";
        ActionTypes2["optionHover"] = "optionHover";
        ActionTypes2["optionsChange"] = "optionsChange";
        ActionTypes2["setValue"] = "setValue";
        ActionTypes2["setHighlight"] = "setHighlight";
        ActionTypes2["textNavigation"] = "textNagivation";
      })(ActionTypes || (exports.ActionTypes = ActionTypes = {}));
    }
  });

  // node_modules/@mui/base/node/ListboxUnstyled/defaultListboxReducer.js
  var require_defaultListboxReducer = __commonJS({
    "node_modules/@mui/base/node/ListboxUnstyled/defaultListboxReducer.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = defaultListboxReducer;
      var _extends2 = _interopRequireDefault(require_extends());
      var _useListbox = require_useListbox_types();
      var pageSize = 5;
      function findValidOptionToHighlight(index, lookupDirection, options, focusDisabled, isOptionDisabled, wrapAround) {
        if (options.length === 0 || options.every((o, i) => isOptionDisabled(o, i))) {
          return -1;
        }
        let nextFocus = index;
        for (; ; ) {
          if (!wrapAround && lookupDirection === "next" && nextFocus === options.length || !wrapAround && lookupDirection === "previous" && nextFocus === -1) {
            return -1;
          }
          const nextFocusDisabled = focusDisabled ? false : isOptionDisabled(options[nextFocus], nextFocus);
          if (nextFocusDisabled) {
            nextFocus += lookupDirection === "next" ? 1 : -1;
            if (wrapAround) {
              nextFocus = (nextFocus + options.length) % options.length;
            }
          } else {
            return nextFocus;
          }
        }
      }
      function getNewHighlightedOption(options, previouslyHighlightedOption, diff, lookupDirection, highlightDisabled, isOptionDisabled, wrapAround, optionComparer) {
        var _options$nextIndex;
        const maxIndex = options.length - 1;
        const defaultHighlightedIndex = -1;
        let nextIndexCandidate;
        const previouslyHighlightedIndex = previouslyHighlightedOption == null ? -1 : options.findIndex((option) => optionComparer(option, previouslyHighlightedOption));
        if (diff === "reset") {
          var _options$defaultHighl;
          return defaultHighlightedIndex === -1 ? null : (_options$defaultHighl = options[defaultHighlightedIndex]) != null ? _options$defaultHighl : null;
        }
        if (diff === "start") {
          nextIndexCandidate = 0;
        } else if (diff === "end") {
          nextIndexCandidate = maxIndex;
        } else {
          const newIndex = previouslyHighlightedIndex + diff;
          if (newIndex < 0) {
            if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(diff) > 1) {
              nextIndexCandidate = 0;
            } else {
              nextIndexCandidate = maxIndex;
            }
          } else if (newIndex > maxIndex) {
            if (!wrapAround || Math.abs(diff) > 1) {
              nextIndexCandidate = maxIndex;
            } else {
              nextIndexCandidate = 0;
            }
          } else {
            nextIndexCandidate = newIndex;
          }
        }
        const nextIndex = findValidOptionToHighlight(nextIndexCandidate, lookupDirection, options, highlightDisabled, isOptionDisabled, wrapAround);
        return (_options$nextIndex = options[nextIndex]) != null ? _options$nextIndex : null;
      }
      function handleOptionSelection(option, state, props2) {
        const {
          multiple,
          optionComparer = (o, v) => o === v,
          isOptionDisabled = () => false
        } = props2;
        const {
          selectedValue
        } = state;
        const optionIndex = props2.options.findIndex((o) => props2.optionComparer(option, o));
        if (isOptionDisabled(option, optionIndex)) {
          return state;
        }
        if (multiple) {
          var _ref, _ref2;
          const selectedValues = (_ref = selectedValue) != null ? _ref : [];
          const newSelectedValues = selectedValues.some((sv) => optionComparer(sv, option)) ? selectedValue.filter((v) => !optionComparer(v, option)) : [...(_ref2 = selectedValue) != null ? _ref2 : [], option];
          return {
            selectedValue: newSelectedValues,
            highlightedValue: option
          };
        }
        if (selectedValue != null && optionComparer(option, selectedValue)) {
          return state;
        }
        return {
          selectedValue: option,
          highlightedValue: option
        };
      }
      function handleKeyDown(event, state, props2) {
        const {
          options,
          isOptionDisabled,
          disableListWrap,
          disabledItemsFocusable,
          optionComparer
        } = props2;
        const moveHighlight = (diff, direction, wrapAround) => {
          return getNewHighlightedOption(options, state.highlightedValue, diff, direction, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, wrapAround, optionComparer);
        };
        switch (event.key) {
          case "Home":
            return (0, _extends2.default)({}, state, {
              highlightedValue: moveHighlight("start", "next", false)
            });
          case "End":
            return (0, _extends2.default)({}, state, {
              highlightedValue: moveHighlight("end", "previous", false)
            });
          case "PageUp":
            return (0, _extends2.default)({}, state, {
              highlightedValue: moveHighlight(-pageSize, "previous", false)
            });
          case "PageDown":
            return (0, _extends2.default)({}, state, {
              highlightedValue: moveHighlight(pageSize, "next", false)
            });
          case "ArrowUp":
            return (0, _extends2.default)({}, state, {
              highlightedValue: moveHighlight(-1, "previous", !(disableListWrap != null ? disableListWrap : false))
            });
          case "ArrowDown":
            return (0, _extends2.default)({}, state, {
              highlightedValue: moveHighlight(1, "next", !(disableListWrap != null ? disableListWrap : false))
            });
          case "Enter":
          case " ":
            if (state.highlightedValue === null) {
              return state;
            }
            return handleOptionSelection(state.highlightedValue, state, props2);
          default:
            break;
        }
        return state;
      }
      function handleBlur(state) {
        return (0, _extends2.default)({}, state, {
          highlightedValue: null
        });
      }
      var textCriteriaMatches = (nextFocus, searchString, stringifyOption) => {
        var _stringifyOption;
        const text = (_stringifyOption = stringifyOption(nextFocus)) == null ? void 0 : _stringifyOption.trim().toLowerCase();
        if (!text || text.length === 0) {
          return false;
        }
        return text.indexOf(searchString) === 0;
      };
      function handleTextNavigation(state, searchString, props2) {
        const {
          options,
          isOptionDisabled,
          disableListWrap,
          disabledItemsFocusable,
          optionComparer,
          optionStringifier
        } = props2;
        const moveHighlight = (previouslyHighlightedOption) => {
          return getNewHighlightedOption(options, previouslyHighlightedOption, 1, "next", disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, !(disableListWrap != null ? disableListWrap : false), optionComparer);
        };
        const startWithCurrentOption = searchString.length > 1;
        let nextOption = startWithCurrentOption ? state.highlightedValue : moveHighlight(state.highlightedValue);
        for (let index = 0; index < options.length; index += 1) {
          if (!nextOption || !startWithCurrentOption && state.highlightedValue === nextOption) {
            return state;
          }
          if (textCriteriaMatches(nextOption, searchString, optionStringifier) && (!isOptionDisabled(nextOption, options.indexOf(nextOption)) || disabledItemsFocusable)) {
            return (0, _extends2.default)({}, state, {
              highlightedValue: nextOption
            });
          }
          nextOption = moveHighlight(nextOption);
        }
        return state;
      }
      function handleOptionsChange(options, previousOptions, state, props2) {
        var _options$find, _options$find2;
        const {
          multiple,
          optionComparer
        } = props2;
        const newHighlightedOption = state.highlightedValue == null ? null : (_options$find = options.find((option) => optionComparer(option, state.highlightedValue))) != null ? _options$find : null;
        if (multiple) {
          var _ref3;
          const selectedValues = (_ref3 = state.selectedValue) != null ? _ref3 : [];
          const newSelectedValues = selectedValues.filter((selectedValue) => options.some((option) => optionComparer(option, selectedValue)));
          return {
            highlightedValue: newHighlightedOption,
            selectedValue: newSelectedValues
          };
        }
        const newSelectedValue = (_options$find2 = options.find((option) => optionComparer(option, state.selectedValue))) != null ? _options$find2 : null;
        return {
          highlightedValue: newHighlightedOption,
          selectedValue: newSelectedValue
        };
      }
      function defaultListboxReducer(state, action) {
        const {
          type: type2
        } = action;
        switch (type2) {
          case _useListbox.ActionTypes.keyDown:
            return handleKeyDown(action.event, state, action.props);
          case _useListbox.ActionTypes.optionClick:
            return handleOptionSelection(action.option, state, action.props);
          case _useListbox.ActionTypes.blur:
            return handleBlur(state);
          case _useListbox.ActionTypes.setValue:
            return (0, _extends2.default)({}, state, {
              selectedValue: action.value
            });
          case _useListbox.ActionTypes.setHighlight:
            return (0, _extends2.default)({}, state, {
              highlightedValue: action.highlight
            });
          case _useListbox.ActionTypes.textNavigation:
            return handleTextNavigation(state, action.searchString, action.props);
          case _useListbox.ActionTypes.optionsChange:
            return handleOptionsChange(action.options, action.previousOptions, state, action.props);
          default:
            return state;
        }
      }
    }
  });

  // node_modules/@mui/base/node/ListboxUnstyled/useControllableReducer.js
  var require_useControllableReducer = __commonJS({
    "node_modules/@mui/base/node/ListboxUnstyled/useControllableReducer.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useControllableReducer;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _areArraysEqual = _interopRequireDefault(require_areArraysEqual());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getControlledState(internalState, props2) {
        if (props2.value !== void 0) {
          return (0, _extends2.default)({}, internalState, {
            selectedValue: props2.value
          });
        }
        return internalState;
      }
      function areOptionsEqual(option1, option2, optionComparer) {
        if (option1 === option2) {
          return true;
        }
        if (option1 === null || option2 === null) {
          return false;
        }
        return optionComparer(option1, option2);
      }
      function useStateChangeDetection(nextState, internalPreviousState, propsRef, lastActionRef) {
        React59.useEffect(() => {
          if (!propsRef.current || lastActionRef.current === null) {
            return;
          }
          const previousState = getControlledState(internalPreviousState, propsRef.current);
          const {
            multiple,
            optionComparer
          } = propsRef.current;
          if (multiple) {
            var _previousState$select;
            const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValue) != null ? _previousState$select : [];
            const nextSelectedValues = nextState.selectedValue;
            const onChange = propsRef.current.onChange;
            if (!(0, _areArraysEqual.default)(nextSelectedValues, previousSelectedValues, optionComparer)) {
              onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValues);
            }
          } else {
            const previousSelectedValue = previousState == null ? void 0 : previousState.selectedValue;
            const nextSelectedValue = nextState.selectedValue;
            const onChange = propsRef.current.onChange;
            if (!areOptionsEqual(nextSelectedValue, previousSelectedValue, optionComparer)) {
              onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValue);
            }
          }
          if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {
            var _propsRef$current, _propsRef$current$onH;
            (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, lastActionRef.current.event, nextState.highlightedValue);
          }
          lastActionRef.current = null;
        }, [nextState.selectedValue, nextState.highlightedValue, internalPreviousState, propsRef, lastActionRef]);
      }
      function useControllableReducer(internalReducer, externalReducer, props2) {
        var _ref;
        const {
          value,
          defaultValue
        } = props2;
        const propsRef = React59.useRef(props2);
        propsRef.current = props2;
        const actionRef = React59.useRef(null);
        const initialSelectedValue = (_ref = value === void 0 ? defaultValue : value) != null ? _ref : props2.multiple ? [] : null;
        const initalState = {
          highlightedValue: null,
          selectedValue: initialSelectedValue
        };
        const combinedReducer = React59.useCallback((state, action) => {
          actionRef.current = action;
          if (externalReducer) {
            return externalReducer(getControlledState(state, propsRef.current), action);
          }
          return internalReducer(getControlledState(state, propsRef.current), action);
        }, [externalReducer, internalReducer, propsRef]);
        const [nextState, dispatch] = React59.useReducer(combinedReducer, initalState);
        const previousState = React59.useRef(initalState);
        React59.useEffect(() => {
          previousState.current = nextState;
        }, [previousState, nextState]);
        useStateChangeDetection(nextState, previousState.current, propsRef, actionRef);
        return [getControlledState(nextState, propsRef.current), dispatch];
      }
    }
  });

  // node_modules/@mui/base/node/ListboxUnstyled/useListbox.js
  var require_useListbox = __commonJS({
    "node_modules/@mui/base/node/ListboxUnstyled/useListbox.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useListbox;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _useListbox = require_useListbox_types();
      var _defaultListboxReducer = _interopRequireDefault(require_defaultListboxReducer());
      var _useControllableReducer = _interopRequireDefault(require_useControllableReducer());
      var _areArraysEqual = _interopRequireDefault(require_areArraysEqual());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var TEXT_NAVIGATION_RESET_TIMEOUT = 500;
      var defaultOptionComparer = (optionA, optionB) => optionA === optionB;
      var defaultIsOptionDisabled = () => false;
      var defaultOptionStringifier = (option) => typeof option === "string" ? option : String(option);
      function useListbox(props2) {
        var _props$optionIdGenera, _options$highlightedI;
        const {
          disabledItemsFocusable = false,
          disableListWrap = false,
          focusManagement = "activeDescendant",
          id: idProp,
          isOptionDisabled = defaultIsOptionDisabled,
          listboxRef: externalListboxRef,
          multiple = false,
          optionComparer = defaultOptionComparer,
          optionStringifier = defaultOptionStringifier,
          options,
          stateReducer: externalReducer
        } = props2;
        const id = (0, _utils.unstable_useId)(idProp);
        function defaultIdGenerator(_3, index) {
          return `${id}-option-${index}`;
        }
        const optionIdGenerator = (_props$optionIdGenera = props2.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;
        const propsWithDefaults = (0, _extends2.default)({}, props2, {
          disabledItemsFocusable,
          disableListWrap,
          focusManagement,
          isOptionDisabled,
          multiple,
          optionComparer,
          optionStringifier
        });
        const listboxRef = React59.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(externalListboxRef, listboxRef);
        const textCriteriaRef = React59.useRef({
          searchString: "",
          lastTime: null
        });
        const [{
          highlightedValue,
          selectedValue
        }, dispatch] = (0, _useControllableReducer.default)(_defaultListboxReducer.default, externalReducer, propsWithDefaults);
        const highlightedIndex = React59.useMemo(() => {
          return highlightedValue == null ? -1 : options.findIndex((option) => optionComparer(option, highlightedValue));
        }, [highlightedValue, options, optionComparer]);
        const previousOptions = React59.useRef([]);
        React59.useEffect(() => {
          if ((0, _areArraysEqual.default)(previousOptions.current, options, optionComparer)) {
            return;
          }
          dispatch({
            type: _useListbox.ActionTypes.optionsChange,
            event: null,
            options,
            previousOptions: previousOptions.current,
            props: propsWithDefaults
          });
          previousOptions.current = options;
        }, [options, optionComparer, dispatch]);
        const setSelectedValue = React59.useCallback((option) => {
          dispatch({
            type: _useListbox.ActionTypes.setValue,
            event: null,
            value: option
          });
        }, [dispatch]);
        const setHighlightedValue = React59.useCallback((option) => {
          dispatch({
            type: _useListbox.ActionTypes.setHighlight,
            event: null,
            highlight: option
          });
        }, [dispatch]);
        const createHandleOptionClick = (option, other) => (event) => {
          var _other$onClick;
          (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);
          if (event.defaultPrevented) {
            return;
          }
          event.preventDefault();
          dispatch({
            type: _useListbox.ActionTypes.optionClick,
            option,
            event,
            props: propsWithDefaults
          });
        };
        const createHandleOptionPointerOver = (option, other) => (event) => {
          var _other$onMouseOver;
          (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);
          if (event.defaultPrevented) {
            return;
          }
          dispatch({
            type: _useListbox.ActionTypes.optionHover,
            option,
            event,
            props: propsWithDefaults
          });
        };
        const createHandleKeyDown = (other) => (event) => {
          var _other$onKeyDown;
          (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);
          if (event.defaultPrevented) {
            return;
          }
          const keysToPreventDefault = ["ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"];
          if (focusManagement === "activeDescendant") {
            keysToPreventDefault.push(" ", "Enter");
          }
          if (keysToPreventDefault.includes(event.key)) {
            event.preventDefault();
          }
          dispatch({
            type: _useListbox.ActionTypes.keyDown,
            event,
            props: propsWithDefaults
          });
          if (event.key.length === 1 && event.key !== " ") {
            const textCriteria = textCriteriaRef.current;
            const lowerKey = event.key.toLowerCase();
            const currentTime = performance.now();
            if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
              textCriteria.searchString = lowerKey;
            } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
              textCriteria.searchString += lowerKey;
            }
            textCriteria.lastTime = currentTime;
            dispatch({
              type: _useListbox.ActionTypes.textNavigation,
              event,
              searchString: textCriteria.searchString,
              props: propsWithDefaults
            });
          }
        };
        const createHandleBlur = (other) => (event) => {
          var _other$onBlur, _listboxRef$current;
          (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);
          if (event.defaultPrevented) {
            return;
          }
          if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {
            return;
          }
          dispatch({
            type: _useListbox.ActionTypes.blur,
            event,
            props: propsWithDefaults
          });
        };
        const getRootProps = (otherHandlers = {}) => {
          return (0, _extends2.default)({}, otherHandlers, {
            "aria-activedescendant": focusManagement === "activeDescendant" && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : void 0,
            id,
            onBlur: createHandleBlur(otherHandlers),
            onKeyDown: createHandleKeyDown(otherHandlers),
            role: "listbox",
            tabIndex: focusManagement === "DOM" ? -1 : 0,
            ref: handleRef
          });
        };
        const getOptionState = (option) => {
          let selected;
          const index = options.findIndex((opt) => optionComparer(opt, option));
          if (multiple) {
            var _ref;
            selected = ((_ref = selectedValue) != null ? _ref : []).some((value) => value != null && optionComparer(option, value));
          } else {
            selected = optionComparer(option, selectedValue);
          }
          const disabled = isOptionDisabled(option, index);
          return {
            selected,
            disabled,
            highlighted: highlightedIndex === index
          };
        };
        const getOptionTabIndex = (optionState) => {
          if (focusManagement === "activeDescendant") {
            return void 0;
          }
          if (!optionState.highlighted) {
            return -1;
          }
          if (optionState.disabled && !disabledItemsFocusable) {
            return -1;
          }
          return 0;
        };
        const getOptionProps = (option, otherHandlers = {}) => {
          const optionState = getOptionState(option);
          const index = options.findIndex((opt) => optionComparer(opt, option));
          return (0, _extends2.default)({}, otherHandlers, {
            "aria-disabled": optionState.disabled || void 0,
            "aria-selected": optionState.selected,
            id: optionIdGenerator(option, index),
            onClick: createHandleOptionClick(option, otherHandlers),
            onPointerOver: createHandleOptionPointerOver(option, otherHandlers),
            role: "option",
            tabIndex: getOptionTabIndex(optionState)
          });
        };
        React59.useDebugValue({
          highlightedOption: options[highlightedIndex],
          selectedOption: selectedValue
        });
        return {
          getRootProps,
          getOptionProps,
          getOptionState,
          highlightedOption: (_options$highlightedI = options[highlightedIndex]) != null ? _options$highlightedI : null,
          selectedOption: selectedValue,
          setSelectedValue,
          setHighlightedValue
        };
      }
    }
  });

  // node_modules/@mui/base/node/ListboxUnstyled/index.js
  var require_ListboxUnstyled = __commonJS({
    "node_modules/@mui/base/node/ListboxUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        useListbox: true,
        defaultListboxReducer: true
      };
      Object.defineProperty(exports, "defaultListboxReducer", {
        enumerable: true,
        get: function() {
          return _defaultListboxReducer.default;
        }
      });
      Object.defineProperty(exports, "useListbox", {
        enumerable: true,
        get: function() {
          return _useListbox.default;
        }
      });
      var _useListbox = _interopRequireDefault(require_useListbox());
      var _defaultListboxReducer = _interopRequireDefault(require_defaultListboxReducer());
      var _useListbox2 = require_useListbox_types();
      Object.keys(_useListbox2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useListbox2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useListbox2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/MenuUnstyled/MenuUnstyledContext.js
  var require_MenuUnstyledContext = __commonJS({
    "node_modules/@mui/base/node/MenuUnstyled/MenuUnstyledContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var MenuUnstyledContext = /* @__PURE__ */ React59.createContext(null);
      MenuUnstyledContext.displayName = "MenuUnstyledContext";
      var _default = MenuUnstyledContext;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/MenuUnstyled/menuUnstyledClasses.js
  var require_menuUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/MenuUnstyled/menuUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getMenuUnstyledUtilityClass = getMenuUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getMenuUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiMenuUnstyled", slot);
      }
      var menuUnstyledClasses = (0, _generateUtilityClasses.default)("MuiMenuUnstyled", ["root", "listbox", "expanded"]);
      var _default = menuUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/MenuUnstyled/useMenu.js
  var require_useMenu = __commonJS({
    "node_modules/@mui/base/node/MenuUnstyled/useMenu.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useMenu;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _ListboxUnstyled = require_ListboxUnstyled();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function stateReducer(state, action) {
        if (action.type === _ListboxUnstyled.ActionTypes.blur || action.type === _ListboxUnstyled.ActionTypes.optionHover || action.type === _ListboxUnstyled.ActionTypes.setValue) {
          return state;
        }
        const newState = (0, _ListboxUnstyled.defaultListboxReducer)(state, action);
        if (action.type !== _ListboxUnstyled.ActionTypes.setHighlight && newState.highlightedValue === null && action.props.options.length > 0) {
          return (0, _extends2.default)({}, newState, {
            highlightedValue: action.props.options[0]
          });
        }
        return newState;
      }
      function useMenu(parameters = {}) {
        const {
          listboxRef: listboxRefProp,
          open = false,
          onClose,
          listboxId
        } = parameters;
        const [menuItems, setMenuItems] = React59.useState({});
        const listboxRef = React59.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(listboxRef, listboxRefProp);
        const registerItem = React59.useCallback((id, metadata) => {
          setMenuItems((previousState) => {
            const newState = (0, _extends2.default)({}, previousState);
            newState[id] = metadata;
            return newState;
          });
        }, []);
        const unregisterItem = React59.useCallback((id) => {
          setMenuItems((previousState) => {
            const newState = (0, _extends2.default)({}, previousState);
            delete newState[id];
            return newState;
          });
        }, []);
        const {
          getOptionState,
          getOptionProps,
          getRootProps,
          highlightedOption,
          setHighlightedValue: setListboxHighlight
        } = (0, _ListboxUnstyled.useListbox)({
          options: Object.keys(menuItems),
          optionStringifier: (id) => {
            var _menuItems$id$ref$cur;
            return menuItems[id].label || ((_menuItems$id$ref$cur = menuItems[id].ref.current) == null ? void 0 : _menuItems$id$ref$cur.innerText);
          },
          isOptionDisabled: (id) => {
            var _menuItems$id;
            return (menuItems == null ? void 0 : (_menuItems$id = menuItems[id]) == null ? void 0 : _menuItems$id.disabled) || false;
          },
          listboxRef: handleRef,
          focusManagement: "DOM",
          id: listboxId,
          stateReducer,
          disabledItemsFocusable: true
        });
        const highlightFirstItem = React59.useCallback(() => {
          if (Object.keys(menuItems).length > 0) {
            setListboxHighlight(menuItems[Object.keys(menuItems)[0]].id);
          }
        }, [menuItems, setListboxHighlight]);
        const highlightLastItem = React59.useCallback(() => {
          if (Object.keys(menuItems).length > 0) {
            setListboxHighlight(menuItems[Object.keys(menuItems)[Object.keys(menuItems).length - 1]].id);
          }
        }, [menuItems, setListboxHighlight]);
        React59.useEffect(() => {
          if (!open) {
            highlightFirstItem();
          }
        }, [open, highlightFirstItem]);
        const createHandleKeyDown = (otherHandlers) => (e) => {
          var _otherHandlers$onKeyD;
          (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, e);
          if (e.defaultPrevented) {
            return;
          }
          if (e.key === "Escape" && open) {
            onClose == null ? void 0 : onClose();
          }
        };
        const createHandleBlur = (otherHandlers) => (e) => {
          var _otherHandlers$onBlur, _listboxRef$current;
          (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, e);
          if (!((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(e.relatedTarget))) {
            onClose == null ? void 0 : onClose();
          }
        };
        React59.useEffect(() => {
          var _listboxRef$current2;
          if ((_listboxRef$current2 = listboxRef.current) != null && _listboxRef$current2.contains(document.activeElement) && highlightedOption !== null) {
            var _menuItems$highlighte, _menuItems$highlighte2;
            menuItems == null ? void 0 : (_menuItems$highlighte = menuItems[highlightedOption]) == null ? void 0 : (_menuItems$highlighte2 = _menuItems$highlighte.ref.current) == null ? void 0 : _menuItems$highlighte2.focus();
          }
        }, [highlightedOption, menuItems]);
        const getListboxProps = (otherHandlers = {}) => {
          const rootProps = getRootProps((0, _extends2.default)({}, otherHandlers, {
            onBlur: createHandleBlur(otherHandlers),
            onKeyDown: createHandleKeyDown(otherHandlers)
          }));
          return (0, _extends2.default)({}, otherHandlers, rootProps, {
            role: "menu"
          });
        };
        const getItemState = (id) => {
          const {
            disabled,
            highlighted
          } = getOptionState(id);
          return {
            disabled,
            highlighted
          };
        };
        React59.useDebugValue({
          menuItems,
          highlightedOption
        });
        return {
          registerItem,
          unregisterItem,
          menuItems,
          getListboxProps,
          getItemState,
          getItemProps: getOptionProps,
          highlightedOption,
          highlightFirstItem,
          highlightLastItem
        };
      }
    }
  });

  // node_modules/@popperjs/core/dist/cjs/popper.js
  var require_popper = __commonJS({
    "node_modules/@popperjs/core/dist/cjs/popper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function getWindow(node) {
        if (node == null) {
          return window;
        }
        if (node.toString() !== "[object Window]") {
          var ownerDocument = node.ownerDocument;
          return ownerDocument ? ownerDocument.defaultView || window : window;
        }
        return node;
      }
      function isElement(node) {
        var OwnElement = getWindow(node).Element;
        return node instanceof OwnElement || node instanceof Element;
      }
      function isHTMLElement(node) {
        var OwnElement = getWindow(node).HTMLElement;
        return node instanceof OwnElement || node instanceof HTMLElement;
      }
      function isShadowRoot(node) {
        if (typeof ShadowRoot === "undefined") {
          return false;
        }
        var OwnElement = getWindow(node).ShadowRoot;
        return node instanceof OwnElement || node instanceof ShadowRoot;
      }
      var max = Math.max;
      var min = Math.min;
      var round2 = Math.round;
      function getUAString() {
        var uaData = navigator.userAgentData;
        if (uaData != null && uaData.brands) {
          return uaData.brands.map(function(item) {
            return item.brand + "/" + item.version;
          }).join(" ");
        }
        return navigator.userAgent;
      }
      function isLayoutViewport() {
        return !/^((?!chrome|android).)*safari/i.test(getUAString());
      }
      function getBoundingClientRect(element, includeScale, isFixedStrategy) {
        if (includeScale === void 0) {
          includeScale = false;
        }
        if (isFixedStrategy === void 0) {
          isFixedStrategy = false;
        }
        var clientRect = element.getBoundingClientRect();
        var scaleX = 1;
        var scaleY = 1;
        if (includeScale && isHTMLElement(element)) {
          scaleX = element.offsetWidth > 0 ? round2(clientRect.width) / element.offsetWidth || 1 : 1;
          scaleY = element.offsetHeight > 0 ? round2(clientRect.height) / element.offsetHeight || 1 : 1;
        }
        var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
        var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
        var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
        var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
        var width = clientRect.width / scaleX;
        var height = clientRect.height / scaleY;
        return {
          width,
          height,
          top: y,
          right: x + width,
          bottom: y + height,
          left: x,
          x,
          y
        };
      }
      function getWindowScroll(node) {
        var win = getWindow(node);
        var scrollLeft = win.pageXOffset;
        var scrollTop = win.pageYOffset;
        return {
          scrollLeft,
          scrollTop
        };
      }
      function getHTMLElementScroll(element) {
        return {
          scrollLeft: element.scrollLeft,
          scrollTop: element.scrollTop
        };
      }
      function getNodeScroll(node) {
        if (node === getWindow(node) || !isHTMLElement(node)) {
          return getWindowScroll(node);
        } else {
          return getHTMLElementScroll(node);
        }
      }
      function getNodeName(element) {
        return element ? (element.nodeName || "").toLowerCase() : null;
      }
      function getDocumentElement(element) {
        return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
      }
      function getWindowScrollBarX(element) {
        return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
      }
      function getComputedStyle2(element) {
        return getWindow(element).getComputedStyle(element);
      }
      function isScrollParent(element) {
        var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
        return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
      }
      function isElementScaled(element) {
        var rect = element.getBoundingClientRect();
        var scaleX = round2(rect.width) / element.offsetWidth || 1;
        var scaleY = round2(rect.height) / element.offsetHeight || 1;
        return scaleX !== 1 || scaleY !== 1;
      }
      function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
        if (isFixed === void 0) {
          isFixed = false;
        }
        var isOffsetParentAnElement = isHTMLElement(offsetParent);
        var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
        var documentElement = getDocumentElement(offsetParent);
        var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
        var scroll = {
          scrollLeft: 0,
          scrollTop: 0
        };
        var offsets = {
          x: 0,
          y: 0
        };
        if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
          if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
            scroll = getNodeScroll(offsetParent);
          }
          if (isHTMLElement(offsetParent)) {
            offsets = getBoundingClientRect(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
          } else if (documentElement) {
            offsets.x = getWindowScrollBarX(documentElement);
          }
        }
        return {
          x: rect.left + scroll.scrollLeft - offsets.x,
          y: rect.top + scroll.scrollTop - offsets.y,
          width: rect.width,
          height: rect.height
        };
      }
      function getLayoutRect(element) {
        var clientRect = getBoundingClientRect(element);
        var width = element.offsetWidth;
        var height = element.offsetHeight;
        if (Math.abs(clientRect.width - width) <= 1) {
          width = clientRect.width;
        }
        if (Math.abs(clientRect.height - height) <= 1) {
          height = clientRect.height;
        }
        return {
          x: element.offsetLeft,
          y: element.offsetTop,
          width,
          height
        };
      }
      function getParentNode(element) {
        if (getNodeName(element) === "html") {
          return element;
        }
        return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
      }
      function getScrollParent(node) {
        if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
          return node.ownerDocument.body;
        }
        if (isHTMLElement(node) && isScrollParent(node)) {
          return node;
        }
        return getScrollParent(getParentNode(node));
      }
      function listScrollParents(element, list) {
        var _element$ownerDocumen;
        if (list === void 0) {
          list = [];
        }
        var scrollParent = getScrollParent(element);
        var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
        var win = getWindow(scrollParent);
        var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
        var updatedList = list.concat(target);
        return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
      }
      function isTableElement(element) {
        return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
      }
      function getTrueOffsetParent(element) {
        if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
          return null;
        }
        return element.offsetParent;
      }
      function getContainingBlock(element) {
        var isFirefox = /firefox/i.test(getUAString());
        var isIE = /Trident/i.test(getUAString());
        if (isIE && isHTMLElement(element)) {
          var elementCss = getComputedStyle2(element);
          if (elementCss.position === "fixed") {
            return null;
          }
        }
        var currentNode = getParentNode(element);
        if (isShadowRoot(currentNode)) {
          currentNode = currentNode.host;
        }
        while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
          var css2 = getComputedStyle2(currentNode);
          if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
            return currentNode;
          } else {
            currentNode = currentNode.parentNode;
          }
        }
        return null;
      }
      function getOffsetParent(element) {
        var window2 = getWindow(element);
        var offsetParent = getTrueOffsetParent(element);
        while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
          offsetParent = getTrueOffsetParent(offsetParent);
        }
        if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
          return window2;
        }
        return offsetParent || getContainingBlock(element) || window2;
      }
      var top = "top";
      var bottom = "bottom";
      var right = "right";
      var left = "left";
      var auto = "auto";
      var basePlacements = [top, bottom, right, left];
      var start = "start";
      var end = "end";
      var clippingParents = "clippingParents";
      var viewport = "viewport";
      var popper = "popper";
      var reference = "reference";
      var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
        return acc.concat([placement + "-" + start, placement + "-" + end]);
      }, []);
      var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
        return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
      }, []);
      var beforeRead = "beforeRead";
      var read = "read";
      var afterRead = "afterRead";
      var beforeMain = "beforeMain";
      var main = "main";
      var afterMain = "afterMain";
      var beforeWrite = "beforeWrite";
      var write = "write";
      var afterWrite = "afterWrite";
      var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
      function order(modifiers) {
        var map = /* @__PURE__ */ new Map();
        var visited = /* @__PURE__ */ new Set();
        var result = [];
        modifiers.forEach(function(modifier) {
          map.set(modifier.name, modifier);
        });
        function sort(modifier) {
          visited.add(modifier.name);
          var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
          requires.forEach(function(dep) {
            if (!visited.has(dep)) {
              var depModifier = map.get(dep);
              if (depModifier) {
                sort(depModifier);
              }
            }
          });
          result.push(modifier);
        }
        modifiers.forEach(function(modifier) {
          if (!visited.has(modifier.name)) {
            sort(modifier);
          }
        });
        return result;
      }
      function orderModifiers(modifiers) {
        var orderedModifiers = order(modifiers);
        return modifierPhases.reduce(function(acc, phase) {
          return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
          }));
        }, []);
      }
      function debounce2(fn) {
        var pending;
        return function() {
          if (!pending) {
            pending = new Promise(function(resolve) {
              Promise.resolve().then(function() {
                pending = void 0;
                resolve(fn());
              });
            });
          }
          return pending;
        };
      }
      function format(str) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return [].concat(args).reduce(function(p, c) {
          return p.replace(/%s/, c);
        }, str);
      }
      var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
      var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
      var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
      function validateModifiers(modifiers) {
        modifiers.forEach(function(modifier) {
          [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
            return self2.indexOf(value) === index;
          }).forEach(function(key) {
            switch (key) {
              case "name":
                if (typeof modifier.name !== "string") {
                  console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
                }
                break;
              case "enabled":
                if (typeof modifier.enabled !== "boolean") {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
                }
                break;
              case "phase":
                if (modifierPhases.indexOf(modifier.phase) < 0) {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
                }
                break;
              case "fn":
                if (typeof modifier.fn !== "function") {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
                }
                break;
              case "effect":
                if (modifier.effect != null && typeof modifier.effect !== "function") {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
                }
                break;
              case "requires":
                if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
                }
                break;
              case "requiresIfExists":
                if (!Array.isArray(modifier.requiresIfExists)) {
                  console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
                }
                break;
              case "options":
              case "data":
                break;
              default:
                console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
                  return '"' + s + '"';
                }).join(", ") + '; but "' + key + '" was provided.');
            }
            modifier.requires && modifier.requires.forEach(function(requirement) {
              if (modifiers.find(function(mod) {
                return mod.name === requirement;
              }) == null) {
                console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
              }
            });
          });
        });
      }
      function uniqueBy(arr, fn) {
        var identifiers = /* @__PURE__ */ new Set();
        return arr.filter(function(item) {
          var identifier = fn(item);
          if (!identifiers.has(identifier)) {
            identifiers.add(identifier);
            return true;
          }
        });
      }
      function getBasePlacement(placement) {
        return placement.split("-")[0];
      }
      function mergeByName(modifiers) {
        var merged = modifiers.reduce(function(merged2, current) {
          var existing = merged2[current.name];
          merged2[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
          }) : current;
          return merged2;
        }, {});
        return Object.keys(merged).map(function(key) {
          return merged[key];
        });
      }
      function getViewportRect(element, strategy) {
        var win = getWindow(element);
        var html2 = getDocumentElement(element);
        var visualViewport = win.visualViewport;
        var width = html2.clientWidth;
        var height = html2.clientHeight;
        var x = 0;
        var y = 0;
        if (visualViewport) {
          width = visualViewport.width;
          height = visualViewport.height;
          var layoutViewport = isLayoutViewport();
          if (layoutViewport || !layoutViewport && strategy === "fixed") {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
          }
        }
        return {
          width,
          height,
          x: x + getWindowScrollBarX(element),
          y
        };
      }
      function getDocumentRect(element) {
        var _element$ownerDocumen;
        var html2 = getDocumentElement(element);
        var winScroll = getWindowScroll(element);
        var body2 = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
        var width = max(html2.scrollWidth, html2.clientWidth, body2 ? body2.scrollWidth : 0, body2 ? body2.clientWidth : 0);
        var height = max(html2.scrollHeight, html2.clientHeight, body2 ? body2.scrollHeight : 0, body2 ? body2.clientHeight : 0);
        var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
        var y = -winScroll.scrollTop;
        if (getComputedStyle2(body2 || html2).direction === "rtl") {
          x += max(html2.clientWidth, body2 ? body2.clientWidth : 0) - width;
        }
        return {
          width,
          height,
          x,
          y
        };
      }
      function contains(parent, child) {
        var rootNode = child.getRootNode && child.getRootNode();
        if (parent.contains(child)) {
          return true;
        } else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;
          do {
            if (next && parent.isSameNode(next)) {
              return true;
            }
            next = next.parentNode || next.host;
          } while (next);
        }
        return false;
      }
      function rectToClientRect(rect) {
        return Object.assign({}, rect, {
          left: rect.x,
          top: rect.y,
          right: rect.x + rect.width,
          bottom: rect.y + rect.height
        });
      }
      function getInnerBoundingClientRect(element, strategy) {
        var rect = getBoundingClientRect(element, false, strategy === "fixed");
        rect.top = rect.top + element.clientTop;
        rect.left = rect.left + element.clientLeft;
        rect.bottom = rect.top + element.clientHeight;
        rect.right = rect.left + element.clientWidth;
        rect.width = element.clientWidth;
        rect.height = element.clientHeight;
        rect.x = rect.left;
        rect.y = rect.top;
        return rect;
      }
      function getClientRectFromMixedType(element, clippingParent, strategy) {
        return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
      }
      function getClippingParents(element) {
        var clippingParents2 = listScrollParents(getParentNode(element));
        var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
        var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
        if (!isElement(clipperElement)) {
          return [];
        }
        return clippingParents2.filter(function(clippingParent) {
          return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
        });
      }
      function getClippingRect(element, boundary, rootBoundary, strategy) {
        var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
        var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
        var firstClippingParent = clippingParents2[0];
        var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
          var rect = getClientRectFromMixedType(element, clippingParent, strategy);
          accRect.top = max(rect.top, accRect.top);
          accRect.right = min(rect.right, accRect.right);
          accRect.bottom = min(rect.bottom, accRect.bottom);
          accRect.left = max(rect.left, accRect.left);
          return accRect;
        }, getClientRectFromMixedType(element, firstClippingParent, strategy));
        clippingRect.width = clippingRect.right - clippingRect.left;
        clippingRect.height = clippingRect.bottom - clippingRect.top;
        clippingRect.x = clippingRect.left;
        clippingRect.y = clippingRect.top;
        return clippingRect;
      }
      function getVariation(placement) {
        return placement.split("-")[1];
      }
      function getMainAxisFromPlacement(placement) {
        return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
      }
      function computeOffsets(_ref) {
        var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
        var basePlacement = placement ? getBasePlacement(placement) : null;
        var variation = placement ? getVariation(placement) : null;
        var commonX = reference2.x + reference2.width / 2 - element.width / 2;
        var commonY = reference2.y + reference2.height / 2 - element.height / 2;
        var offsets;
        switch (basePlacement) {
          case top:
            offsets = {
              x: commonX,
              y: reference2.y - element.height
            };
            break;
          case bottom:
            offsets = {
              x: commonX,
              y: reference2.y + reference2.height
            };
            break;
          case right:
            offsets = {
              x: reference2.x + reference2.width,
              y: commonY
            };
            break;
          case left:
            offsets = {
              x: reference2.x - element.width,
              y: commonY
            };
            break;
          default:
            offsets = {
              x: reference2.x,
              y: reference2.y
            };
        }
        var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
        if (mainAxis != null) {
          var len = mainAxis === "y" ? "height" : "width";
          switch (variation) {
            case start:
              offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
              break;
            case end:
              offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
              break;
          }
        }
        return offsets;
      }
      function getFreshSideObject() {
        return {
          top: 0,
          right: 0,
          bottom: 0,
          left: 0
        };
      }
      function mergePaddingObject(paddingObject) {
        return Object.assign({}, getFreshSideObject(), paddingObject);
      }
      function expandToHashMap(value, keys2) {
        return keys2.reduce(function(hashMap, key) {
          hashMap[key] = value;
          return hashMap;
        }, {});
      }
      function detectOverflow(state, options) {
        if (options === void 0) {
          options = {};
        }
        var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
        var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
        var altContext = elementContext === popper ? reference : popper;
        var popperRect = state.rects.popper;
        var element = state.elements[altBoundary ? altContext : elementContext];
        var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
        var referenceClientRect = getBoundingClientRect(state.elements.reference);
        var popperOffsets2 = computeOffsets({
          reference: referenceClientRect,
          element: popperRect,
          strategy: "absolute",
          placement
        });
        var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
        var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
        var overflowOffsets = {
          top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
          bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
          left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
          right: elementClientRect.right - clippingClientRect.right + paddingObject.right
        };
        var offsetData = state.modifiersData.offset;
        if (elementContext === popper && offsetData) {
          var offset2 = offsetData[placement];
          Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
            var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
            overflowOffsets[key] += offset2[axis] * multiply;
          });
        }
        return overflowOffsets;
      }
      var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
      var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
      var DEFAULT_OPTIONS = {
        placement: "bottom",
        modifiers: [],
        strategy: "absolute"
      };
      function areValidElements() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return !args.some(function(element) {
          return !(element && typeof element.getBoundingClientRect === "function");
        });
      }
      function popperGenerator(generatorOptions) {
        if (generatorOptions === void 0) {
          generatorOptions = {};
        }
        var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
        return function createPopper2(reference2, popper2, options) {
          if (options === void 0) {
            options = defaultOptions;
          }
          var state = {
            placement: "bottom",
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
              reference: reference2,
              popper: popper2
            },
            attributes: {},
            styles: {}
          };
          var effectCleanupFns = [];
          var isDestroyed = false;
          var instance = {
            state,
            setOptions: function setOptions(setOptionsAction) {
              var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
              cleanupModifierEffects();
              state.options = Object.assign({}, defaultOptions, state.options, options2);
              state.scrollParents = {
                reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
                popper: listScrollParents(popper2)
              };
              var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
              state.orderedModifiers = orderedModifiers.filter(function(m) {
                return m.enabled;
              });
              if (true) {
                var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
                  var name = _ref.name;
                  return name;
                });
                validateModifiers(modifiers);
                if (getBasePlacement(state.options.placement) === auto) {
                  var flipModifier = state.orderedModifiers.find(function(_ref2) {
                    var name = _ref2.name;
                    return name === "flip";
                  });
                  if (!flipModifier) {
                    console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
                  }
                }
                var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
                if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
                  return parseFloat(margin);
                })) {
                  console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
                }
              }
              runModifierEffects();
              return instance.update();
            },
            forceUpdate: function forceUpdate() {
              if (isDestroyed) {
                return;
              }
              var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
              if (!areValidElements(reference3, popper3)) {
                if (true) {
                  console.error(INVALID_ELEMENT_ERROR);
                }
                return;
              }
              state.rects = {
                reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
                popper: getLayoutRect(popper3)
              };
              state.reset = false;
              state.placement = state.options.placement;
              state.orderedModifiers.forEach(function(modifier) {
                return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
              });
              var __debug_loops__ = 0;
              for (var index = 0; index < state.orderedModifiers.length; index++) {
                if (true) {
                  __debug_loops__ += 1;
                  if (__debug_loops__ > 100) {
                    console.error(INFINITE_LOOP_ERROR);
                    break;
                  }
                }
                if (state.reset === true) {
                  state.reset = false;
                  index = -1;
                  continue;
                }
                var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                if (typeof fn === "function") {
                  state = fn({
                    state,
                    options: _options,
                    name,
                    instance
                  }) || state;
                }
              }
            },
            update: debounce2(function() {
              return new Promise(function(resolve) {
                instance.forceUpdate();
                resolve(state);
              });
            }),
            destroy: function destroy() {
              cleanupModifierEffects();
              isDestroyed = true;
            }
          };
          if (!areValidElements(reference2, popper2)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return instance;
          }
          instance.setOptions(options).then(function(state2) {
            if (!isDestroyed && options.onFirstUpdate) {
              options.onFirstUpdate(state2);
            }
          });
          function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref3) {
              var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
              if (typeof effect2 === "function") {
                var cleanupFn = effect2({
                  state,
                  name,
                  instance,
                  options: options2
                });
                var noopFn = function noopFn2() {
                };
                effectCleanupFns.push(cleanupFn || noopFn);
              }
            });
          }
          function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
              return fn();
            });
            effectCleanupFns = [];
          }
          return instance;
        };
      }
      var passive = {
        passive: true
      };
      function effect$2(_ref) {
        var state = _ref.state, instance = _ref.instance, options = _ref.options;
        var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
        var window2 = getWindow(state.elements.popper);
        var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
        if (scroll) {
          scrollParents.forEach(function(scrollParent) {
            scrollParent.addEventListener("scroll", instance.update, passive);
          });
        }
        if (resize) {
          window2.addEventListener("resize", instance.update, passive);
        }
        return function() {
          if (scroll) {
            scrollParents.forEach(function(scrollParent) {
              scrollParent.removeEventListener("scroll", instance.update, passive);
            });
          }
          if (resize) {
            window2.removeEventListener("resize", instance.update, passive);
          }
        };
      }
      var eventListeners = {
        name: "eventListeners",
        enabled: true,
        phase: "write",
        fn: function fn() {
        },
        effect: effect$2,
        data: {}
      };
      function popperOffsets(_ref) {
        var state = _ref.state, name = _ref.name;
        state.modifiersData[name] = computeOffsets({
          reference: state.rects.reference,
          element: state.rects.popper,
          strategy: "absolute",
          placement: state.placement
        });
      }
      var popperOffsets$1 = {
        name: "popperOffsets",
        enabled: true,
        phase: "read",
        fn: popperOffsets,
        data: {}
      };
      var unsetSides = {
        top: "auto",
        right: "auto",
        bottom: "auto",
        left: "auto"
      };
      function roundOffsetsByDPR(_ref) {
        var x = _ref.x, y = _ref.y;
        var win = window;
        var dpr = win.devicePixelRatio || 1;
        return {
          x: round2(x * dpr) / dpr || 0,
          y: round2(y * dpr) / dpr || 0
        };
      }
      function mapToStyles(_ref2) {
        var _Object$assign2;
        var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
        var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
        var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
          x,
          y
        }) : {
          x,
          y
        };
        x = _ref3.x;
        y = _ref3.y;
        var hasX = offsets.hasOwnProperty("x");
        var hasY = offsets.hasOwnProperty("y");
        var sideX = left;
        var sideY = top;
        var win = window;
        if (adaptive) {
          var offsetParent = getOffsetParent(popper2);
          var heightProp = "clientHeight";
          var widthProp = "clientWidth";
          if (offsetParent === getWindow(popper2)) {
            offsetParent = getDocumentElement(popper2);
            if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
              heightProp = "scrollHeight";
              widthProp = "scrollWidth";
            }
          }
          offsetParent = offsetParent;
          if (placement === top || (placement === left || placement === right) && variation === end) {
            sideY = bottom;
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
          }
          if (placement === left || (placement === top || placement === bottom) && variation === end) {
            sideX = right;
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
          }
        }
        var commonStyles = Object.assign({
          position
        }, adaptive && unsetSides);
        var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
          x,
          y
        }) : {
          x,
          y
        };
        x = _ref4.x;
        y = _ref4.y;
        if (gpuAcceleration) {
          var _Object$assign;
          return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
        }
        return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
      }
      function computeStyles(_ref5) {
        var state = _ref5.state, options = _ref5.options;
        var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
        if (true) {
          var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
          if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
            return transitionProperty.indexOf(property) >= 0;
          })) {
            console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
          }
        }
        var commonStyles = {
          placement: getBasePlacement(state.placement),
          variation: getVariation(state.placement),
          popper: state.elements.popper,
          popperRect: state.rects.popper,
          gpuAcceleration,
          isFixed: state.options.strategy === "fixed"
        };
        if (state.modifiersData.popperOffsets != null) {
          state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
            offsets: state.modifiersData.popperOffsets,
            position: state.options.strategy,
            adaptive,
            roundOffsets
          })));
        }
        if (state.modifiersData.arrow != null) {
          state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
            offsets: state.modifiersData.arrow,
            position: "absolute",
            adaptive: false,
            roundOffsets
          })));
        }
        state.attributes.popper = Object.assign({}, state.attributes.popper, {
          "data-popper-placement": state.placement
        });
      }
      var computeStyles$1 = {
        name: "computeStyles",
        enabled: true,
        phase: "beforeWrite",
        fn: computeStyles,
        data: {}
      };
      function applyStyles(_ref) {
        var state = _ref.state;
        Object.keys(state.elements).forEach(function(name) {
          var style2 = state.styles[name] || {};
          var attributes = state.attributes[name] || {};
          var element = state.elements[name];
          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }
          Object.assign(element.style, style2);
          Object.keys(attributes).forEach(function(name2) {
            var value = attributes[name2];
            if (value === false) {
              element.removeAttribute(name2);
            } else {
              element.setAttribute(name2, value === true ? "" : value);
            }
          });
        });
      }
      function effect$1(_ref2) {
        var state = _ref2.state;
        var initialStyles = {
          popper: {
            position: state.options.strategy,
            left: "0",
            top: "0",
            margin: "0"
          },
          arrow: {
            position: "absolute"
          },
          reference: {}
        };
        Object.assign(state.elements.popper.style, initialStyles.popper);
        state.styles = initialStyles;
        if (state.elements.arrow) {
          Object.assign(state.elements.arrow.style, initialStyles.arrow);
        }
        return function() {
          Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
            var style2 = styleProperties.reduce(function(style3, property) {
              style3[property] = "";
              return style3;
            }, {});
            if (!isHTMLElement(element) || !getNodeName(element)) {
              return;
            }
            Object.assign(element.style, style2);
            Object.keys(attributes).forEach(function(attribute) {
              element.removeAttribute(attribute);
            });
          });
        };
      }
      var applyStyles$1 = {
        name: "applyStyles",
        enabled: true,
        phase: "write",
        fn: applyStyles,
        effect: effect$1,
        requires: ["computeStyles"]
      };
      function distanceAndSkiddingToXY(placement, rects, offset2) {
        var basePlacement = getBasePlacement(placement);
        var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
        var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
          placement
        })) : offset2, skidding = _ref[0], distance = _ref[1];
        skidding = skidding || 0;
        distance = (distance || 0) * invertDistance;
        return [left, right].indexOf(basePlacement) >= 0 ? {
          x: distance,
          y: skidding
        } : {
          x: skidding,
          y: distance
        };
      }
      function offset(_ref2) {
        var state = _ref2.state, options = _ref2.options, name = _ref2.name;
        var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
        var data = placements.reduce(function(acc, placement) {
          acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
          return acc;
        }, {});
        var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
        if (state.modifiersData.popperOffsets != null) {
          state.modifiersData.popperOffsets.x += x;
          state.modifiersData.popperOffsets.y += y;
        }
        state.modifiersData[name] = data;
      }
      var offset$1 = {
        name: "offset",
        enabled: true,
        phase: "main",
        requires: ["popperOffsets"],
        fn: offset
      };
      var hash$1 = {
        left: "right",
        right: "left",
        bottom: "top",
        top: "bottom"
      };
      function getOppositePlacement(placement) {
        return placement.replace(/left|right|bottom|top/g, function(matched) {
          return hash$1[matched];
        });
      }
      var hash = {
        start: "end",
        end: "start"
      };
      function getOppositeVariationPlacement(placement) {
        return placement.replace(/start|end/g, function(matched) {
          return hash[matched];
        });
      }
      function computeAutoPlacement(state, options) {
        if (options === void 0) {
          options = {};
        }
        var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
        var variation = getVariation(placement);
        var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
          return getVariation(placement2) === variation;
        }) : basePlacements;
        var allowedPlacements = placements$1.filter(function(placement2) {
          return allowedAutoPlacements.indexOf(placement2) >= 0;
        });
        if (allowedPlacements.length === 0) {
          allowedPlacements = placements$1;
          if (true) {
            console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
          }
        }
        var overflows = allowedPlacements.reduce(function(acc, placement2) {
          acc[placement2] = detectOverflow(state, {
            placement: placement2,
            boundary,
            rootBoundary,
            padding
          })[getBasePlacement(placement2)];
          return acc;
        }, {});
        return Object.keys(overflows).sort(function(a, b) {
          return overflows[a] - overflows[b];
        });
      }
      function getExpandedFallbackPlacements(placement) {
        if (getBasePlacement(placement) === auto) {
          return [];
        }
        var oppositePlacement = getOppositePlacement(placement);
        return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
      }
      function flip(_ref) {
        var state = _ref.state, options = _ref.options, name = _ref.name;
        if (state.modifiersData[name]._skip) {
          return;
        }
        var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
        var preferredPlacement = state.options.placement;
        var basePlacement = getBasePlacement(preferredPlacement);
        var isBasePlacement = basePlacement === preferredPlacement;
        var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
        var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
          return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
            placement: placement2,
            boundary,
            rootBoundary,
            padding,
            flipVariations,
            allowedAutoPlacements
          }) : placement2);
        }, []);
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var checksMap = /* @__PURE__ */ new Map();
        var makeFallbackChecks = true;
        var firstFittingPlacement = placements2[0];
        for (var i = 0; i < placements2.length; i++) {
          var placement = placements2[i];
          var _basePlacement = getBasePlacement(placement);
          var isStartVariation = getVariation(placement) === start;
          var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
          var len = isVertical ? "width" : "height";
          var overflow = detectOverflow(state, {
            placement,
            boundary,
            rootBoundary,
            altBoundary,
            padding
          });
          var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
          if (referenceRect[len] > popperRect[len]) {
            mainVariationSide = getOppositePlacement(mainVariationSide);
          }
          var altVariationSide = getOppositePlacement(mainVariationSide);
          var checks = [];
          if (checkMainAxis) {
            checks.push(overflow[_basePlacement] <= 0);
          }
          if (checkAltAxis) {
            checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
          }
          if (checks.every(function(check) {
            return check;
          })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
          }
          checksMap.set(placement, checks);
        }
        if (makeFallbackChecks) {
          var numberOfChecks = flipVariations ? 3 : 1;
          var _loop = function _loop2(_i2) {
            var fittingPlacement = placements2.find(function(placement2) {
              var checks2 = checksMap.get(placement2);
              if (checks2) {
                return checks2.slice(0, _i2).every(function(check) {
                  return check;
                });
              }
            });
            if (fittingPlacement) {
              firstFittingPlacement = fittingPlacement;
              return "break";
            }
          };
          for (var _i = numberOfChecks; _i > 0; _i--) {
            var _ret = _loop(_i);
            if (_ret === "break")
              break;
          }
        }
        if (state.placement !== firstFittingPlacement) {
          state.modifiersData[name]._skip = true;
          state.placement = firstFittingPlacement;
          state.reset = true;
        }
      }
      var flip$1 = {
        name: "flip",
        enabled: true,
        phase: "main",
        fn: flip,
        requiresIfExists: ["offset"],
        data: {
          _skip: false
        }
      };
      function getAltAxis(axis) {
        return axis === "x" ? "y" : "x";
      }
      function within(min$1, value, max$1) {
        return max(min$1, min(value, max$1));
      }
      function withinMaxClamp(min2, value, max2) {
        var v = within(min2, value, max2);
        return v > max2 ? max2 : v;
      }
      function preventOverflow(_ref) {
        var state = _ref.state, options = _ref.options, name = _ref.name;
        var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
        var overflow = detectOverflow(state, {
          boundary,
          rootBoundary,
          padding,
          altBoundary
        });
        var basePlacement = getBasePlacement(state.placement);
        var variation = getVariation(state.placement);
        var isBasePlacement = !variation;
        var mainAxis = getMainAxisFromPlacement(basePlacement);
        var altAxis = getAltAxis(mainAxis);
        var popperOffsets2 = state.modifiersData.popperOffsets;
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
          placement: state.placement
        })) : tetherOffset;
        var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
          mainAxis: tetherOffsetValue,
          altAxis: tetherOffsetValue
        } : Object.assign({
          mainAxis: 0,
          altAxis: 0
        }, tetherOffsetValue);
        var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
        var data = {
          x: 0,
          y: 0
        };
        if (!popperOffsets2) {
          return;
        }
        if (checkMainAxis) {
          var _offsetModifierState$;
          var mainSide = mainAxis === "y" ? top : left;
          var altSide = mainAxis === "y" ? bottom : right;
          var len = mainAxis === "y" ? "height" : "width";
          var offset2 = popperOffsets2[mainAxis];
          var min$1 = offset2 + overflow[mainSide];
          var max$1 = offset2 - overflow[altSide];
          var additive = tether ? -popperRect[len] / 2 : 0;
          var minLen = variation === start ? referenceRect[len] : popperRect[len];
          var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
          var arrowElement = state.elements.arrow;
          var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
            width: 0,
            height: 0
          };
          var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
          var arrowPaddingMin = arrowPaddingObject[mainSide];
          var arrowPaddingMax = arrowPaddingObject[altSide];
          var arrowLen = within(0, referenceRect[len], arrowRect[len]);
          var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
          var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
          var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
          var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
          var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
          var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
          var tetherMax = offset2 + maxOffset - offsetModifierValue;
          var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset2, tether ? max(max$1, tetherMax) : max$1);
          popperOffsets2[mainAxis] = preventedOffset;
          data[mainAxis] = preventedOffset - offset2;
        }
        if (checkAltAxis) {
          var _offsetModifierState$2;
          var _mainSide = mainAxis === "x" ? top : left;
          var _altSide = mainAxis === "x" ? bottom : right;
          var _offset = popperOffsets2[altAxis];
          var _len = altAxis === "y" ? "height" : "width";
          var _min = _offset + overflow[_mainSide];
          var _max = _offset - overflow[_altSide];
          var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
          var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
          var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
          var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
          var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
          popperOffsets2[altAxis] = _preventedOffset;
          data[altAxis] = _preventedOffset - _offset;
        }
        state.modifiersData[name] = data;
      }
      var preventOverflow$1 = {
        name: "preventOverflow",
        enabled: true,
        phase: "main",
        fn: preventOverflow,
        requiresIfExists: ["offset"]
      };
      var toPaddingObject = function toPaddingObject2(padding, state) {
        padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
          placement: state.placement
        })) : padding;
        return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
      };
      function arrow(_ref) {
        var _state$modifiersData$;
        var state = _ref.state, name = _ref.name, options = _ref.options;
        var arrowElement = state.elements.arrow;
        var popperOffsets2 = state.modifiersData.popperOffsets;
        var basePlacement = getBasePlacement(state.placement);
        var axis = getMainAxisFromPlacement(basePlacement);
        var isVertical = [left, right].indexOf(basePlacement) >= 0;
        var len = isVertical ? "height" : "width";
        if (!arrowElement || !popperOffsets2) {
          return;
        }
        var paddingObject = toPaddingObject(options.padding, state);
        var arrowRect = getLayoutRect(arrowElement);
        var minProp = axis === "y" ? top : left;
        var maxProp = axis === "y" ? bottom : right;
        var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
        var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
        var arrowOffsetParent = getOffsetParent(arrowElement);
        var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
        var centerToReference = endDiff / 2 - startDiff / 2;
        var min2 = paddingObject[minProp];
        var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
        var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
        var offset2 = within(min2, center, max2);
        var axisProp = axis;
        state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
      }
      function effect(_ref2) {
        var state = _ref2.state, options = _ref2.options;
        var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
        if (arrowElement == null) {
          return;
        }
        if (typeof arrowElement === "string") {
          arrowElement = state.elements.popper.querySelector(arrowElement);
          if (!arrowElement) {
            return;
          }
        }
        if (true) {
          if (!isHTMLElement(arrowElement)) {
            console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
          }
        }
        if (!contains(state.elements.popper, arrowElement)) {
          if (true) {
            console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
          }
          return;
        }
        state.elements.arrow = arrowElement;
      }
      var arrow$1 = {
        name: "arrow",
        enabled: true,
        phase: "main",
        fn: arrow,
        effect,
        requires: ["popperOffsets"],
        requiresIfExists: ["preventOverflow"]
      };
      function getSideOffsets(overflow, rect, preventedOffsets) {
        if (preventedOffsets === void 0) {
          preventedOffsets = {
            x: 0,
            y: 0
          };
        }
        return {
          top: overflow.top - rect.height - preventedOffsets.y,
          right: overflow.right - rect.width + preventedOffsets.x,
          bottom: overflow.bottom - rect.height + preventedOffsets.y,
          left: overflow.left - rect.width - preventedOffsets.x
        };
      }
      function isAnySideFullyClipped(overflow) {
        return [top, right, bottom, left].some(function(side) {
          return overflow[side] >= 0;
        });
      }
      function hide(_ref) {
        var state = _ref.state, name = _ref.name;
        var referenceRect = state.rects.reference;
        var popperRect = state.rects.popper;
        var preventedOffsets = state.modifiersData.preventOverflow;
        var referenceOverflow = detectOverflow(state, {
          elementContext: "reference"
        });
        var popperAltOverflow = detectOverflow(state, {
          altBoundary: true
        });
        var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
        var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
        var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
        var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
        state.modifiersData[name] = {
          referenceClippingOffsets,
          popperEscapeOffsets,
          isReferenceHidden,
          hasPopperEscaped
        };
        state.attributes.popper = Object.assign({}, state.attributes.popper, {
          "data-popper-reference-hidden": isReferenceHidden,
          "data-popper-escaped": hasPopperEscaped
        });
      }
      var hide$1 = {
        name: "hide",
        enabled: true,
        phase: "main",
        requiresIfExists: ["preventOverflow"],
        fn: hide
      };
      var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
      var createPopper$1 = /* @__PURE__ */ popperGenerator({
        defaultModifiers: defaultModifiers$1
      });
      var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
      var createPopper = /* @__PURE__ */ popperGenerator({
        defaultModifiers
      });
      exports.applyStyles = applyStyles$1;
      exports.arrow = arrow$1;
      exports.computeStyles = computeStyles$1;
      exports.createPopper = createPopper;
      exports.createPopperLite = createPopper$1;
      exports.defaultModifiers = defaultModifiers;
      exports.detectOverflow = detectOverflow;
      exports.eventListeners = eventListeners;
      exports.flip = flip$1;
      exports.hide = hide$1;
      exports.offset = offset$1;
      exports.popperGenerator = popperGenerator;
      exports.popperOffsets = popperOffsets$1;
      exports.preventOverflow = preventOverflow$1;
    }
  });

  // node_modules/@mui/base/node/Portal/Portal.js
  var require_Portal = __commonJS({
    "node_modules/@mui/base/node/Portal/Portal.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      var ReactDOM2 = _interopRequireWildcard(require_react_dom());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getContainer(container2) {
        return typeof container2 === "function" ? container2() : container2;
      }
      var Portal = /* @__PURE__ */ React59.forwardRef(function Portal2(props2, ref) {
        const {
          children,
          container: container2,
          disablePortal = false
        } = props2;
        const [mountNode, setMountNode] = React59.useState(null);
        const handleRef = (0, _utils.unstable_useForkRef)(/* @__PURE__ */ React59.isValidElement(children) ? children.ref : null, ref);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (!disablePortal) {
            setMountNode(getContainer(container2) || document.body);
          }
        }, [container2, disablePortal]);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (mountNode && !disablePortal) {
            (0, _utils.unstable_setRef)(ref, mountNode);
            return () => {
              (0, _utils.unstable_setRef)(ref, null);
            };
          }
          return void 0;
        }, [ref, mountNode, disablePortal]);
        if (disablePortal) {
          if (/* @__PURE__ */ React59.isValidElement(children)) {
            return /* @__PURE__ */ React59.cloneElement(children, {
              ref: handleRef
            });
          }
          return children;
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React59.Fragment, {
          children: mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode
        });
      });
      true ? Portal.propTypes = {
        children: _propTypes.default.node,
        container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
        disablePortal: _propTypes.default.bool
      } : void 0;
      if (true) {
        Portal["propTypes"] = (0, _utils.exactProp)(Portal.propTypes);
      }
      var _default = Portal;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/Portal/index.js
  var require_Portal2 = __commonJS({
    "node_modules/@mui/base/node/Portal/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Portal.default;
        }
      });
      var _Portal = _interopRequireDefault(require_Portal());
    }
  });

  // node_modules/@mui/base/node/PopperUnstyled/popperUnstyledClasses.js
  var require_popperUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/PopperUnstyled/popperUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPopperUnstyledUtilityClass = getPopperUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getPopperUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiPopperUnstyled", slot);
      }
      var popperUnstyledClasses = (0, _generateUtilityClasses.default)("MuiPopperUnstyled", ["root"]);
      var _default = popperUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/PopperUnstyled/PopperUnstyled.js
  var require_PopperUnstyled = __commonJS({
    "node_modules/@mui/base/node/PopperUnstyled/PopperUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _core = require_popper();
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _Portal = _interopRequireDefault(require_Portal2());
      var _popperUnstyledClasses = require_popperUnstyledClasses();
      var _utils2 = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["anchorEl", "children", "component", "components", "componentsProps", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "TransitionProps"];
      var _excluded210 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function flipPlacement(placement, direction) {
        if (direction === "ltr") {
          return placement;
        }
        switch (placement) {
          case "bottom-end":
            return "bottom-start";
          case "bottom-start":
            return "bottom-end";
          case "top-end":
            return "top-start";
          case "top-start":
            return "top-end";
          default:
            return placement;
        }
      }
      function resolveAnchorEl(anchorEl) {
        return typeof anchorEl === "function" ? anchorEl() : anchorEl;
      }
      var useUtilityClasses21 = () => {
        const slots = {
          root: ["root"]
        };
        return (0, _composeClasses.default)(slots, _popperUnstyledClasses.getPopperUnstyledUtilityClass, {});
      };
      var defaultPopperOptions = {};
      var PopperTooltip = /* @__PURE__ */ React59.forwardRef(function PopperTooltip2(props2, ref) {
        var _ref;
        const {
          anchorEl,
          children,
          component,
          components = {},
          componentsProps = {},
          direction,
          disablePortal,
          modifiers,
          open,
          ownerState,
          placement: initialPlacement,
          popperOptions,
          popperRef: popperRefProp,
          TransitionProps
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const tooltipRef = React59.useRef(null);
        const ownRef = (0, _utils.unstable_useForkRef)(tooltipRef, ref);
        const popperRef = React59.useRef(null);
        const handlePopperRef = (0, _utils.unstable_useForkRef)(popperRef, popperRefProp);
        const handlePopperRefRef = React59.useRef(handlePopperRef);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          handlePopperRefRef.current = handlePopperRef;
        }, [handlePopperRef]);
        React59.useImperativeHandle(popperRefProp, () => popperRef.current, []);
        const rtlPlacement = flipPlacement(initialPlacement, direction);
        const [placement, setPlacement] = React59.useState(rtlPlacement);
        React59.useEffect(() => {
          if (popperRef.current) {
            popperRef.current.forceUpdate();
          }
        });
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (!anchorEl || !open) {
            return void 0;
          }
          const handlePopperUpdate = (data) => {
            setPlacement(data.placement);
          };
          const resolvedAnchorEl = resolveAnchorEl(anchorEl);
          if (true) {
            if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
              const box = resolvedAnchorEl.getBoundingClientRect();
              if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
                console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
              }
            }
          }
          let popperModifiers = [{
            name: "preventOverflow",
            options: {
              altBoundary: disablePortal
            }
          }, {
            name: "flip",
            options: {
              altBoundary: disablePortal
            }
          }, {
            name: "onUpdate",
            enabled: true,
            phase: "afterWrite",
            fn: ({
              state
            }) => {
              handlePopperUpdate(state);
            }
          }];
          if (modifiers != null) {
            popperModifiers = popperModifiers.concat(modifiers);
          }
          if (popperOptions && popperOptions.modifiers != null) {
            popperModifiers = popperModifiers.concat(popperOptions.modifiers);
          }
          const popper = (0, _core.createPopper)(resolveAnchorEl(anchorEl), tooltipRef.current, (0, _extends2.default)({
            placement: rtlPlacement
          }, popperOptions, {
            modifiers: popperModifiers
          }));
          handlePopperRefRef.current(popper);
          return () => {
            popper.destroy();
            handlePopperRefRef.current(null);
          };
        }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
        const childProps = {
          placement
        };
        if (TransitionProps !== null) {
          childProps.TransitionProps = TransitionProps;
        }
        const classes = useUtilityClasses21();
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            role: "tooltip",
            ref: ownRef
          },
          ownerState: (0, _extends2.default)({}, props2, ownerState),
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root2, (0, _extends2.default)({}, rootProps, {
          children: typeof children === "function" ? children(childProps) : children
        }));
      });
      var PopperUnstyled = /* @__PURE__ */ React59.forwardRef(function PopperUnstyled2(props2, ref) {
        const {
          anchorEl,
          children,
          container: containerProp,
          direction = "ltr",
          disablePortal = false,
          keepMounted = false,
          modifiers,
          open,
          placement = "bottom",
          popperOptions = defaultPopperOptions,
          popperRef,
          style: style2,
          transition = false
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded210);
        const [exited, setExited] = React59.useState(true);
        const handleEnter = () => {
          setExited(false);
        };
        const handleExited = () => {
          setExited(true);
        };
        if (!keepMounted && !open && (!transition || exited)) {
          return null;
        }
        const container2 = containerProp || (anchorEl ? (0, _utils.unstable_ownerDocument)(resolveAnchorEl(anchorEl)).body : void 0);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Portal.default, {
          disablePortal,
          container: container2,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(PopperTooltip, (0, _extends2.default)({
            anchorEl,
            direction,
            disablePortal,
            modifiers,
            ref,
            open: transition ? !exited : open,
            placement,
            popperOptions,
            popperRef
          }, other, {
            style: (0, _extends2.default)({
              position: "fixed",
              top: 0,
              left: 0,
              display: !open && keepMounted && (!transition || exited) ? "none" : null
            }, style2),
            TransitionProps: transition ? {
              in: open,
              onEnter: handleEnter,
              onExited: handleExited
            } : null,
            children
          }))
        });
      });
      true ? PopperUnstyled.propTypes = {
        anchorEl: (0, _utils.chainPropTypes)(_propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]), (props2) => {
          if (props2.open) {
            const resolvedAnchorEl = resolveAnchorEl(props2.anchorEl);
            if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
              const box = resolvedAnchorEl.getBoundingClientRect();
              if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
                return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
              }
            } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
              return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
            }
          }
          return null;
        }),
        children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
        direction: _propTypes.default.oneOf(["ltr", "rtl"]),
        disablePortal: _propTypes.default.bool,
        keepMounted: _propTypes.default.bool,
        modifiers: _propTypes.default.arrayOf(_propTypes.default.shape({
          data: _propTypes.default.object,
          effect: _propTypes.default.func,
          enabled: _propTypes.default.bool,
          fn: _propTypes.default.func,
          name: _propTypes.default.any,
          options: _propTypes.default.object,
          phase: _propTypes.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
          requires: _propTypes.default.arrayOf(_propTypes.default.string),
          requiresIfExists: _propTypes.default.arrayOf(_propTypes.default.string)
        })),
        open: _propTypes.default.bool.isRequired,
        placement: _propTypes.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        popperOptions: _propTypes.default.shape({
          modifiers: _propTypes.default.array,
          onFirstUpdate: _propTypes.default.func,
          placement: _propTypes.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
          strategy: _propTypes.default.oneOf(["absolute", "fixed"])
        }),
        popperRef: _utils.refType,
        style: _propTypes.default.object,
        transition: _propTypes.default.bool
      } : void 0;
      var _default = PopperUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/PopperUnstyled/index.js
  var require_PopperUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/PopperUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _PopperUnstyled.default;
        }
      });
      var _PopperUnstyled = _interopRequireDefault(require_PopperUnstyled());
    }
  });

  // node_modules/@mui/base/node/MenuUnstyled/MenuUnstyled.js
  var require_MenuUnstyled = __commonJS({
    "node_modules/@mui/base/node/MenuUnstyled/MenuUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _MenuUnstyledContext = _interopRequireDefault(require_MenuUnstyledContext());
      var _menuUnstyledClasses = require_menuUnstyledClasses();
      var _useMenu = _interopRequireDefault(require_useMenu());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _PopperUnstyled = _interopRequireDefault(require_PopperUnstyled2());
      var _useSlotProps = _interopRequireDefault(require_useSlotProps());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["actions", "anchorEl", "children", "component", "components", "componentsProps", "keepMounted", "listboxId", "onClose", "open"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getUtilityClasses(ownerState) {
        const {
          open
        } = ownerState;
        const slots = {
          root: ["root", open && "expanded"],
          listbox: ["listbox", open && "expanded"]
        };
        return (0, _composeClasses.default)(slots, _menuUnstyledClasses.getMenuUnstyledUtilityClass, {});
      }
      var MenuUnstyled = /* @__PURE__ */ React59.forwardRef(function MenuUnstyled2(props2, forwardedRef) {
        var _ref, _components$Listbox;
        const {
          actions,
          anchorEl,
          children,
          component,
          components = {},
          componentsProps = {},
          keepMounted = false,
          listboxId,
          onClose,
          open = false
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          registerItem,
          unregisterItem,
          getListboxProps,
          getItemProps,
          getItemState,
          highlightFirstItem,
          highlightLastItem
        } = (0, _useMenu.default)({
          open,
          onClose,
          listboxId
        });
        React59.useImperativeHandle(actions, () => ({
          highlightFirstItem,
          highlightLastItem
        }), [highlightFirstItem, highlightLastItem]);
        const ownerState = (0, _extends2.default)({}, props2, {
          open
        });
        const classes = getUtilityClasses(ownerState);
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : _PopperUnstyled.default;
        const rootProps = (0, _useSlotProps.default)({
          elementType: Root2,
          externalForwardedProps: other,
          externalSlotProps: componentsProps.root,
          additionalProps: {
            anchorEl,
            open,
            keepMounted,
            role: void 0,
            ref: forwardedRef
          },
          className: classes.root,
          ownerState
        });
        const Listbox = (_components$Listbox = components.Listbox) != null ? _components$Listbox : "ul";
        const listboxProps = (0, _useSlotProps.default)({
          elementType: Listbox,
          getSlotProps: getListboxProps,
          externalSlotProps: componentsProps.listbox,
          ownerState,
          className: classes.listbox
        });
        const contextValue = {
          registerItem,
          unregisterItem,
          getItemState,
          getItemProps,
          open
        };
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root2, (0, _extends2.default)({}, rootProps, {
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Listbox, (0, _extends2.default)({}, listboxProps, {
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_MenuUnstyledContext.default.Provider, {
              value: contextValue,
              children
            })
          }))
        }));
      });
      true ? MenuUnstyled.propTypes = {
        actions: _utils.refType,
        anchorEl: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]),
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Listbox: _propTypes.default.elementType,
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        keepMounted: _propTypes.default.bool,
        listboxId: _propTypes.default.string,
        onClose: _propTypes.default.func,
        open: _propTypes.default.bool
      } : void 0;
      var _default = MenuUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/MenuUnstyled/MenuUnstyled.types.js
  var require_MenuUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/MenuUnstyled/MenuUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/MenuUnstyled/useMenu.types.js
  var require_useMenu_types = __commonJS({
    "node_modules/@mui/base/node/MenuUnstyled/useMenu.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/MenuUnstyled/index.js
  var require_MenuUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/MenuUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        MenuUnstyledContext: true,
        menuUnstyledClasses: true,
        useMenu: true
      };
      Object.defineProperty(exports, "MenuUnstyledContext", {
        enumerable: true,
        get: function() {
          return _MenuUnstyledContext.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _MenuUnstyled.default;
        }
      });
      Object.defineProperty(exports, "menuUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _menuUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useMenu", {
        enumerable: true,
        get: function() {
          return _useMenu.default;
        }
      });
      var _MenuUnstyled = _interopRequireDefault(require_MenuUnstyled());
      var _MenuUnstyledContext = _interopRequireWildcard(require_MenuUnstyledContext());
      Object.keys(_MenuUnstyledContext).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MenuUnstyledContext[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MenuUnstyledContext[key];
          }
        });
      });
      var _menuUnstyledClasses = _interopRequireWildcard(require_menuUnstyledClasses());
      Object.keys(_menuUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _menuUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _menuUnstyledClasses[key];
          }
        });
      });
      var _MenuUnstyled2 = require_MenuUnstyled_types();
      Object.keys(_MenuUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MenuUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MenuUnstyled2[key];
          }
        });
      });
      var _useMenu = _interopRequireDefault(require_useMenu());
      var _useMenu2 = require_useMenu_types();
      Object.keys(_useMenu2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useMenu2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useMenu2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/MenuItemUnstyled/menuItemUnstyledClasses.js
  var require_menuItemUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/MenuItemUnstyled/menuItemUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getMenuItemUnstyledUtilityClass = getMenuItemUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getMenuItemUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiMenuItemUnstyled", slot);
      }
      var menuItemUnstyledClasses = (0, _generateUtilityClasses.default)("MuiMenuItemUnstyled", ["root", "disabled", "focusVisible"]);
      var _default = menuItemUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/MenuItemUnstyled/useMenuItem.js
  var require_useMenuItem = __commonJS({
    "node_modules/@mui/base/node/MenuItemUnstyled/useMenuItem.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useMenuItem;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _MenuUnstyled = require_MenuUnstyled2();
      var _ButtonUnstyled = require_ButtonUnstyled2();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useMenuItem(props2) {
        var _itemState$disabled;
        const {
          disabled = false,
          ref,
          label
        } = props2;
        const id = (0, _utils.unstable_useId)();
        const menuContext = React59.useContext(_MenuUnstyled.MenuUnstyledContext);
        const itemRef = React59.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(itemRef, ref);
        if (menuContext === null) {
          throw new Error("MenuItemUnstyled must be used within a MenuUnstyled");
        }
        const {
          registerItem,
          unregisterItem,
          open
        } = menuContext;
        React59.useEffect(() => {
          if (id === void 0) {
            return void 0;
          }
          registerItem(id, {
            disabled,
            id,
            ref: itemRef,
            label
          });
          return () => unregisterItem(id);
        }, [id, registerItem, unregisterItem, disabled, ref, label]);
        const {
          getRootProps: getButtonProps,
          focusVisible
        } = (0, _ButtonUnstyled.useButton)({
          disabled,
          focusableWhenDisabled: true,
          ref: handleRef
        });
        const [focusRequested, requestFocus] = React59.useState(false);
        const focusIfRequested = React59.useCallback(() => {
          if (focusRequested && itemRef.current != null) {
            itemRef.current.focus();
            requestFocus(false);
          }
        }, [focusRequested]);
        React59.useEffect(() => {
          focusIfRequested();
        });
        React59.useDebugValue({
          id,
          disabled,
          label
        });
        const itemState = menuContext.getItemState(id != null ? id : "");
        const {
          highlighted
        } = itemState != null ? itemState : {
          highlighted: false
        };
        React59.useEffect(() => {
          requestFocus(highlighted && open);
        }, [highlighted, open]);
        if (id === void 0) {
          return {
            getRootProps: (other) => (0, _extends2.default)({}, other, getButtonProps(other), {
              role: "menuitem"
            }),
            disabled: false,
            focusVisible
          };
        }
        return {
          getRootProps: (other) => {
            const optionProps = menuContext.getItemProps(id, other);
            return (0, _extends2.default)({}, other, getButtonProps(other), {
              tabIndex: optionProps.tabIndex,
              id: optionProps.id,
              role: "menuitem"
            });
          },
          disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,
          focusVisible
        };
      }
    }
  });

  // node_modules/@mui/base/node/MenuItemUnstyled/MenuItemUnstyled.js
  var require_MenuItemUnstyled = __commonJS({
    "node_modules/@mui/base/node/MenuItemUnstyled/MenuItemUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _menuItemUnstyledClasses = require_menuItemUnstyledClasses();
      var _useMenuItem = _interopRequireDefault(require_useMenuItem());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _useSlotProps = _interopRequireDefault(require_useSlotProps());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["children", "disabled", "component", "components", "componentsProps", "label"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getUtilityClasses(ownerState) {
        const {
          disabled,
          focusVisible
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
        };
        return (0, _composeClasses.default)(slots, _menuItemUnstyledClasses.getMenuItemUnstyledUtilityClass, {});
      }
      var MenuItemUnstyled = /* @__PURE__ */ React59.forwardRef(function MenuItemUnstyled2(props2, ref) {
        var _ref;
        const {
          children,
          disabled: disabledProp = false,
          component,
          components = {},
          componentsProps = {},
          label
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          getRootProps,
          disabled,
          focusVisible
        } = (0, _useMenuItem.default)({
          disabled: disabledProp,
          ref,
          label
        });
        const ownerState = (0, _extends2.default)({}, props2, {
          disabled,
          focusVisible
        });
        const classes = getUtilityClasses(ownerState);
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : "li";
        const rootProps = (0, _useSlotProps.default)({
          elementType: Root2,
          getSlotProps: getRootProps,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          className: classes.root,
          ownerState
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root2, (0, _extends2.default)({}, rootProps, {
          children
        }));
      });
      true ? MenuItemUnstyled.propTypes = {
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        disabled: _propTypes.default.bool,
        label: _propTypes.default.string
      } : void 0;
      var _default = MenuItemUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/MenuItemUnstyled/MenuItemUnstyled.types.js
  var require_MenuItemUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/MenuItemUnstyled/MenuItemUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/MenuItemUnstyled/useMenuItem.types.js
  var require_useMenuItem_types = __commonJS({
    "node_modules/@mui/base/node/MenuItemUnstyled/useMenuItem.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/MenuItemUnstyled/index.js
  var require_MenuItemUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/MenuItemUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        menuItemUnstyledClasses: true,
        useMenuItem: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _MenuItemUnstyled.default;
        }
      });
      Object.defineProperty(exports, "menuItemUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _menuItemUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useMenuItem", {
        enumerable: true,
        get: function() {
          return _useMenuItem.default;
        }
      });
      var _MenuItemUnstyled = _interopRequireDefault(require_MenuItemUnstyled());
      var _MenuItemUnstyled2 = require_MenuItemUnstyled_types();
      Object.keys(_MenuItemUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MenuItemUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MenuItemUnstyled2[key];
          }
        });
      });
      var _menuItemUnstyledClasses = _interopRequireWildcard(require_menuItemUnstyledClasses());
      Object.keys(_menuItemUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _menuItemUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _menuItemUnstyledClasses[key];
          }
        });
      });
      var _useMenuItem = _interopRequireDefault(require_useMenuItem());
      var _useMenuItem2 = require_useMenuItem_types();
      Object.keys(_useMenuItem2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useMenuItem2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useMenuItem2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/ModalUnstyled/ModalManager.js
  var require_ModalManager = __commonJS({
    "node_modules/@mui/base/node/ModalUnstyled/ModalManager.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ariaHidden = ariaHidden;
      exports.default = void 0;
      var _utils = require_utils();
      function isOverflowing(container2) {
        const doc = (0, _utils.unstable_ownerDocument)(container2);
        if (doc.body === container2) {
          return (0, _utils.unstable_ownerWindow)(container2).innerWidth > doc.documentElement.clientWidth;
        }
        return container2.scrollHeight > container2.clientHeight;
      }
      function ariaHidden(element, show) {
        if (show) {
          element.setAttribute("aria-hidden", "true");
        } else {
          element.removeAttribute("aria-hidden");
        }
      }
      function getPaddingRight(element) {
        return parseInt((0, _utils.unstable_ownerWindow)(element).getComputedStyle(element).paddingRight, 10) || 0;
      }
      function isAriaHiddenForbiddenOnElement(element) {
        const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
        const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
        const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
        return isForbiddenTagName || isInputHidden;
      }
      function ariaHiddenSiblings(container2, mountElement, currentElement, elementsToExclude = [], show) {
        const blacklist = [mountElement, currentElement, ...elementsToExclude];
        [].forEach.call(container2.children, (element) => {
          const isNotExcludedElement = blacklist.indexOf(element) === -1;
          const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
          if (isNotExcludedElement && isNotForbiddenElement) {
            ariaHidden(element, show);
          }
        });
      }
      function findIndexOf(items, callback) {
        let idx = -1;
        items.some((item, index) => {
          if (callback(item)) {
            idx = index;
            return true;
          }
          return false;
        });
        return idx;
      }
      function handleContainer(containerInfo, props2) {
        const restoreStyle = [];
        const container2 = containerInfo.container;
        if (!props2.disableScrollLock) {
          if (isOverflowing(container2)) {
            const scrollbarSize = (0, _utils.unstable_getScrollbarSize)((0, _utils.unstable_ownerDocument)(container2));
            restoreStyle.push({
              value: container2.style.paddingRight,
              property: "padding-right",
              el: container2
            });
            container2.style.paddingRight = `${getPaddingRight(container2) + scrollbarSize}px`;
            const fixedElements = (0, _utils.unstable_ownerDocument)(container2).querySelectorAll(".mui-fixed");
            [].forEach.call(fixedElements, (element) => {
              restoreStyle.push({
                value: element.style.paddingRight,
                property: "padding-right",
                el: element
              });
              element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
            });
          }
          let scrollContainer;
          if (container2.parentNode instanceof DocumentFragment) {
            scrollContainer = (0, _utils.unstable_ownerDocument)(container2).body;
          } else {
            const parent = container2.parentElement;
            const containerWindow = (0, _utils.unstable_ownerWindow)(container2);
            scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container2;
          }
          restoreStyle.push({
            value: scrollContainer.style.overflow,
            property: "overflow",
            el: scrollContainer
          }, {
            value: scrollContainer.style.overflowX,
            property: "overflow-x",
            el: scrollContainer
          }, {
            value: scrollContainer.style.overflowY,
            property: "overflow-y",
            el: scrollContainer
          });
          scrollContainer.style.overflow = "hidden";
        }
        const restore = () => {
          restoreStyle.forEach(({
            value,
            el,
            property
          }) => {
            if (value) {
              el.style.setProperty(property, value);
            } else {
              el.style.removeProperty(property);
            }
          });
        };
        return restore;
      }
      function getHiddenSiblings(container2) {
        const hiddenSiblings = [];
        [].forEach.call(container2.children, (element) => {
          if (element.getAttribute("aria-hidden") === "true") {
            hiddenSiblings.push(element);
          }
        });
        return hiddenSiblings;
      }
      var ModalManager = class {
        constructor() {
          this.containers = void 0;
          this.modals = void 0;
          this.modals = [];
          this.containers = [];
        }
        add(modal, container2) {
          let modalIndex = this.modals.indexOf(modal);
          if (modalIndex !== -1) {
            return modalIndex;
          }
          modalIndex = this.modals.length;
          this.modals.push(modal);
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, false);
          }
          const hiddenSiblings = getHiddenSiblings(container2);
          ariaHiddenSiblings(container2, modal.mount, modal.modalRef, hiddenSiblings, true);
          const containerIndex = findIndexOf(this.containers, (item) => item.container === container2);
          if (containerIndex !== -1) {
            this.containers[containerIndex].modals.push(modal);
            return modalIndex;
          }
          this.containers.push({
            modals: [modal],
            container: container2,
            restore: null,
            hiddenSiblings
          });
          return modalIndex;
        }
        mount(modal, props2) {
          const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
          const containerInfo = this.containers[containerIndex];
          if (!containerInfo.restore) {
            containerInfo.restore = handleContainer(containerInfo, props2);
          }
        }
        remove(modal, ariaHiddenState = true) {
          const modalIndex = this.modals.indexOf(modal);
          if (modalIndex === -1) {
            return modalIndex;
          }
          const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
          const containerInfo = this.containers[containerIndex];
          containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
          this.modals.splice(modalIndex, 1);
          if (containerInfo.modals.length === 0) {
            if (containerInfo.restore) {
              containerInfo.restore();
            }
            if (modal.modalRef) {
              ariaHidden(modal.modalRef, ariaHiddenState);
            }
            ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
            this.containers.splice(containerIndex, 1);
          } else {
            const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
            if (nextTop.modalRef) {
              ariaHidden(nextTop.modalRef, false);
            }
          }
          return modalIndex;
        }
        isTopModal(modal) {
          return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
        }
      };
      exports.default = ModalManager;
    }
  });

  // node_modules/@mui/base/node/ModalUnstyled/modalUnstyledClasses.js
  var require_modalUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/ModalUnstyled/modalUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getModalUtilityClass = getModalUtilityClass;
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      function getModalUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiModal", slot);
      }
      var modalUnstyledClasses2 = (0, _generateUtilityClasses.default)("MuiModal", ["root", "hidden"]);
      var _default = modalUnstyledClasses2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/ModalUnstyled/ModalUnstyled.js
  var require_ModalUnstyled = __commonJS({
    "node_modules/@mui/base/node/ModalUnstyled/ModalUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _Portal = _interopRequireDefault(require_Portal2());
      var _ModalManager = _interopRequireWildcard(require_ModalManager());
      var _FocusTrap = _interopRequireDefault(require_FocusTrap2());
      var _modalUnstyledClasses = require_modalUnstyledClasses();
      var _utils2 = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["children", "classes", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          open,
          exited,
          classes
        } = ownerState;
        const slots = {
          root: ["root", !open && exited && "hidden"]
        };
        return (0, _composeClasses.default)(slots, _modalUnstyledClasses.getModalUtilityClass, classes);
      };
      function getContainer(container2) {
        return typeof container2 === "function" ? container2() : container2;
      }
      function getHasTransition(props2) {
        return props2.children ? props2.children.props.hasOwnProperty("in") : false;
      }
      var defaultManager = new _ModalManager.default();
      var ModalUnstyled2 = /* @__PURE__ */ React59.forwardRef(function ModalUnstyled3(props2, ref) {
        var _props$ariaHidden;
        const {
          children,
          classes: classesProp,
          closeAfterTransition = false,
          component = "div",
          components = {},
          componentsProps = {},
          container: container2,
          disableAutoFocus = false,
          disableEnforceFocus = false,
          disableEscapeKeyDown = false,
          disablePortal = false,
          disableRestoreFocus = false,
          disableScrollLock = false,
          hideBackdrop = false,
          keepMounted = false,
          manager = defaultManager,
          onBackdropClick,
          onClose,
          onKeyDown,
          open,
          onTransitionEnter,
          onTransitionExited
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const [exited, setExited] = React59.useState(true);
        const modal = React59.useRef({});
        const mountNodeRef = React59.useRef(null);
        const modalRef = React59.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(modalRef, ref);
        const hasTransition = getHasTransition(props2);
        const ariaHiddenProp = (_props$ariaHidden = props2["aria-hidden"]) != null ? _props$ariaHidden : true;
        const getDoc = () => (0, _utils.unstable_ownerDocument)(mountNodeRef.current);
        const getModal = () => {
          modal.current.modalRef = modalRef.current;
          modal.current.mountNode = mountNodeRef.current;
          return modal.current;
        };
        const handleMounted = () => {
          manager.mount(getModal(), {
            disableScrollLock
          });
          modalRef.current.scrollTop = 0;
        };
        const handleOpen = (0, _utils.unstable_useEventCallback)(() => {
          const resolvedContainer = getContainer(container2) || getDoc().body;
          manager.add(getModal(), resolvedContainer);
          if (modalRef.current) {
            handleMounted();
          }
        });
        const isTopModal = React59.useCallback(() => manager.isTopModal(getModal()), [manager]);
        const handlePortalRef = (0, _utils.unstable_useEventCallback)((node) => {
          mountNodeRef.current = node;
          if (!node) {
            return;
          }
          if (open && isTopModal()) {
            handleMounted();
          } else {
            (0, _ModalManager.ariaHidden)(modalRef.current, ariaHiddenProp);
          }
        });
        const handleClose = React59.useCallback(() => {
          manager.remove(getModal(), ariaHiddenProp);
        }, [manager, ariaHiddenProp]);
        React59.useEffect(() => {
          return () => {
            handleClose();
          };
        }, [handleClose]);
        React59.useEffect(() => {
          if (open) {
            handleOpen();
          } else if (!hasTransition || !closeAfterTransition) {
            handleClose();
          }
        }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
        const ownerState = (0, _extends2.default)({}, props2, {
          classes: classesProp,
          closeAfterTransition,
          disableAutoFocus,
          disableEnforceFocus,
          disableEscapeKeyDown,
          disablePortal,
          disableRestoreFocus,
          disableScrollLock,
          exited,
          hideBackdrop,
          keepMounted
        });
        const classes = useUtilityClasses21(ownerState);
        const handleEnter = () => {
          setExited(false);
          if (onTransitionEnter) {
            onTransitionEnter();
          }
        };
        const handleExited = () => {
          setExited(true);
          if (onTransitionExited) {
            onTransitionExited();
          }
          if (closeAfterTransition) {
            handleClose();
          }
        };
        const handleBackdropClick = (event) => {
          if (event.target !== event.currentTarget) {
            return;
          }
          if (onBackdropClick) {
            onBackdropClick(event);
          }
          if (onClose) {
            onClose(event, "backdropClick");
          }
        };
        const handleKeyDown = (event) => {
          if (onKeyDown) {
            onKeyDown(event);
          }
          if (event.key !== "Escape" || !isTopModal()) {
            return;
          }
          if (!disableEscapeKeyDown) {
            event.stopPropagation();
            if (onClose) {
              onClose(event, "escapeKeyDown");
            }
          }
        };
        const childProps = {};
        if (children.props.tabIndex === void 0) {
          childProps.tabIndex = "-1";
        }
        if (hasTransition) {
          childProps.onEnter = (0, _utils.unstable_createChainedFunction)(handleEnter, children.props.onEnter);
          childProps.onExited = (0, _utils.unstable_createChainedFunction)(handleExited, children.props.onExited);
        }
        const Root2 = components.Root || component;
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref: handleRef,
            role: "presentation",
            onKeyDown: handleKeyDown
          },
          className: classes.root,
          ownerState
        });
        const BackdropComponent = components.Backdrop;
        const backdropProps = (0, _utils2.useSlotProps)({
          elementType: BackdropComponent,
          externalSlotProps: componentsProps.backdrop,
          additionalProps: {
            "aria-hidden": true,
            onClick: handleBackdropClick,
            open
          },
          ownerState
        });
        if (!keepMounted && !open && (!hasTransition || exited)) {
          return null;
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_Portal.default, {
          ref: handlePortalRef,
          container: container2,
          disablePortal,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root2, (0, _extends2.default)({}, rootProps, {
            children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackdropComponent, (0, _extends2.default)({}, backdropProps)) : null, /* @__PURE__ */ (0, _jsxRuntime.jsx)(_FocusTrap.default, {
              disableEnforceFocus,
              disableAutoFocus,
              disableRestoreFocus,
              isEnabled: isTopModal,
              open,
              children: /* @__PURE__ */ React59.cloneElement(children, childProps)
            })]
          }))
        });
      });
      true ? ModalUnstyled2.propTypes = {
        children: _utils.elementAcceptingRef.isRequired,
        classes: _propTypes.default.object,
        closeAfterTransition: _propTypes.default.bool,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Backdrop: _propTypes.default.elementType,
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        container: _propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
        disableAutoFocus: _propTypes.default.bool,
        disableEnforceFocus: _propTypes.default.bool,
        disableEscapeKeyDown: _propTypes.default.bool,
        disablePortal: _propTypes.default.bool,
        disableRestoreFocus: _propTypes.default.bool,
        disableScrollLock: _propTypes.default.bool,
        hideBackdrop: _propTypes.default.bool,
        keepMounted: _propTypes.default.bool,
        onBackdropClick: _propTypes.default.func,
        onClose: _propTypes.default.func,
        onKeyDown: _propTypes.default.func,
        open: _propTypes.default.bool.isRequired
      } : void 0;
      var _default = ModalUnstyled2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/ModalUnstyled/index.js
  var require_ModalUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/ModalUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "ModalManager", {
        enumerable: true,
        get: function() {
          return _ModalManager.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ModalUnstyled.default;
        }
      });
      Object.defineProperty(exports, "getModalUtilityClass", {
        enumerable: true,
        get: function() {
          return _modalUnstyledClasses.getModalUtilityClass;
        }
      });
      Object.defineProperty(exports, "modalUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _modalUnstyledClasses.default;
        }
      });
      var _ModalUnstyled = _interopRequireDefault(require_ModalUnstyled());
      var _ModalManager = _interopRequireDefault(require_ModalManager());
      var _modalUnstyledClasses = _interopRequireWildcard(require_modalUnstyledClasses());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/useSelect.types.js
  var require_useSelect_types = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/useSelect.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isOptionGroup = isOptionGroup;
      function isOptionGroup(child) {
        return !!child.options;
      }
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/utils.js
  var require_utils3 = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/utils.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.areOptionsEqual = areOptionsEqual;
      exports.flattenOptionGroups = flattenOptionGroups;
      exports.getOptionsFromChildren = getOptionsFromChildren;
      var _extends2 = _interopRequireDefault(require_extends());
      var _react = _interopRequireDefault(require_react());
      var _useSelect = require_useSelect_types();
      function areOptionsEqual(option1, option2) {
        return option1.label === option2.label && option1.value === option2.value && option1.disabled === option2.disabled;
      }
      function getOptionsFromChildren(children) {
        if (children == null) {
          return [];
        }
        const selectChildren = [];
        _react.default.Children.forEach(children, (node) => {
          var _props, _props2, _element$props$disabl2;
          const nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;
          if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === void 0) {
            if (nodeChildren != null) {
              var _element$props$disabl;
              const element2 = node;
              const group = {
                options: getOptionsFromChildren(nodeChildren),
                label: element2.props.label,
                disabled: (_element$props$disabl = element2.props.disabled) != null ? _element$props$disabl : false
              };
              selectChildren.push(group);
            }
            return;
          }
          const element = node;
          const option = {
            value: element.props.value,
            label: element.props.label || element.props.children,
            disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false
          };
          selectChildren.push(option);
        });
        return selectChildren != null ? selectChildren : [];
      }
      function flattenOptionGroups(groupedOptions, isGroupDisabled = false) {
        let flatOptions = [];
        groupedOptions.forEach((optionOrGroup) => {
          if ((0, _useSelect.isOptionGroup)(optionOrGroup)) {
            flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));
          } else {
            flatOptions.push((0, _extends2.default)({}, optionOrGroup, {
              disabled: isGroupDisabled || optionOrGroup.disabled
            }));
          }
        });
        return flatOptions;
      }
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/defaultOptionStringifier.js
  var require_defaultOptionStringifier = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/defaultOptionStringifier.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var defaultOptionStringifier = (option) => {
        const {
          label,
          value
        } = option;
        if (typeof label === "string") {
          return label;
        }
        if (typeof value === "string") {
          return value;
        }
        return String(option);
      };
      var _default = defaultOptionStringifier;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/useSelect.js
  var require_useSelect = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/useSelect.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _ButtonUnstyled = require_ButtonUnstyled2();
      var _ListboxUnstyled = require_ListboxUnstyled();
      var _defaultOptionStringifier = _interopRequireDefault(require_defaultOptionStringifier());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useSelect(props2) {
        const {
          buttonRef: buttonRefProp,
          defaultValue,
          disabled = false,
          listboxId,
          listboxRef: listboxRefProp,
          multiple = false,
          onChange,
          onOpenChange,
          open = false,
          options,
          optionStringifier = _defaultOptionStringifier.default,
          value: valueProp
        } = props2;
        const buttonRef = React59.useRef(null);
        const handleButtonRef = (0, _utils.unstable_useForkRef)(buttonRefProp, buttonRef);
        const listboxRef = React59.useRef(null);
        const [value, setValue] = (0, _utils.unstable_useControlled)({
          controlled: valueProp,
          default: defaultValue,
          name: "SelectUnstyled",
          state: "value"
        });
        const ignoreEnterKeyUp = React59.useRef(false);
        const ignoreClick = React59.useRef(false);
        const [listboxFocusRequested, requestListboxFocus] = React59.useState(false);
        const focusListboxIfRequested = React59.useCallback(() => {
          if (listboxFocusRequested && listboxRef.current != null) {
            listboxRef.current.focus();
            requestListboxFocus(false);
          }
        }, [listboxFocusRequested]);
        const handleListboxRef = (0, _utils.unstable_useForkRef)(listboxRefProp, listboxRef, focusListboxIfRequested);
        React59.useEffect(() => {
          focusListboxIfRequested();
        }, [focusListboxIfRequested]);
        React59.useEffect(() => {
          requestListboxFocus(open);
        }, [open]);
        const createHandleMouseDown = (otherHandlers) => (event) => {
          var _otherHandlers$onMous;
          otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
          if (!event.defaultPrevented && open) {
            ignoreClick.current = true;
          }
        };
        const createHandleButtonClick = (otherHandlers) => (event) => {
          var _otherHandlers$onClic;
          otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
          if (!event.defaultPrevented && !ignoreClick.current) {
            onOpenChange == null ? void 0 : onOpenChange(!open);
          }
          ignoreClick.current = false;
        };
        const createHandleButtonKeyDown = (otherHandlers) => (event) => {
          var _otherHandlers$onKeyD;
          otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
          if (event.defaultPrevented) {
            return;
          }
          if (event.key === "Enter") {
            ignoreEnterKeyUp.current = true;
          }
          if (event.key === "ArrowDown" || event.key === "ArrowUp") {
            event.preventDefault();
            onOpenChange == null ? void 0 : onOpenChange(true);
          }
        };
        const createHandleListboxKeyUp = (otherHandlers) => (event) => {
          var _otherHandlers$onKeyU;
          otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
          if (event.defaultPrevented) {
            return;
          }
          const closingKeys = multiple ? ["Escape"] : ["Escape", "Enter", " "];
          if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {
            var _buttonRef$current;
            buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
          }
          ignoreEnterKeyUp.current = false;
        };
        const createHandleListboxItemClick = (otherHandlers) => (event) => {
          var _otherHandlers$onClic2;
          otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
          if (event.defaultPrevented) {
            return;
          }
          if (!multiple) {
            onOpenChange == null ? void 0 : onOpenChange(false);
          }
        };
        const createHandleListboxBlur = (otherHandlers) => (event) => {
          var _otherHandlers$onBlur;
          otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
          if (!event.defaultPrevented) {
            onOpenChange == null ? void 0 : onOpenChange(false);
          }
        };
        const listboxReducer = (state, action) => {
          const newState = (0, _ListboxUnstyled.defaultListboxReducer)(state, action);
          if (action.type === _ListboxUnstyled.ActionTypes.keyDown && !open && (action.event.key === "ArrowUp" || action.event.key === "ArrowDown")) {
            return (0, _extends2.default)({}, newState, {
              selectedValue: newState.highlightedValue
            });
          }
          if (action.type === _ListboxUnstyled.ActionTypes.blur || action.type === _ListboxUnstyled.ActionTypes.setValue || action.type === _ListboxUnstyled.ActionTypes.optionsChange) {
            return (0, _extends2.default)({}, newState, {
              highlightedValue: newState.selectedValue
            });
          }
          return newState;
        };
        const {
          getRootProps: getButtonRootProps,
          active: buttonActive,
          focusVisible: buttonFocusVisible
        } = (0, _ButtonUnstyled.useButton)({
          disabled,
          ref: handleButtonRef
        });
        const selectedOption = React59.useMemo(() => {
          var _props$options$find;
          return props2.multiple ? props2.options.filter((o) => value.includes(o.value)) : (_props$options$find = props2.options.find((o) => o.value === value)) != null ? _props$options$find : null;
        }, [props2.multiple, props2.options, value]);
        let useListboxParameters;
        if (props2.multiple) {
          const onChangeMultiple = onChange;
          useListboxParameters = {
            id: listboxId,
            isOptionDisabled: (o) => {
              var _o$disabled;
              return (_o$disabled = o == null ? void 0 : o.disabled) != null ? _o$disabled : false;
            },
            optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
            listboxRef: handleListboxRef,
            multiple: true,
            onChange: (e, newOptions) => {
              const newValues = newOptions.map((o) => o.value);
              setValue(newValues);
              onChangeMultiple == null ? void 0 : onChangeMultiple(e, newValues);
            },
            options,
            optionStringifier,
            value: selectedOption
          };
        } else {
          const onChangeSingle = onChange;
          useListboxParameters = {
            id: listboxId,
            isOptionDisabled: (o) => {
              var _o$disabled2;
              return (_o$disabled2 = o == null ? void 0 : o.disabled) != null ? _o$disabled2 : false;
            },
            optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
            listboxRef: handleListboxRef,
            multiple: false,
            onChange: (e, option) => {
              var _option$value, _option$value2;
              setValue((_option$value = option == null ? void 0 : option.value) != null ? _option$value : null);
              onChangeSingle == null ? void 0 : onChangeSingle(e, (_option$value2 = option == null ? void 0 : option.value) != null ? _option$value2 : null);
            },
            options,
            optionStringifier,
            stateReducer: listboxReducer,
            value: selectedOption
          };
        }
        const {
          getRootProps: getListboxRootProps,
          getOptionProps: getListboxOptionProps,
          getOptionState,
          highlightedOption,
          selectedOption: listboxSelectedOption
        } = (0, _ListboxUnstyled.useListbox)(useListboxParameters);
        const getButtonProps = (otherHandlers = {}) => {
          return (0, _extends2.default)({}, getButtonRootProps((0, _extends2.default)({}, otherHandlers, {
            onClick: createHandleButtonClick(otherHandlers),
            onMouseDown: createHandleMouseDown(otherHandlers),
            onKeyDown: createHandleButtonKeyDown(otherHandlers)
          })), {
            "aria-expanded": open,
            "aria-haspopup": "listbox"
          });
        };
        const getListboxProps = (otherHandlers = {}) => getListboxRootProps((0, _extends2.default)({}, otherHandlers, {
          onBlur: createHandleListboxBlur(otherHandlers),
          onKeyUp: createHandleListboxKeyUp(otherHandlers)
        }));
        const getOptionProps = (option, otherHandlers = {}) => {
          return getListboxOptionProps(option, (0, _extends2.default)({}, otherHandlers, {
            onClick: createHandleListboxItemClick(otherHandlers)
          }));
        };
        React59.useDebugValue({
          selectedOption: listboxSelectedOption,
          highlightedOption,
          open
        });
        return {
          buttonActive,
          buttonFocusVisible,
          disabled,
          getButtonProps,
          getListboxProps,
          getOptionProps,
          getOptionState,
          open,
          value
        };
      }
      var _default = useSelect;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/SelectUnstyledContext.js
  var require_SelectUnstyledContext = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/SelectUnstyledContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SelectUnstyledContext = void 0;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var SelectUnstyledContext = /* @__PURE__ */ React59.createContext(void 0);
      exports.SelectUnstyledContext = SelectUnstyledContext;
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/selectUnstyledClasses.js
  var require_selectUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/selectUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSelectUnstyledUtilityClass = getSelectUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getSelectUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSelectUnstyled", slot);
      }
      var selectUnstyledClasses = (0, _generateUtilityClasses.default)("MuiSelectUnstyled", ["root", "button", "listbox", "popper", "active", "expanded", "disabled", "focusVisible"]);
      var _default = selectUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/MultiSelectUnstyled/MultiSelectUnstyled.js
  var require_MultiSelectUnstyled = __commonJS({
    "node_modules/@mui/base/node/MultiSelectUnstyled/MultiSelectUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _utils2 = require_utils3();
      var _useSelect = _interopRequireDefault(require_useSelect());
      var _utils3 = require_utils2();
      var _PopperUnstyled = _interopRequireDefault(require_PopperUnstyled2());
      var _SelectUnstyledContext = require_SelectUnstyledContext();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _selectUnstyledClasses = require_selectUnstyledClasses();
      var _defaultOptionStringifier = _interopRequireDefault(require_defaultOptionStringifier());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["autoFocus", "children", "component", "components", "componentsProps", "defaultListboxOpen", "defaultValue", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "name", "onChange", "onListboxOpenChange", "optionStringifier", "value"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function defaultRenderMultipleValues(selectedOptions) {
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React59.Fragment, {
          children: selectedOptions.map((o) => o.label).join(", ")
        });
      }
      function defaultFormValueProvider(selectedOptions) {
        if (selectedOptions.length === 0) {
          return "";
        }
        if (selectedOptions.every((o) => typeof o.value === "string" || typeof o.value === "number" || typeof o.value === "boolean")) {
          return selectedOptions.map((o) => String(o.value));
        }
        return JSON.stringify(selectedOptions.map((o) => o.value));
      }
      function useUtilityClasses21(ownerState) {
        const {
          active,
          disabled,
          open,
          focusVisible
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
          listbox: ["listbox", disabled && "disabled"],
          popper: ["popper"]
        };
        return (0, _composeClasses.default)(slots, _selectUnstyledClasses.getSelectUnstyledUtilityClass, {});
      }
      var MultiSelectUnstyled = /* @__PURE__ */ React59.forwardRef(function MultiSelectUnstyled2(props2, forwardedRef) {
        var _props$renderValue, _ref, _components$Listbox, _components$Popper;
        const {
          autoFocus,
          children,
          component,
          components = {},
          componentsProps = {},
          defaultListboxOpen = false,
          defaultValue = [],
          disabled: disabledProp,
          getSerializedValue = defaultFormValueProvider,
          listboxId,
          listboxOpen: listboxOpenProp,
          name,
          onChange,
          onListboxOpenChange,
          optionStringifier = _defaultOptionStringifier.default,
          value: valueProp
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const renderValue = (_props$renderValue = props2.renderValue) != null ? _props$renderValue : defaultRenderMultipleValues;
        const [groupedOptions, setGroupedOptions] = React59.useState([]);
        const options = React59.useMemo(() => (0, _utils2.flattenOptionGroups)(groupedOptions), [groupedOptions]);
        const [listboxOpen, setListboxOpen] = (0, _utils.unstable_useControlled)({
          controlled: listboxOpenProp,
          default: defaultListboxOpen,
          name: "MultiSelectUnstyled",
          state: "listboxOpen"
        });
        React59.useEffect(() => {
          setGroupedOptions((0, _utils2.getOptionsFromChildren)(children));
        }, [children]);
        const [buttonDefined, setButtonDefined] = React59.useState(false);
        const buttonRef = React59.useRef(null);
        const listboxRef = React59.useRef(null);
        const Button3 = (_ref = component != null ? component : components.Root) != null ? _ref : "button";
        const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : "ul";
        const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : _PopperUnstyled.default;
        const handleButtonRefChange = React59.useCallback((element) => {
          setButtonDefined(element != null);
        }, []);
        const handleButtonRef = (0, _utils.unstable_useForkRef)(forwardedRef, buttonRef, handleButtonRefChange);
        React59.useEffect(() => {
          if (autoFocus) {
            buttonRef.current.focus();
          }
        }, [autoFocus]);
        const handleOpenChange = (isOpen) => {
          setListboxOpen(isOpen);
          onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
        };
        const {
          buttonActive,
          buttonFocusVisible,
          disabled,
          getButtonProps,
          getListboxProps,
          getOptionProps,
          getOptionState,
          value
        } = (0, _useSelect.default)({
          buttonRef: handleButtonRef,
          defaultValue,
          disabled: disabledProp,
          listboxId,
          multiple: true,
          onChange,
          onOpenChange: handleOpenChange,
          open: listboxOpen,
          options,
          optionStringifier,
          value: valueProp
        });
        const ownerState = (0, _extends2.default)({}, props2, {
          active: buttonActive,
          defaultListboxOpen,
          disabled,
          focusVisible: buttonFocusVisible,
          open: listboxOpen,
          renderValue,
          value
        });
        const classes = useUtilityClasses21(ownerState);
        const selectedOptions = React59.useMemo(() => {
          if (value == null) {
            return [];
          }
          return options.filter((o) => value.includes(o.value));
        }, [options, value]);
        const buttonProps = (0, _utils3.useSlotProps)({
          elementType: Button3,
          getSlotProps: getButtonProps,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          ownerState,
          className: classes.root
        });
        const listboxProps = (0, _utils3.useSlotProps)({
          elementType: ListboxRoot,
          getSlotProps: getListboxProps,
          externalSlotProps: componentsProps.listbox,
          additionalProps: {
            ref: listboxRef
          },
          ownerState,
          className: classes.listbox
        });
        const popperProps = (0, _utils3.useSlotProps)({
          elementType: Popper,
          externalSlotProps: componentsProps.popper,
          additionalProps: {
            anchorEl: buttonRef.current,
            disablePortal: true,
            open: listboxOpen,
            placement: "bottom-start",
            role: void 0
          },
          ownerState,
          className: classes.popper
        });
        const context = {
          getOptionProps,
          getOptionState,
          listboxRef
        };
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React59.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Button3, (0, _extends2.default)({}, buttonProps, {
            children: renderValue(selectedOptions)
          })), buttonDefined && /* @__PURE__ */ (0, _jsxRuntime.jsx)(Popper, (0, _extends2.default)({}, popperProps, {
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(ListboxRoot, (0, _extends2.default)({}, listboxProps, {
              children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_SelectUnstyledContext.SelectUnstyledContext.Provider, {
                value: context,
                children
              })
            }))
          })), name && /* @__PURE__ */ (0, _jsxRuntime.jsx)("input", {
            type: "hidden",
            name,
            value: getSerializedValue(selectedOptions)
          })]
        });
      });
      true ? MultiSelectUnstyled.propTypes = {
        autoFocus: _propTypes.default.bool,
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Listbox: _propTypes.default.elementType,
          Popper: _propTypes.default.elementType,
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          popper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        defaultListboxOpen: _propTypes.default.bool,
        defaultValue: _propTypes.default.array,
        disabled: _propTypes.default.bool,
        getSerializedValue: _propTypes.default.func,
        listboxId: _propTypes.default.string,
        listboxOpen: _propTypes.default.bool,
        name: _propTypes.default.string,
        onChange: _propTypes.default.func,
        onListboxOpenChange: _propTypes.default.func,
        optionStringifier: _propTypes.default.func,
        renderValue: _propTypes.default.func,
        value: _propTypes.default.array
      } : void 0;
      var _default = MultiSelectUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/MultiSelectUnstyled/MultiSelectUnstyled.types.js
  var require_MultiSelectUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/MultiSelectUnstyled/MultiSelectUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/MultiSelectUnstyled/index.js
  var require_MultiSelectUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/MultiSelectUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _MultiSelectUnstyled.default;
        }
      });
      var _MultiSelectUnstyled = _interopRequireDefault(require_MultiSelectUnstyled());
      var _MultiSelectUnstyled2 = require_MultiSelectUnstyled_types();
      Object.keys(_MultiSelectUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MultiSelectUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MultiSelectUnstyled2[key];
          }
        });
      });
    }
  });

  // node_modules/@mui/base/node/NoSsr/NoSsr.js
  var require_NoSsr = __commonJS({
    "node_modules/@mui/base/node/NoSsr/NoSsr.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function NoSsr(props2) {
        const {
          children,
          defer = false,
          fallback = null
        } = props2;
        const [mountedState, setMountedState] = React59.useState(false);
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (!defer) {
            setMountedState(true);
          }
        }, [defer]);
        React59.useEffect(() => {
          if (defer) {
            setMountedState(true);
          }
        }, [defer]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React59.Fragment, {
          children: mountedState ? children : fallback
        });
      }
      true ? NoSsr.propTypes = {
        children: _propTypes.default.node,
        defer: _propTypes.default.bool,
        fallback: _propTypes.default.node
      } : void 0;
      if (true) {
        NoSsr["propTypes"] = (0, _utils.exactProp)(NoSsr.propTypes);
      }
      var _default = NoSsr;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/NoSsr/index.js
  var require_NoSsr2 = __commonJS({
    "node_modules/@mui/base/node/NoSsr/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _NoSsr.default;
        }
      });
      var _NoSsr = _interopRequireDefault(require_NoSsr());
    }
  });

  // node_modules/@mui/base/node/OptionGroupUnstyled/optionGroupUnstyledClasses.js
  var require_optionGroupUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/OptionGroupUnstyled/optionGroupUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getOptionGroupUnstyledUtilityClass = getOptionGroupUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getOptionGroupUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiOptionGroupUnstyled", slot);
      }
      var optionGroupUnstyledClasses = (0, _generateUtilityClasses.default)("MuiOptionGroupUnstyled", ["root", "label", "list"]);
      var _default = optionGroupUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/OptionGroupUnstyled/OptionGroupUnstyled.js
  var require_OptionGroupUnstyled = __commonJS({
    "node_modules/@mui/base/node/OptionGroupUnstyled/OptionGroupUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _optionGroupUnstyledClasses = require_optionGroupUnstyledClasses();
      var _utils = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["component", "components", "disabled", "componentsProps"];
      function useUtilityClasses21(disabled) {
        const slots = {
          root: ["root", disabled && "disabled"],
          label: ["label"],
          list: ["list"]
        };
        return (0, _composeClasses.default)(slots, _optionGroupUnstyledClasses.getOptionGroupUnstyledUtilityClass, {});
      }
      var OptionGroupUnstyled = /* @__PURE__ */ _react.default.forwardRef(function OptionGroupUnstyled2(props2, ref) {
        const {
          component,
          components = {},
          disabled = false,
          componentsProps = {}
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const Root2 = component || (components == null ? void 0 : components.Root) || "li";
        const Label = (components == null ? void 0 : components.Label) || "span";
        const List3 = (components == null ? void 0 : components.List) || "ul";
        const classes = useUtilityClasses21(disabled);
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref
          },
          ownerState: props2,
          className: classes.root
        });
        const labelProps = (0, _utils.useSlotProps)({
          elementType: Label,
          externalSlotProps: componentsProps.label,
          ownerState: props2,
          className: classes.label
        });
        const listProps = (0, _utils.useSlotProps)({
          elementType: List3,
          externalSlotProps: componentsProps.list,
          ownerState: props2,
          className: classes.list
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root2, (0, _extends2.default)({}, rootProps, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Label, (0, _extends2.default)({}, labelProps, {
            children: props2.label
          })), /* @__PURE__ */ (0, _jsxRuntime.jsx)(List3, (0, _extends2.default)({}, listProps, {
            children: props2.children
          }))]
        }));
      });
      true ? OptionGroupUnstyled.propTypes = {
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Label: _propTypes.default.elementType,
          List: _propTypes.default.elementType,
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          label: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          list: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        disabled: _propTypes.default.bool,
        label: _propTypes.default.node
      } : void 0;
      var _default = OptionGroupUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/OptionGroupUnstyled/OptionGroupUnstyled.types.js
  var require_OptionGroupUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/OptionGroupUnstyled/OptionGroupUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/OptionGroupUnstyled/index.js
  var require_OptionGroupUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/OptionGroupUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        optionGroupUnstyledClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _OptionGroupUnstyled.default;
        }
      });
      Object.defineProperty(exports, "optionGroupUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _optionGroupUnstyledClasses.default;
        }
      });
      var _OptionGroupUnstyled = _interopRequireDefault(require_OptionGroupUnstyled());
      var _OptionGroupUnstyled2 = require_OptionGroupUnstyled_types();
      Object.keys(_OptionGroupUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _OptionGroupUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _OptionGroupUnstyled2[key];
          }
        });
      });
      var _optionGroupUnstyledClasses = _interopRequireWildcard(require_optionGroupUnstyledClasses());
      Object.keys(_optionGroupUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _optionGroupUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _optionGroupUnstyledClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/OptionUnstyled/optionUnstyledClasses.js
  var require_optionUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/OptionUnstyled/optionUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getOptionUnstyledUtilityClass = getOptionUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getOptionUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiOptionUnstyled", slot);
      }
      var optionUnstyledClasses = (0, _generateUtilityClasses.default)("MuiOptionUnstyled", ["root", "disabled", "selected", "highlighted"]);
      var _default = optionUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/OptionUnstyled/OptionUnstyled.js
  var require_OptionUnstyled = __commonJS({
    "node_modules/@mui/base/node/OptionUnstyled/OptionUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _SelectUnstyledContext = require_SelectUnstyledContext();
      var _optionUnstyledClasses = require_optionUnstyledClasses();
      var _utils2 = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["children", "component", "components", "componentsProps", "disabled", "value", "label"];
      function useUtilityClasses21(ownerState) {
        const {
          disabled,
          highlighted,
          selected
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
        };
        return (0, _composeClasses.default)(slots, _optionUnstyledClasses.getOptionUnstyledUtilityClass, {});
      }
      var OptionUnstyled = /* @__PURE__ */ _react.default.forwardRef(function OptionUnstyled2(props2, ref) {
        const {
          children,
          component,
          components = {},
          componentsProps = {},
          disabled,
          value,
          label
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const selectContext = _react.default.useContext(_SelectUnstyledContext.SelectUnstyledContext);
        if (!selectContext) {
          throw new Error("OptionUnstyled must be used within a SelectUnstyled");
        }
        const Root2 = component || components.Root || "li";
        const selectOption = {
          value,
          label: label || children,
          disabled
        };
        const optionState = selectContext.getOptionState(selectOption);
        const optionProps = selectContext.getOptionProps(selectOption);
        const listboxRef = selectContext.listboxRef;
        const ownerState = (0, _extends2.default)({}, props2, optionState);
        const optionRef = _react.default.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(ref, optionRef);
        _react.default.useEffect(() => {
          if (optionState.highlighted) {
            if (!listboxRef.current || !optionRef.current) {
              return;
            }
            const listboxClientRect = listboxRef.current.getBoundingClientRect();
            const optionClientRect = optionRef.current.getBoundingClientRect();
            if (optionClientRect.top < listboxClientRect.top) {
              listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
            } else if (optionClientRect.bottom > listboxClientRect.bottom) {
              listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
            }
          }
        }, [optionState.highlighted, listboxRef]);
        const classes = useUtilityClasses21(ownerState);
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: (0, _extends2.default)({}, optionProps, {
            ref: handleRef
          }),
          className: classes.root,
          ownerState
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root2, (0, _extends2.default)({}, rootProps, {
          children
        }));
      });
      true ? OptionUnstyled.propTypes = {
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        disabled: _propTypes.default.bool,
        label: _propTypes.default.string,
        value: _propTypes.default.any.isRequired
      } : void 0;
      var _default = /* @__PURE__ */ _react.default.memo(OptionUnstyled);
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/OptionUnstyled/OptionUnstyled.types.js
  var require_OptionUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/OptionUnstyled/OptionUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/OptionUnstyled/index.js
  var require_OptionUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/OptionUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        optionUnstyledClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _OptionUnstyled.default;
        }
      });
      Object.defineProperty(exports, "optionUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _optionUnstyledClasses.default;
        }
      });
      var _OptionUnstyled = _interopRequireDefault(require_OptionUnstyled());
      var _OptionUnstyled2 = require_OptionUnstyled_types();
      Object.keys(_OptionUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _OptionUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _OptionUnstyled2[key];
          }
        });
      });
      var _optionUnstyledClasses = _interopRequireWildcard(require_optionUnstyledClasses());
      Object.keys(_optionUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _optionUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _optionUnstyledClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/SelectUnstyled.js
  var require_SelectUnstyled = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/SelectUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _utils2 = require_utils3();
      var _useSelect = _interopRequireDefault(require_useSelect());
      var _utils3 = require_utils2();
      var _PopperUnstyled = _interopRequireDefault(require_PopperUnstyled2());
      var _SelectUnstyledContext = require_SelectUnstyledContext();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _selectUnstyledClasses = require_selectUnstyledClasses();
      var _defaultOptionStringifier = _interopRequireDefault(require_defaultOptionStringifier());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["autoFocus", "children", "component", "components", "componentsProps", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "name", "onChange", "onListboxOpenChange", "optionStringifier", "renderValue", "value"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function defaultRenderSingleValue(selectedOption) {
        var _selectedOption$label;
        return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : "";
      }
      function defaultFormValueProvider(selectedOption) {
        if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
          return "";
        }
        if (typeof selectedOption.value === "string" || typeof selectedOption.value === "number") {
          return selectedOption.value;
        }
        return JSON.stringify(selectedOption.value);
      }
      function useUtilityClasses21(ownerState) {
        const {
          active,
          disabled,
          open,
          focusVisible
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
          listbox: ["listbox", disabled && "disabled"],
          popper: ["popper"]
        };
        return (0, _composeClasses.default)(slots, _selectUnstyledClasses.getSelectUnstyledUtilityClass, {});
      }
      var SelectUnstyled = /* @__PURE__ */ React59.forwardRef(function SelectUnstyled2(props2, forwardedRef) {
        var _ref, _components$Listbox, _components$Popper;
        const {
          autoFocus,
          children,
          component,
          components = {},
          componentsProps = {},
          defaultValue,
          defaultListboxOpen = false,
          disabled: disabledProp,
          getSerializedValue = defaultFormValueProvider,
          listboxId,
          listboxOpen: listboxOpenProp,
          name,
          onChange,
          onListboxOpenChange,
          optionStringifier = _defaultOptionStringifier.default,
          renderValue: renderValueProp,
          value: valueProp
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
        const [groupedOptions, setGroupedOptions] = React59.useState([]);
        const options = React59.useMemo(() => (0, _utils2.flattenOptionGroups)(groupedOptions), [groupedOptions]);
        const [listboxOpen, setListboxOpen] = (0, _utils.unstable_useControlled)({
          controlled: listboxOpenProp,
          default: defaultListboxOpen,
          name: "SelectUnstyled",
          state: "listboxOpen"
        });
        React59.useEffect(() => {
          setGroupedOptions((0, _utils2.getOptionsFromChildren)(children));
        }, [children]);
        const [buttonDefined, setButtonDefined] = React59.useState(false);
        const buttonRef = React59.useRef(null);
        const listboxRef = React59.useRef(null);
        const Button3 = (_ref = component != null ? component : components.Root) != null ? _ref : "button";
        const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : "ul";
        const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : _PopperUnstyled.default;
        const handleButtonRefChange = React59.useCallback((element) => {
          setButtonDefined(element != null);
        }, []);
        const handleButtonRef = (0, _utils.unstable_useForkRef)(forwardedRef, buttonRef, handleButtonRefChange);
        React59.useEffect(() => {
          if (autoFocus) {
            buttonRef.current.focus();
          }
        }, [autoFocus]);
        const handleOpenChange = (isOpen) => {
          setListboxOpen(isOpen);
          onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
        };
        const {
          buttonActive,
          buttonFocusVisible,
          disabled,
          getButtonProps,
          getListboxProps,
          getOptionProps,
          getOptionState,
          value
        } = (0, _useSelect.default)({
          buttonRef: handleButtonRef,
          defaultValue,
          disabled: disabledProp,
          listboxId,
          multiple: false,
          onChange,
          onOpenChange: handleOpenChange,
          open: listboxOpen,
          options,
          optionStringifier,
          value: valueProp
        });
        const ownerState = (0, _extends2.default)({}, props2, {
          active: buttonActive,
          defaultListboxOpen,
          disabled,
          focusVisible: buttonFocusVisible,
          open: listboxOpen,
          renderValue,
          value
        });
        const classes = useUtilityClasses21(ownerState);
        const selectedOption = React59.useMemo(() => {
          var _options$find;
          return (_options$find = options.find((o) => value === o.value)) != null ? _options$find : null;
        }, [options, value]);
        const buttonProps = (0, _utils3.useSlotProps)({
          elementType: Button3,
          getSlotProps: getButtonProps,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          ownerState,
          className: classes.root
        });
        const listboxProps = (0, _utils3.useSlotProps)({
          elementType: ListboxRoot,
          getSlotProps: getListboxProps,
          externalSlotProps: componentsProps.listbox,
          additionalProps: {
            ref: listboxRef
          },
          ownerState,
          className: classes.listbox
        });
        const popperProps = (0, _utils3.useSlotProps)({
          elementType: Popper,
          externalSlotProps: componentsProps.popper,
          additionalProps: {
            anchorEl: buttonRef.current,
            disablePortal: true,
            open: listboxOpen,
            placement: "bottom-start",
            role: void 0
          },
          ownerState,
          className: classes.popper
        });
        const context = {
          getOptionProps,
          getOptionState,
          listboxRef
        };
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React59.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Button3, (0, _extends2.default)({}, buttonProps, {
            children: renderValue(selectedOption)
          })), buttonDefined && /* @__PURE__ */ (0, _jsxRuntime.jsx)(Popper, (0, _extends2.default)({}, popperProps, {
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(ListboxRoot, (0, _extends2.default)({}, listboxProps, {
              children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_SelectUnstyledContext.SelectUnstyledContext.Provider, {
                value: context,
                children
              })
            }))
          })), name && /* @__PURE__ */ (0, _jsxRuntime.jsx)("input", {
            type: "hidden",
            name,
            value: getSerializedValue(selectedOption)
          })]
        });
      });
      true ? SelectUnstyled.propTypes = {
        autoFocus: _propTypes.default.bool,
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Listbox: _propTypes.default.elementType,
          Popper: _propTypes.default.elementType,
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          popper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        defaultListboxOpen: _propTypes.default.bool,
        defaultValue: _propTypes.default.any,
        disabled: _propTypes.default.bool,
        getSerializedValue: _propTypes.default.func,
        listboxId: _propTypes.default.string,
        listboxOpen: _propTypes.default.bool,
        name: _propTypes.default.string,
        onChange: _propTypes.default.func,
        onListboxOpenChange: _propTypes.default.func,
        optionStringifier: _propTypes.default.func,
        renderValue: _propTypes.default.func,
        value: _propTypes.default.any
      } : void 0;
      var _default = SelectUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/SelectUnstyled.types.js
  var require_SelectUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/SelectUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/SelectUnstyled/index.js
  var require_SelectUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/SelectUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        selectUnstyledClasses: true,
        useSelect: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _SelectUnstyled.default;
        }
      });
      Object.defineProperty(exports, "selectUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _selectUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useSelect", {
        enumerable: true,
        get: function() {
          return _useSelect.default;
        }
      });
      var _SelectUnstyled = _interopRequireDefault(require_SelectUnstyled());
      var _SelectUnstyledContext = require_SelectUnstyledContext();
      Object.keys(_SelectUnstyledContext).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SelectUnstyledContext[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SelectUnstyledContext[key];
          }
        });
      });
      var _selectUnstyledClasses = _interopRequireWildcard(require_selectUnstyledClasses());
      Object.keys(_selectUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _selectUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _selectUnstyledClasses[key];
          }
        });
      });
      var _SelectUnstyled2 = require_SelectUnstyled_types();
      Object.keys(_SelectUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SelectUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SelectUnstyled2[key];
          }
        });
      });
      var _useSelect = _interopRequireDefault(require_useSelect());
      var _useSelect2 = require_useSelect_types();
      Object.keys(_useSelect2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSelect2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSelect2[key];
          }
        });
      });
      var _utils = require_utils3();
      Object.keys(_utils).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _utils[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _utils[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/SliderUnstyled/sliderUnstyledClasses.js
  var require_sliderUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/SliderUnstyled/sliderUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSliderUtilityClass = getSliderUtilityClass2;
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      function getSliderUtilityClass2(slot) {
        return (0, _generateUtilityClass.default)("MuiSlider", slot);
      }
      var sliderUnstyledClasses2 = (0, _generateUtilityClasses.default)("MuiSlider", ["root", "active", "focusVisible", "disabled", "dragging", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "markLabelActive", "thumb", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel"]);
      var _default = sliderUnstyledClasses2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SliderUnstyled/SliderValueLabelUnstyled.js
  var require_SliderValueLabelUnstyled = __commonJS({
    "node_modules/@mui/base/node/SliderUnstyled/SliderValueLabelUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = SliderValueLabelUnstyled2;
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _sliderUnstyledClasses = _interopRequireDefault(require_sliderUnstyledClasses());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useValueLabelClasses = (props2) => {
        const {
          open
        } = props2;
        const utilityClasses = {
          offset: (0, _clsx.default)(open && _sliderUnstyledClasses.default.valueLabelOpen),
          circle: _sliderUnstyledClasses.default.valueLabelCircle,
          label: _sliderUnstyledClasses.default.valueLabelLabel
        };
        return utilityClasses;
      };
      function SliderValueLabelUnstyled2(props2) {
        const {
          children,
          className,
          value
        } = props2;
        const classes = useValueLabelClasses(props2);
        return /* @__PURE__ */ React59.cloneElement(children, {
          className: (0, _clsx.default)(children.props.className)
        }, /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React59.Fragment, {
          children: [children.props.children, /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
            className: (0, _clsx.default)(classes.offset, className),
            "aria-hidden": true,
            children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
              className: classes.circle,
              children: /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
                className: classes.label,
                children: value
              })
            })
          })]
        }));
      }
      true ? SliderValueLabelUnstyled2.propTypes = {
        children: _propTypes.default.element.isRequired,
        className: _propTypes.default.string,
        theme: _propTypes.default.any,
        value: _propTypes.default.node
      } : void 0;
    }
  });

  // node_modules/@mui/base/node/SliderUnstyled/useSlider.js
  var require_useSlider = __commonJS({
    "node_modules/@mui/base/node/SliderUnstyled/useSlider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Identity = void 0;
      exports.default = useSlider;
      exports.valueToPercent = valueToPercent;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
      function asc(a, b) {
        return a - b;
      }
      function clamp(value, min, max) {
        if (value == null) {
          return min;
        }
        return Math.min(Math.max(min, value), max);
      }
      function findClosest(values2, currentValue) {
        var _values$reduce;
        const {
          index: closestIndex
        } = (_values$reduce = values2.reduce((acc, value, index) => {
          const distance = Math.abs(currentValue - value);
          if (acc === null || distance < acc.distance || distance === acc.distance) {
            return {
              distance,
              index
            };
          }
          return acc;
        }, null)) != null ? _values$reduce : {};
        return closestIndex;
      }
      function trackFinger(event, touchId) {
        if (touchId.current !== void 0 && event.changedTouches) {
          const touchEvent = event;
          for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
            const touch = touchEvent.changedTouches[i];
            if (touch.identifier === touchId.current) {
              return {
                x: touch.clientX,
                y: touch.clientY
              };
            }
          }
          return false;
        }
        return {
          x: event.clientX,
          y: event.clientY
        };
      }
      function valueToPercent(value, min, max) {
        return (value - min) * 100 / (max - min);
      }
      function percentToValue(percent, min, max) {
        return (max - min) * percent + min;
      }
      function getDecimalPrecision(num) {
        if (Math.abs(num) < 1) {
          const parts = num.toExponential().split("e-");
          const matissaDecimalPart = parts[0].split(".")[1];
          return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
        }
        const decimalPart = num.toString().split(".")[1];
        return decimalPart ? decimalPart.length : 0;
      }
      function roundValueToStep(value, step, min) {
        const nearest = Math.round((value - min) / step) * step + min;
        return Number(nearest.toFixed(getDecimalPrecision(step)));
      }
      function setValueIndex({
        values: values2,
        newValue,
        index
      }) {
        const output = values2.slice();
        output[index] = newValue;
        return output.sort(asc);
      }
      function focusThumb({
        sliderRef,
        activeIndex,
        setActive
      }) {
        var _sliderRef$current, _doc$activeElement;
        const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
        if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
          var _sliderRef$current2;
          (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
        }
        if (setActive) {
          setActive(activeIndex);
        }
      }
      var axisProps = {
        horizontal: {
          offset: (percent) => ({
            left: `${percent}%`
          }),
          leap: (percent) => ({
            width: `${percent}%`
          })
        },
        "horizontal-reverse": {
          offset: (percent) => ({
            right: `${percent}%`
          }),
          leap: (percent) => ({
            width: `${percent}%`
          })
        },
        vertical: {
          offset: (percent) => ({
            bottom: `${percent}%`
          }),
          leap: (percent) => ({
            height: `${percent}%`
          })
        }
      };
      var Identity = (x) => x;
      exports.Identity = Identity;
      var cachedSupportsTouchActionNone;
      function doesSupportTouchActionNone() {
        if (cachedSupportsTouchActionNone === void 0) {
          if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
            cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
          } else {
            cachedSupportsTouchActionNone = true;
          }
        }
        return cachedSupportsTouchActionNone;
      }
      function useSlider(parameters) {
        const {
          "aria-labelledby": ariaLabelledby,
          defaultValue,
          disabled = false,
          disableSwap = false,
          isRtl = false,
          marks: marksProp = false,
          max = 100,
          min = 0,
          name,
          onChange,
          onChangeCommitted,
          orientation = "horizontal",
          ref,
          scale = Identity,
          step = 1,
          tabIndex,
          value: valueProp
        } = parameters;
        const touchId = React59.useRef();
        const [active, setActive] = React59.useState(-1);
        const [open, setOpen] = React59.useState(-1);
        const [dragging, setDragging] = React59.useState(false);
        const moveCount = React59.useRef(0);
        const [valueDerived, setValueState] = (0, _utils.unstable_useControlled)({
          controlled: valueProp,
          default: defaultValue != null ? defaultValue : min,
          name: "Slider"
        });
        const handleChange = onChange && ((event, value, thumbIndex) => {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value,
              name
            }
          });
          onChange(clonedEvent, value, thumbIndex);
        });
        const range = Array.isArray(valueDerived);
        let values2 = range ? valueDerived.slice().sort(asc) : [valueDerived];
        values2 = values2.map((value) => clamp(value, min, max));
        const marks2 = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_3, index) => ({
          value: min + step * index
        })) : marksProp || [];
        const marksValues = marks2.map((mark) => mark.value);
        const {
          isFocusVisibleRef,
          onBlur: handleBlurVisible,
          onFocus: handleFocusVisible,
          ref: focusVisibleRef
        } = (0, _utils.unstable_useIsFocusVisible)();
        const [focusedThumbIndex, setFocusedThumbIndex] = React59.useState(-1);
        const sliderRef = React59.useRef();
        const handleFocusRef = (0, _utils.unstable_useForkRef)(focusVisibleRef, sliderRef);
        const handleRef = (0, _utils.unstable_useForkRef)(ref, handleFocusRef);
        const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
          var _otherHandlers$onFocu;
          const index = Number(event.currentTarget.getAttribute("data-index"));
          handleFocusVisible(event);
          if (isFocusVisibleRef.current === true) {
            setFocusedThumbIndex(index);
          }
          setOpen(index);
          otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
        };
        const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
          var _otherHandlers$onBlur;
          handleBlurVisible(event);
          if (isFocusVisibleRef.current === false) {
            setFocusedThumbIndex(-1);
          }
          setOpen(-1);
          otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
        };
        (0, _utils.unstable_useEnhancedEffect)(() => {
          if (disabled && sliderRef.current.contains(document.activeElement)) {
            var _document$activeEleme;
            (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
          }
        }, [disabled]);
        if (disabled && active !== -1) {
          setActive(-1);
        }
        if (disabled && focusedThumbIndex !== -1) {
          setFocusedThumbIndex(-1);
        }
        const createHandleHiddenInputChange = (otherHandlers) => (event) => {
          var _otherHandlers$onChan;
          (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
          const index = Number(event.currentTarget.getAttribute("data-index"));
          const value = values2[index];
          const marksIndex = marksValues.indexOf(value);
          let newValue = event.target.valueAsNumber;
          if (marks2 && step == null) {
            newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
          }
          newValue = clamp(newValue, min, max);
          if (marks2 && step == null) {
            const currentMarkIndex = marksValues.indexOf(values2[index]);
            newValue = newValue < values2[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
          }
          if (range) {
            if (disableSwap) {
              newValue = clamp(newValue, values2[index - 1] || -Infinity, values2[index + 1] || Infinity);
            }
            const previousValue = newValue;
            newValue = setValueIndex({
              values: values2,
              newValue,
              index
            });
            let activeIndex = index;
            if (!disableSwap) {
              activeIndex = newValue.indexOf(previousValue);
            }
            focusThumb({
              sliderRef,
              activeIndex
            });
          }
          setValueState(newValue);
          setFocusedThumbIndex(index);
          if (handleChange) {
            handleChange(event, newValue, index);
          }
          if (onChangeCommitted) {
            onChangeCommitted(event, newValue);
          }
        };
        const previousIndex = React59.useRef();
        let axis = orientation;
        if (isRtl && orientation === "horizontal") {
          axis += "-reverse";
        }
        const getFingerNewValue = ({
          finger,
          move = false
        }) => {
          const {
            current: slider
          } = sliderRef;
          const {
            width,
            height,
            bottom,
            left
          } = slider.getBoundingClientRect();
          let percent;
          if (axis.indexOf("vertical") === 0) {
            percent = (bottom - finger.y) / height;
          } else {
            percent = (finger.x - left) / width;
          }
          if (axis.indexOf("-reverse") !== -1) {
            percent = 1 - percent;
          }
          let newValue;
          newValue = percentToValue(percent, min, max);
          if (step) {
            newValue = roundValueToStep(newValue, step, min);
          } else {
            const closestIndex = findClosest(marksValues, newValue);
            newValue = marksValues[closestIndex];
          }
          newValue = clamp(newValue, min, max);
          let activeIndex = 0;
          if (range) {
            if (!move) {
              activeIndex = findClosest(values2, newValue);
            } else {
              activeIndex = previousIndex.current;
            }
            if (disableSwap) {
              newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
            }
            const previousValue = newValue;
            newValue = setValueIndex({
              values: values2,
              newValue,
              index: activeIndex
            });
            if (!(disableSwap && move)) {
              activeIndex = newValue.indexOf(previousValue);
              previousIndex.current = activeIndex;
            }
          }
          return {
            newValue,
            activeIndex
          };
        };
        const handleTouchMove = (0, _utils.unstable_useEventCallback)((nativeEvent) => {
          const finger = trackFinger(nativeEvent, touchId);
          if (!finger) {
            return;
          }
          moveCount.current += 1;
          if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
            handleTouchEnd(nativeEvent);
            return;
          }
          const {
            newValue,
            activeIndex
          } = getFingerNewValue({
            finger,
            move: true
          });
          focusThumb({
            sliderRef,
            activeIndex,
            setActive
          });
          setValueState(newValue);
          if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
            setDragging(true);
          }
          if (handleChange && newValue !== valueDerived) {
            handleChange(nativeEvent, newValue, activeIndex);
          }
        });
        const handleTouchEnd = (0, _utils.unstable_useEventCallback)((nativeEvent) => {
          const finger = trackFinger(nativeEvent, touchId);
          setDragging(false);
          if (!finger) {
            return;
          }
          const {
            newValue
          } = getFingerNewValue({
            finger,
            move: true
          });
          setActive(-1);
          if (nativeEvent.type === "touchend") {
            setOpen(-1);
          }
          if (onChangeCommitted) {
            onChangeCommitted(nativeEvent, newValue);
          }
          touchId.current = void 0;
          stopListening();
        });
        const handleTouchStart = (0, _utils.unstable_useEventCallback)((nativeEvent) => {
          if (disabled) {
            return;
          }
          if (!doesSupportTouchActionNone()) {
            nativeEvent.preventDefault();
          }
          const touch = nativeEvent.changedTouches[0];
          if (touch != null) {
            touchId.current = touch.identifier;
          }
          const finger = trackFinger(nativeEvent, touchId);
          if (finger !== false) {
            const {
              newValue,
              activeIndex
            } = getFingerNewValue({
              finger
            });
            focusThumb({
              sliderRef,
              activeIndex,
              setActive
            });
            setValueState(newValue);
            if (handleChange) {
              handleChange(nativeEvent, newValue, activeIndex);
            }
          }
          moveCount.current = 0;
          const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
          doc.addEventListener("touchmove", handleTouchMove);
          doc.addEventListener("touchend", handleTouchEnd);
        });
        const stopListening = React59.useCallback(() => {
          const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
          doc.removeEventListener("mousemove", handleTouchMove);
          doc.removeEventListener("mouseup", handleTouchEnd);
          doc.removeEventListener("touchmove", handleTouchMove);
          doc.removeEventListener("touchend", handleTouchEnd);
        }, [handleTouchEnd, handleTouchMove]);
        React59.useEffect(() => {
          const {
            current: slider
          } = sliderRef;
          slider.addEventListener("touchstart", handleTouchStart, {
            passive: doesSupportTouchActionNone()
          });
          return () => {
            slider.removeEventListener("touchstart", handleTouchStart, {
              passive: doesSupportTouchActionNone()
            });
            stopListening();
          };
        }, [stopListening, handleTouchStart]);
        React59.useEffect(() => {
          if (disabled) {
            stopListening();
          }
        }, [disabled, stopListening]);
        const createHandleMouseDown = (otherHandlers) => (event) => {
          var _otherHandlers$onMous;
          (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
          if (disabled) {
            return;
          }
          if (event.defaultPrevented) {
            return;
          }
          if (event.button !== 0) {
            return;
          }
          event.preventDefault();
          const finger = trackFinger(event, touchId);
          if (finger !== false) {
            const {
              newValue,
              activeIndex
            } = getFingerNewValue({
              finger
            });
            focusThumb({
              sliderRef,
              activeIndex,
              setActive
            });
            setValueState(newValue);
            if (handleChange) {
              handleChange(event, newValue, activeIndex);
            }
          }
          moveCount.current = 0;
          const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
          doc.addEventListener("mousemove", handleTouchMove);
          doc.addEventListener("mouseup", handleTouchEnd);
        };
        const trackOffset = valueToPercent(range ? values2[0] : min, min, max);
        const trackLeap = valueToPercent(values2[values2.length - 1], min, max) - trackOffset;
        const getRootProps = (otherHandlers = {}) => {
          const ownEventHandlers = {
            onMouseDown: createHandleMouseDown(otherHandlers || {})
          };
          const mergedEventHandlers = (0, _extends2.default)({}, otherHandlers, ownEventHandlers);
          return (0, _extends2.default)({
            ref: handleRef
          }, mergedEventHandlers);
        };
        const createHandleMouseOver = (otherHandlers) => (event) => {
          var _otherHandlers$onMous2;
          (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
          const index = Number(event.currentTarget.getAttribute("data-index"));
          setOpen(index);
        };
        const createHandleMouseLeave = (otherHandlers) => (event) => {
          var _otherHandlers$onMous3;
          (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
          setOpen(-1);
        };
        const getThumbProps = (otherHandlers = {}) => {
          const ownEventHandlers = {
            onMouseOver: createHandleMouseOver(otherHandlers || {}),
            onMouseLeave: createHandleMouseLeave(otherHandlers || {})
          };
          return (0, _extends2.default)({}, otherHandlers, ownEventHandlers);
        };
        const getHiddenInputProps = (otherHandlers = {}) => {
          var _parameters$step;
          const ownEventHandlers = {
            onChange: createHandleHiddenInputChange(otherHandlers || {}),
            onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
            onBlur: createHandleHiddenInputBlur(otherHandlers || {})
          };
          const mergedEventHandlers = (0, _extends2.default)({}, otherHandlers, ownEventHandlers);
          return (0, _extends2.default)({
            tabIndex,
            "aria-labelledby": ariaLabelledby,
            "aria-orientation": orientation,
            "aria-valuemax": scale(max),
            "aria-valuemin": scale(min),
            name,
            type: "range",
            min: parameters.min,
            max: parameters.max,
            step: (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
            disabled
          }, mergedEventHandlers, {
            style: (0, _extends2.default)({}, _utils.visuallyHidden, {
              direction: isRtl ? "rtl" : "ltr",
              width: "100%",
              height: "100%"
            })
          });
        };
        return {
          active,
          axis,
          axisProps,
          dragging,
          focusedThumbIndex,
          getHiddenInputProps,
          getRootProps,
          getThumbProps,
          marks: marks2,
          open,
          range,
          trackLeap,
          trackOffset,
          values: values2
        };
      }
    }
  });

  // node_modules/@mui/base/node/SliderUnstyled/SliderUnstyled.js
  var require_SliderUnstyled = __commonJS({
    "node_modules/@mui/base/node/SliderUnstyled/SliderUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _sliderUnstyledClasses = require_sliderUnstyledClasses();
      var _SliderValueLabelUnstyled = _interopRequireDefault(require_SliderValueLabelUnstyled());
      var _useSlider = _interopRequireWildcard(require_useSlider());
      var _useSlotProps = _interopRequireDefault(require_useSlotProps());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["aria-label", "aria-valuetext", "aria-labelledby", "className", "component", "classes", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "components", "componentsProps"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var Identity = (x) => x;
      var useUtilityClasses21 = (ownerState) => {
        const {
          disabled,
          dragging,
          marked,
          orientation,
          track,
          classes
        } = ownerState;
        const slots = {
          root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse"],
          rail: ["rail"],
          track: ["track"],
          mark: ["mark"],
          markActive: ["markActive"],
          markLabel: ["markLabel"],
          markLabelActive: ["markLabelActive"],
          valueLabel: ["valueLabel"],
          thumb: ["thumb", disabled && "disabled"],
          active: ["active"],
          disabled: ["disabled"],
          focusVisible: ["focusVisible"]
        };
        return (0, _composeClasses.default)(slots, _sliderUnstyledClasses.getSliderUtilityClass, classes);
      };
      var Forward = ({
        children
      }) => children;
      var SliderUnstyled2 = /* @__PURE__ */ React59.forwardRef(function SliderUnstyled3(props2, ref) {
        var _ref, _components$Rail, _components$Track, _components$Thumb, _components$ValueLabe, _components$Mark, _components$MarkLabel;
        const {
          "aria-label": ariaLabel,
          "aria-valuetext": ariaValuetext,
          "aria-labelledby": ariaLabelledby,
          className,
          component,
          classes: classesProp,
          disableSwap = false,
          disabled = false,
          getAriaLabel,
          getAriaValueText,
          marks: marksProp = false,
          max = 100,
          min = 0,
          orientation = "horizontal",
          scale = Identity,
          step = 1,
          track = "normal",
          valueLabelDisplay = "off",
          valueLabelFormat = Identity,
          isRtl = false,
          components = {},
          componentsProps = {}
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const ownerState = (0, _extends2.default)({}, props2, {
          marks: marksProp,
          classes: classesProp,
          disabled,
          isRtl,
          max,
          min,
          orientation,
          scale,
          step,
          track,
          valueLabelDisplay,
          valueLabelFormat
        });
        const {
          axisProps,
          getRootProps,
          getHiddenInputProps,
          getThumbProps,
          open,
          active,
          axis,
          range,
          focusedThumbIndex,
          dragging,
          marks: marks2,
          values: values2,
          trackOffset,
          trackLeap
        } = (0, _useSlider.default)((0, _extends2.default)({}, ownerState, {
          ref
        }));
        ownerState.marked = marks2.length > 0 && marks2.some((mark) => mark.label);
        ownerState.dragging = dragging;
        ownerState.focusedThumbIndex = focusedThumbIndex;
        const classes = useUtilityClasses21(ownerState);
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : "span";
        const rootProps = (0, _useSlotProps.default)({
          elementType: Root2,
          getSlotProps: getRootProps,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          ownerState,
          className: [classes.root, className]
        });
        const Rail = (_components$Rail = components.Rail) != null ? _components$Rail : "span";
        const railProps = (0, _useSlotProps.default)({
          elementType: Rail,
          externalSlotProps: componentsProps.rail,
          ownerState,
          className: classes.rail
        });
        const Track = (_components$Track = components.Track) != null ? _components$Track : "span";
        const trackProps = (0, _useSlotProps.default)({
          elementType: Track,
          externalSlotProps: componentsProps.track,
          additionalProps: {
            style: (0, _extends2.default)({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))
          },
          ownerState,
          className: classes.track
        });
        const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : "span";
        const thumbProps = (0, _useSlotProps.default)({
          elementType: Thumb,
          getSlotProps: getThumbProps,
          externalSlotProps: componentsProps.thumb,
          ownerState
        });
        const ValueLabel = (_components$ValueLabe = components.ValueLabel) != null ? _components$ValueLabe : _SliderValueLabelUnstyled.default;
        const valueLabelProps = (0, _useSlotProps.default)({
          elementType: ValueLabel,
          externalSlotProps: componentsProps.valueLabel,
          ownerState
        });
        const Mark = (_components$Mark = components.Mark) != null ? _components$Mark : "span";
        const markProps = (0, _useSlotProps.default)({
          elementType: Mark,
          externalSlotProps: componentsProps.mark,
          ownerState,
          className: classes.mark
        });
        const MarkLabel = (_components$MarkLabel = components.MarkLabel) != null ? _components$MarkLabel : "span";
        const markLabelProps = (0, _useSlotProps.default)({
          elementType: MarkLabel,
          externalSlotProps: componentsProps.markLabel,
          ownerState
        });
        const Input = components.Input || "input";
        const inputProps = (0, _useSlotProps.default)({
          elementType: Input,
          getSlotProps: getHiddenInputProps,
          externalSlotProps: componentsProps.input,
          ownerState
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root2, (0, _extends2.default)({}, rootProps, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Rail, (0, _extends2.default)({}, railProps)), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Track, (0, _extends2.default)({}, trackProps)), marks2.filter((mark) => mark.value >= min && mark.value <= max).map((mark, index) => {
            const percent = (0, _useSlider.valueToPercent)(mark.value, min, max);
            const style2 = axisProps[axis].offset(percent);
            let markActive;
            if (track === false) {
              markActive = values2.indexOf(mark.value) !== -1;
            } else {
              markActive = track === "normal" && (range ? mark.value >= values2[0] && mark.value <= values2[values2.length - 1] : mark.value <= values2[0]) || track === "inverted" && (range ? mark.value <= values2[0] || mark.value >= values2[values2.length - 1] : mark.value >= values2[0]);
            }
            return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React59.Fragment, {
              children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Mark, (0, _extends2.default)({
                "data-index": index
              }, markProps, !(0, _isHostComponent.default)(Mark) && {
                markActive
              }, {
                style: (0, _extends2.default)({}, style2, markProps.style),
                className: (0, _clsx.default)(markProps.className, markActive && classes.markActive)
              })), mark.label != null ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(MarkLabel, (0, _extends2.default)({
                "aria-hidden": true,
                "data-index": index
              }, markLabelProps, !(0, _isHostComponent.default)(MarkLabel) && {
                markLabelActive: markActive
              }, {
                style: (0, _extends2.default)({}, style2, markLabelProps.style),
                className: (0, _clsx.default)(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
                children: mark.label
              })) : null]
            }, index);
          }), values2.map((value, index) => {
            const percent = (0, _useSlider.valueToPercent)(value, min, max);
            const style2 = axisProps[axis].offset(percent);
            const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabel;
            return /* @__PURE__ */ (0, _jsxRuntime.jsx)(React59.Fragment, {
              children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(ValueLabelComponent, (0, _extends2.default)({}, !(0, _isHostComponent.default)(ValueLabelComponent) && {
                valueLabelFormat,
                valueLabelDisplay,
                value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat,
                index,
                open: open === index || active === index || valueLabelDisplay === "on",
                disabled
              }, valueLabelProps, {
                className: (0, _clsx.default)(classes.valueLabel, valueLabelProps.className),
                children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Thumb, (0, _extends2.default)({
                  "data-index": index,
                  "data-focusvisible": focusedThumbIndex === index
                }, thumbProps, {
                  className: (0, _clsx.default)(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
                  style: (0, _extends2.default)({}, style2, {
                    pointerEvents: disableSwap && active !== index ? "none" : void 0
                  }, thumbProps.style),
                  children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Input, (0, _extends2.default)({
                    "data-index": index,
                    "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                    "aria-valuenow": scale(value),
                    "aria-labelledby": ariaLabelledby,
                    "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
                    value: values2[index]
                  }, inputProps))
                }))
              }))
            }, index);
          })]
        }));
      });
      true ? SliderUnstyled2.propTypes = {
        "aria-label": (0, _utils.chainPropTypes)(_propTypes.default.string, (props2) => {
          const range = Array.isArray(props2.value || props2.defaultValue);
          if (range && props2["aria-label"] != null) {
            return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
          }
          return null;
        }),
        "aria-labelledby": _propTypes.default.string,
        "aria-valuetext": (0, _utils.chainPropTypes)(_propTypes.default.string, (props2) => {
          const range = Array.isArray(props2.value || props2.defaultValue);
          if (range && props2["aria-valuetext"] != null) {
            return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
          }
          return null;
        }),
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Input: _propTypes.default.elementType,
          Mark: _propTypes.default.elementType,
          MarkLabel: _propTypes.default.elementType,
          Rail: _propTypes.default.elementType,
          Root: _propTypes.default.elementType,
          Thumb: _propTypes.default.elementType,
          Track: _propTypes.default.elementType,
          ValueLabel: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          mark: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          markLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          rail: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          thumb: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          track: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          valueLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
            children: _propTypes.default.element,
            className: _propTypes.default.string,
            components: _propTypes.default.shape({
              Root: _propTypes.default.elementType
            }),
            open: _propTypes.default.bool,
            style: _propTypes.default.object,
            value: _propTypes.default.number,
            valueLabelDisplay: _propTypes.default.oneOf(["auto", "off", "on"])
          })])
        }),
        defaultValue: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),
        disabled: _propTypes.default.bool,
        disableSwap: _propTypes.default.bool,
        getAriaLabel: _propTypes.default.func,
        getAriaValueText: _propTypes.default.func,
        isRtl: _propTypes.default.bool,
        marks: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape({
          label: _propTypes.default.node,
          value: _propTypes.default.number.isRequired
        })), _propTypes.default.bool]),
        max: _propTypes.default.number,
        min: _propTypes.default.number,
        name: _propTypes.default.string,
        onChange: _propTypes.default.func,
        onChangeCommitted: _propTypes.default.func,
        orientation: _propTypes.default.oneOf(["horizontal", "vertical"]),
        scale: _propTypes.default.func,
        step: _propTypes.default.number,
        tabIndex: _propTypes.default.number,
        track: _propTypes.default.oneOf(["inverted", "normal", false]),
        value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),
        valueLabelDisplay: _propTypes.default.oneOf(["auto", "off", "on"]),
        valueLabelFormat: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string])
      } : void 0;
      var _default = SliderUnstyled2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SliderUnstyled/index.js
  var require_SliderUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/SliderUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        SliderValueLabelUnstyled: true,
        sliderUnstyledClasses: true,
        useSlider: true
      };
      Object.defineProperty(exports, "SliderValueLabelUnstyled", {
        enumerable: true,
        get: function() {
          return _SliderValueLabelUnstyled.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _SliderUnstyled.default;
        }
      });
      Object.defineProperty(exports, "sliderUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _sliderUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useSlider", {
        enumerable: true,
        get: function() {
          return _useSlider.default;
        }
      });
      var _SliderUnstyled = _interopRequireDefault(require_SliderUnstyled());
      var _SliderValueLabelUnstyled = _interopRequireDefault(require_SliderValueLabelUnstyled());
      var _sliderUnstyledClasses = _interopRequireWildcard(require_sliderUnstyledClasses());
      Object.keys(_sliderUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _sliderUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _sliderUnstyledClasses[key];
          }
        });
      });
      var _useSlider = _interopRequireDefault(require_useSlider());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/SnackbarUnstyled/snackbarUnstyledClasses.js
  var require_snackbarUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/SnackbarUnstyled/snackbarUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSnackbarUnstyledUtilityClass = getSnackbarUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getSnackbarUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSnackbar", slot);
      }
      var snackbarUnstyledClasses = (0, _generateUtilityClasses.default)("MuiSnackbar", ["root"]);
      var _default = snackbarUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SnackbarUnstyled/useSnackbar.js
  var require_useSnackbar = __commonJS({
    "node_modules/@mui/base/node/SnackbarUnstyled/useSnackbar.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useSnackbar;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useSnackbar(parameters) {
        const {
          autoHideDuration = null,
          disableWindowBlurListener = false,
          onClose,
          open,
          ref,
          resumeHideDuration
        } = parameters;
        const timerAutoHide = React59.useRef();
        React59.useEffect(() => {
          if (!open) {
            return void 0;
          }
          function handleKeyDown(nativeEvent) {
            if (!nativeEvent.defaultPrevented) {
              if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
                onClose == null ? void 0 : onClose(nativeEvent, "escapeKeyDown");
              }
            }
          }
          document.addEventListener("keydown", handleKeyDown);
          return () => {
            document.removeEventListener("keydown", handleKeyDown);
          };
        }, [open, onClose]);
        const handleClose = (0, _utils.unstable_useEventCallback)((event, reason) => {
          onClose == null ? void 0 : onClose(event, reason);
        });
        const setAutoHideTimer = (0, _utils.unstable_useEventCallback)((autoHideDurationParam) => {
          if (!onClose || autoHideDurationParam == null) {
            return;
          }
          clearTimeout(timerAutoHide.current);
          timerAutoHide.current = setTimeout(() => {
            handleClose(null, "timeout");
          }, autoHideDurationParam);
        });
        React59.useEffect(() => {
          if (open) {
            setAutoHideTimer(autoHideDuration);
          }
          return () => {
            clearTimeout(timerAutoHide.current);
          };
        }, [open, autoHideDuration, setAutoHideTimer]);
        const handleClickAway = (event) => {
          onClose == null ? void 0 : onClose(event, "clickaway");
        };
        const handlePause = () => {
          clearTimeout(timerAutoHide.current);
        };
        const handleResume = React59.useCallback(() => {
          if (autoHideDuration != null) {
            setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
          }
        }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
        const createHandleBlur = (otherHandlers) => (event) => {
          const onBlurCallback = otherHandlers.onBlur;
          onBlurCallback == null ? void 0 : onBlurCallback(event);
          handleResume();
        };
        const createHandleFocus = (otherHandlers) => (event) => {
          const onFocusCallback = otherHandlers.onFocus;
          onFocusCallback == null ? void 0 : onFocusCallback(event);
          handlePause();
        };
        const createMouseEnter = (otherHandlers) => (event) => {
          const onMouseEnterCallback = otherHandlers.onMouseEnter;
          onMouseEnterCallback == null ? void 0 : onMouseEnterCallback(event);
          handlePause();
        };
        const createMouseLeave = (otherHandlers) => (event) => {
          const onMouseLeaveCallback = otherHandlers.onMouseLeave;
          onMouseLeaveCallback == null ? void 0 : onMouseLeaveCallback(event);
          handleResume();
        };
        React59.useEffect(() => {
          if (!disableWindowBlurListener && open) {
            window.addEventListener("focus", handleResume);
            window.addEventListener("blur", handlePause);
            return () => {
              window.removeEventListener("focus", handleResume);
              window.removeEventListener("blur", handlePause);
            };
          }
          return void 0;
        }, [disableWindowBlurListener, handleResume, open]);
        const getRootProps = (otherHandlers = {}) => {
          const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
          const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, otherHandlers);
          return (0, _extends2.default)({
            ref,
            role: "presentation"
          }, externalEventHandlers, {
            onBlur: createHandleBlur(externalEventHandlers),
            onFocus: createHandleFocus(externalEventHandlers),
            onMouseEnter: createMouseEnter(externalEventHandlers),
            onMouseLeave: createMouseLeave(externalEventHandlers)
          });
        };
        return {
          getRootProps,
          onClickAway: handleClickAway
        };
      }
    }
  });

  // node_modules/@mui/base/node/SnackbarUnstyled/SnackbarUnstyled.js
  var require_SnackbarUnstyled = __commonJS({
    "node_modules/@mui/base/node/SnackbarUnstyled/SnackbarUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _ClickAwayListener = _interopRequireDefault(require_ClickAwayListener2());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _snackbarUnstyledClasses = require_snackbarUnstyledClasses();
      var _useSnackbar = _interopRequireDefault(require_useSnackbar());
      var _utils = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["autoHideDuration", "children", "component", "components", "componentsProps", "disableWindowBlurListener", "exited", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = () => {
        const slots = {
          root: ["root"]
        };
        return (0, _composeClasses.default)(slots, _snackbarUnstyledClasses.getSnackbarUnstyledUtilityClass, void 0);
      };
      var SnackbarUnstyled = /* @__PURE__ */ React59.forwardRef(function SnackbarUnstyled2(props2, ref) {
        const {
          autoHideDuration = null,
          children,
          component,
          components = {},
          componentsProps = {},
          disableWindowBlurListener = false,
          exited = true,
          onClose,
          open,
          resumeHideDuration
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const classes = useUtilityClasses21();
        const {
          getRootProps,
          onClickAway
        } = (0, _useSnackbar.default)((0, _extends2.default)({}, props2, {
          autoHideDuration,
          disableWindowBlurListener,
          onClose,
          open,
          resumeHideDuration,
          ref
        }));
        const ownerState = props2;
        const Root2 = component || components.Root || "div";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root2,
          getSlotProps: getRootProps,
          externalForwardedProps: other,
          externalSlotProps: componentsProps.root,
          additionalProps: {
            ref
          },
          ownerState,
          className: classes.root
        });
        const clickAwayListenerProps = (0, _utils.useSlotProps)({
          elementType: _ClickAwayListener.default,
          externalSlotProps: componentsProps.clickAwayListener,
          additionalProps: {
            onClickAway
          },
          ownerState
        });
        delete clickAwayListenerProps.ownerState;
        if (!open && exited) {
          return null;
        }
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ClickAwayListener.default, (0, _extends2.default)({}, clickAwayListenerProps, {
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root2, (0, _extends2.default)({}, rootProps, {
            children
          }))
        }));
      });
      true ? SnackbarUnstyled.propTypes = {
        autoHideDuration: _propTypes.default.number,
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          clickAwayListener: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
            children: _propTypes.default.element.isRequired,
            disableReactTree: _propTypes.default.bool,
            mouseEvent: _propTypes.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
            onClickAway: _propTypes.default.func,
            touchEvent: _propTypes.default.oneOf(["onTouchEnd", "onTouchStart", false])
          })]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        disableWindowBlurListener: _propTypes.default.bool,
        exited: _propTypes.default.bool,
        onBlur: _propTypes.default.func,
        onClose: _propTypes.default.func,
        onFocus: _propTypes.default.func,
        onMouseEnter: _propTypes.default.func,
        onMouseLeave: _propTypes.default.func,
        open: _propTypes.default.bool,
        resumeHideDuration: _propTypes.default.number
      } : void 0;
      var _default = SnackbarUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SnackbarUnstyled/SnackbarUnstyled.types.js
  var require_SnackbarUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/SnackbarUnstyled/SnackbarUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/SnackbarUnstyled/useSnackbar.types.js
  var require_useSnackbar_types = __commonJS({
    "node_modules/@mui/base/node/SnackbarUnstyled/useSnackbar.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/SnackbarUnstyled/index.js
  var require_SnackbarUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/SnackbarUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        snackbarUnstyledClasses: true,
        useSnackbar: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _SnackbarUnstyled.default;
        }
      });
      Object.defineProperty(exports, "snackbarUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _snackbarUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useSnackbar", {
        enumerable: true,
        get: function() {
          return _useSnackbar.default;
        }
      });
      var _SnackbarUnstyled = _interopRequireDefault(require_SnackbarUnstyled());
      var _SnackbarUnstyled2 = require_SnackbarUnstyled_types();
      Object.keys(_SnackbarUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SnackbarUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SnackbarUnstyled2[key];
          }
        });
      });
      var _snackbarUnstyledClasses = _interopRequireWildcard(require_snackbarUnstyledClasses());
      Object.keys(_snackbarUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _snackbarUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _snackbarUnstyledClasses[key];
          }
        });
      });
      var _useSnackbar = _interopRequireDefault(require_useSnackbar());
      var _useSnackbar2 = require_useSnackbar_types();
      Object.keys(_useSnackbar2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSnackbar2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSnackbar2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/SwitchUnstyled/useSwitch.js
  var require_useSwitch = __commonJS({
    "node_modules/@mui/base/node/SwitchUnstyled/useSwitch.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useSwitch;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function useSwitch(props2) {
        const {
          checked: checkedProp,
          defaultChecked,
          disabled,
          onBlur,
          onChange,
          onFocus,
          onFocusVisible,
          readOnly,
          required
        } = props2;
        const [checked, setCheckedState] = (0, _utils.unstable_useControlled)({
          controlled: checkedProp,
          default: Boolean(defaultChecked),
          name: "Switch",
          state: "checked"
        });
        const createHandleInputChange = (otherProps) => (event) => {
          var _otherProps$onChange;
          if (event.nativeEvent.defaultPrevented) {
            return;
          }
          setCheckedState(event.target.checked);
          onChange == null ? void 0 : onChange(event);
          (_otherProps$onChange = otherProps.onChange) == null ? void 0 : _otherProps$onChange.call(otherProps, event);
        };
        const {
          isFocusVisibleRef,
          onBlur: handleBlurVisible,
          onFocus: handleFocusVisible,
          ref: focusVisibleRef
        } = (0, _utils.unstable_useIsFocusVisible)();
        const [focusVisible, setFocusVisible] = React59.useState(false);
        if (disabled && focusVisible) {
          setFocusVisible(false);
        }
        React59.useEffect(() => {
          isFocusVisibleRef.current = focusVisible;
        }, [focusVisible, isFocusVisibleRef]);
        const inputRef = React59.useRef(null);
        const createHandleFocus = (otherProps) => (event) => {
          var _otherProps$onFocus;
          if (!inputRef.current) {
            inputRef.current = event.currentTarget;
          }
          handleFocusVisible(event);
          if (isFocusVisibleRef.current === true) {
            setFocusVisible(true);
            onFocusVisible == null ? void 0 : onFocusVisible(event);
          }
          onFocus == null ? void 0 : onFocus(event);
          (_otherProps$onFocus = otherProps.onFocus) == null ? void 0 : _otherProps$onFocus.call(otherProps, event);
        };
        const createHandleBlur = (otherProps) => (event) => {
          var _otherProps$onBlur;
          handleBlurVisible(event);
          if (isFocusVisibleRef.current === false) {
            setFocusVisible(false);
          }
          onBlur == null ? void 0 : onBlur(event);
          (_otherProps$onBlur = otherProps.onBlur) == null ? void 0 : _otherProps$onBlur.call(otherProps, event);
        };
        const handleRefChange = (0, _utils.unstable_useForkRef)(focusVisibleRef, inputRef);
        const getInputProps = (otherProps = {}) => (0, _extends2.default)({
          checked: checkedProp,
          defaultChecked,
          disabled,
          readOnly,
          ref: handleRefChange,
          required,
          type: "checkbox"
        }, otherProps, {
          onChange: createHandleInputChange(otherProps),
          onFocus: createHandleFocus(otherProps),
          onBlur: createHandleBlur(otherProps)
        });
        return {
          checked,
          disabled: Boolean(disabled),
          focusVisible,
          getInputProps,
          readOnly: Boolean(readOnly)
        };
      }
    }
  });

  // node_modules/@mui/base/node/SwitchUnstyled/switchUnstyledClasses.js
  var require_switchUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/SwitchUnstyled/switchUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSwitchUnstyledUtilityClass = getSwitchUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getSwitchUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSwitch", slot);
      }
      var switchUnstyledClasses = (0, _generateUtilityClasses.default)("MuiSwitch", ["root", "input", "track", "thumb", "checked", "disabled", "focusVisible", "readOnly"]);
      var _default = switchUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SwitchUnstyled/SwitchUnstyled.js
  var require_SwitchUnstyled = __commonJS({
    "node_modules/@mui/base/node/SwitchUnstyled/SwitchUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _useSwitch = _interopRequireDefault(require_useSwitch());
      var _switchUnstyledClasses = require_switchUnstyledClasses();
      var _utils = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["checked", "component", "components", "componentsProps", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          checked,
          disabled,
          focusVisible,
          readOnly
        } = ownerState;
        const slots = {
          root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
          thumb: ["thumb"],
          input: ["input"],
          track: ["track"]
        };
        return (0, _composeClasses.default)(slots, _switchUnstyledClasses.getSwitchUnstyledUtilityClass, {});
      };
      var SwitchUnstyled = /* @__PURE__ */ React59.forwardRef(function SwitchUnstyled2(props2, ref) {
        var _ref, _components$Thumb, _components$Input, _components$Track;
        const {
          checked: checkedProp,
          component,
          components = {},
          componentsProps = {},
          defaultChecked,
          disabled: disabledProp,
          onBlur,
          onChange,
          onFocus,
          onFocusVisible,
          readOnly: readOnlyProp
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const useSwitchProps = {
          checked: checkedProp,
          defaultChecked,
          disabled: disabledProp,
          onBlur,
          onChange,
          onFocus,
          onFocusVisible,
          readOnly: readOnlyProp
        };
        const {
          getInputProps,
          checked,
          disabled,
          focusVisible,
          readOnly
        } = (0, _useSwitch.default)(useSwitchProps);
        const ownerState = (0, _extends2.default)({}, props2, {
          checked,
          disabled,
          focusVisible,
          readOnly
        });
        const classes = useUtilityClasses21(ownerState);
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : "span";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref
          },
          ownerState,
          className: classes.root
        });
        const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : "span";
        const thumbProps = (0, _utils.useSlotProps)({
          elementType: Thumb,
          externalSlotProps: componentsProps.thumb,
          ownerState,
          className: classes.thumb
        });
        const Input = (_components$Input = components.Input) != null ? _components$Input : "input";
        const inputProps = (0, _utils.useSlotProps)({
          elementType: Input,
          getSlotProps: getInputProps,
          externalSlotProps: componentsProps.input,
          ownerState,
          className: classes.input
        });
        const Track = components.Track === null ? () => null : (_components$Track = components.Track) != null ? _components$Track : "span";
        const trackProps = (0, _utils.useSlotProps)({
          elementType: Track,
          externalSlotProps: componentsProps.track,
          ownerState,
          className: classes.track
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root2, (0, _extends2.default)({}, rootProps, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Track, (0, _extends2.default)({}, trackProps)), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Thumb, (0, _extends2.default)({}, thumbProps)), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Input, (0, _extends2.default)({}, inputProps))]
        }));
      });
      true ? SwitchUnstyled.propTypes = {
        checked: _propTypes.default.bool,
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Input: _propTypes.default.elementType,
          Root: _propTypes.default.elementType,
          Thumb: _propTypes.default.elementType,
          Track: _propTypes.default.oneOfType([_propTypes.default.elementType, _propTypes.default.oneOf([null])])
        }),
        componentsProps: _propTypes.default.shape({
          input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          thumb: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          track: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        defaultChecked: _propTypes.default.bool,
        disabled: _propTypes.default.bool,
        onBlur: _propTypes.default.func,
        onChange: _propTypes.default.func,
        onFocus: _propTypes.default.func,
        onFocusVisible: _propTypes.default.func,
        readOnly: _propTypes.default.bool,
        required: _propTypes.default.bool
      } : void 0;
      var _default = SwitchUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/SwitchUnstyled/SwitchUnstyled.types.js
  var require_SwitchUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/SwitchUnstyled/SwitchUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/SwitchUnstyled/useSwitch.types.js
  var require_useSwitch_types = __commonJS({
    "node_modules/@mui/base/node/SwitchUnstyled/useSwitch.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/SwitchUnstyled/index.js
  var require_SwitchUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/SwitchUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        useSwitch: true,
        switchUnstyledClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _SwitchUnstyled.default;
        }
      });
      Object.defineProperty(exports, "switchUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _switchUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useSwitch", {
        enumerable: true,
        get: function() {
          return _useSwitch.default;
        }
      });
      var _SwitchUnstyled = _interopRequireDefault(require_SwitchUnstyled());
      var _SwitchUnstyled2 = require_SwitchUnstyled_types();
      Object.keys(_SwitchUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SwitchUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SwitchUnstyled2[key];
          }
        });
      });
      var _useSwitch = _interopRequireDefault(require_useSwitch());
      var _useSwitch2 = require_useSwitch_types();
      Object.keys(_useSwitch2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useSwitch2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useSwitch2[key];
          }
        });
      });
      var _switchUnstyledClasses = _interopRequireWildcard(require_switchUnstyledClasses());
      Object.keys(_switchUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _switchUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _switchUnstyledClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TablePaginationUnstyled/TablePaginationActionsUnstyled.js
  var require_TablePaginationActionsUnstyled = __commonJS({
    "node_modules/@mui/base/node/TablePaginationUnstyled/TablePaginationActionsUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["component", "components", "componentsProps", "count", "getItemAriaLabel", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "direction", "ownerState"];
      var _span;
      var _span2;
      var _span3;
      var _span4;
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var LastPageIconDefault = () => _span || (_span = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
        children: "\u21FE|"
      }));
      var FirstPageIconDefault = () => _span2 || (_span2 = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
        children: "|\u21FD"
      }));
      var NextPageIconDefault = () => _span3 || (_span3 = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
        children: "\u21FE"
      }));
      var BackPageIconDefault = () => _span4 || (_span4 = /* @__PURE__ */ (0, _jsxRuntime.jsx)("span", {
        children: "\u21FD"
      }));
      function defaultGetAriaLabel(type2) {
        return `Go to ${type2} page`;
      }
      var TablePaginationActionsUnstyled = /* @__PURE__ */ React59.forwardRef(function TablePaginationActionsUnstyled2(props2, ref) {
        var _ref, _components$Root, _components$FirstButt, _components$LastButto, _components$NextButto, _components$BackButto, _components$LastPageI, _components$FirstPage, _components$NextPageI, _components$BackPageI;
        const {
          component,
          components = {},
          componentsProps = {},
          count,
          getItemAriaLabel = defaultGetAriaLabel,
          onPageChange,
          page,
          rowsPerPage,
          showFirstButton = false,
          showLastButton = false,
          direction
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const ownerState = props2;
        const handleFirstPageButtonClick = (event) => {
          onPageChange(event, 0);
        };
        const handleBackButtonClick = (event) => {
          onPageChange(event, page - 1);
        };
        const handleNextButtonClick = (event) => {
          onPageChange(event, page + 1);
        };
        const handleLastPageButtonClick = (event) => {
          onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
        };
        const Root2 = (_ref = (_components$Root = components.Root) != null ? _components$Root : component) != null ? _ref : "div";
        const rootProps = (0, _utils.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref
          },
          ownerState
        });
        const FirstButton = (_components$FirstButt = components.FirstButton) != null ? _components$FirstButt : "button";
        const firstButtonProps = (0, _utils.useSlotProps)({
          elementType: FirstButton,
          externalSlotProps: componentsProps.firstButton,
          additionalProps: {
            onClick: handleFirstPageButtonClick,
            disabled: page === 0,
            "aria-label": getItemAriaLabel("first", page),
            title: getItemAriaLabel("first", page)
          },
          ownerState
        });
        const LastButton = (_components$LastButto = components.LastButton) != null ? _components$LastButto : "button";
        const lastButtonProps = (0, _utils.useSlotProps)({
          elementType: LastButton,
          externalSlotProps: componentsProps.lastButton,
          additionalProps: {
            onClick: handleLastPageButtonClick,
            disabled: page >= Math.ceil(count / rowsPerPage) - 1,
            "aria-label": getItemAriaLabel("last", page),
            title: getItemAriaLabel("last", page)
          },
          ownerState
        });
        const NextButton = (_components$NextButto = components.NextButton) != null ? _components$NextButto : "button";
        const nextButtonProps = (0, _utils.useSlotProps)({
          elementType: NextButton,
          externalSlotProps: componentsProps.nextButton,
          additionalProps: {
            onClick: handleNextButtonClick,
            disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
            "aria-label": getItemAriaLabel("next", page),
            title: getItemAriaLabel("next", page)
          },
          ownerState
        });
        const BackButton = (_components$BackButto = components.BackButton) != null ? _components$BackButto : "button";
        const backButtonProps = (0, _utils.useSlotProps)({
          elementType: BackButton,
          externalSlotProps: componentsProps.backButton,
          additionalProps: {
            onClick: handleBackButtonClick,
            disabled: page === 0,
            "aria-label": getItemAriaLabel("previous", page),
            title: getItemAriaLabel("previous", page)
          },
          ownerState
        });
        const LastPageIcon = (_components$LastPageI = components.LastPageIcon) != null ? _components$LastPageI : LastPageIconDefault;
        const FirstPageIcon = (_components$FirstPage = components.FirstPageIcon) != null ? _components$FirstPage : FirstPageIconDefault;
        const NextPageIcon = (_components$NextPageI = components.NextPageIcon) != null ? _components$NextPageI : NextPageIconDefault;
        const BackPageIcon = (_components$BackPageI = components.BackPageIcon) != null ? _components$BackPageI : BackPageIconDefault;
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Root2, (0, _extends2.default)({}, rootProps, {
          children: [showFirstButton && /* @__PURE__ */ (0, _jsxRuntime.jsx)(FirstButton, (0, _extends2.default)({}, firstButtonProps, {
            children: direction === "rtl" ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(LastPageIcon, {}) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(FirstPageIcon, {})
          })), /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackButton, (0, _extends2.default)({}, backButtonProps, {
            children: direction === "rtl" ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(NextPageIcon, {}) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackPageIcon, {})
          })), /* @__PURE__ */ (0, _jsxRuntime.jsx)(NextButton, (0, _extends2.default)({}, nextButtonProps, {
            children: direction === "rtl" ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(BackPageIcon, {}) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(NextPageIcon, {})
          })), showLastButton && /* @__PURE__ */ (0, _jsxRuntime.jsx)(LastButton, (0, _extends2.default)({}, lastButtonProps, {
            children: direction === "rtl" ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(FirstPageIcon, {}) : /* @__PURE__ */ (0, _jsxRuntime.jsx)(LastPageIcon, {})
          }))]
        }));
      });
      var _default = TablePaginationActionsUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TablePaginationUnstyled/tablePaginationUnstyledClasses.js
  var require_tablePaginationUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/TablePaginationUnstyled/tablePaginationUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTablePaginationUnstyledUtilityClass = getTablePaginationUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTablePaginationUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiTablePaginationUnstyled", slot);
      }
      var tablePaginationClasses = (0, _generateUtilityClasses.default)("MuiTablePaginationUnstyled", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
      var _default = tablePaginationClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TablePaginationUnstyled/TablePaginationUnstyled.js
  var require_TablePaginationUnstyled = __commonJS({
    "node_modules/@mui/base/node/TablePaginationUnstyled/TablePaginationUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _utils2 = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _isHostComponent = _interopRequireDefault(require_isHostComponent());
      var _TablePaginationActionsUnstyled = _interopRequireDefault(require_TablePaginationActionsUnstyled());
      var _tablePaginationUnstyledClasses = require_tablePaginationUnstyledClasses();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["component", "components", "componentsProps", "colSpan", "count", "getItemAriaLabel", "labelDisplayedRows", "labelId", "labelRowsPerPage", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "selectId"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function defaultLabelDisplayedRows({
        from,
        to,
        count
      }) {
        return `${from}\u2013${to} of ${count !== -1 ? count : `more than ${to}`}`;
      }
      function defaultGetAriaLabel(type2) {
        return `Go to ${type2} page`;
      }
      var useUtilityClasses21 = () => {
        const slots = {
          root: ["root"],
          toolbar: ["toolbar"],
          spacer: ["spacer"],
          selectLabel: ["selectLabel"],
          select: ["select"],
          input: ["input"],
          selectIcon: ["selectIcon"],
          menuItem: ["menuItem"],
          displayedRows: ["displayedRows"],
          actions: ["actions"]
        };
        return (0, _composeClasses.default)(slots, _tablePaginationUnstyledClasses.getTablePaginationUnstyledUtilityClass, {});
      };
      var TablePaginationUnstyled = /* @__PURE__ */ React59.forwardRef(function TablePaginationUnstyled2(props2, ref) {
        var _ref, _components$Select, _components$Actions, _components$MenuItem, _components$SelectLab, _components$Displayed, _components$Toolbar, _components$Spacer;
        const {
          component,
          components = {},
          componentsProps = {},
          colSpan: colSpanProp,
          count,
          getItemAriaLabel = defaultGetAriaLabel,
          labelDisplayedRows = defaultLabelDisplayedRows,
          labelId: labelIdProp,
          labelRowsPerPage = "Rows per page:",
          onPageChange,
          onRowsPerPageChange,
          page,
          rowsPerPage,
          rowsPerPageOptions = [10, 25, 50, 100],
          selectId: selectIdProp
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const ownerState = props2;
        const classes = useUtilityClasses21();
        let colSpan;
        if (!component || component === "td" || !(0, _isHostComponent.default)(component)) {
          colSpan = colSpanProp || 1e3;
        }
        const getLabelDisplayedRowsTo = () => {
          if (count === -1) {
            return (page + 1) * rowsPerPage;
          }
          return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
        };
        const selectId = (0, _utils.unstable_useId)(selectIdProp);
        const labelId = (0, _utils.unstable_useId)(labelIdProp);
        const Root2 = (_ref = component != null ? component : components.Root) != null ? _ref : "td";
        const rootProps = (0, _utils2.useSlotProps)({
          elementType: Root2,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            colSpan,
            ref
          },
          ownerState,
          className: classes.root
        });
        const Select = (_components$Select = components.Select) != null ? _components$Select : "select";
        const selectProps = (0, _utils2.useSlotProps)({
          elementType: Select,
          externalSlotProps: componentsProps.select,
          additionalProps: {
            value: rowsPerPage,
            id: selectId,
            onChange: (e) => onRowsPerPageChange && onRowsPerPageChange(e),
            "aria-label": rowsPerPage.toString(),
            "aria-labelledby": [labelId, selectId].filter(Boolean).join(" ") || void 0
          },
          ownerState,
          className: classes.select
        });
        const Actions = (_components$Actions = components.Actions) != null ? _components$Actions : _TablePaginationActionsUnstyled.default;
        const actionsProps = (0, _utils2.useSlotProps)({
          elementType: Actions,
          externalSlotProps: componentsProps.actions,
          additionalProps: {
            page,
            rowsPerPage,
            count,
            onPageChange,
            getItemAriaLabel
          },
          ownerState,
          className: classes.actions
        });
        const MenuItem = (_components$MenuItem = components.MenuItem) != null ? _components$MenuItem : "option";
        const menuItemProps = (0, _utils2.useSlotProps)({
          elementType: MenuItem,
          externalSlotProps: componentsProps.menuItem,
          additionalProps: {
            value: void 0
          },
          ownerState,
          className: classes.menuItem
        });
        const SelectLabel = (_components$SelectLab = components.SelectLabel) != null ? _components$SelectLab : "p";
        const selectLabelProps = (0, _utils2.useSlotProps)({
          elementType: SelectLabel,
          externalSlotProps: componentsProps.selectLabel,
          additionalProps: {
            id: labelId
          },
          ownerState,
          className: classes.selectLabel
        });
        const DisplayedRows = (_components$Displayed = components.DisplayedRows) != null ? _components$Displayed : "p";
        const displayedRowsProps = (0, _utils2.useSlotProps)({
          elementType: DisplayedRows,
          externalSlotProps: componentsProps.displayedRows,
          ownerState,
          className: classes.displayedRows
        });
        const Toolbar3 = (_components$Toolbar = components.Toolbar) != null ? _components$Toolbar : "div";
        const toolbarProps = (0, _utils2.useSlotProps)({
          elementType: Toolbar3,
          externalSlotProps: componentsProps.toolbar,
          ownerState,
          className: classes.toolbar
        });
        const Spacer = (_components$Spacer = components.Spacer) != null ? _components$Spacer : "div";
        const spacerProps = (0, _utils2.useSlotProps)({
          elementType: Spacer,
          externalSlotProps: componentsProps.spacer,
          ownerState,
          className: classes.spacer
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(Root2, (0, _extends2.default)({}, rootProps, {
          children: /* @__PURE__ */ (0, _jsxRuntime.jsxs)(Toolbar3, (0, _extends2.default)({}, toolbarProps, {
            children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(Spacer, (0, _extends2.default)({}, spacerProps)), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, _jsxRuntime.jsx)(SelectLabel, (0, _extends2.default)({}, selectLabelProps, {
              children: labelRowsPerPage
            })), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, _jsxRuntime.jsx)(Select, (0, _extends2.default)({}, selectProps, {
              children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ (0, React59.createElement)(MenuItem, (0, _extends2.default)({}, menuItemProps, {
                key: typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
                value: typeof rowsPerPageOption !== "number" && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
              }), typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
            })), /* @__PURE__ */ (0, _jsxRuntime.jsx)(DisplayedRows, (0, _extends2.default)({}, displayedRowsProps, {
              children: labelDisplayedRows({
                from: count === 0 ? 0 : page * rowsPerPage + 1,
                to: getLabelDisplayedRowsTo(),
                count: count === -1 ? -1 : count,
                page
              })
            })), /* @__PURE__ */ (0, _jsxRuntime.jsx)(Actions, (0, _extends2.default)({}, actionsProps))]
          }))
        }));
      });
      true ? TablePaginationUnstyled.propTypes = {
        children: _propTypes.default.node,
        colSpan: _propTypes.default.number,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Actions: _propTypes.default.elementType,
          DisplayedRows: _propTypes.default.elementType,
          MenuItem: _propTypes.default.elementType,
          Root: _propTypes.default.elementType,
          Select: _propTypes.default.elementType,
          SelectLabel: _propTypes.default.elementType,
          Spacer: _propTypes.default.elementType,
          Toolbar: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          actions: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          displayedRows: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          menuItem: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          select: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          selectLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          spacer: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
          toolbar: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        count: _propTypes.default.number.isRequired,
        getItemAriaLabel: _propTypes.default.func,
        labelDisplayedRows: _propTypes.default.func,
        labelId: _propTypes.default.string,
        labelRowsPerPage: _propTypes.default.node,
        onPageChange: _propTypes.default.func.isRequired,
        onRowsPerPageChange: _propTypes.default.func,
        page: (0, _utils.chainPropTypes)(_utils.integerPropType.isRequired, (props2) => {
          const {
            count,
            page,
            rowsPerPage
          } = props2;
          if (count === -1) {
            return null;
          }
          const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
          if (page < 0 || page > newLastPage) {
            return new Error(`MUI: The page prop of a TablePaginationUnstyled is out of range (0 to ${newLastPage}, but page is ${page}).`);
          }
          return null;
        }),
        rowsPerPage: _utils.integerPropType.isRequired,
        rowsPerPageOptions: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
          label: _propTypes.default.string.isRequired,
          value: _propTypes.default.number.isRequired
        })]).isRequired),
        selectId: _propTypes.default.string
      } : void 0;
      var _default = TablePaginationUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TablePaginationUnstyled/TablePaginationUnstyled.types.js
  var require_TablePaginationUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/TablePaginationUnstyled/TablePaginationUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TablePaginationUnstyled/TablePaginationActionsUnstyled.types.js
  var require_TablePaginationActionsUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/TablePaginationUnstyled/TablePaginationActionsUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TablePaginationUnstyled/index.js
  var require_TablePaginationUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/TablePaginationUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        TablePaginationActionsUnstyled: true,
        tablePaginationUnstyledClasses: true
      };
      Object.defineProperty(exports, "TablePaginationActionsUnstyled", {
        enumerable: true,
        get: function() {
          return _TablePaginationActionsUnstyled.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TablePaginationUnstyled.default;
        }
      });
      Object.defineProperty(exports, "tablePaginationUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _tablePaginationUnstyledClasses.default;
        }
      });
      var _TablePaginationUnstyled = _interopRequireDefault(require_TablePaginationUnstyled());
      var _TablePaginationUnstyled2 = require_TablePaginationUnstyled_types();
      Object.keys(_TablePaginationUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TablePaginationUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TablePaginationUnstyled2[key];
          }
        });
      });
      var _TablePaginationActionsUnstyled = _interopRequireDefault(require_TablePaginationActionsUnstyled());
      var _TablePaginationActionsUnstyled2 = require_TablePaginationActionsUnstyled_types();
      Object.keys(_TablePaginationActionsUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TablePaginationActionsUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TablePaginationActionsUnstyled2[key];
          }
        });
      });
      var _tablePaginationUnstyledClasses = _interopRequireWildcard(require_tablePaginationUnstyledClasses());
      Object.keys(_tablePaginationUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tablePaginationUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tablePaginationUnstyledClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TabPanelUnstyled/tabPanelUnstyledClasses.js
  var require_tabPanelUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/TabPanelUnstyled/tabPanelUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTabPanelUnstyledUtilityClass = getTabPanelUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTabPanelUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("TabPanelUnstyled", slot);
      }
      var tabPanelUnstyledClasses = (0, _generateUtilityClasses.default)("TabPanelUnstyled", ["root", "hidden"]);
      var _default = tabPanelUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsUnstyled/tabsUnstyledClasses.js
  var require_tabsUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/TabsUnstyled/tabsUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTabsUnstyledUtilityClass = getTabsUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTabsUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("TabsUnstyled", slot);
      }
      var tabsUnstyledClasses = (0, _generateUtilityClasses.default)("TabsUnstyled", ["root", "horizontal", "vertical"]);
      var _default = tabsUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsUnstyled/useTabs.js
  var require_useTabs = __commonJS({
    "node_modules/@mui/base/node/TabsUnstyled/useTabs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useTabs = (parameters) => {
        const {
          value: valueProp,
          defaultValue,
          onChange,
          orientation,
          direction,
          selectionFollowsFocus
        } = parameters;
        const [value, setValue] = (0, _utils.unstable_useControlled)({
          controlled: valueProp,
          default: defaultValue,
          name: "Tabs",
          state: "value"
        });
        const idPrefix = (0, _utils.unstable_useId)();
        const onSelected = React59.useCallback((e, newValue) => {
          setValue(newValue);
          if (onChange) {
            onChange(e, newValue);
          }
        }, [onChange, setValue]);
        const tabsContextValue = React59.useMemo(() => {
          return {
            idPrefix,
            value,
            onSelected,
            orientation,
            direction,
            selectionFollowsFocus
          };
        }, [idPrefix, value, onSelected, orientation, direction, selectionFollowsFocus]);
        return {
          tabsContextValue
        };
      };
      var _default = useTabs;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsUnstyled/TabsContext.js
  var require_TabsContext = __commonJS({
    "node_modules/@mui/base/node/TabsUnstyled/TabsContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPanelId = getPanelId;
      exports.getTabId = getTabId;
      exports.useTabContext = useTabContext;
      var React59 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var Context = /* @__PURE__ */ React59.createContext(null);
      if (true) {
        Context.displayName = "TabsContext";
      }
      function useTabContext() {
        return React59.useContext(Context);
      }
      function getPanelId(context, value) {
        const {
          idPrefix
        } = context;
        if (idPrefix === null) {
          return null;
        }
        return `${context.idPrefix}-P-${value}`;
      }
      function getTabId(context, value) {
        const {
          idPrefix
        } = context;
        if (idPrefix === null) {
          return null;
        }
        return `${context.idPrefix}-T-${value}`;
      }
      var _default = Context;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsUnstyled/TabsUnstyled.js
  var require_TabsUnstyled = __commonJS({
    "node_modules/@mui/base/node/TabsUnstyled/TabsUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _tabsUnstyledClasses = require_tabsUnstyledClasses();
      var _useTabs = _interopRequireDefault(require_useTabs());
      var _TabsContext = _interopRequireDefault(require_TabsContext());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["children", "value", "defaultValue", "orientation", "direction", "component", "components", "componentsProps", "onChange", "selectionFollowsFocus"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          orientation
        } = ownerState;
        const slots = {
          root: ["root", orientation]
        };
        return (0, _composeClasses.default)(slots, _tabsUnstyledClasses.getTabsUnstyledUtilityClass, {});
      };
      var TabsUnstyled = /* @__PURE__ */ React59.forwardRef((props2, ref) => {
        var _ref;
        const {
          children,
          orientation = "horizontal",
          direction = "ltr",
          component,
          components = {},
          componentsProps = {}
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          tabsContextValue
        } = (0, _useTabs.default)(props2);
        const ownerState = (0, _extends2.default)({}, props2, {
          orientation,
          direction
        });
        const classes = useUtilityClasses21(ownerState);
        const TabsRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
        const tabsRootProps = (0, _utils.useSlotProps)({
          elementType: TabsRoot,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabsRoot, (0, _extends2.default)({}, tabsRootProps, {
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_TabsContext.default.Provider, {
            value: tabsContextValue,
            children
          })
        }));
      });
      true ? TabsUnstyled.propTypes = {
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        defaultValue: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.number, _propTypes.default.string]),
        direction: _propTypes.default.oneOf(["ltr", "rtl"]),
        onChange: _propTypes.default.func,
        orientation: _propTypes.default.oneOf(["horizontal", "vertical"]),
        selectionFollowsFocus: _propTypes.default.bool,
        value: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.number, _propTypes.default.string])
      } : void 0;
      var _default = TabsUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsUnstyled/TabsUnstyled.types.js
  var require_TabsUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/TabsUnstyled/TabsUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TabsUnstyled/index.js
  var require_TabsUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/TabsUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        TabsContext: true,
        tabsUnstyledClasses: true,
        useTabs: true
      };
      Object.defineProperty(exports, "TabsContext", {
        enumerable: true,
        get: function() {
          return _TabsContext.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TabsUnstyled.default;
        }
      });
      Object.defineProperty(exports, "tabsUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _tabsUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useTabs", {
        enumerable: true,
        get: function() {
          return _useTabs.default;
        }
      });
      var _TabsUnstyled = _interopRequireDefault(require_TabsUnstyled());
      var _TabsContext = _interopRequireWildcard(require_TabsContext());
      Object.keys(_TabsContext).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsContext[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsContext[key];
          }
        });
      });
      var _tabsUnstyledClasses = _interopRequireWildcard(require_tabsUnstyledClasses());
      Object.keys(_tabsUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tabsUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tabsUnstyledClasses[key];
          }
        });
      });
      var _TabsUnstyled2 = require_TabsUnstyled_types();
      Object.keys(_TabsUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsUnstyled2[key];
          }
        });
      });
      var _useTabs = _interopRequireWildcard(require_useTabs());
      Object.keys(_useTabs).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabs[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabs[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TabPanelUnstyled/useTabPanel.js
  var require_useTabPanel = __commonJS({
    "node_modules/@mui/base/node/TabPanelUnstyled/useTabPanel.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _TabsUnstyled = require_TabsUnstyled2();
      var useTabPanel = (parameters) => {
        const {
          value
        } = parameters;
        const context = (0, _TabsUnstyled.useTabContext)();
        if (context === null) {
          throw new Error("No TabContext provided");
        }
        const hidden = value !== context.value;
        const id = (0, _TabsUnstyled.getPanelId)(context, value);
        const tabId = (0, _TabsUnstyled.getTabId)(context, value);
        const getRootProps = () => {
          return {
            "aria-labelledby": tabId != null ? tabId : void 0,
            hidden,
            id: id != null ? id : void 0
          };
        };
        return {
          hidden,
          getRootProps
        };
      };
      var _default = useTabPanel;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabPanelUnstyled/TabPanelUnstyled.js
  var require_TabPanelUnstyled = __commonJS({
    "node_modules/@mui/base/node/TabPanelUnstyled/TabPanelUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils2();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _tabPanelUnstyledClasses = require_tabPanelUnstyledClasses();
      var _useTabPanel = _interopRequireDefault(require_useTabPanel());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["children", "value", "components", "componentsProps", "component"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          hidden
        } = ownerState;
        const slots = {
          root: ["root", hidden && "hidden"]
        };
        return (0, _composeClasses.default)(slots, _tabPanelUnstyledClasses.getTabPanelUnstyledUtilityClass, {});
      };
      var TabPanelUnstyled = /* @__PURE__ */ React59.forwardRef(function TabPanelUnstyled2(props2, ref) {
        var _ref;
        const {
          children,
          components = {},
          componentsProps = {},
          component
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          hidden,
          getRootProps
        } = (0, _useTabPanel.default)(props2);
        const ownerState = (0, _extends2.default)({}, props2, {
          hidden
        });
        const classes = useUtilityClasses21(ownerState);
        const TabPanelRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
        const tabPanelRootProps = (0, _utils.useSlotProps)({
          elementType: TabPanelRoot,
          getSlotProps: getRootProps,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            role: "tabpanel",
            ref
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabPanelRoot, (0, _extends2.default)({}, tabPanelRootProps, {
          children: !hidden && children
        }));
      });
      true ? TabPanelUnstyled.propTypes = {
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired
      } : void 0;
      var _default = TabPanelUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabPanelUnstyled/TabPanelUnstyled.types.js
  var require_TabPanelUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/TabPanelUnstyled/TabPanelUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TabPanelUnstyled/index.js
  var require_TabPanelUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/TabPanelUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        tabPanelUnstyledClasses: true,
        useTabPanel: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TabPanelUnstyled.default;
        }
      });
      Object.defineProperty(exports, "tabPanelUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _tabPanelUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useTabPanel", {
        enumerable: true,
        get: function() {
          return _useTabPanel.default;
        }
      });
      var _TabPanelUnstyled = _interopRequireDefault(require_TabPanelUnstyled());
      var _TabPanelUnstyled2 = require_TabPanelUnstyled_types();
      Object.keys(_TabPanelUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabPanelUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabPanelUnstyled2[key];
          }
        });
      });
      var _tabPanelUnstyledClasses = _interopRequireWildcard(require_tabPanelUnstyledClasses());
      Object.keys(_tabPanelUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tabPanelUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tabPanelUnstyledClasses[key];
          }
        });
      });
      var _useTabPanel = _interopRequireDefault(require_useTabPanel());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TabsListUnstyled/tabsListUnstyledClasses.js
  var require_tabsListUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/TabsListUnstyled/tabsListUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTabsListUnstyledUtilityClass = getTabsListUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTabsListUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("TabsListUnstyled", slot);
      }
      var tabsListUnstyledClasses = (0, _generateUtilityClasses.default)("TabsListUnstyled", ["root", "horizontal", "vertical"]);
      var _default = tabsListUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsListUnstyled/useTabsList.js
  var require_useTabsList = __commonJS({
    "node_modules/@mui/base/node/TabsListUnstyled/useTabsList.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _utils = require_utils();
      var _reactIs = require_react_is3();
      var _TabsUnstyled = require_TabsUnstyled2();
      var _extractEventHandlers = _interopRequireDefault(require_extractEventHandlers());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var nextItem = (list, item) => {
        if (!list) {
          return null;
        }
        if (list === item) {
          return list.firstChild;
        }
        if (item && item.nextElementSibling) {
          return item.nextElementSibling;
        }
        return list.firstChild;
      };
      var previousItem = (list, item) => {
        if (!list) {
          return null;
        }
        if (list === item) {
          return list.lastChild;
        }
        if (item && item.previousElementSibling) {
          return item.previousElementSibling;
        }
        return list.lastChild;
      };
      var moveFocus = (list, currentFocus, traversalFunction) => {
        let wrappedOnce = false;
        let nextFocus = traversalFunction(list, currentFocus);
        while (list && nextFocus) {
          if (nextFocus === list.firstChild) {
            if (wrappedOnce) {
              return;
            }
            wrappedOnce = true;
          }
          const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
          if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
            nextFocus = traversalFunction(list, nextFocus);
          } else {
            nextFocus.focus();
            return;
          }
        }
      };
      var useTabsList = (parameters) => {
        const {
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledBy,
          children,
          ref
        } = parameters;
        const tabsListRef = /* @__PURE__ */ React59.createRef();
        const handleRef = (0, _utils.unstable_useForkRef)(tabsListRef, ref);
        const context = (0, _TabsUnstyled.useTabContext)();
        if (context === null) {
          throw new Error("No TabContext provided");
        }
        const {
          value,
          orientation = "horizontal",
          direction = "ltr"
        } = context;
        const isRtl = direction === "rtl";
        const handleKeyDown = (event) => {
          const list = tabsListRef.current;
          const currentFocus = (0, _utils.unstable_ownerDocument)(list).activeElement;
          const role = currentFocus == null ? void 0 : currentFocus.getAttribute("role");
          if (role !== "tab") {
            return;
          }
          let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
          let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
          if (orientation === "horizontal" && isRtl) {
            previousItemKey = "ArrowRight";
            nextItemKey = "ArrowLeft";
          }
          switch (event.key) {
            case previousItemKey:
              event.preventDefault();
              moveFocus(list, currentFocus, previousItem);
              break;
            case nextItemKey:
              event.preventDefault();
              moveFocus(list, currentFocus, nextItem);
              break;
            case "Home":
              event.preventDefault();
              moveFocus(list, null, nextItem);
              break;
            case "End":
              event.preventDefault();
              moveFocus(list, null, previousItem);
              break;
            default:
              break;
          }
        };
        const createHandleKeyDown = (otherHandlers) => (event) => {
          var _otherHandlers$onKeyD;
          handleKeyDown(event);
          (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
        };
        const getRootProps = (otherHandlers = {}) => {
          const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
          const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, otherHandlers);
          const ownEventHandlers = {
            onKeyDown: createHandleKeyDown(externalEventHandlers)
          };
          const mergedEventHandlers = (0, _extends2.default)({}, externalEventHandlers, ownEventHandlers);
          return (0, _extends2.default)({
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            "aria-orientation": orientation === "vertical" ? "vertical" : void 0,
            role: "tablist",
            ref: handleRef
          }, mergedEventHandlers);
        };
        const processChildren = React59.useCallback(() => {
          const valueToIndex = /* @__PURE__ */ new Map();
          let childIndex = 0;
          const processedChildren = React59.Children.map(children, (child) => {
            if (!/* @__PURE__ */ React59.isValidElement(child)) {
              return null;
            }
            if (true) {
              if ((0, _reactIs.isFragment)(child)) {
                console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
              }
            }
            const childValue = child.props.value === void 0 ? childIndex : child.props.value;
            valueToIndex.set(childValue, childIndex);
            childIndex += 1;
            return /* @__PURE__ */ React59.cloneElement(child, (0, _extends2.default)({
              value: childValue
            }, childIndex === 1 && value === false && !child.props.tabIndex || value === childValue ? {
              tabIndex: 0
            } : {
              tabIndex: -1
            }));
          });
          return processedChildren;
        }, [children, value]);
        return {
          isRtl,
          orientation,
          value,
          processChildren,
          getRootProps
        };
      };
      var _default = useTabsList;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsListUnstyled/TabsListUnstyled.js
  var require_TabsListUnstyled = __commonJS({
    "node_modules/@mui/base/node/TabsListUnstyled/TabsListUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _utils = require_utils2();
      var _tabsListUnstyledClasses = require_tabsListUnstyledClasses();
      var _useTabsList = _interopRequireDefault(require_useTabsList());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["children", "component", "components", "componentsProps"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          orientation
        } = ownerState;
        const slots = {
          root: ["root", orientation]
        };
        return (0, _composeClasses.default)(slots, _tabsListUnstyledClasses.getTabsListUnstyledUtilityClass, {});
      };
      var TabsListUnstyled = /* @__PURE__ */ React59.forwardRef((props2, ref) => {
        var _ref;
        const {
          component,
          components = {},
          componentsProps = {}
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          isRtl,
          orientation,
          getRootProps,
          processChildren
        } = (0, _useTabsList.default)((0, _extends2.default)({}, props2, {
          ref
        }));
        const ownerState = (0, _extends2.default)({}, props2, {
          isRtl,
          orientation
        });
        const classes = useUtilityClasses21(ownerState);
        const TabsListRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
        const tabsListRootProps = (0, _utils.useSlotProps)({
          elementType: TabsListRoot,
          getSlotProps: getRootProps,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          ownerState,
          className: classes.root
        });
        const processedChildren = processChildren();
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabsListRoot, (0, _extends2.default)({}, tabsListRootProps, {
          children: processedChildren
        }));
      });
      true ? TabsListUnstyled.propTypes = {
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        })
      } : void 0;
      var _default = TabsListUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabsListUnstyled/TabsListUnstyled.types.js
  var require_TabsListUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/TabsListUnstyled/TabsListUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TabsListUnstyled/useTabsList.types.js
  var require_useTabsList_types = __commonJS({
    "node_modules/@mui/base/node/TabsListUnstyled/useTabsList.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TabsListUnstyled/index.js
  var require_TabsListUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/TabsListUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        tabsListUnstyledClasses: true,
        useTabsList: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TabsListUnstyled.default;
        }
      });
      Object.defineProperty(exports, "tabsListUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _tabsListUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useTabsList", {
        enumerable: true,
        get: function() {
          return _useTabsList.default;
        }
      });
      var _TabsListUnstyled = _interopRequireDefault(require_TabsListUnstyled());
      var _TabsListUnstyled2 = require_TabsListUnstyled_types();
      Object.keys(_TabsListUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsListUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsListUnstyled2[key];
          }
        });
      });
      var _tabsListUnstyledClasses = _interopRequireWildcard(require_tabsListUnstyledClasses());
      Object.keys(_tabsListUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tabsListUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tabsListUnstyledClasses[key];
          }
        });
      });
      var _useTabsList = _interopRequireDefault(require_useTabsList());
      var _useTabsList2 = require_useTabsList_types();
      Object.keys(_useTabsList2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTabsList2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTabsList2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TabUnstyled/tabUnstyledClasses.js
  var require_tabUnstyledClasses = __commonJS({
    "node_modules/@mui/base/node/TabUnstyled/tabUnstyledClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTabUnstyledUtilityClass = getTabUnstyledUtilityClass;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      function getTabUnstyledUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("TabUnstyled", slot);
      }
      var tabUnstyledClasses = (0, _generateUtilityClasses.default)("TabUnstyled", ["root", "selected", "disabled"]);
      var _default = tabUnstyledClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabUnstyled/useTab.js
  var require_useTab = __commonJS({
    "node_modules/@mui/base/node/TabUnstyled/useTab.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _TabsUnstyled = require_TabsUnstyled2();
      var _ButtonUnstyled = require_ButtonUnstyled2();
      var _excluded32 = ["getRootProps"];
      var useTab = (parameters) => {
        var _getPanelId, _getTabId;
        const {
          value: valueProp,
          onChange,
          onClick,
          onFocus
        } = parameters;
        const _useButton = (0, _ButtonUnstyled.useButton)(parameters), {
          getRootProps: getRootPropsButton
        } = _useButton, otherButtonProps = (0, _objectWithoutPropertiesLoose2.default)(_useButton, _excluded32);
        const context = (0, _TabsUnstyled.useTabContext)();
        if (context === null) {
          throw new Error("No TabContext provided");
        }
        const value = valueProp != null ? valueProp : 0;
        const selected = context.value === value;
        const selectionFollowsFocus = context.selectionFollowsFocus;
        const a11yAttributes = {
          role: "tab",
          "aria-controls": (_getPanelId = (0, _TabsUnstyled.getPanelId)(context, value)) != null ? _getPanelId : void 0,
          id: (_getTabId = (0, _TabsUnstyled.getTabId)(context, value)) != null ? _getTabId : void 0,
          "aria-selected": selected,
          disabled: otherButtonProps.disabled
        };
        const createHandleFocus = (otherHandlers) => (event) => {
          var _otherHandlers$onFocu;
          (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
          if (event.defaultPrevented) {
            return;
          }
          if (selectionFollowsFocus && !selected) {
            if (onChange) {
              onChange(event, value);
            }
            context.onSelected(event, value);
          }
          if (onFocus) {
            onFocus(event);
          }
        };
        const createHandleClick = (otherHandlers) => (event) => {
          var _otherHandlers$onClic;
          (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
          if (event.defaultPrevented) {
            return;
          }
          if (!selected) {
            if (onChange) {
              onChange(event, value);
            }
            context.onSelected(event, value);
          }
          if (onClick) {
            onClick(event);
          }
        };
        const getRootProps = (otherHandlers = {}) => {
          const buttonResolvedProps = getRootPropsButton((0, _extends2.default)({}, otherHandlers, {
            onClick: createHandleClick(otherHandlers),
            onFocus: createHandleFocus(otherHandlers)
          }));
          return (0, _extends2.default)({}, buttonResolvedProps, a11yAttributes);
        };
        return (0, _extends2.default)({
          getRootProps
        }, otherButtonProps, {
          selected
        });
      };
      var _default = useTab;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabUnstyled/TabUnstyled.js
  var require_TabUnstyled = __commonJS({
    "node_modules/@mui/base/node/TabUnstyled/TabUnstyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _tabUnstyledClasses = require_tabUnstyledClasses();
      var _useTab = _interopRequireDefault(require_useTab());
      var _utils2 = require_utils2();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "components", "componentsProps"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          selected,
          disabled
        } = ownerState;
        const slots = {
          root: ["root", selected && "selected", disabled && "disabled"]
        };
        return (0, _composeClasses.default)(slots, _tabUnstyledClasses.getTabUnstyledUtilityClass, {});
      };
      var TabUnstyled = /* @__PURE__ */ React59.forwardRef(function TabUnstyled2(props2, ref) {
        var _ref;
        const {
          action,
          children,
          disabled = false,
          component,
          components = {},
          componentsProps = {}
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const tabRef = React59.useRef();
        const handleRef = (0, _utils.unstable_useForkRef)(tabRef, ref);
        const {
          active,
          focusVisible,
          setFocusVisible,
          selected,
          getRootProps
        } = (0, _useTab.default)((0, _extends2.default)({}, props2, {
          ref: handleRef
        }));
        React59.useImperativeHandle(action, () => ({
          focusVisible: () => {
            setFocusVisible(true);
            tabRef.current.focus();
          }
        }), [setFocusVisible]);
        const ownerState = (0, _extends2.default)({}, props2, {
          active,
          focusVisible,
          disabled,
          selected
        });
        const classes = useUtilityClasses21(ownerState);
        const TabRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "button";
        const tabRootProps = (0, _utils2.useSlotProps)({
          elementType: TabRoot,
          getSlotProps: getRootProps,
          externalSlotProps: componentsProps.root,
          externalForwardedProps: other,
          additionalProps: {
            ref
          },
          ownerState,
          className: classes.root
        });
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(TabRoot, (0, _extends2.default)({}, tabRootProps, {
          children
        }));
      });
      true ? TabUnstyled.propTypes = {
        action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
          current: _propTypes.default.shape({
            focusVisible: _propTypes.default.func.isRequired
          })
        })]),
        children: _propTypes.default.node,
        component: _propTypes.default.elementType,
        components: _propTypes.default.shape({
          Root: _propTypes.default.elementType
        }),
        componentsProps: _propTypes.default.shape({
          root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
        }),
        disabled: _propTypes.default.bool,
        onChange: _propTypes.default.func,
        onClick: _propTypes.default.func,
        onFocus: _propTypes.default.func,
        value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
      } : void 0;
      var _default = TabUnstyled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TabUnstyled/TabUnstyled.types.js
  var require_TabUnstyled_types = __commonJS({
    "node_modules/@mui/base/node/TabUnstyled/TabUnstyled.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TabUnstyled/useTab.types.js
  var require_useTab_types = __commonJS({
    "node_modules/@mui/base/node/TabUnstyled/useTab.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/base/node/TabUnstyled/index.js
  var require_TabUnstyled2 = __commonJS({
    "node_modules/@mui/base/node/TabUnstyled/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        tabUnstyledClasses: true,
        useTab: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TabUnstyled.default;
        }
      });
      Object.defineProperty(exports, "tabUnstyledClasses", {
        enumerable: true,
        get: function() {
          return _tabUnstyledClasses.default;
        }
      });
      Object.defineProperty(exports, "useTab", {
        enumerable: true,
        get: function() {
          return _useTab.default;
        }
      });
      var _TabUnstyled = _interopRequireDefault(require_TabUnstyled());
      var _TabUnstyled2 = require_TabUnstyled_types();
      Object.keys(_TabUnstyled2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabUnstyled2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabUnstyled2[key];
          }
        });
      });
      var _tabUnstyledClasses = _interopRequireWildcard(require_tabUnstyledClasses());
      Object.keys(_tabUnstyledClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _tabUnstyledClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _tabUnstyledClasses[key];
          }
        });
      });
      var _useTab = _interopRequireDefault(require_useTab());
      var _useTab2 = require_useTab_types();
      Object.keys(_useTab2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _useTab2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _useTab2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/TextareaAutosize/TextareaAutosize.js
  var require_TextareaAutosize = __commonJS({
    "node_modules/@mui/base/node/TextareaAutosize/TextareaAutosize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _reactDom = require_react_dom();
      var _utils = require_utils();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["onChange", "maxRows", "minRows", "style", "value"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function getStyleValue(computedStyle, property) {
        return parseInt(computedStyle[property], 10) || 0;
      }
      var styles3 = {
        shadow: {
          visibility: "hidden",
          position: "absolute",
          overflow: "hidden",
          height: 0,
          top: 0,
          left: 0,
          transform: "translateZ(0)"
        }
      };
      function isEmpty(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0;
      }
      var TextareaAutosize = /* @__PURE__ */ React59.forwardRef(function TextareaAutosize2(props2, ref) {
        const {
          onChange,
          maxRows,
          minRows = 1,
          style: style2,
          value
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const {
          current: isControlled
        } = React59.useRef(value != null);
        const inputRef = React59.useRef(null);
        const handleRef = (0, _utils.unstable_useForkRef)(ref, inputRef);
        const shadowRef = React59.useRef(null);
        const renders = React59.useRef(0);
        const [state, setState] = React59.useState({});
        const getUpdatedState = React59.useCallback(() => {
          const input = inputRef.current;
          const containerWindow = (0, _utils.unstable_ownerWindow)(input);
          const computedStyle = containerWindow.getComputedStyle(input);
          if (computedStyle.width === "0px") {
            return {};
          }
          const inputShallow = shadowRef.current;
          inputShallow.style.width = computedStyle.width;
          inputShallow.value = input.value || props2.placeholder || "x";
          if (inputShallow.value.slice(-1) === "\n") {
            inputShallow.value += " ";
          }
          const boxSizing = computedStyle["box-sizing"];
          const padding = getStyleValue(computedStyle, "padding-bottom") + getStyleValue(computedStyle, "padding-top");
          const border = getStyleValue(computedStyle, "border-bottom-width") + getStyleValue(computedStyle, "border-top-width");
          const innerHeight = inputShallow.scrollHeight;
          inputShallow.value = "x";
          const singleRowHeight = inputShallow.scrollHeight;
          let outerHeight = innerHeight;
          if (minRows) {
            outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
          }
          if (maxRows) {
            outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
          }
          outerHeight = Math.max(outerHeight, singleRowHeight);
          const outerHeightStyle = outerHeight + (boxSizing === "border-box" ? padding + border : 0);
          const overflow = Math.abs(outerHeight - innerHeight) <= 1;
          return {
            outerHeightStyle,
            overflow
          };
        }, [maxRows, minRows, props2.placeholder]);
        const updateState = (prevState, newState) => {
          const {
            outerHeightStyle,
            overflow
          } = newState;
          if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
            renders.current += 1;
            return {
              overflow,
              outerHeightStyle
            };
          }
          if (true) {
            if (renders.current === 20) {
              console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
            }
          }
          return prevState;
        };
        const syncHeight = React59.useCallback(() => {
          const newState = getUpdatedState();
          if (isEmpty(newState)) {
            return;
          }
          setState((prevState) => {
            return updateState(prevState, newState);
          });
        }, [getUpdatedState]);
        const syncHeightWithFlushSycn = () => {
          const newState = getUpdatedState();
          if (isEmpty(newState)) {
            return;
          }
          (0, _reactDom.flushSync)(() => {
            setState((prevState) => {
              return updateState(prevState, newState);
            });
          });
        };
        React59.useEffect(() => {
          const handleResize = (0, _utils.unstable_debounce)(() => {
            renders.current = 0;
            if (inputRef.current) {
              syncHeightWithFlushSycn();
            }
          });
          const containerWindow = (0, _utils.unstable_ownerWindow)(inputRef.current);
          containerWindow.addEventListener("resize", handleResize);
          let resizeObserver;
          if (typeof ResizeObserver !== "undefined") {
            resizeObserver = new ResizeObserver(handleResize);
            resizeObserver.observe(inputRef.current);
          }
          return () => {
            handleResize.clear();
            containerWindow.removeEventListener("resize", handleResize);
            if (resizeObserver) {
              resizeObserver.disconnect();
            }
          };
        });
        (0, _utils.unstable_useEnhancedEffect)(() => {
          syncHeight();
        });
        React59.useEffect(() => {
          renders.current = 0;
        }, [value]);
        const handleChange = (event) => {
          renders.current = 0;
          if (!isControlled) {
            syncHeight();
          }
          if (onChange) {
            onChange(event);
          }
        };
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React59.Fragment, {
          children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)("textarea", (0, _extends2.default)({
            value,
            onChange: handleChange,
            ref: handleRef,
            rows: minRows,
            style: (0, _extends2.default)({
              height: state.outerHeightStyle,
              overflow: state.overflow ? "hidden" : null
            }, style2)
          }, other)), /* @__PURE__ */ (0, _jsxRuntime.jsx)("textarea", {
            "aria-hidden": true,
            className: props2.className,
            readOnly: true,
            ref: shadowRef,
            tabIndex: -1,
            style: (0, _extends2.default)({}, styles3.shadow, style2, {
              padding: 0
            })
          })]
        });
      });
      true ? TextareaAutosize.propTypes = {
        className: _propTypes.default.string,
        maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
        onChange: _propTypes.default.func,
        placeholder: _propTypes.default.string,
        style: _propTypes.default.object,
        value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.number, _propTypes.default.string])
      } : void 0;
      var _default = TextareaAutosize;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/TextareaAutosize/index.js
  var require_TextareaAutosize2 = __commonJS({
    "node_modules/@mui/base/node/TextareaAutosize/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _TextareaAutosize.default;
        }
      });
      var _TextareaAutosize = _interopRequireDefault(require_TextareaAutosize());
    }
  });

  // node_modules/@mui/base/node/index.js
  var require_node3 = __commonJS({
    "node_modules/@mui/base/node/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        BadgeUnstyled: true,
        ButtonUnstyled: true,
        ClickAwayListener: true,
        unstable_composeClasses: true,
        generateUtilityClass: true,
        generateUtilityClasses: true,
        FocusTrap: true,
        FormControlUnstyled: true,
        InputUnstyled: true,
        MenuUnstyled: true,
        MenuItemUnstyled: true,
        ModalUnstyled: true,
        MultiSelectUnstyled: true,
        NoSsr: true,
        OptionGroupUnstyled: true,
        OptionUnstyled: true,
        PopperUnstyled: true,
        Portal: true,
        SelectUnstyled: true,
        SliderUnstyled: true,
        SnackbarUnstyled: true,
        SwitchUnstyled: true,
        TablePaginationUnstyled: true,
        TabPanelUnstyled: true,
        TabsListUnstyled: true,
        TabsUnstyled: true,
        TabUnstyled: true,
        TextareaAutosize: true
      };
      Object.defineProperty(exports, "BadgeUnstyled", {
        enumerable: true,
        get: function() {
          return _BadgeUnstyled.default;
        }
      });
      Object.defineProperty(exports, "ButtonUnstyled", {
        enumerable: true,
        get: function() {
          return _ButtonUnstyled.default;
        }
      });
      Object.defineProperty(exports, "ClickAwayListener", {
        enumerable: true,
        get: function() {
          return _ClickAwayListener.default;
        }
      });
      Object.defineProperty(exports, "FocusTrap", {
        enumerable: true,
        get: function() {
          return _FocusTrap.default;
        }
      });
      Object.defineProperty(exports, "FormControlUnstyled", {
        enumerable: true,
        get: function() {
          return _FormControlUnstyled.default;
        }
      });
      Object.defineProperty(exports, "InputUnstyled", {
        enumerable: true,
        get: function() {
          return _InputUnstyled.default;
        }
      });
      Object.defineProperty(exports, "MenuItemUnstyled", {
        enumerable: true,
        get: function() {
          return _MenuItemUnstyled.default;
        }
      });
      Object.defineProperty(exports, "MenuUnstyled", {
        enumerable: true,
        get: function() {
          return _MenuUnstyled.default;
        }
      });
      Object.defineProperty(exports, "ModalUnstyled", {
        enumerable: true,
        get: function() {
          return _ModalUnstyled.default;
        }
      });
      Object.defineProperty(exports, "MultiSelectUnstyled", {
        enumerable: true,
        get: function() {
          return _MultiSelectUnstyled.default;
        }
      });
      Object.defineProperty(exports, "NoSsr", {
        enumerable: true,
        get: function() {
          return _NoSsr.default;
        }
      });
      Object.defineProperty(exports, "OptionGroupUnstyled", {
        enumerable: true,
        get: function() {
          return _OptionGroupUnstyled.default;
        }
      });
      Object.defineProperty(exports, "OptionUnstyled", {
        enumerable: true,
        get: function() {
          return _OptionUnstyled.default;
        }
      });
      Object.defineProperty(exports, "PopperUnstyled", {
        enumerable: true,
        get: function() {
          return _PopperUnstyled.default;
        }
      });
      Object.defineProperty(exports, "Portal", {
        enumerable: true,
        get: function() {
          return _Portal.default;
        }
      });
      Object.defineProperty(exports, "SelectUnstyled", {
        enumerable: true,
        get: function() {
          return _SelectUnstyled.default;
        }
      });
      Object.defineProperty(exports, "SliderUnstyled", {
        enumerable: true,
        get: function() {
          return _SliderUnstyled.default;
        }
      });
      Object.defineProperty(exports, "SnackbarUnstyled", {
        enumerable: true,
        get: function() {
          return _SnackbarUnstyled.default;
        }
      });
      Object.defineProperty(exports, "SwitchUnstyled", {
        enumerable: true,
        get: function() {
          return _SwitchUnstyled.default;
        }
      });
      Object.defineProperty(exports, "TabPanelUnstyled", {
        enumerable: true,
        get: function() {
          return _TabPanelUnstyled.default;
        }
      });
      Object.defineProperty(exports, "TabUnstyled", {
        enumerable: true,
        get: function() {
          return _TabUnstyled.default;
        }
      });
      Object.defineProperty(exports, "TablePaginationUnstyled", {
        enumerable: true,
        get: function() {
          return _TablePaginationUnstyled.default;
        }
      });
      Object.defineProperty(exports, "TabsListUnstyled", {
        enumerable: true,
        get: function() {
          return _TabsListUnstyled.default;
        }
      });
      Object.defineProperty(exports, "TabsUnstyled", {
        enumerable: true,
        get: function() {
          return _TabsUnstyled.default;
        }
      });
      Object.defineProperty(exports, "TextareaAutosize", {
        enumerable: true,
        get: function() {
          return _TextareaAutosize.default;
        }
      });
      Object.defineProperty(exports, "generateUtilityClass", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      Object.defineProperty(exports, "generateUtilityClasses", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_composeClasses", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      var _utils = require_utils2();
      Object.keys(_utils).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _utils[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _utils[key];
          }
        });
      });
      var _AutocompleteUnstyled = require_AutocompleteUnstyled();
      Object.keys(_AutocompleteUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _AutocompleteUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _AutocompleteUnstyled[key];
          }
        });
      });
      var _BadgeUnstyled = _interopRequireWildcard(require_BadgeUnstyled2());
      Object.keys(_BadgeUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _BadgeUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _BadgeUnstyled[key];
          }
        });
      });
      var _ButtonUnstyled = _interopRequireWildcard(require_ButtonUnstyled2());
      Object.keys(_ButtonUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ButtonUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ButtonUnstyled[key];
          }
        });
      });
      var _ClickAwayListener = _interopRequireDefault(require_ClickAwayListener2());
      var _composeClasses = _interopRequireDefault(require_composeClasses3());
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass3());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _generateUtilityClass[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses3());
      var _FocusTrap = _interopRequireDefault(require_FocusTrap2());
      var _FormControlUnstyled = _interopRequireWildcard(require_FormControlUnstyled2());
      Object.keys(_FormControlUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _FormControlUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _FormControlUnstyled[key];
          }
        });
      });
      var _InputUnstyled = _interopRequireWildcard(require_InputUnstyled2());
      Object.keys(_InputUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _InputUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _InputUnstyled[key];
          }
        });
      });
      var _ListboxUnstyled = require_ListboxUnstyled();
      Object.keys(_ListboxUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ListboxUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ListboxUnstyled[key];
          }
        });
      });
      var _MenuUnstyled = _interopRequireWildcard(require_MenuUnstyled2());
      Object.keys(_MenuUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MenuUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MenuUnstyled[key];
          }
        });
      });
      var _MenuItemUnstyled = _interopRequireWildcard(require_MenuItemUnstyled2());
      Object.keys(_MenuItemUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MenuItemUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MenuItemUnstyled[key];
          }
        });
      });
      var _ModalUnstyled = _interopRequireWildcard(require_ModalUnstyled2());
      Object.keys(_ModalUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ModalUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ModalUnstyled[key];
          }
        });
      });
      var _MultiSelectUnstyled = _interopRequireWildcard(require_MultiSelectUnstyled2());
      Object.keys(_MultiSelectUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _MultiSelectUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _MultiSelectUnstyled[key];
          }
        });
      });
      var _NoSsr = _interopRequireDefault(require_NoSsr2());
      var _OptionGroupUnstyled = _interopRequireWildcard(require_OptionGroupUnstyled2());
      Object.keys(_OptionGroupUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _OptionGroupUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _OptionGroupUnstyled[key];
          }
        });
      });
      var _OptionUnstyled = _interopRequireWildcard(require_OptionUnstyled2());
      Object.keys(_OptionUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _OptionUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _OptionUnstyled[key];
          }
        });
      });
      var _PopperUnstyled = _interopRequireDefault(require_PopperUnstyled2());
      var _Portal = _interopRequireDefault(require_Portal2());
      var _SelectUnstyled = _interopRequireWildcard(require_SelectUnstyled2());
      Object.keys(_SelectUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SelectUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SelectUnstyled[key];
          }
        });
      });
      var _SliderUnstyled = _interopRequireWildcard(require_SliderUnstyled2());
      Object.keys(_SliderUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SliderUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SliderUnstyled[key];
          }
        });
      });
      var _SnackbarUnstyled = _interopRequireWildcard(require_SnackbarUnstyled2());
      Object.keys(_SnackbarUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SnackbarUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SnackbarUnstyled[key];
          }
        });
      });
      var _SwitchUnstyled = _interopRequireWildcard(require_SwitchUnstyled2());
      Object.keys(_SwitchUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _SwitchUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _SwitchUnstyled[key];
          }
        });
      });
      var _TablePaginationUnstyled = _interopRequireWildcard(require_TablePaginationUnstyled2());
      Object.keys(_TablePaginationUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TablePaginationUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TablePaginationUnstyled[key];
          }
        });
      });
      var _TabPanelUnstyled = _interopRequireWildcard(require_TabPanelUnstyled2());
      Object.keys(_TabPanelUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabPanelUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabPanelUnstyled[key];
          }
        });
      });
      var _TabsListUnstyled = _interopRequireWildcard(require_TabsListUnstyled2());
      Object.keys(_TabsListUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsListUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsListUnstyled[key];
          }
        });
      });
      var _TabsUnstyled = _interopRequireWildcard(require_TabsUnstyled2());
      Object.keys(_TabsUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabsUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabsUnstyled[key];
          }
        });
      });
      var _TabUnstyled = _interopRequireWildcard(require_TabUnstyled2());
      Object.keys(_TabUnstyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _TabUnstyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _TabUnstyled[key];
          }
        });
      });
      var _TextareaAutosize = _interopRequireDefault(require_TextareaAutosize2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/base/node/className/index.js
  var require_className = __commonJS({
    "node_modules/@mui/base/node/className/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "unstable_ClassNameGenerator", {
        enumerable: true,
        get: function() {
          return _utils.unstable_ClassNameGenerator;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/material/utils/capitalize.js
  var require_capitalize2 = __commonJS({
    "node_modules/@mui/material/utils/capitalize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_capitalize;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/createChainedFunction.js
  var require_createChainedFunction2 = __commonJS({
    "node_modules/@mui/material/utils/createChainedFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_createChainedFunction;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/styles/createMixins.js
  var require_createMixins = __commonJS({
    "node_modules/@mui/material/styles/createMixins.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createMixins2;
      var _extends2 = _interopRequireDefault(require_extends());
      function createMixins2(breakpoints, mixins) {
        return (0, _extends2.default)({
          toolbar: {
            minHeight: 56,
            [breakpoints.up("xs")]: {
              "@media (orientation: landscape)": {
                minHeight: 48
              }
            },
            [breakpoints.up("sm")]: {
              minHeight: 64
            }
          }
        }, mixins);
      }
    }
  });

  // node_modules/@mui/material/colors/common.js
  var require_common = __commonJS({
    "node_modules/@mui/material/colors/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var common2 = {
        black: "#000",
        white: "#fff"
      };
      var _default = common2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/colors/grey.js
  var require_grey = __commonJS({
    "node_modules/@mui/material/colors/grey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var grey2 = {
        50: "#fafafa",
        100: "#f5f5f5",
        200: "#eeeeee",
        300: "#e0e0e0",
        400: "#bdbdbd",
        500: "#9e9e9e",
        600: "#757575",
        700: "#616161",
        800: "#424242",
        900: "#212121",
        A100: "#f5f5f5",
        A200: "#eeeeee",
        A400: "#bdbdbd",
        A700: "#616161"
      };
      var _default = grey2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/colors/purple.js
  var require_purple = __commonJS({
    "node_modules/@mui/material/colors/purple.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var purple2 = {
        50: "#f3e5f5",
        100: "#e1bee7",
        200: "#ce93d8",
        300: "#ba68c8",
        400: "#ab47bc",
        500: "#9c27b0",
        600: "#8e24aa",
        700: "#7b1fa2",
        800: "#6a1b9a",
        900: "#4a148c",
        A100: "#ea80fc",
        A200: "#e040fb",
        A400: "#d500f9",
        A700: "#aa00ff"
      };
      var _default = purple2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/colors/red.js
  var require_red = __commonJS({
    "node_modules/@mui/material/colors/red.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var red2 = {
        50: "#ffebee",
        100: "#ffcdd2",
        200: "#ef9a9a",
        300: "#e57373",
        400: "#ef5350",
        500: "#f44336",
        600: "#e53935",
        700: "#d32f2f",
        800: "#c62828",
        900: "#b71c1c",
        A100: "#ff8a80",
        A200: "#ff5252",
        A400: "#ff1744",
        A700: "#d50000"
      };
      var _default = red2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/colors/orange.js
  var require_orange = __commonJS({
    "node_modules/@mui/material/colors/orange.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var orange2 = {
        50: "#fff3e0",
        100: "#ffe0b2",
        200: "#ffcc80",
        300: "#ffb74d",
        400: "#ffa726",
        500: "#ff9800",
        600: "#fb8c00",
        700: "#f57c00",
        800: "#ef6c00",
        900: "#e65100",
        A100: "#ffd180",
        A200: "#ffab40",
        A400: "#ff9100",
        A700: "#ff6d00"
      };
      var _default = orange2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/colors/blue.js
  var require_blue = __commonJS({
    "node_modules/@mui/material/colors/blue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var blue2 = {
        50: "#e3f2fd",
        100: "#bbdefb",
        200: "#90caf9",
        300: "#64b5f6",
        400: "#42a5f5",
        500: "#2196f3",
        600: "#1e88e5",
        700: "#1976d2",
        800: "#1565c0",
        900: "#0d47a1",
        A100: "#82b1ff",
        A200: "#448aff",
        A400: "#2979ff",
        A700: "#2962ff"
      };
      var _default = blue2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/colors/lightBlue.js
  var require_lightBlue = __commonJS({
    "node_modules/@mui/material/colors/lightBlue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var lightBlue2 = {
        50: "#e1f5fe",
        100: "#b3e5fc",
        200: "#81d4fa",
        300: "#4fc3f7",
        400: "#29b6f6",
        500: "#03a9f4",
        600: "#039be5",
        700: "#0288d1",
        800: "#0277bd",
        900: "#01579b",
        A100: "#80d8ff",
        A200: "#40c4ff",
        A400: "#00b0ff",
        A700: "#0091ea"
      };
      var _default = lightBlue2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/colors/green.js
  var require_green = __commonJS({
    "node_modules/@mui/material/colors/green.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var green2 = {
        50: "#e8f5e9",
        100: "#c8e6c9",
        200: "#a5d6a7",
        300: "#81c784",
        400: "#66bb6a",
        500: "#4caf50",
        600: "#43a047",
        700: "#388e3c",
        800: "#2e7d32",
        900: "#1b5e20",
        A100: "#b9f6ca",
        A200: "#69f0ae",
        A400: "#00e676",
        A700: "#00c853"
      };
      var _default = green2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/styles/createPalette.js
  var require_createPalette = __commonJS({
    "node_modules/@mui/material/styles/createPalette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.dark = void 0;
      exports.default = createPalette2;
      exports.light = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _system = require_system();
      var _common = _interopRequireDefault(require_common());
      var _grey = _interopRequireDefault(require_grey());
      var _purple = _interopRequireDefault(require_purple());
      var _red = _interopRequireDefault(require_red());
      var _orange = _interopRequireDefault(require_orange());
      var _blue = _interopRequireDefault(require_blue());
      var _lightBlue = _interopRequireDefault(require_lightBlue());
      var _green = _interopRequireDefault(require_green());
      var _excluded32 = ["mode", "contrastThreshold", "tonalOffset"];
      var light2 = {
        text: {
          primary: "rgba(0, 0, 0, 0.87)",
          secondary: "rgba(0, 0, 0, 0.6)",
          disabled: "rgba(0, 0, 0, 0.38)"
        },
        divider: "rgba(0, 0, 0, 0.12)",
        background: {
          paper: _common.default.white,
          default: _common.default.white
        },
        action: {
          active: "rgba(0, 0, 0, 0.54)",
          hover: "rgba(0, 0, 0, 0.04)",
          hoverOpacity: 0.04,
          selected: "rgba(0, 0, 0, 0.08)",
          selectedOpacity: 0.08,
          disabled: "rgba(0, 0, 0, 0.26)",
          disabledBackground: "rgba(0, 0, 0, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(0, 0, 0, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.12
        }
      };
      exports.light = light2;
      var dark2 = {
        text: {
          primary: _common.default.white,
          secondary: "rgba(255, 255, 255, 0.7)",
          disabled: "rgba(255, 255, 255, 0.5)",
          icon: "rgba(255, 255, 255, 0.5)"
        },
        divider: "rgba(255, 255, 255, 0.12)",
        background: {
          paper: "#121212",
          default: "#121212"
        },
        action: {
          active: _common.default.white,
          hover: "rgba(255, 255, 255, 0.08)",
          hoverOpacity: 0.08,
          selected: "rgba(255, 255, 255, 0.16)",
          selectedOpacity: 0.16,
          disabled: "rgba(255, 255, 255, 0.3)",
          disabledBackground: "rgba(255, 255, 255, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(255, 255, 255, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.24
        }
      };
      exports.dark = dark2;
      function addLightOrDark2(intent, direction, shade, tonalOffset) {
        const tonalOffsetLight = tonalOffset.light || tonalOffset;
        const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
        if (!intent[direction]) {
          if (intent.hasOwnProperty(shade)) {
            intent[direction] = intent[shade];
          } else if (direction === "light") {
            intent.light = (0, _system.lighten)(intent.main, tonalOffsetLight);
          } else if (direction === "dark") {
            intent.dark = (0, _system.darken)(intent.main, tonalOffsetDark);
          }
        }
      }
      function getDefaultPrimary2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _blue.default[200],
            light: _blue.default[50],
            dark: _blue.default[400]
          };
        }
        return {
          main: _blue.default[700],
          light: _blue.default[400],
          dark: _blue.default[800]
        };
      }
      function getDefaultSecondary2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _purple.default[200],
            light: _purple.default[50],
            dark: _purple.default[400]
          };
        }
        return {
          main: _purple.default[500],
          light: _purple.default[300],
          dark: _purple.default[700]
        };
      }
      function getDefaultError2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _red.default[500],
            light: _red.default[300],
            dark: _red.default[700]
          };
        }
        return {
          main: _red.default[700],
          light: _red.default[400],
          dark: _red.default[800]
        };
      }
      function getDefaultInfo2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _lightBlue.default[400],
            light: _lightBlue.default[300],
            dark: _lightBlue.default[700]
          };
        }
        return {
          main: _lightBlue.default[700],
          light: _lightBlue.default[500],
          dark: _lightBlue.default[900]
        };
      }
      function getDefaultSuccess2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _green.default[400],
            light: _green.default[300],
            dark: _green.default[700]
          };
        }
        return {
          main: _green.default[800],
          light: _green.default[500],
          dark: _green.default[900]
        };
      }
      function getDefaultWarning2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _orange.default[400],
            light: _orange.default[300],
            dark: _orange.default[700]
          };
        }
        return {
          main: "#ed6c02",
          light: _orange.default[500],
          dark: _orange.default[900]
        };
      }
      function createPalette2(palette) {
        const {
          mode = "light",
          contrastThreshold = 3,
          tonalOffset = 0.2
        } = palette, other = (0, _objectWithoutPropertiesLoose2.default)(palette, _excluded32);
        const primary = palette.primary || getDefaultPrimary2(mode);
        const secondary = palette.secondary || getDefaultSecondary2(mode);
        const error = palette.error || getDefaultError2(mode);
        const info = palette.info || getDefaultInfo2(mode);
        const success = palette.success || getDefaultSuccess2(mode);
        const warning = palette.warning || getDefaultWarning2(mode);
        function getContrastText(background) {
          const contrastText = (0, _system.getContrastRatio)(background, dark2.text.primary) >= contrastThreshold ? dark2.text.primary : light2.text.primary;
          if (true) {
            const contrast = (0, _system.getContrastRatio)(background, contrastText);
            if (contrast < 3) {
              console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
            }
          }
          return contrastText;
        }
        const augmentColor = ({
          color,
          name,
          mainShade = 500,
          lightShade = 300,
          darkShade = 700
        }) => {
          color = (0, _extends2.default)({}, color);
          if (!color.main && color[mainShade]) {
            color.main = color[mainShade];
          }
          if (!color.hasOwnProperty("main")) {
            throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, _utils.formatMuiErrorMessage)(11, name ? ` (${name})` : "", mainShade));
          }
          if (typeof color.main !== "string") {
            throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, _utils.formatMuiErrorMessage)(12, name ? ` (${name})` : "", JSON.stringify(color.main)));
          }
          addLightOrDark2(color, "light", lightShade, tonalOffset);
          addLightOrDark2(color, "dark", darkShade, tonalOffset);
          if (!color.contrastText) {
            color.contrastText = getContrastText(color.main);
          }
          return color;
        };
        const modes = {
          dark: dark2,
          light: light2
        };
        if (true) {
          if (!modes[mode]) {
            console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
          }
        }
        const paletteOutput = (0, _utils.deepmerge)((0, _extends2.default)({
          common: (0, _extends2.default)({}, _common.default),
          mode,
          primary: augmentColor({
            color: primary,
            name: "primary"
          }),
          secondary: augmentColor({
            color: secondary,
            name: "secondary",
            mainShade: "A400",
            lightShade: "A200",
            darkShade: "A700"
          }),
          error: augmentColor({
            color: error,
            name: "error"
          }),
          warning: augmentColor({
            color: warning,
            name: "warning"
          }),
          info: augmentColor({
            color: info,
            name: "info"
          }),
          success: augmentColor({
            color: success,
            name: "success"
          }),
          grey: _grey.default,
          contrastThreshold,
          getContrastText,
          augmentColor,
          tonalOffset
        }, modes[mode]), other);
        return paletteOutput;
      }
    }
  });

  // node_modules/@mui/material/styles/createTypography.js
  var require_createTypography = __commonJS({
    "node_modules/@mui/material/styles/createTypography.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTypography2;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _excluded32 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
      function round2(value) {
        return Math.round(value * 1e5) / 1e5;
      }
      var caseAllCaps2 = {
        textTransform: "uppercase"
      };
      var defaultFontFamily2 = '"Roboto", "Helvetica", "Arial", sans-serif';
      function createTypography2(palette, typography) {
        const _ref = typeof typography === "function" ? typography(palette) : typography, {
          fontFamily = defaultFontFamily2,
          fontSize = 14,
          fontWeightLight = 300,
          fontWeightRegular = 400,
          fontWeightMedium = 500,
          fontWeightBold = 700,
          htmlFontSize = 16,
          allVariants,
          pxToRem: pxToRem2
        } = _ref, other = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded32);
        if (true) {
          if (typeof fontSize !== "number") {
            console.error("MUI: `fontSize` is required to be a number.");
          }
          if (typeof htmlFontSize !== "number") {
            console.error("MUI: `htmlFontSize` is required to be a number.");
          }
        }
        const coef = fontSize / 14;
        const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
        const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => (0, _extends2.default)({
          fontFamily,
          fontWeight,
          fontSize: pxToRem(size),
          lineHeight
        }, fontFamily === defaultFontFamily2 ? {
          letterSpacing: `${round2(letterSpacing / size)}em`
        } : {}, casing, allVariants);
        const variants = {
          h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
          h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
          h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
          h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
          h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
          h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
          subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
          subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
          body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
          body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
          button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps2),
          caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
          overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps2)
        };
        return (0, _utils.deepmerge)((0, _extends2.default)({
          htmlFontSize,
          pxToRem,
          fontFamily,
          fontSize,
          fontWeightLight,
          fontWeightRegular,
          fontWeightMedium,
          fontWeightBold
        }, variants), other, {
          clone: false
        });
      }
    }
  });

  // node_modules/@mui/material/styles/shadows.js
  var require_shadows2 = __commonJS({
    "node_modules/@mui/material/styles/shadows.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shadowKeyUmbraOpacity2 = 0.2;
      var shadowKeyPenumbraOpacity2 = 0.14;
      var shadowAmbientShadowOpacity2 = 0.12;
      function createShadow2(...px) {
        return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity2})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity2})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity2})`].join(",");
      }
      var shadows2 = ["none", createShadow2(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow2(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow2(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow2(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow2(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow2(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow2(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow2(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow2(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow2(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow2(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow2(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow2(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow2(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow2(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow2(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow2(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow2(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow2(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow2(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow2(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow2(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow2(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow2(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
      var _default = shadows2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/styles/createTransitions.js
  var require_createTransitions = __commonJS({
    "node_modules/@mui/material/styles/createTransitions.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTransitions2;
      exports.easing = exports.duration = void 0;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var _excluded32 = ["duration", "easing", "delay"];
      var easing2 = {
        easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
        easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
        easeIn: "cubic-bezier(0.4, 0, 1, 1)",
        sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
      };
      exports.easing = easing2;
      var duration2 = {
        shortest: 150,
        shorter: 200,
        short: 250,
        standard: 300,
        complex: 375,
        enteringScreen: 225,
        leavingScreen: 195
      };
      exports.duration = duration2;
      function formatMs2(milliseconds) {
        return `${Math.round(milliseconds)}ms`;
      }
      function getAutoHeightDuration2(height) {
        if (!height) {
          return 0;
        }
        const constant = height / 36;
        return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
      }
      function createTransitions2(inputTransitions) {
        const mergedEasing = (0, _extends2.default)({}, easing2, inputTransitions.easing);
        const mergedDuration = (0, _extends2.default)({}, duration2, inputTransitions.duration);
        const create = (props2 = ["all"], options = {}) => {
          const {
            duration: durationOption = mergedDuration.standard,
            easing: easingOption = mergedEasing.easeInOut,
            delay: delay2 = 0
          } = options, other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded32);
          if (true) {
            const isString = (value) => typeof value === "string";
            const isNumber = (value) => !isNaN(parseFloat(value));
            if (!isString(props2) && !Array.isArray(props2)) {
              console.error('MUI: Argument "props" must be a string or Array.');
            }
            if (!isNumber(durationOption) && !isString(durationOption)) {
              console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
            }
            if (!isString(easingOption)) {
              console.error('MUI: Argument "easing" must be a string.');
            }
            if (!isNumber(delay2) && !isString(delay2)) {
              console.error('MUI: Argument "delay" must be a number or a string.');
            }
            if (Object.keys(other).length !== 0) {
              console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
            }
          }
          return (Array.isArray(props2) ? props2 : [props2]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs2(durationOption)} ${easingOption} ${typeof delay2 === "string" ? delay2 : formatMs2(delay2)}`).join(",");
        };
        return (0, _extends2.default)({
          getAutoHeightDuration: getAutoHeightDuration2,
          create
        }, inputTransitions, {
          easing: mergedEasing,
          duration: mergedDuration
        });
      }
    }
  });

  // node_modules/@mui/material/styles/zIndex.js
  var require_zIndex = __commonJS({
    "node_modules/@mui/material/styles/zIndex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var zIndex2 = {
        mobileStepper: 1e3,
        fab: 1050,
        speedDial: 1050,
        appBar: 1100,
        drawer: 1200,
        modal: 1300,
        snackbar: 1400,
        tooltip: 1500
      };
      var _default = zIndex2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/styles/createTheme.js
  var require_createTheme3 = __commonJS({
    "node_modules/@mui/material/styles/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createMuiTheme = createMuiTheme2;
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _base = require_node3();
      var _system = require_system();
      var _createMixins = _interopRequireDefault(require_createMixins());
      var _createPalette = _interopRequireDefault(require_createPalette());
      var _createTypography = _interopRequireDefault(require_createTypography());
      var _shadows = _interopRequireDefault(require_shadows2());
      var _createTransitions = _interopRequireDefault(require_createTransitions());
      var _zIndex = _interopRequireDefault(require_zIndex());
      var _excluded32 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
      function createTheme2(options = {}, ...args) {
        const {
          mixins: mixinsInput = {},
          palette: paletteInput = {},
          transitions: transitionsInput = {},
          typography: typographyInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded32);
        if (options.vars) {
          throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, _utils.formatMuiErrorMessage)(18));
        }
        const palette = (0, _createPalette.default)(paletteInput);
        const systemTheme = (0, _system.createTheme)(options);
        let muiTheme = (0, _utils.deepmerge)(systemTheme, {
          mixins: (0, _createMixins.default)(systemTheme.breakpoints, mixinsInput),
          palette,
          shadows: _shadows.default.slice(),
          typography: (0, _createTypography.default)(palette, typographyInput),
          transitions: (0, _createTransitions.default)(transitionsInput),
          zIndex: (0, _extends2.default)({}, _zIndex.default)
        });
        muiTheme = (0, _utils.deepmerge)(muiTheme, other);
        muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
        if (true) {
          const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
          const traverse = (node, component) => {
            let key;
            for (key in node) {
              const child = node[key];
              if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
                if (true) {
                  const stateClass = (0, _base.generateUtilityClass)("", key);
                  console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                    root: {
                      [`&.${stateClass}`]: child
                    }
                  }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
                }
                node[key] = {};
              }
            }
          };
          Object.keys(muiTheme.components).forEach((component) => {
            const styleOverrides = muiTheme.components[component].styleOverrides;
            if (styleOverrides && component.indexOf("Mui") === 0) {
              traverse(styleOverrides, component);
            }
          });
        }
        return muiTheme;
      }
      var warnedOnce = false;
      function createMuiTheme2(...args) {
        if (true) {
          if (!warnedOnce) {
            warnedOnce = true;
            console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
          }
        }
        return createTheme2(...args);
      }
      var _default = createTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/styles/defaultTheme.js
  var require_defaultTheme = __commonJS({
    "node_modules/@mui/material/styles/defaultTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme3());
      var defaultTheme3 = (0, _createTheme.default)();
      var _default = defaultTheme3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/styles/useThemeProps.js
  var require_useThemeProps3 = __commonJS({
    "node_modules/@mui/material/styles/useThemeProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useThemeProps2;
      var _system = require_system();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      function useThemeProps2({
        props: props2,
        name
      }) {
        return (0, _system.useThemeProps)({
          props: props2,
          name,
          defaultTheme: _defaultTheme.default
        });
      }
    }
  });

  // node_modules/@mui/material/styles/styled.js
  var require_styled2 = __commonJS({
    "node_modules/@mui/material/styles/styled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.slotShouldForwardProp = exports.rootShouldForwardProp = exports.default = void 0;
      var _system = require_system();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var rootShouldForwardProp2 = (prop) => (0, _system.shouldForwardProp)(prop) && prop !== "classes";
      exports.rootShouldForwardProp = rootShouldForwardProp2;
      var slotShouldForwardProp2 = _system.shouldForwardProp;
      exports.slotShouldForwardProp = slotShouldForwardProp2;
      var styled2 = (0, _system.createStyled)({
        defaultTheme: _defaultTheme.default,
        rootShouldForwardProp: rootShouldForwardProp2
      });
      var _default = styled2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/SvgIcon/svgIconClasses.js
  var require_svgIconClasses = __commonJS({
    "node_modules/@mui/material/SvgIcon/svgIconClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSvgIconUtilityClass = getSvgIconUtilityClass2;
      var _base = require_node3();
      function getSvgIconUtilityClass2(slot) {
        return (0, _base.generateUtilityClass)("MuiSvgIcon", slot);
      }
      var svgIconClasses2 = (0, _base.generateUtilityClasses)("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
      var _default = svgIconClasses2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  var require_SvgIcon = __commonJS({
    "node_modules/@mui/material/SvgIcon/SvgIcon.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React59 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _base = require_node3();
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps3());
      var _styled = _interopRequireDefault(require_styled2());
      var _svgIconClasses = require_svgIconClasses();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded32 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses21 = (ownerState) => {
        const {
          color,
          fontSize,
          classes
        } = ownerState;
        const slots = {
          root: ["root", color !== "inherit" && `color${(0, _capitalize.default)(color)}`, `fontSize${(0, _capitalize.default)(fontSize)}`]
        };
        return (0, _base.unstable_composeClasses)(slots, _svgIconClasses.getSvgIconUtilityClass, classes);
      };
      var SvgIconRoot2 = (0, _styled.default)("svg", {
        name: "MuiSvgIcon",
        slot: "Root",
        overridesResolver: (props2, styles3) => {
          const {
            ownerState
          } = props2;
          return [styles3.root, ownerState.color !== "inherit" && styles3[`color${(0, _capitalize.default)(ownerState.color)}`], styles3[`fontSize${(0, _capitalize.default)(ownerState.fontSize)}`]];
        }
      })(({
        theme: theme2,
        ownerState
      }) => {
        var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
        return {
          userSelect: "none",
          width: "1em",
          height: "1em",
          display: "inline-block",
          fill: "currentColor",
          flexShrink: 0,
          transition: (_theme$transitions = theme2.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
            duration: (_theme$transitions2 = theme2.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
          }),
          fontSize: {
            inherit: "inherit",
            small: ((_theme$typography = theme2.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
            medium: ((_theme$typography2 = theme2.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
            large: ((_theme$typography3 = theme2.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
          }[ownerState.fontSize],
          color: (_palette$ownerState$c = (_palette = (theme2.vars || theme2).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
            action: (_palette2 = (theme2.vars || theme2).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
            disabled: (_palette3 = (theme2.vars || theme2).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
            inherit: void 0
          }[ownerState.color]
        };
      });
      var SvgIcon4 = /* @__PURE__ */ React59.forwardRef(function SvgIcon5(inProps, ref) {
        const props2 = (0, _useThemeProps.default)({
          props: inProps,
          name: "MuiSvgIcon"
        });
        const {
          children,
          className,
          color = "inherit",
          component = "svg",
          fontSize = "medium",
          htmlColor,
          inheritViewBox = false,
          titleAccess,
          viewBox = "0 0 24 24"
        } = props2, other = (0, _objectWithoutPropertiesLoose2.default)(props2, _excluded32);
        const ownerState = (0, _extends2.default)({}, props2, {
          color,
          component,
          fontSize,
          instanceFontSize: inProps.fontSize,
          inheritViewBox,
          viewBox
        });
        const more = {};
        if (!inheritViewBox) {
          more.viewBox = viewBox;
        }
        const classes = useUtilityClasses21(ownerState);
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(SvgIconRoot2, (0, _extends2.default)({
          as: component,
          className: (0, _clsx.default)(classes.root, className),
          focusable: "false",
          color: htmlColor,
          "aria-hidden": titleAccess ? void 0 : true,
          role: titleAccess ? "img" : void 0,
          ref
        }, more, other, {
          ownerState,
          children: [children, titleAccess ? /* @__PURE__ */ (0, _jsxRuntime.jsx)("title", {
            children: titleAccess
          }) : null]
        }));
      });
      true ? SvgIcon4.propTypes = {
        children: _propTypes.default.node,
        classes: _propTypes.default.object,
        className: _propTypes.default.string,
        color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
        component: _propTypes.default.elementType,
        fontSize: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "large", "medium", "small"]), _propTypes.default.string]),
        htmlColor: _propTypes.default.string,
        inheritViewBox: _propTypes.default.bool,
        shapeRendering: _propTypes.default.string,
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        titleAccess: _propTypes.default.string,
        viewBox: _propTypes.default.string
      } : void 0;
      SvgIcon4.muiName = "SvgIcon";
      var _default = SvgIcon4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/SvgIcon/index.js
  var require_SvgIcon2 = __commonJS({
    "node_modules/@mui/material/SvgIcon/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        svgIconClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _SvgIcon.default;
        }
      });
      Object.defineProperty(exports, "svgIconClasses", {
        enumerable: true,
        get: function() {
          return _svgIconClasses.default;
        }
      });
      var _SvgIcon = _interopRequireDefault(require_SvgIcon());
      var _svgIconClasses = _interopRequireWildcard(require_svgIconClasses());
      Object.keys(_svgIconClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _svgIconClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _svgIconClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/material/utils/createSvgIcon.js
  var require_createSvgIcon = __commonJS({
    "node_modules/@mui/material/utils/createSvgIcon.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSvgIcon2;
      var _extends2 = _interopRequireDefault(require_extends());
      var React59 = _interopRequireWildcard(require_react());
      var _SvgIcon = _interopRequireDefault(require_SvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function createSvgIcon2(path, displayName) {
        const Component = (props2, ref) => /* @__PURE__ */ (0, _jsxRuntime.jsx)(_SvgIcon.default, (0, _extends2.default)({
          "data-testid": `${displayName}Icon`,
          ref
        }, props2, {
          children: path
        }));
        if (true) {
          Component.displayName = `${displayName}Icon`;
        }
        Component.muiName = _SvgIcon.default.muiName;
        return /* @__PURE__ */ React59.memo(/* @__PURE__ */ React59.forwardRef(Component));
      }
    }
  });

  // node_modules/@mui/material/utils/debounce.js
  var require_debounce2 = __commonJS({
    "node_modules/@mui/material/utils/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_debounce;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/deprecatedPropType.js
  var require_deprecatedPropType2 = __commonJS({
    "node_modules/@mui/material/utils/deprecatedPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_deprecatedPropType;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/isMuiElement.js
  var require_isMuiElement2 = __commonJS({
    "node_modules/@mui/material/utils/isMuiElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_isMuiElement;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/ownerDocument.js
  var require_ownerDocument2 = __commonJS({
    "node_modules/@mui/material/utils/ownerDocument.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_ownerDocument;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/ownerWindow.js
  var require_ownerWindow2 = __commonJS({
    "node_modules/@mui/material/utils/ownerWindow.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_ownerWindow;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/requirePropFactory.js
  var require_requirePropFactory2 = __commonJS({
    "node_modules/@mui/material/utils/requirePropFactory.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_requirePropFactory;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/setRef.js
  var require_setRef2 = __commonJS({
    "node_modules/@mui/material/utils/setRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_setRef;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  var require_useEnhancedEffect2 = __commonJS({
    "node_modules/@mui/material/utils/useEnhancedEffect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useEnhancedEffect;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/useId.js
  var require_useId2 = __commonJS({
    "node_modules/@mui/material/utils/useId.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useId;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/unsupportedProp.js
  var require_unsupportedProp2 = __commonJS({
    "node_modules/@mui/material/utils/unsupportedProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_unsupportedProp;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/useControlled.js
  var require_useControlled2 = __commonJS({
    "node_modules/@mui/material/utils/useControlled.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useControlled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/useEventCallback.js
  var require_useEventCallback2 = __commonJS({
    "node_modules/@mui/material/utils/useEventCallback.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useEventCallback;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/useForkRef.js
  var require_useForkRef2 = __commonJS({
    "node_modules/@mui/material/utils/useForkRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useForkRef;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/useIsFocusVisible.js
  var require_useIsFocusVisible2 = __commonJS({
    "node_modules/@mui/material/utils/useIsFocusVisible.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useIsFocusVisible;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/utils/index.js
  var require_utils4 = __commonJS({
    "node_modules/@mui/material/utils/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "capitalize", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "createChainedFunction", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "createSvgIcon", {
        enumerable: true,
        get: function() {
          return _createSvgIcon.default;
        }
      });
      Object.defineProperty(exports, "debounce", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "deprecatedPropType", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "isMuiElement", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "ownerDocument", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "ownerWindow", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "requirePropFactory", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "setRef", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      exports.unstable_ClassNameGenerator = void 0;
      Object.defineProperty(exports, "unstable_useEnhancedEffect", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      Object.defineProperty(exports, "unsupportedProp", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "useControlled", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "useEventCallback", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "useForkRef", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "useIsFocusVisible", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      var _className = require_className();
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction2());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
      var _debounce = _interopRequireDefault(require_debounce2());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType2());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement2());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow2());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory2());
      var _setRef = _interopRequireDefault(require_setRef2());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
      var _useId = _interopRequireDefault(require_useId2());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
      var _useControlled = _interopRequireDefault(require_useControlled2());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
      var _useForkRef = _interopRequireDefault(require_useForkRef2());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible2());
      var unstable_ClassNameGenerator2 = {
        configure: (generator) => {
          console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
          _className.unstable_ClassNameGenerator.configure(generator);
        }
      };
      exports.unstable_ClassNameGenerator = unstable_ClassNameGenerator2;
    }
  });

  // node_modules/@mui/icons-material/utils/createSvgIcon.js
  var require_createSvgIcon2 = __commonJS({
    "node_modules/@mui/icons-material/utils/createSvgIcon.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.createSvgIcon;
        }
      });
      var _utils = require_utils4();
    }
  });

  // node_modules/@mui/icons-material/Menu.js
  var require_Menu = __commonJS({
    "node_modules/@mui/icons-material/Menu.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
      }), "Menu");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/Download.js
  var require_Download = __commonJS({
    "node_modules/@mui/icons-material/Download.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z"
      }), "Download");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/ChevronLeft.js
  var require_ChevronLeft = __commonJS({
    "node_modules/@mui/icons-material/ChevronLeft.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"
      }), "ChevronLeft");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/BarChart.js
  var require_BarChart = __commonJS({
    "node_modules/@mui/icons-material/BarChart.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M4 9h4v11H4zm12 4h4v7h-4zm-6-9h4v16h-4z"
      }), "BarChart");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/LiveTv.js
  var require_LiveTv = __commonJS({
    "node_modules/@mui/icons-material/LiveTv.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M21 6h-7.59l3.29-3.29L16 2l-4 4-4-4-.71.71L10.59 6H3c-1.1 0-2 .89-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.11-.9-2-2-2zm0 14H3V8h18v12zM9 10v8l7-4z"
      }), "LiveTv");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/Memory.js
  var require_Memory = __commonJS({
    "node_modules/@mui/icons-material/Memory.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M15 9H9v6h6V9zm-2 4h-2v-2h2v2zm8-2V9h-2V7c0-1.1-.9-2-2-2h-2V3h-2v2h-2V3H9v2H7c-1.1 0-2 .9-2 2v2H3v2h2v2H3v2h2v2c0 1.1.9 2 2 2h2v2h2v-2h2v2h2v-2h2c1.1 0 2-.9 2-2v-2h2v-2h-2v-2h2zm-4 6H7V7h10v10z"
      }), "Memory");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/PauseCircle.js
  var require_PauseCircle = __commonJS({
    "node_modules/@mui/icons-material/PauseCircle.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 14H9V8h2v8zm4 0h-2V8h2v8z"
      }), "PauseCircle");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/PlayCircle.js
  var require_PlayCircle = __commonJS({
    "node_modules/@mui/icons-material/PlayCircle.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM9.5 16.5v-9l7 4.5-7 4.5z"
      }), "PlayCircle");
      exports.default = _default;
    }
  });

  // node_modules/apexcharts/dist/apexcharts.common.js
  var require_apexcharts_common = __commonJS({
    "node_modules/apexcharts/dist/apexcharts.common.js"(exports, module) {
      "use strict";
      function t(t2, e2) {
        var i2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var a2 = Object.getOwnPropertySymbols(t2);
          e2 && (a2 = a2.filter(function(e3) {
            return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
          })), i2.push.apply(i2, a2);
        }
        return i2;
      }
      function e(e2) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var a2 = null != arguments[i2] ? arguments[i2] : {};
          i2 % 2 ? t(Object(a2), true).forEach(function(t2) {
            o(e2, t2, a2[t2]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(a2)) : t(Object(a2)).forEach(function(t2) {
            Object.defineProperty(e2, t2, Object.getOwnPropertyDescriptor(a2, t2));
          });
        }
        return e2;
      }
      function i(t2) {
        return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
          return typeof t3;
        } : function(t3) {
          return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
        }, i(t2);
      }
      function a(t2, e2) {
        if (!(t2 instanceof e2))
          throw new TypeError("Cannot call a class as a function");
      }
      function s(t2, e2) {
        for (var i2 = 0; i2 < e2.length; i2++) {
          var a2 = e2[i2];
          a2.enumerable = a2.enumerable || false, a2.configurable = true, "value" in a2 && (a2.writable = true), Object.defineProperty(t2, a2.key, a2);
        }
      }
      function r(t2, e2, i2) {
        return e2 && s(t2.prototype, e2), i2 && s(t2, i2), t2;
      }
      function o(t2, e2, i2) {
        return e2 in t2 ? Object.defineProperty(t2, e2, { value: i2, enumerable: true, configurable: true, writable: true }) : t2[e2] = i2, t2;
      }
      function n(t2, e2) {
        if ("function" != typeof e2 && null !== e2)
          throw new TypeError("Super expression must either be null or a function");
        t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && h(t2, e2);
      }
      function l(t2) {
        return l = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
          return t3.__proto__ || Object.getPrototypeOf(t3);
        }, l(t2);
      }
      function h(t2, e2) {
        return h = Object.setPrototypeOf || function(t3, e3) {
          return t3.__proto__ = e3, t3;
        }, h(t2, e2);
      }
      function c(t2, e2) {
        if (e2 && ("object" == typeof e2 || "function" == typeof e2))
          return e2;
        if (void 0 !== e2)
          throw new TypeError("Derived constructors may only return object or undefined");
        return function(t3) {
          if (void 0 === t3)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return t3;
        }(t2);
      }
      function d(t2) {
        var e2 = function() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }();
        return function() {
          var i2, a2 = l(t2);
          if (e2) {
            var s2 = l(this).constructor;
            i2 = Reflect.construct(a2, arguments, s2);
          } else
            i2 = a2.apply(this, arguments);
          return c(this, i2);
        };
      }
      function g(t2, e2) {
        return function(t3) {
          if (Array.isArray(t3))
            return t3;
        }(t2) || function(t3, e3) {
          var i2 = null == t3 ? null : "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
          if (null == i2)
            return;
          var a2, s2, r2 = [], o2 = true, n2 = false;
          try {
            for (i2 = i2.call(t3); !(o2 = (a2 = i2.next()).done) && (r2.push(a2.value), !e3 || r2.length !== e3); o2 = true)
              ;
          } catch (t4) {
            n2 = true, s2 = t4;
          } finally {
            try {
              o2 || null == i2.return || i2.return();
            } finally {
              if (n2)
                throw s2;
            }
          }
          return r2;
        }(t2, e2) || f(t2, e2) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function u(t2) {
        return function(t3) {
          if (Array.isArray(t3))
            return p(t3);
        }(t2) || function(t3) {
          if ("undefined" != typeof Symbol && null != t3[Symbol.iterator] || null != t3["@@iterator"])
            return Array.from(t3);
        }(t2) || f(t2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function f(t2, e2) {
        if (t2) {
          if ("string" == typeof t2)
            return p(t2, e2);
          var i2 = Object.prototype.toString.call(t2).slice(8, -1);
          return "Object" === i2 && t2.constructor && (i2 = t2.constructor.name), "Map" === i2 || "Set" === i2 ? Array.from(t2) : "Arguments" === i2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i2) ? p(t2, e2) : void 0;
        }
      }
      function p(t2, e2) {
        (null == e2 || e2 > t2.length) && (e2 = t2.length);
        for (var i2 = 0, a2 = new Array(e2); i2 < e2; i2++)
          a2[i2] = t2[i2];
        return a2;
      }
      var x = function() {
        function t2() {
          a(this, t2);
        }
        return r(t2, [{ key: "shadeRGBColor", value: function(t3, e2) {
          var i2 = e2.split(","), a2 = t3 < 0 ? 0 : 255, s2 = t3 < 0 ? -1 * t3 : t3, r2 = parseInt(i2[0].slice(4), 10), o2 = parseInt(i2[1], 10), n2 = parseInt(i2[2], 10);
          return "rgb(" + (Math.round((a2 - r2) * s2) + r2) + "," + (Math.round((a2 - o2) * s2) + o2) + "," + (Math.round((a2 - n2) * s2) + n2) + ")";
        } }, { key: "shadeHexColor", value: function(t3, e2) {
          var i2 = parseInt(e2.slice(1), 16), a2 = t3 < 0 ? 0 : 255, s2 = t3 < 0 ? -1 * t3 : t3, r2 = i2 >> 16, o2 = i2 >> 8 & 255, n2 = 255 & i2;
          return "#" + (16777216 + 65536 * (Math.round((a2 - r2) * s2) + r2) + 256 * (Math.round((a2 - o2) * s2) + o2) + (Math.round((a2 - n2) * s2) + n2)).toString(16).slice(1);
        } }, { key: "shadeColor", value: function(e2, i2) {
          return t2.isColorHex(i2) ? this.shadeHexColor(e2, i2) : this.shadeRGBColor(e2, i2);
        } }], [{ key: "bind", value: function(t3, e2) {
          return function() {
            return t3.apply(e2, arguments);
          };
        } }, { key: "isObject", value: function(t3) {
          return t3 && "object" === i(t3) && !Array.isArray(t3) && null != t3;
        } }, { key: "is", value: function(t3, e2) {
          return Object.prototype.toString.call(e2) === "[object " + t3 + "]";
        } }, { key: "listToArray", value: function(t3) {
          var e2, i2 = [];
          for (e2 = 0; e2 < t3.length; e2++)
            i2[e2] = t3[e2];
          return i2;
        } }, { key: "extend", value: function(t3, e2) {
          var i2 = this;
          "function" != typeof Object.assign && (Object.assign = function(t4) {
            if (null == t4)
              throw new TypeError("Cannot convert undefined or null to object");
            for (var e3 = Object(t4), i3 = 1; i3 < arguments.length; i3++) {
              var a3 = arguments[i3];
              if (null != a3)
                for (var s2 in a3)
                  a3.hasOwnProperty(s2) && (e3[s2] = a3[s2]);
            }
            return e3;
          });
          var a2 = Object.assign({}, t3);
          return this.isObject(t3) && this.isObject(e2) && Object.keys(e2).forEach(function(s2) {
            i2.isObject(e2[s2]) && s2 in t3 ? a2[s2] = i2.extend(t3[s2], e2[s2]) : Object.assign(a2, o({}, s2, e2[s2]));
          }), a2;
        } }, { key: "extendArray", value: function(e2, i2) {
          var a2 = [];
          return e2.map(function(e3) {
            a2.push(t2.extend(i2, e3));
          }), e2 = a2;
        } }, { key: "monthMod", value: function(t3) {
          return t3 % 12;
        } }, { key: "clone", value: function(e2) {
          if (t2.is("Array", e2)) {
            for (var a2 = [], s2 = 0; s2 < e2.length; s2++)
              a2[s2] = this.clone(e2[s2]);
            return a2;
          }
          if (t2.is("Null", e2))
            return null;
          if (t2.is("Date", e2))
            return e2;
          if ("object" === i(e2)) {
            var r2 = {};
            for (var o2 in e2)
              e2.hasOwnProperty(o2) && (r2[o2] = this.clone(e2[o2]));
            return r2;
          }
          return e2;
        } }, { key: "log10", value: function(t3) {
          return Math.log(t3) / Math.LN10;
        } }, { key: "roundToBase10", value: function(t3) {
          return Math.pow(10, Math.floor(Math.log10(t3)));
        } }, { key: "roundToBase", value: function(t3, e2) {
          return Math.pow(e2, Math.floor(Math.log(t3) / Math.log(e2)));
        } }, { key: "parseNumber", value: function(t3) {
          return null === t3 ? t3 : parseFloat(t3);
        } }, { key: "randomId", value: function() {
          return (Math.random() + 1).toString(36).substring(4);
        } }, { key: "noExponents", value: function(t3) {
          var e2 = String(t3).split(/[eE]/);
          if (1 === e2.length)
            return e2[0];
          var i2 = "", a2 = t3 < 0 ? "-" : "", s2 = e2[0].replace(".", ""), r2 = Number(e2[1]) + 1;
          if (r2 < 0) {
            for (i2 = a2 + "0."; r2++; )
              i2 += "0";
            return i2 + s2.replace(/^-/, "");
          }
          for (r2 -= s2.length; r2--; )
            i2 += "0";
          return s2 + i2;
        } }, { key: "getDimensions", value: function(t3) {
          var e2 = getComputedStyle(t3, null), i2 = t3.clientHeight, a2 = t3.clientWidth;
          return i2 -= parseFloat(e2.paddingTop) + parseFloat(e2.paddingBottom), [a2 -= parseFloat(e2.paddingLeft) + parseFloat(e2.paddingRight), i2];
        } }, { key: "getBoundingClientRect", value: function(t3) {
          var e2 = t3.getBoundingClientRect();
          return { top: e2.top, right: e2.right, bottom: e2.bottom, left: e2.left, width: t3.clientWidth, height: t3.clientHeight, x: e2.left, y: e2.top };
        } }, { key: "getLargestStringFromArr", value: function(t3) {
          return t3.reduce(function(t4, e2) {
            return Array.isArray(e2) && (e2 = e2.reduce(function(t5, e3) {
              return t5.length > e3.length ? t5 : e3;
            })), t4.length > e2.length ? t4 : e2;
          }, 0);
        } }, { key: "hexToRgba", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999", e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0.6;
          "#" !== t3.substring(0, 1) && (t3 = "#999999");
          var i2 = t3.replace("#", "");
          i2 = i2.match(new RegExp("(.{" + i2.length / 3 + "})", "g"));
          for (var a2 = 0; a2 < i2.length; a2++)
            i2[a2] = parseInt(1 === i2[a2].length ? i2[a2] + i2[a2] : i2[a2], 16);
          return void 0 !== e2 && i2.push(e2), "rgba(" + i2.join(",") + ")";
        } }, { key: "getOpacityFromRGBA", value: function(t3) {
          return parseFloat(t3.replace(/^.*,(.+)\)/, "$1"));
        } }, { key: "rgb2hex", value: function(t3) {
          return (t3 = t3.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t3.length ? "#" + ("0" + parseInt(t3[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t3[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t3[3], 10).toString(16)).slice(-2) : "";
        } }, { key: "isColorHex", value: function(t3) {
          return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t3);
        } }, { key: "getPolygonPos", value: function(t3, e2) {
          for (var i2 = [], a2 = 2 * Math.PI / e2, s2 = 0; s2 < e2; s2++) {
            var r2 = {};
            r2.x = t3 * Math.sin(s2 * a2), r2.y = -t3 * Math.cos(s2 * a2), i2.push(r2);
          }
          return i2;
        } }, { key: "polarToCartesian", value: function(t3, e2, i2, a2) {
          var s2 = (a2 - 90) * Math.PI / 180;
          return { x: t3 + i2 * Math.cos(s2), y: e2 + i2 * Math.sin(s2) };
        } }, { key: "escapeString", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x", i2 = t3.toString().slice();
          return i2 = i2.replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, e2);
        } }, { key: "negToZero", value: function(t3) {
          return t3 < 0 ? 0 : t3;
        } }, { key: "moveIndexInArray", value: function(t3, e2, i2) {
          if (i2 >= t3.length)
            for (var a2 = i2 - t3.length + 1; a2--; )
              t3.push(void 0);
          return t3.splice(i2, 0, t3.splice(e2, 1)[0]), t3;
        } }, { key: "extractNumber", value: function(t3) {
          return parseFloat(t3.replace(/[^\d.]*/g, ""));
        } }, { key: "findAncestor", value: function(t3, e2) {
          for (; (t3 = t3.parentElement) && !t3.classList.contains(e2); )
            ;
          return t3;
        } }, { key: "setELstyles", value: function(t3, e2) {
          for (var i2 in e2)
            e2.hasOwnProperty(i2) && (t3.style.key = e2[i2]);
        } }, { key: "isNumber", value: function(t3) {
          return !isNaN(t3) && parseFloat(Number(t3)) === t3 && !isNaN(parseInt(t3, 10));
        } }, { key: "isFloat", value: function(t3) {
          return Number(t3) === t3 && t3 % 1 != 0;
        } }, { key: "isSafari", value: function() {
          return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        } }, { key: "isFirefox", value: function() {
          return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
        } }, { key: "isIE11", value: function() {
          if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1)
            return true;
        } }, { key: "isIE", value: function() {
          var t3 = window.navigator.userAgent, e2 = t3.indexOf("MSIE ");
          if (e2 > 0)
            return parseInt(t3.substring(e2 + 5, t3.indexOf(".", e2)), 10);
          if (t3.indexOf("Trident/") > 0) {
            var i2 = t3.indexOf("rv:");
            return parseInt(t3.substring(i2 + 3, t3.indexOf(".", i2)), 10);
          }
          var a2 = t3.indexOf("Edge/");
          return a2 > 0 && parseInt(t3.substring(a2 + 5, t3.indexOf(".", a2)), 10);
        } }]), t2;
      }();
      var b = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.setEasingFunctions();
        }
        return r(t2, [{ key: "setEasingFunctions", value: function() {
          var t3;
          if (!this.w.globals.easing) {
            switch (this.w.config.chart.animations.easing) {
              case "linear":
                t3 = "-";
                break;
              case "easein":
                t3 = "<";
                break;
              case "easeout":
                t3 = ">";
                break;
              case "easeinout":
              default:
                t3 = "<>";
                break;
              case "swing":
                t3 = function(t4) {
                  var e2 = 1.70158;
                  return (t4 -= 1) * t4 * ((e2 + 1) * t4 + e2) + 1;
                };
                break;
              case "bounce":
                t3 = function(t4) {
                  return t4 < 1 / 2.75 ? 7.5625 * t4 * t4 : t4 < 2 / 2.75 ? 7.5625 * (t4 -= 1.5 / 2.75) * t4 + 0.75 : t4 < 2.5 / 2.75 ? 7.5625 * (t4 -= 2.25 / 2.75) * t4 + 0.9375 : 7.5625 * (t4 -= 2.625 / 2.75) * t4 + 0.984375;
                };
                break;
              case "elastic":
                t3 = function(t4) {
                  return t4 === !!t4 ? t4 : Math.pow(2, -10 * t4) * Math.sin((t4 - 0.075) * (2 * Math.PI) / 0.3) + 1;
                };
            }
            this.w.globals.easing = t3;
          }
        } }, { key: "animateLine", value: function(t3, e2, i2, a2) {
          t3.attr(e2).animate(a2).attr(i2);
        } }, { key: "animateMarker", value: function(t3, e2, i2, a2, s2, r2) {
          e2 || (e2 = 0), t3.attr({ r: e2, width: e2, height: e2 }).animate(a2, s2).attr({ r: i2, width: i2.width, height: i2.height }).afterAll(function() {
            r2();
          });
        } }, { key: "animateCircle", value: function(t3, e2, i2, a2, s2) {
          t3.attr({ r: e2.r, cx: e2.cx, cy: e2.cy }).animate(a2, s2).attr({ r: i2.r, cx: i2.cx, cy: i2.cy });
        } }, { key: "animateRect", value: function(t3, e2, i2, a2, s2) {
          t3.attr(e2).animate(a2).attr(i2).afterAll(function() {
            return s2();
          });
        } }, { key: "animatePathsGradually", value: function(t3) {
          var e2 = t3.el, i2 = t3.realIndex, a2 = t3.j, s2 = t3.fill, r2 = t3.pathFrom, o2 = t3.pathTo, n2 = t3.speed, l2 = t3.delay, h2 = this.w, c2 = 0;
          h2.config.chart.animations.animateGradually.enabled && (c2 = h2.config.chart.animations.animateGradually.delay), h2.config.chart.animations.dynamicAnimation.enabled && h2.globals.dataChanged && "bar" !== h2.config.chart.type && (c2 = 0), this.morphSVG(e2, i2, a2, "line" !== h2.config.chart.type || h2.globals.comboCharts ? s2 : "stroke", r2, o2, n2, l2 * c2);
        } }, { key: "showDelayedElements", value: function() {
          this.w.globals.delayedElements.forEach(function(t3) {
            t3.el.classList.remove("apexcharts-element-hidden");
          });
        } }, { key: "animationCompleted", value: function(t3) {
          var e2 = this.w;
          e2.globals.animationEnded || (e2.globals.animationEnded = true, this.showDelayedElements(), "function" == typeof e2.config.chart.events.animationEnd && e2.config.chart.events.animationEnd(this.ctx, { el: t3, w: e2 }));
        } }, { key: "morphSVG", value: function(t3, e2, i2, a2, s2, r2, o2, n2) {
          var l2 = this, h2 = this.w;
          s2 || (s2 = t3.attr("pathFrom")), r2 || (r2 = t3.attr("pathTo"));
          var c2 = function(t4) {
            return "radar" === h2.config.chart.type && (o2 = 1), "M 0 ".concat(h2.globals.gridHeight);
          };
          (!s2 || s2.indexOf("undefined") > -1 || s2.indexOf("NaN") > -1) && (s2 = c2()), (!r2 || r2.indexOf("undefined") > -1 || r2.indexOf("NaN") > -1) && (r2 = c2()), h2.globals.shouldAnimate || (o2 = 1), t3.plot(s2).animate(1, h2.globals.easing, n2).plot(s2).animate(o2, h2.globals.easing, n2).plot(r2).afterAll(function() {
            x.isNumber(i2) ? i2 === h2.globals.series[h2.globals.maxValsInArrayIndex].length - 2 && h2.globals.shouldAnimate && l2.animationCompleted(t3) : "none" !== a2 && h2.globals.shouldAnimate && (!h2.globals.comboCharts && e2 === h2.globals.series.length - 1 || h2.globals.comboCharts) && l2.animationCompleted(t3), l2.showDelayedElements();
          });
        } }]), t2;
      }();
      var v = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "getDefaultFilter", value: function(t3, e2) {
          var i2 = this.w;
          t3.unfilter(true), new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), "none" !== i2.config.states.normal.filter ? this.applyFilter(t3, e2, i2.config.states.normal.filter.type, i2.config.states.normal.filter.value) : i2.config.chart.dropShadow.enabled && this.dropShadow(t3, i2.config.chart.dropShadow, e2);
        } }, { key: "addNormalFilter", value: function(t3, e2) {
          var i2 = this.w;
          i2.config.chart.dropShadow.enabled && !t3.node.classList.contains("apexcharts-marker") && this.dropShadow(t3, i2.config.chart.dropShadow, e2);
        } }, { key: "addLightenFilter", value: function(t3, e2, i2) {
          var a2 = this, s2 = this.w, r2 = i2.intensity;
          t3.unfilter(true);
          new window.SVG.Filter();
          t3.filter(function(t4) {
            var i3 = s2.config.chart.dropShadow;
            (i3.enabled ? a2.addShadow(t4, e2, i3) : t4).componentTransfer({ rgb: { type: "linear", slope: 1.5, intercept: r2 } });
          }), t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node);
        } }, { key: "addDarkenFilter", value: function(t3, e2, i2) {
          var a2 = this, s2 = this.w, r2 = i2.intensity;
          t3.unfilter(true);
          new window.SVG.Filter();
          t3.filter(function(t4) {
            var i3 = s2.config.chart.dropShadow;
            (i3.enabled ? a2.addShadow(t4, e2, i3) : t4).componentTransfer({ rgb: { type: "linear", slope: r2 } });
          }), t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node);
        } }, { key: "applyFilter", value: function(t3, e2, i2) {
          var a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0.5;
          switch (i2) {
            case "none":
              this.addNormalFilter(t3, e2);
              break;
            case "lighten":
              this.addLightenFilter(t3, e2, { intensity: a2 });
              break;
            case "darken":
              this.addDarkenFilter(t3, e2, { intensity: a2 });
          }
        } }, { key: "addShadow", value: function(t3, e2, i2) {
          var a2 = i2.blur, s2 = i2.top, r2 = i2.left, o2 = i2.color, n2 = i2.opacity, l2 = t3.flood(Array.isArray(o2) ? o2[e2] : o2, n2).composite(t3.sourceAlpha, "in").offset(r2, s2).gaussianBlur(a2).merge(t3.source);
          return t3.blend(t3.source, l2);
        } }, { key: "dropShadow", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a2 = e2.top, s2 = e2.left, r2 = e2.blur, o2 = e2.color, n2 = e2.opacity, l2 = e2.noUserSpaceOnUse, h2 = this.w;
          return t3.unfilter(true), x.isIE() && "radialBar" === h2.config.chart.type || (o2 = Array.isArray(o2) ? o2[i2] : o2, t3.filter(function(t4) {
            var e3 = null;
            e3 = x.isSafari() || x.isFirefox() || x.isIE() ? t4.flood(o2, n2).composite(t4.sourceAlpha, "in").offset(s2, a2).gaussianBlur(r2) : t4.flood(o2, n2).composite(t4.sourceAlpha, "in").offset(s2, a2).gaussianBlur(r2).merge(t4.source), t4.blend(t4.source, e3);
          }), l2 || t3.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t3.filterer.node)), t3;
        } }, { key: "setSelectionFilter", value: function(t3, e2, i2) {
          var a2 = this.w;
          if (void 0 !== a2.globals.selectedDataPoints[e2] && a2.globals.selectedDataPoints[e2].indexOf(i2) > -1) {
            t3.node.setAttribute("selected", true);
            var s2 = a2.config.states.active.filter;
            "none" !== s2 && this.applyFilter(t3, e2, s2.type, s2.value);
          }
        } }, { key: "_scaleFilterSize", value: function(t3) {
          !function(e2) {
            for (var i2 in e2)
              e2.hasOwnProperty(i2) && t3.setAttribute(i2, e2[i2]);
          }({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
        } }]), t2;
      }();
      var m = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "drawLine", value: function(t3, e2, i2, a2) {
          var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8", r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, o2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, n2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt", l2 = this.w, h2 = l2.globals.dom.Paper.line().attr({ x1: t3, y1: e2, x2: i2, y2: a2, stroke: s2, "stroke-dasharray": r2, "stroke-width": o2, "stroke-linecap": n2 });
          return h2;
        } }, { key: "drawRect", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe", o2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1, n2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, l2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, h2 = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0, c2 = this.w, d2 = c2.globals.dom.Paper.rect();
          return d2.attr({ x: t3, y: e2, width: i2 > 0 ? i2 : 0, height: a2 > 0 ? a2 : 0, rx: s2, ry: s2, opacity: o2, "stroke-width": null !== n2 ? n2 : 0, stroke: null !== l2 ? l2 : "none", "stroke-dasharray": h2 }), d2.node.setAttribute("fill", r2), d2;
        } }, { key: "drawPolygon", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1", i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none", s2 = this.w, r2 = s2.globals.dom.Paper.polygon(t3).attr({ fill: a2, stroke: e2, "stroke-width": i2 });
          return r2;
        } }, { key: "drawCircle", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i2 = this.w;
          t3 < 0 && (t3 = 0);
          var a2 = i2.globals.dom.Paper.circle(2 * t3);
          return null !== e2 && a2.attr(e2), a2;
        } }, { key: "drawPath", value: function(t3) {
          var e2 = t3.d, i2 = void 0 === e2 ? "" : e2, a2 = t3.stroke, s2 = void 0 === a2 ? "#a8a8a8" : a2, r2 = t3.strokeWidth, o2 = void 0 === r2 ? 1 : r2, n2 = t3.fill, l2 = t3.fillOpacity, h2 = void 0 === l2 ? 1 : l2, c2 = t3.strokeOpacity, d2 = void 0 === c2 ? 1 : c2, g2 = t3.classes, u2 = t3.strokeLinecap, f2 = void 0 === u2 ? null : u2, p2 = t3.strokeDashArray, x2 = void 0 === p2 ? 0 : p2, b2 = this.w;
          return null === f2 && (f2 = b2.config.stroke.lineCap), (i2.indexOf("undefined") > -1 || i2.indexOf("NaN") > -1) && (i2 = "M 0 ".concat(b2.globals.gridHeight)), b2.globals.dom.Paper.path(i2).attr({ fill: n2, "fill-opacity": h2, stroke: s2, "stroke-opacity": d2, "stroke-linecap": f2, "stroke-width": o2, "stroke-dasharray": x2, class: g2 });
        } }, { key: "group", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e2 = this.w, i2 = e2.globals.dom.Paper.group();
          return null !== t3 && i2.attr(t3), i2;
        } }, { key: "move", value: function(t3, e2) {
          var i2 = ["M", t3, e2].join(" ");
          return i2;
        } }, { key: "line", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a2 = null;
          return null === i2 ? a2 = ["L", t3, e2].join(" ") : "H" === i2 ? a2 = ["H", t3].join(" ") : "V" === i2 && (a2 = ["V", e2].join(" ")), a2;
        } }, { key: "curve", value: function(t3, e2, i2, a2, s2, r2) {
          var o2 = ["C", t3, e2, i2, a2, s2, r2].join(" ");
          return o2;
        } }, { key: "quadraticCurve", value: function(t3, e2, i2, a2) {
          return ["Q", t3, e2, i2, a2].join(" ");
        } }, { key: "arc", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = arguments.length > 7 && void 0 !== arguments[7] && arguments[7], l2 = "A";
          n2 && (l2 = "a");
          var h2 = [l2, t3, e2, i2, a2, s2, r2, o2].join(" ");
          return h2;
        } }, { key: "renderPaths", value: function(t3) {
          var i2, a2 = t3.j, s2 = t3.realIndex, r2 = t3.pathFrom, o2 = t3.pathTo, n2 = t3.stroke, l2 = t3.strokeWidth, h2 = t3.strokeLinecap, c2 = t3.fill, d2 = t3.animationDelay, g2 = t3.initialSpeed, u2 = t3.dataChangeSpeed, f2 = t3.className, p2 = t3.shouldClipToGrid, x2 = void 0 === p2 || p2, m2 = t3.bindEventsOnPaths, y2 = void 0 === m2 || m2, w2 = t3.drawShadow, k2 = void 0 === w2 || w2, A2 = this.w, S2 = new v(this.ctx), C2 = new b(this.ctx), L2 = this.w.config.chart.animations.enabled, P2 = L2 && this.w.config.chart.animations.dynamicAnimation.enabled, T2 = !!(L2 && !A2.globals.resized || P2 && A2.globals.dataChanged && A2.globals.shouldAnimate);
          T2 ? i2 = r2 : (i2 = o2, A2.globals.animationEnded = true);
          var M2 = A2.config.stroke.dashArray, I2 = 0;
          I2 = Array.isArray(M2) ? M2[s2] : A2.config.stroke.dashArray;
          var X2 = this.drawPath({ d: i2, stroke: n2, strokeWidth: l2, fill: c2, fillOpacity: 1, classes: f2, strokeLinecap: h2, strokeDashArray: I2 });
          if (X2.attr("index", s2), x2 && X2.attr({ "clip-path": "url(#gridRectMask".concat(A2.globals.cuid, ")") }), "none" !== A2.config.states.normal.filter.type)
            S2.getDefaultFilter(X2, s2);
          else if (A2.config.chart.dropShadow.enabled && k2 && (!A2.config.chart.dropShadow.enabledOnSeries || A2.config.chart.dropShadow.enabledOnSeries && -1 !== A2.config.chart.dropShadow.enabledOnSeries.indexOf(s2))) {
            var z2 = A2.config.chart.dropShadow;
            S2.dropShadow(X2, z2, s2);
          }
          y2 && (X2.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, X2)), X2.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, X2)), X2.node.addEventListener("mousedown", this.pathMouseDown.bind(this, X2))), X2.attr({ pathTo: o2, pathFrom: r2 });
          var E2 = { el: X2, j: a2, realIndex: s2, pathFrom: r2, pathTo: o2, fill: c2, strokeWidth: l2, delay: d2 };
          return !L2 || A2.globals.resized || A2.globals.dataChanged ? !A2.globals.resized && A2.globals.dataChanged || C2.showDelayedElements() : C2.animatePathsGradually(e(e({}, E2), {}, { speed: g2 })), A2.globals.dataChanged && P2 && T2 && C2.animatePathsGradually(e(e({}, E2), {}, { speed: u2 })), X2;
        } }, { key: "drawPattern", value: function(t3, e2, i2) {
          var a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8", s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r2 = this.w, o2 = r2.globals.dom.Paper.pattern(e2, i2, function(r3) {
            "horizontalLines" === t3 ? r3.line(0, 0, i2, 0).stroke({ color: a2, width: s2 + 1 }) : "verticalLines" === t3 ? r3.line(0, 0, 0, e2).stroke({ color: a2, width: s2 + 1 }) : "slantedLines" === t3 ? r3.line(0, 0, e2, i2).stroke({ color: a2, width: s2 }) : "squares" === t3 ? r3.rect(e2, i2).fill("none").stroke({ color: a2, width: s2 }) : "circles" === t3 && r3.circle(e2).fill("none").stroke({ color: a2, width: s2 });
          });
          return o2;
        } }, { key: "drawGradient", value: function(t3, e2, i2, a2, s2) {
          var r2, o2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, n2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, l2 = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, h2 = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0, c2 = this.w;
          e2.length < 9 && 0 === e2.indexOf("#") && (e2 = x.hexToRgba(e2, a2)), i2.length < 9 && 0 === i2.indexOf("#") && (i2 = x.hexToRgba(i2, s2));
          var d2 = 0, g2 = 1, u2 = 1, f2 = null;
          null !== n2 && (d2 = void 0 !== n2[0] ? n2[0] / 100 : 0, g2 = void 0 !== n2[1] ? n2[1] / 100 : 1, u2 = void 0 !== n2[2] ? n2[2] / 100 : 1, f2 = void 0 !== n2[3] ? n2[3] / 100 : null);
          var p2 = !("donut" !== c2.config.chart.type && "pie" !== c2.config.chart.type && "polarArea" !== c2.config.chart.type && "bubble" !== c2.config.chart.type);
          if (r2 = null === l2 || 0 === l2.length ? c2.globals.dom.Paper.gradient(p2 ? "radial" : "linear", function(t4) {
            t4.at(d2, e2, a2), t4.at(g2, i2, s2), t4.at(u2, i2, s2), null !== f2 && t4.at(f2, e2, a2);
          }) : c2.globals.dom.Paper.gradient(p2 ? "radial" : "linear", function(t4) {
            (Array.isArray(l2[h2]) ? l2[h2] : l2).forEach(function(e3) {
              t4.at(e3.offset / 100, e3.color, e3.opacity);
            });
          }), p2) {
            var b2 = c2.globals.gridWidth / 2, v2 = c2.globals.gridHeight / 2;
            "bubble" !== c2.config.chart.type ? r2.attr({ gradientUnits: "userSpaceOnUse", cx: b2, cy: v2, r: o2 }) : r2.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
          } else
            "vertical" === t3 ? r2.from(0, 0).to(0, 1) : "diagonal" === t3 ? r2.from(0, 0).to(1, 1) : "horizontal" === t3 ? r2.from(0, 1).to(1, 1) : "diagonal2" === t3 && r2.from(1, 0).to(0, 1);
          return r2;
        } }, { key: "getTextBasedOnMaxWidth", value: function(t3) {
          var e2 = t3.text, i2 = t3.maxWidth, a2 = t3.fontSize, s2 = t3.fontFamily, r2 = this.getTextRects(e2, a2, s2), o2 = r2.width / e2.length, n2 = Math.floor(i2 / o2);
          return i2 < r2.width ? e2.slice(0, n2 - 3) + "..." : e2;
        } }, { key: "drawText", value: function(t3) {
          var i2 = this, a2 = t3.x, s2 = t3.y, r2 = t3.text, o2 = t3.textAnchor, n2 = t3.fontSize, l2 = t3.fontFamily, h2 = t3.fontWeight, c2 = t3.foreColor, d2 = t3.opacity, g2 = t3.maxWidth, u2 = t3.cssClass, f2 = void 0 === u2 ? "" : u2, p2 = t3.isPlainText, x2 = void 0 === p2 || p2, b2 = this.w;
          void 0 === r2 && (r2 = "");
          var v2 = r2;
          o2 || (o2 = "start"), c2 && c2.length || (c2 = b2.config.chart.foreColor), l2 = l2 || b2.config.chart.fontFamily, h2 = h2 || "regular";
          var m2, y2 = { maxWidth: g2, fontSize: n2 = n2 || "11px", fontFamily: l2 };
          return Array.isArray(r2) ? m2 = b2.globals.dom.Paper.text(function(t4) {
            for (var a3 = 0; a3 < r2.length; a3++)
              v2 = r2[a3], g2 && (v2 = i2.getTextBasedOnMaxWidth(e({ text: r2[a3] }, y2))), 0 === a3 ? t4.tspan(v2) : t4.tspan(v2).newLine();
          }) : (g2 && (v2 = this.getTextBasedOnMaxWidth(e({ text: r2 }, y2))), m2 = x2 ? b2.globals.dom.Paper.plain(r2) : b2.globals.dom.Paper.text(function(t4) {
            return t4.tspan(v2);
          })), m2.attr({ x: a2, y: s2, "text-anchor": o2, "dominant-baseline": "auto", "font-size": n2, "font-family": l2, "font-weight": h2, fill: c2, class: "apexcharts-text " + f2 }), m2.node.style.fontFamily = l2, m2.node.style.opacity = d2, m2;
        } }, { key: "drawMarker", value: function(t3, e2, i2) {
          t3 = t3 || 0;
          var a2 = i2.pSize || 0, s2 = null;
          if ("square" === i2.shape || "rect" === i2.shape) {
            var r2 = void 0 === i2.pRadius ? a2 / 2 : i2.pRadius;
            null !== e2 && a2 || (a2 = 0, r2 = 0);
            var o2 = 1.2 * a2 + r2, n2 = this.drawRect(o2, o2, o2, o2, r2);
            n2.attr({ x: t3 - o2 / 2, y: e2 - o2 / 2, cx: t3, cy: e2, class: i2.class ? i2.class : "", fill: i2.pointFillColor, "fill-opacity": i2.pointFillOpacity ? i2.pointFillOpacity : 1, stroke: i2.pointStrokeColor, "stroke-width": i2.pointStrokeWidth ? i2.pointStrokeWidth : 0, "stroke-opacity": i2.pointStrokeOpacity ? i2.pointStrokeOpacity : 1 }), s2 = n2;
          } else
            "circle" !== i2.shape && i2.shape || (x.isNumber(e2) || (a2 = 0, e2 = 0), s2 = this.drawCircle(a2, { cx: t3, cy: e2, class: i2.class ? i2.class : "", stroke: i2.pointStrokeColor, fill: i2.pointFillColor, "fill-opacity": i2.pointFillOpacity ? i2.pointFillOpacity : 1, "stroke-width": i2.pointStrokeWidth ? i2.pointStrokeWidth : 0, "stroke-opacity": i2.pointStrokeOpacity ? i2.pointStrokeOpacity : 1 }));
          return s2;
        } }, { key: "pathMouseEnter", value: function(t3, e2) {
          var i2 = this.w, a2 = new v(this.ctx), s2 = parseInt(t3.node.getAttribute("index"), 10), r2 = parseInt(t3.node.getAttribute("j"), 10);
          if ("function" == typeof i2.config.chart.events.dataPointMouseEnter && i2.config.chart.events.dataPointMouseEnter(e2, this.ctx, { seriesIndex: s2, dataPointIndex: r2, w: i2 }), this.ctx.events.fireEvent("dataPointMouseEnter", [e2, this.ctx, { seriesIndex: s2, dataPointIndex: r2, w: i2 }]), ("none" === i2.config.states.active.filter.type || "true" !== t3.node.getAttribute("selected")) && "none" !== i2.config.states.hover.filter.type && !i2.globals.isTouchDevice) {
            var o2 = i2.config.states.hover.filter;
            a2.applyFilter(t3, s2, o2.type, o2.value);
          }
        } }, { key: "pathMouseLeave", value: function(t3, e2) {
          var i2 = this.w, a2 = new v(this.ctx), s2 = parseInt(t3.node.getAttribute("index"), 10), r2 = parseInt(t3.node.getAttribute("j"), 10);
          "function" == typeof i2.config.chart.events.dataPointMouseLeave && i2.config.chart.events.dataPointMouseLeave(e2, this.ctx, { seriesIndex: s2, dataPointIndex: r2, w: i2 }), this.ctx.events.fireEvent("dataPointMouseLeave", [e2, this.ctx, { seriesIndex: s2, dataPointIndex: r2, w: i2 }]), "none" !== i2.config.states.active.filter.type && "true" === t3.node.getAttribute("selected") || "none" !== i2.config.states.hover.filter.type && a2.getDefaultFilter(t3, s2);
        } }, { key: "pathMouseDown", value: function(t3, e2) {
          var i2 = this.w, a2 = new v(this.ctx), s2 = parseInt(t3.node.getAttribute("index"), 10), r2 = parseInt(t3.node.getAttribute("j"), 10), o2 = "false";
          if ("true" === t3.node.getAttribute("selected")) {
            if (t3.node.setAttribute("selected", "false"), i2.globals.selectedDataPoints[s2].indexOf(r2) > -1) {
              var n2 = i2.globals.selectedDataPoints[s2].indexOf(r2);
              i2.globals.selectedDataPoints[s2].splice(n2, 1);
            }
          } else {
            if (!i2.config.states.active.allowMultipleDataPointsSelection && i2.globals.selectedDataPoints.length > 0) {
              i2.globals.selectedDataPoints = [];
              var l2 = i2.globals.dom.Paper.select(".apexcharts-series path").members, h2 = i2.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members, c2 = function(t4) {
                Array.prototype.forEach.call(t4, function(t5) {
                  t5.node.setAttribute("selected", "false"), a2.getDefaultFilter(t5, s2);
                });
              };
              c2(l2), c2(h2);
            }
            t3.node.setAttribute("selected", "true"), o2 = "true", void 0 === i2.globals.selectedDataPoints[s2] && (i2.globals.selectedDataPoints[s2] = []), i2.globals.selectedDataPoints[s2].push(r2);
          }
          if ("true" === o2) {
            var d2 = i2.config.states.active.filter;
            if ("none" !== d2)
              a2.applyFilter(t3, s2, d2.type, d2.value);
            else if ("none" !== i2.config.states.hover.filter && !i2.globals.isTouchDevice) {
              var g2 = i2.config.states.hover.filter;
              a2.applyFilter(t3, s2, g2.type, g2.value);
            }
          } else if ("none" !== i2.config.states.active.filter.type)
            if ("none" === i2.config.states.hover.filter.type || i2.globals.isTouchDevice)
              a2.getDefaultFilter(t3, s2);
            else {
              g2 = i2.config.states.hover.filter;
              a2.applyFilter(t3, s2, g2.type, g2.value);
            }
          "function" == typeof i2.config.chart.events.dataPointSelection && i2.config.chart.events.dataPointSelection(e2, this.ctx, { selectedDataPoints: i2.globals.selectedDataPoints, seriesIndex: s2, dataPointIndex: r2, w: i2 }), e2 && this.ctx.events.fireEvent("dataPointSelection", [e2, this.ctx, { selectedDataPoints: i2.globals.selectedDataPoints, seriesIndex: s2, dataPointIndex: r2, w: i2 }]);
        } }, { key: "rotateAroundCenter", value: function(t3) {
          var e2 = {};
          return t3 && "function" == typeof t3.getBBox && (e2 = t3.getBBox()), { x: e2.x + e2.width / 2, y: e2.y + e2.height / 2 };
        } }, { key: "getTextRects", value: function(t3, e2, i2, a2) {
          var s2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], r2 = this.w, o2 = this.drawText({ x: -200, y: -200, text: t3, textAnchor: "start", fontSize: e2, fontFamily: i2, foreColor: "#fff", opacity: 0 });
          a2 && o2.attr("transform", a2), r2.globals.dom.Paper.add(o2);
          var n2 = o2.bbox();
          return s2 || (n2 = o2.node.getBoundingClientRect()), o2.remove(), { width: n2.width, height: n2.height };
        } }, { key: "placeTextWithEllipsis", value: function(t3, e2, i2) {
          if ("function" == typeof t3.getComputedTextLength && (t3.textContent = e2, e2.length > 0 && t3.getComputedTextLength() >= i2 / 1.1)) {
            for (var a2 = e2.length - 3; a2 > 0; a2 -= 3)
              if (t3.getSubStringLength(0, a2) <= i2 / 1.1)
                return void (t3.textContent = e2.substring(0, a2) + "...");
            t3.textContent = ".";
          }
        } }], [{ key: "setAttrs", value: function(t3, e2) {
          for (var i2 in e2)
            e2.hasOwnProperty(i2) && t3.setAttribute(i2, e2[i2]);
        } }]), t2;
      }();
      var y = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "getStackedSeriesTotals", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e2 = this.w, i2 = [];
          if (0 === e2.globals.series.length)
            return i2;
          for (var a2 = 0; a2 < e2.globals.series[e2.globals.maxValsInArrayIndex].length; a2++) {
            for (var s2 = 0, r2 = 0; r2 < e2.globals.series.length; r2++)
              void 0 !== e2.globals.series[r2][a2] && -1 === t3.indexOf(r2) && (s2 += e2.globals.series[r2][a2]);
            i2.push(s2);
          }
          return i2;
        } }, { key: "getSeriesTotalByIndex", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
          return null === t3 ? this.w.config.series.reduce(function(t4, e2) {
            return t4 + e2;
          }, 0) : this.w.globals.series[t3].reduce(function(t4, e2) {
            return t4 + e2;
          }, 0);
        } }, { key: "isSeriesNull", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
          return 0 === (null === t3 ? this.w.config.series.filter(function(t4) {
            return null !== t4;
          }) : this.w.config.series[t3].data.filter(function(t4) {
            return null !== t4;
          })).length;
        } }, { key: "seriesHaveSameValues", value: function(t3) {
          return this.w.globals.series[t3].every(function(t4, e2, i2) {
            return t4 === i2[0];
          });
        } }, { key: "getCategoryLabels", value: function(t3) {
          var e2 = this.w, i2 = t3.slice();
          return e2.config.xaxis.convertedCatToNumeric && (i2 = t3.map(function(t4, i3) {
            return e2.config.xaxis.labels.formatter(t4 - e2.globals.minX + 1);
          })), i2;
        } }, { key: "getLargestSeries", value: function() {
          var t3 = this.w;
          t3.globals.maxValsInArrayIndex = t3.globals.series.map(function(t4) {
            return t4.length;
          }).indexOf(Math.max.apply(Math, t3.globals.series.map(function(t4) {
            return t4.length;
          })));
        } }, { key: "getLargestMarkerSize", value: function() {
          var t3 = this.w, e2 = 0;
          return t3.globals.markers.size.forEach(function(t4) {
            e2 = Math.max(e2, t4);
          }), t3.config.markers.discrete && t3.config.markers.discrete.length && t3.config.markers.discrete.forEach(function(t4) {
            e2 = Math.max(e2, t4.size);
          }), e2 > 0 && (e2 += t3.config.markers.hover.sizeOffset + 1), t3.globals.markers.largestSize = e2, e2;
        } }, { key: "getSeriesTotals", value: function() {
          var t3 = this.w;
          t3.globals.seriesTotals = t3.globals.series.map(function(t4, e2) {
            var i2 = 0;
            if (Array.isArray(t4))
              for (var a2 = 0; a2 < t4.length; a2++)
                i2 += t4[a2];
            else
              i2 += t4;
            return i2;
          });
        } }, { key: "getSeriesTotalsXRange", value: function(t3, e2) {
          var i2 = this.w;
          return i2.globals.series.map(function(a2, s2) {
            for (var r2 = 0, o2 = 0; o2 < a2.length; o2++)
              i2.globals.seriesX[s2][o2] > t3 && i2.globals.seriesX[s2][o2] < e2 && (r2 += a2[o2]);
            return r2;
          });
        } }, { key: "getPercentSeries", value: function() {
          var t3 = this.w;
          t3.globals.seriesPercent = t3.globals.series.map(function(e2, i2) {
            var a2 = [];
            if (Array.isArray(e2))
              for (var s2 = 0; s2 < e2.length; s2++) {
                var r2 = t3.globals.stackedSeriesTotals[s2], o2 = 0;
                r2 && (o2 = 100 * e2[s2] / r2), a2.push(o2);
              }
            else {
              var n2 = 100 * e2 / t3.globals.seriesTotals.reduce(function(t4, e3) {
                return t4 + e3;
              }, 0);
              a2.push(n2);
            }
            return a2;
          });
        } }, { key: "getCalculatedRatios", value: function() {
          var t3, e2, i2, a2, s2 = this.w.globals, r2 = [], o2 = 0, n2 = [], l2 = 0.1, h2 = 0;
          if (s2.yRange = [], s2.isMultipleYAxis)
            for (var c2 = 0; c2 < s2.minYArr.length; c2++)
              s2.yRange.push(Math.abs(s2.minYArr[c2] - s2.maxYArr[c2])), n2.push(0);
          else
            s2.yRange.push(Math.abs(s2.minY - s2.maxY));
          s2.xRange = Math.abs(s2.maxX - s2.minX), s2.zRange = Math.abs(s2.maxZ - s2.minZ);
          for (var d2 = 0; d2 < s2.yRange.length; d2++)
            r2.push(s2.yRange[d2] / s2.gridHeight);
          if (e2 = s2.xRange / s2.gridWidth, i2 = Math.abs(s2.initialMaxX - s2.initialMinX) / s2.gridWidth, t3 = s2.yRange / s2.gridWidth, a2 = s2.xRange / s2.gridHeight, (o2 = s2.zRange / s2.gridHeight * 16) || (o2 = 1), s2.minY !== Number.MIN_VALUE && 0 !== Math.abs(s2.minY) && (s2.hasNegs = true), s2.isMultipleYAxis) {
            n2 = [];
            for (var g2 = 0; g2 < r2.length; g2++)
              n2.push(-s2.minYArr[g2] / r2[g2]);
          } else
            n2.push(-s2.minY / r2[0]), s2.minY !== Number.MIN_VALUE && 0 !== Math.abs(s2.minY) && (l2 = -s2.minY / t3, h2 = s2.minX / e2);
          return { yRatio: r2, invertedYRatio: t3, zRatio: o2, xRatio: e2, initialXRatio: i2, invertedXRatio: a2, baseLineInvertedY: l2, baseLineY: n2, baseLineX: h2 };
        } }, { key: "getLogSeries", value: function(t3) {
          var e2 = this, i2 = this.w;
          return i2.globals.seriesLog = t3.map(function(t4, a2) {
            return i2.config.yaxis[a2] && i2.config.yaxis[a2].logarithmic ? t4.map(function(t5) {
              return null === t5 ? null : e2.getLogVal(i2.config.yaxis[a2].logBase, t5, a2);
            }) : t4;
          }), i2.globals.invalidLogScale ? t3 : i2.globals.seriesLog;
        } }, { key: "getBaseLog", value: function(t3, e2) {
          return Math.log(e2) / Math.log(t3);
        } }, { key: "getLogVal", value: function(t3, e2, i2) {
          if (0 === e2)
            return 0;
          var a2 = this.w, s2 = 0 === a2.globals.minYArr[i2] ? -1 : this.getBaseLog(t3, a2.globals.minYArr[i2]), r2 = (0 === a2.globals.maxYArr[i2] ? 0 : this.getBaseLog(t3, a2.globals.maxYArr[i2])) - s2;
          return e2 < 1 ? e2 / r2 : (this.getBaseLog(t3, e2) - s2) / r2;
        } }, { key: "getLogYRatios", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = this.w.globals;
          return a2.yLogRatio = t3.slice(), a2.logYRange = a2.yRange.map(function(t4, s2) {
            if (i2.config.yaxis[s2] && e2.w.config.yaxis[s2].logarithmic) {
              var r2, o2 = -Number.MAX_VALUE, n2 = Number.MIN_VALUE;
              return a2.seriesLog.forEach(function(t5, e3) {
                t5.forEach(function(t6) {
                  i2.config.yaxis[e3] && i2.config.yaxis[e3].logarithmic && (o2 = Math.max(t6, o2), n2 = Math.min(t6, n2));
                });
              }), r2 = Math.pow(a2.yRange[s2], Math.abs(n2 - o2) / a2.yRange[s2]), a2.yLogRatio[s2] = r2 / a2.gridHeight, r2;
            }
          }), a2.invalidLogScale ? t3.slice() : a2.yLogRatio;
        } }], [{ key: "checkComboSeries", value: function(t3) {
          var e2 = false, i2 = 0, a2 = 0;
          return t3.length && void 0 !== t3[0].type && t3.forEach(function(t4) {
            "bar" !== t4.type && "column" !== t4.type && "candlestick" !== t4.type && "boxPlot" !== t4.type || i2++, void 0 !== t4.type && a2++;
          }), a2 > 0 && (e2 = true), { comboBarCount: i2, comboCharts: e2 };
        } }, { key: "extendArrayProps", value: function(t3, e2, i2) {
          return e2.yaxis && (e2 = t3.extendYAxis(e2, i2)), e2.annotations && (e2.annotations.yaxis && (e2 = t3.extendYAxisAnnotations(e2)), e2.annotations.xaxis && (e2 = t3.extendXAxisAnnotations(e2)), e2.annotations.points && (e2 = t3.extendPointAnnotations(e2))), e2;
        } }]), t2;
      }();
      var w = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.annoCtx = e2;
        }
        return r(t2, [{ key: "setOrientations", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i2 = this.w;
          if ("vertical" === t3.label.orientation) {
            var a2 = null !== e2 ? e2 : 0, s2 = i2.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(a2, "']"));
            if (null !== s2) {
              var r2 = s2.getBoundingClientRect();
              s2.setAttribute("x", parseFloat(s2.getAttribute("x")) - r2.height + 4), "top" === t3.label.position ? s2.setAttribute("y", parseFloat(s2.getAttribute("y")) + r2.width) : s2.setAttribute("y", parseFloat(s2.getAttribute("y")) - r2.width);
              var o2 = this.annoCtx.graphics.rotateAroundCenter(s2), n2 = o2.x, l2 = o2.y;
              s2.setAttribute("transform", "rotate(-90 ".concat(n2, " ").concat(l2, ")"));
            }
          }
        } }, { key: "addBackgroundToAnno", value: function(t3, e2) {
          var i2 = this.w;
          if (!t3 || void 0 === e2.label.text || void 0 !== e2.label.text && !String(e2.label.text).trim())
            return null;
          var a2 = i2.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(), s2 = t3.getBoundingClientRect(), r2 = e2.label.style.padding.left, o2 = e2.label.style.padding.right, n2 = e2.label.style.padding.top, l2 = e2.label.style.padding.bottom;
          "vertical" === e2.label.orientation && (n2 = e2.label.style.padding.left, l2 = e2.label.style.padding.right, r2 = e2.label.style.padding.top, o2 = e2.label.style.padding.bottom);
          var h2 = s2.left - a2.left - r2, c2 = s2.top - a2.top - n2, d2 = this.annoCtx.graphics.drawRect(h2 - i2.globals.barPadForNumericAxis, c2, s2.width + r2 + o2, s2.height + n2 + l2, e2.label.borderRadius, e2.label.style.background, 1, e2.label.borderWidth, e2.label.borderColor, 0);
          return e2.id && d2.node.classList.add(e2.id), d2;
        } }, { key: "annotationsBackground", value: function() {
          var t3 = this, e2 = this.w, i2 = function(i3, a2, s2) {
            var r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(a2, "']"));
            if (r2) {
              var o2 = r2.parentNode, n2 = t3.addBackgroundToAnno(r2, i3);
              n2 && (o2.insertBefore(n2.node, r2), i3.label.mouseEnter && n2.node.addEventListener("mouseenter", i3.label.mouseEnter.bind(t3, i3)), i3.label.mouseLeave && n2.node.addEventListener("mouseleave", i3.label.mouseLeave.bind(t3, i3)), i3.label.click && n2.node.addEventListener("click", i3.label.click.bind(t3, i3)));
            }
          };
          e2.config.annotations.xaxis.map(function(t4, e3) {
            i2(t4, e3, "xaxis");
          }), e2.config.annotations.yaxis.map(function(t4, e3) {
            i2(t4, e3, "yaxis");
          }), e2.config.annotations.points.map(function(t4, e3) {
            i2(t4, e3, "point");
          });
        } }, { key: "getY1Y2", value: function(t3, e2) {
          var i2, a2 = "y1" === t3 ? e2.y : e2.y2, s2 = this.w;
          if (this.annoCtx.invertAxis) {
            var r2 = s2.globals.labels.indexOf(a2);
            s2.config.xaxis.convertedCatToNumeric && (r2 = s2.globals.categoryLabels.indexOf(a2));
            var o2 = s2.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (r2 + 1) + ")");
            o2 && (i2 = parseFloat(o2.getAttribute("y")));
          } else {
            var n2;
            if (s2.config.yaxis[e2.yAxisIndex].logarithmic)
              n2 = (a2 = new y(this.annoCtx.ctx).getLogVal(a2, e2.yAxisIndex)) / s2.globals.yLogRatio[e2.yAxisIndex];
            else
              n2 = (a2 - s2.globals.minYArr[e2.yAxisIndex]) / (s2.globals.yRange[e2.yAxisIndex] / s2.globals.gridHeight);
            i2 = s2.globals.gridHeight - n2, !e2.marker || void 0 !== e2.y && null !== e2.y || (i2 = 0), s2.config.yaxis[e2.yAxisIndex] && s2.config.yaxis[e2.yAxisIndex].reversed && (i2 = n2);
          }
          return i2;
        } }, { key: "getX1X2", value: function(t3, e2) {
          var i2 = this.w, a2 = this.annoCtx.invertAxis ? i2.globals.minY : i2.globals.minX, s2 = this.annoCtx.invertAxis ? i2.globals.maxY : i2.globals.maxX, r2 = this.annoCtx.invertAxis ? i2.globals.yRange[0] : i2.globals.xRange, o2 = (e2.x - a2) / (r2 / i2.globals.gridWidth);
          this.annoCtx.inversedReversedAxis && (o2 = (s2 - e2.x) / (r2 / i2.globals.gridWidth)), "category" !== i2.config.xaxis.type && !i2.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i2.globals.dataFormatXNumeric || (o2 = this.getStringX(e2.x));
          var n2 = (e2.x2 - a2) / (r2 / i2.globals.gridWidth);
          return this.annoCtx.inversedReversedAxis && (n2 = (s2 - e2.x2) / (r2 / i2.globals.gridWidth)), "category" !== i2.config.xaxis.type && !i2.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i2.globals.dataFormatXNumeric || (n2 = this.getStringX(e2.x2)), void 0 !== e2.x && null !== e2.x || !e2.marker || (o2 = i2.globals.gridWidth), "x1" === t3 ? o2 : n2;
        } }, { key: "getStringX", value: function(t3) {
          var e2 = this.w, i2 = t3;
          e2.config.xaxis.convertedCatToNumeric && e2.globals.categoryLabels.length && (t3 = e2.globals.categoryLabels.indexOf(t3) + 1);
          var a2 = e2.globals.labels.indexOf(t3), s2 = e2.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (a2 + 1) + ")");
          return s2 && (i2 = parseFloat(s2.getAttribute("x"))), i2;
        } }]), t2;
      }();
      var k = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.annoCtx = e2, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new w(this.annoCtx);
        }
        return r(t2, [{ key: "addXaxisAnnotation", value: function(t3, e2, i2) {
          var a2, s2 = this.w, r2 = this.helpers.getX1X2("x1", t3), o2 = t3.label.text, n2 = t3.strokeDashArray;
          if (x.isNumber(r2)) {
            if (null === t3.x2 || void 0 === t3.x2) {
              var l2 = this.annoCtx.graphics.drawLine(r2 + t3.offsetX, 0 + t3.offsetY, r2 + t3.offsetX, s2.globals.gridHeight + t3.offsetY, t3.borderColor, n2, t3.borderWidth);
              e2.appendChild(l2.node), t3.id && l2.node.classList.add(t3.id);
            } else {
              if ((a2 = this.helpers.getX1X2("x2", t3)) < r2) {
                var h2 = r2;
                r2 = a2, a2 = h2;
              }
              var c2 = this.annoCtx.graphics.drawRect(r2 + t3.offsetX, 0 + t3.offsetY, a2 - r2, s2.globals.gridHeight + t3.offsetY, 0, t3.fillColor, t3.opacity, 1, t3.borderColor, n2);
              c2.node.classList.add("apexcharts-annotation-rect"), c2.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e2.appendChild(c2.node), t3.id && c2.node.classList.add(t3.id);
            }
            var d2 = "top" === t3.label.position ? 4 : s2.globals.gridHeight, g2 = this.annoCtx.graphics.getTextRects(o2, parseFloat(t3.label.style.fontSize)), u2 = this.annoCtx.graphics.drawText({ x: r2 + t3.label.offsetX, y: d2 + t3.label.offsetY - ("vertical" === t3.label.orientation ? "top" === t3.label.position ? g2.width / 2 - 12 : -g2.width / 2 : 0), text: o2, textAnchor: t3.label.textAnchor, fontSize: t3.label.style.fontSize, fontFamily: t3.label.style.fontFamily, fontWeight: t3.label.style.fontWeight, foreColor: t3.label.style.color, cssClass: "apexcharts-xaxis-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "") });
            u2.attr({ rel: i2 }), e2.appendChild(u2.node), this.annoCtx.helpers.setOrientations(t3, i2);
          }
        } }, { key: "drawXAxisAnnotations", value: function() {
          var t3 = this, e2 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-xaxis-annotations" });
          return e2.config.annotations.xaxis.map(function(e3, a2) {
            t3.addXaxisAnnotation(e3, i2.node, a2);
          }), i2;
        } }]), t2;
      }();
      var A = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.annoCtx = e2, this.helpers = new w(this.annoCtx);
        }
        return r(t2, [{ key: "addYaxisAnnotation", value: function(t3, e2, i2) {
          var a2, s2 = this.w, r2 = t3.strokeDashArray, o2 = this.helpers.getY1Y2("y1", t3), n2 = t3.label.text;
          if (null === t3.y2 || void 0 === t3.y2) {
            var l2 = this.annoCtx.graphics.drawLine(0 + t3.offsetX, o2 + t3.offsetY, this._getYAxisAnnotationWidth(t3), o2 + t3.offsetY, t3.borderColor, r2, t3.borderWidth);
            e2.appendChild(l2.node), t3.id && l2.node.classList.add(t3.id);
          } else {
            if ((a2 = this.helpers.getY1Y2("y2", t3)) > o2) {
              var h2 = o2;
              o2 = a2, a2 = h2;
            }
            var c2 = this.annoCtx.graphics.drawRect(0 + t3.offsetX, a2 + t3.offsetY, this._getYAxisAnnotationWidth(t3), o2 - a2, 0, t3.fillColor, t3.opacity, 1, t3.borderColor, r2);
            c2.node.classList.add("apexcharts-annotation-rect"), c2.attr("clip-path", "url(#gridRectMask".concat(s2.globals.cuid, ")")), e2.appendChild(c2.node), t3.id && c2.node.classList.add(t3.id);
          }
          var d2 = "right" === t3.label.position ? s2.globals.gridWidth : 0, g2 = this.annoCtx.graphics.drawText({ x: d2 + t3.label.offsetX, y: (null != a2 ? a2 : o2) + t3.label.offsetY - 3, text: n2, textAnchor: t3.label.textAnchor, fontSize: t3.label.style.fontSize, fontFamily: t3.label.style.fontFamily, fontWeight: t3.label.style.fontWeight, foreColor: t3.label.style.color, cssClass: "apexcharts-yaxis-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "") });
          g2.attr({ rel: i2 }), e2.appendChild(g2.node);
        } }, { key: "_getYAxisAnnotationWidth", value: function(t3) {
          var e2 = this.w;
          e2.globals.gridWidth;
          return (t3.width.indexOf("%") > -1 ? e2.globals.gridWidth * parseInt(t3.width, 10) / 100 : parseInt(t3.width, 10)) + t3.offsetX;
        } }, { key: "drawYAxisAnnotations", value: function() {
          var t3 = this, e2 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-yaxis-annotations" });
          return e2.config.annotations.yaxis.map(function(e3, a2) {
            t3.addYaxisAnnotation(e3, i2.node, a2);
          }), i2;
        } }]), t2;
      }();
      var S = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.annoCtx = e2, this.helpers = new w(this.annoCtx);
        }
        return r(t2, [{ key: "addPointAnnotation", value: function(t3, e2, i2) {
          this.w;
          var a2 = this.helpers.getX1X2("x1", t3), s2 = this.helpers.getY1Y2("y1", t3);
          if (x.isNumber(a2)) {
            var r2 = { pSize: t3.marker.size, pointStrokeWidth: t3.marker.strokeWidth, pointFillColor: t3.marker.fillColor, pointStrokeColor: t3.marker.strokeColor, shape: t3.marker.shape, pRadius: t3.marker.radius, class: "apexcharts-point-annotation-marker ".concat(t3.marker.cssClass, " ").concat(t3.id ? t3.id : "") }, o2 = this.annoCtx.graphics.drawMarker(a2 + t3.marker.offsetX, s2 + t3.marker.offsetY, r2);
            e2.appendChild(o2.node);
            var n2 = t3.label.text ? t3.label.text : "", l2 = this.annoCtx.graphics.drawText({ x: a2 + t3.label.offsetX, y: s2 + t3.label.offsetY - t3.marker.size - parseFloat(t3.label.style.fontSize) / 1.6, text: n2, textAnchor: t3.label.textAnchor, fontSize: t3.label.style.fontSize, fontFamily: t3.label.style.fontFamily, fontWeight: t3.label.style.fontWeight, foreColor: t3.label.style.color, cssClass: "apexcharts-point-annotation-label ".concat(t3.label.style.cssClass, " ").concat(t3.id ? t3.id : "") });
            if (l2.attr({ rel: i2 }), e2.appendChild(l2.node), t3.customSVG.SVG) {
              var h2 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations-custom-svg " + t3.customSVG.cssClass });
              h2.attr({ transform: "translate(".concat(a2 + t3.customSVG.offsetX, ", ").concat(s2 + t3.customSVG.offsetY, ")") }), h2.node.innerHTML = t3.customSVG.SVG, e2.appendChild(h2.node);
            }
            if (t3.image.path) {
              var c2 = t3.image.width ? t3.image.width : 20, d2 = t3.image.height ? t3.image.height : 20;
              o2 = this.annoCtx.addImage({ x: a2 + t3.image.offsetX - c2 / 2, y: s2 + t3.image.offsetY - d2 / 2, width: c2, height: d2, path: t3.image.path, appendTo: ".apexcharts-point-annotations" });
            }
            t3.mouseEnter && o2.node.addEventListener("mouseenter", t3.mouseEnter.bind(this, t3)), t3.mouseLeave && o2.node.addEventListener("mouseleave", t3.mouseLeave.bind(this, t3)), t3.click && o2.node.addEventListener("click", t3.click.bind(this, t3));
          }
        } }, { key: "drawPointAnnotations", value: function() {
          var t3 = this, e2 = this.w, i2 = this.annoCtx.graphics.group({ class: "apexcharts-point-annotations" });
          return e2.config.annotations.points.map(function(e3, a2) {
            t3.addPointAnnotation(e3, i2.node, a2);
          }), i2;
        } }]), t2;
      }();
      var C = { name: "en", options: { months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], toolbar: { exportToSVG: "Download SVG", exportToPNG: "Download PNG", exportToCSV: "Download CSV", menu: "Menu", selection: "Selection", selectionZoom: "Selection Zoom", zoomIn: "Zoom In", zoomOut: "Zoom Out", pan: "Panning", reset: "Reset Zoom" } } };
      var L = function() {
        function t2() {
          a(this, t2), this.yAxis = { show: true, showAlways: false, showForNullSeries: true, seriesName: void 0, opposite: false, reversed: false, logarithmic: false, logBase: 10, tickAmount: void 0, forceNiceScale: false, max: void 0, min: void 0, floating: false, decimalsInFloat: void 0, labels: { show: true, minWidth: 0, maxWidth: 160, offsetX: 0, offsetY: 0, align: void 0, rotate: 0, padding: 20, style: { colors: [], fontSize: "11px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, formatter: void 0 }, axisBorder: { show: false, color: "#e0e0e0", width: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: false, color: "#e0e0e0", width: 6, offsetX: 0, offsetY: 0 }, title: { text: void 0, rotate: -90, offsetY: 0, offsetX: 0, style: { color: void 0, fontSize: "11px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, tooltip: { enabled: false, offsetX: 0 }, crosshairs: { show: true, position: "front", stroke: { color: "#b6b6b6", width: 1, dashArray: 0 } } }, this.pointAnnotation = { id: void 0, x: 0, y: null, yAxisIndex: 0, seriesIndex: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, marker: { size: 4, fillColor: "#fff", strokeWidth: 2, strokeColor: "#333", shape: "circle", offsetX: 0, offsetY: 0, radius: 2, cssClass: "" }, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } }, customSVG: { SVG: void 0, cssClass: void 0, offsetX: 0, offsetY: 0 }, image: { path: void 0, width: 20, height: 20, offsetX: 0, offsetY: 0 } }, this.yAxisAnnotation = { id: void 0, y: 0, y2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, width: "100%", yAxisIndex: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "end", position: "right", offsetX: 0, offsetY: -3, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.xAxisAnnotation = { id: void 0, x: 0, x2: null, strokeDashArray: 1, fillColor: "#c2c2c2", borderColor: "#c2c2c2", borderWidth: 1, opacity: 0.3, offsetX: 0, offsetY: 0, label: { borderColor: "#c2c2c2", borderWidth: 1, borderRadius: 2, text: void 0, textAnchor: "middle", orientation: "vertical", position: "top", offsetX: 0, offsetY: 0, mouseEnter: void 0, mouseLeave: void 0, click: void 0, style: { background: "#fff", color: void 0, fontSize: "11px", fontFamily: void 0, fontWeight: 400, cssClass: "", padding: { left: 5, right: 5, top: 2, bottom: 2 } } } }, this.text = { x: 0, y: 0, text: "", textAnchor: "start", foreColor: void 0, fontSize: "13px", fontFamily: void 0, fontWeight: 400, appendTo: ".apexcharts-annotations", backgroundColor: "transparent", borderColor: "#c2c2c2", borderRadius: 0, borderWidth: 0, paddingLeft: 4, paddingRight: 4, paddingTop: 2, paddingBottom: 2 };
        }
        return r(t2, [{ key: "init", value: function() {
          return { annotations: { position: "front", yaxis: [this.yAxisAnnotation], xaxis: [this.xAxisAnnotation], points: [this.pointAnnotation], texts: [], images: [], shapes: [] }, chart: { animations: { enabled: true, easing: "easeinout", speed: 800, animateGradually: { delay: 150, enabled: true }, dynamicAnimation: { enabled: true, speed: 350 } }, background: "transparent", locales: [C], defaultLocale: "en", dropShadow: { enabled: false, enabledOnSeries: void 0, top: 2, left: 2, blur: 4, color: "#000", opacity: 0.35 }, events: { animationEnd: void 0, beforeMount: void 0, mounted: void 0, updated: void 0, click: void 0, mouseMove: void 0, mouseLeave: void 0, xAxisLabelClick: void 0, legendClick: void 0, markerClick: void 0, selection: void 0, dataPointSelection: void 0, dataPointMouseEnter: void 0, dataPointMouseLeave: void 0, beforeZoom: void 0, beforeResetZoom: void 0, zoomed: void 0, scrolled: void 0, brushScrolled: void 0 }, foreColor: "#373d3f", fontFamily: "Helvetica, Arial, sans-serif", height: "auto", parentHeightOffset: 15, redrawOnParentResize: true, redrawOnWindowResize: true, id: void 0, group: void 0, offsetX: 0, offsetY: 0, selection: { enabled: false, type: "x", fill: { color: "#24292e", opacity: 0.1 }, stroke: { width: 1, color: "#24292e", opacity: 0.4, dashArray: 3 }, xaxis: { min: void 0, max: void 0 }, yaxis: { min: void 0, max: void 0 } }, sparkline: { enabled: false }, brush: { enabled: false, autoScaleYaxis: true, target: void 0 }, stacked: false, stackType: "normal", toolbar: { show: true, offsetX: 0, offsetY: 0, tools: { download: true, selection: true, zoom: true, zoomin: true, zoomout: true, pan: true, reset: true, customIcons: [] }, export: { csv: { filename: void 0, columnDelimiter: ",", headerCategory: "category", headerValue: "value", dateFormatter: function(t3) {
            return new Date(t3).toDateString();
          } }, png: { filename: void 0 }, svg: { filename: void 0 } }, autoSelected: "zoom" }, type: "line", width: "100%", zoom: { enabled: true, type: "x", autoScaleYaxis: false, zoomedArea: { fill: { color: "#90CAF9", opacity: 0.4 }, stroke: { color: "#0D47A1", opacity: 0.4, width: 1 } } } }, plotOptions: { area: { fillTo: "origin" }, bar: { horizontal: false, columnWidth: "70%", barHeight: "70%", distributed: false, borderRadius: 0, rangeBarOverlap: true, rangeBarGroupRows: false, colors: { ranges: [], backgroundBarColors: [], backgroundBarOpacity: 1, backgroundBarRadius: 0 }, dataLabels: { position: "top", maxItems: 100, hideOverflowingLabels: true, orientation: "horizontal", total: { enabled: false, formatter: void 0, offsetX: 0, offsetY: 0, style: { color: "#373d3f", fontSize: "12px", fontFamily: void 0, fontWeight: 600 } } } }, bubble: { minBubbleRadius: void 0, maxBubbleRadius: void 0 }, candlestick: { colors: { upward: "#00B746", downward: "#EF403C" }, wick: { useFillColor: true } }, boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } }, heatmap: { radius: 2, enableShades: true, shadeIntensity: 0.5, reverseNegativeShade: false, distributed: false, useFillColorAsStroke: false, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, treemap: { enableShades: true, shadeIntensity: 0.5, distributed: false, reverseNegativeShade: false, useFillColorAsStroke: false, colorScale: { inverse: false, ranges: [], min: void 0, max: void 0 } }, radialBar: { inverseOrder: false, startAngle: 0, endAngle: 360, offsetX: 0, offsetY: 0, hollow: { margin: 5, size: "50%", background: "transparent", image: void 0, imageWidth: 150, imageHeight: 150, imageOffsetX: 0, imageOffsetY: 0, imageClipped: true, position: "front", dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, track: { show: true, startAngle: void 0, endAngle: void 0, background: "#f2f2f2", strokeWidth: "97%", opacity: 1, margin: 5, dropShadow: { enabled: false, top: 0, left: 0, blur: 3, color: "#000", opacity: 0.5 } }, dataLabels: { show: true, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: 0, formatter: function(t3) {
            return t3;
          } }, value: { show: true, fontSize: "14px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 16, formatter: function(t3) {
            return t3 + "%";
          } }, total: { show: false, label: "Total", fontSize: "16px", fontWeight: 600, fontFamily: void 0, color: void 0, formatter: function(t3) {
            return t3.globals.seriesTotals.reduce(function(t4, e2) {
              return t4 + e2;
            }, 0) / t3.globals.series.length + "%";
          } } } }, pie: { customScale: 1, offsetX: 0, offsetY: 0, startAngle: 0, endAngle: 360, expandOnClick: true, dataLabels: { offset: 0, minAngleToShowLabel: 10 }, donut: { size: "65%", background: "transparent", labels: { show: false, name: { show: true, fontSize: "16px", fontFamily: void 0, fontWeight: 600, color: void 0, offsetY: -10, formatter: function(t3) {
            return t3;
          } }, value: { show: true, fontSize: "20px", fontFamily: void 0, fontWeight: 400, color: void 0, offsetY: 10, formatter: function(t3) {
            return t3;
          } }, total: { show: false, showAlways: false, label: "Total", fontSize: "16px", fontWeight: 400, fontFamily: void 0, color: void 0, formatter: function(t3) {
            return t3.globals.seriesTotals.reduce(function(t4, e2) {
              return t4 + e2;
            }, 0);
          } } } } }, polarArea: { rings: { strokeWidth: 1, strokeColor: "#e8e8e8" }, spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" } }, radar: { size: void 0, offsetX: 0, offsetY: 0, polygons: { strokeWidth: 1, strokeColors: "#e8e8e8", connectorColors: "#e8e8e8", fill: { colors: void 0 } } } }, colors: void 0, dataLabels: { enabled: true, enabledOnSeries: void 0, formatter: function(t3) {
            return null !== t3 ? t3 : "";
          }, textAnchor: "middle", distributed: false, offsetX: 0, offsetY: 0, style: { fontSize: "12px", fontFamily: void 0, fontWeight: 600, colors: void 0 }, background: { enabled: true, foreColor: "#fff", borderRadius: 2, padding: 4, opacity: 0.9, borderWidth: 1, borderColor: "#fff", dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, dropShadow: { enabled: false, top: 1, left: 1, blur: 1, color: "#000", opacity: 0.45 } }, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] }, image: { src: [], width: void 0, height: void 0 }, pattern: { style: "squares", width: 6, height: 6, strokeWidth: 2 } }, forecastDataPoints: { count: 0, fillOpacity: 0.5, strokeWidth: void 0, dashArray: 4 }, grid: { show: true, borderColor: "#e0e0e0", strokeDashArray: 0, position: "back", xaxis: { lines: { show: false } }, yaxis: { lines: { show: true } }, row: { colors: void 0, opacity: 0.5 }, column: { colors: void 0, opacity: 0.5 }, padding: { top: 0, right: 10, bottom: 0, left: 12 } }, labels: [], legend: { show: true, showForSingleSeries: false, showForNullSeries: true, showForZeroSeries: true, floating: false, position: "bottom", horizontalAlign: "center", inverseOrder: false, fontSize: "12px", fontFamily: void 0, fontWeight: 400, width: void 0, height: void 0, formatter: void 0, tooltipHoverFormatter: void 0, offsetX: -20, offsetY: 4, customLegendItems: [], labels: { colors: void 0, useSeriesColors: false }, markers: { width: 12, height: 12, strokeWidth: 0, fillColors: void 0, strokeColor: "#fff", radius: 12, customHTML: void 0, offsetX: 0, offsetY: 0, onClick: void 0 }, itemMargin: { horizontal: 5, vertical: 2 }, onItemClick: { toggleDataSeries: true }, onItemHover: { highlightDataSeries: true } }, markers: { discrete: [], size: 0, colors: void 0, strokeColors: "#fff", strokeWidth: 2, strokeOpacity: 0.9, strokeDashArray: 0, fillOpacity: 1, shape: "circle", width: 8, height: 8, radius: 2, offsetX: 0, offsetY: 0, onClick: void 0, onDblClick: void 0, showNullDataPoints: true, hover: { size: void 0, sizeOffset: 3 } }, noData: { text: void 0, align: "center", verticalAlign: "middle", offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "14px", fontFamily: void 0 } }, responsive: [], series: void 0, states: { normal: { filter: { type: "none", value: 0 } }, hover: { filter: { type: "lighten", value: 0.1 } }, active: { allowMultipleDataPointsSelection: false, filter: { type: "darken", value: 0.5 } } }, title: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 0, floating: false, style: { fontSize: "14px", fontWeight: 900, fontFamily: void 0, color: void 0 } }, subtitle: { text: void 0, align: "left", margin: 5, offsetX: 0, offsetY: 30, floating: false, style: { fontSize: "12px", fontWeight: 400, fontFamily: void 0, color: void 0 } }, stroke: { show: true, curve: "smooth", lineCap: "butt", width: 2, colors: void 0, dashArray: 0, fill: { type: "solid", colors: void 0, opacity: 0.85, gradient: { shade: "dark", type: "horizontal", shadeIntensity: 0.5, gradientToColors: void 0, inverseColors: true, opacityFrom: 1, opacityTo: 1, stops: [0, 50, 100], colorStops: [] } } }, tooltip: { enabled: true, enabledOnSeries: void 0, shared: true, followCursor: false, intersect: false, inverseOrder: false, custom: void 0, fillSeriesColor: false, theme: "light", cssClass: "", style: { fontSize: "12px", fontFamily: void 0 }, onDatasetHover: { highlightDataSeries: false }, x: { show: true, format: "dd MMM", formatter: void 0 }, y: { formatter: void 0, title: { formatter: function(t3) {
            return t3 ? t3 + ": " : "";
          } } }, z: { formatter: void 0, title: "Size: " }, marker: { show: true, fillColors: void 0 }, items: { display: "flex" }, fixed: { enabled: false, position: "topRight", offsetX: 0, offsetY: 0 } }, xaxis: { type: "category", categories: [], convertedCatToNumeric: false, offsetX: 0, offsetY: 0, overwriteCategories: void 0, labels: { show: true, rotate: -45, rotateAlways: false, hideOverlappingLabels: true, trim: false, minHeight: void 0, maxHeight: 120, showDuplicates: true, style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" }, offsetX: 0, offsetY: 0, format: void 0, formatter: void 0, datetimeUTC: true, datetimeFormatter: { year: "yyyy", month: "MMM 'yy", day: "dd MMM", hour: "HH:mm", minute: "HH:mm:ss", second: "HH:mm:ss" } }, group: { groups: [], style: { colors: [], fontSize: "12px", fontWeight: 400, fontFamily: void 0, cssClass: "" } }, axisBorder: { show: true, color: "#e0e0e0", width: "100%", height: 1, offsetX: 0, offsetY: 0 }, axisTicks: { show: true, color: "#e0e0e0", height: 6, offsetX: 0, offsetY: 0 }, tickAmount: void 0, tickPlacement: "on", min: void 0, max: void 0, range: void 0, floating: false, decimalsInFloat: void 0, position: "bottom", title: { text: void 0, offsetX: 0, offsetY: 0, style: { color: void 0, fontSize: "12px", fontWeight: 900, fontFamily: void 0, cssClass: "" } }, crosshairs: { show: true, width: 1, position: "back", opacity: 0.9, stroke: { color: "#b6b6b6", width: 1, dashArray: 3 }, fill: { type: "solid", color: "#B1B9C4", gradient: { colorFrom: "#D8E3F0", colorTo: "#BED1E6", stops: [0, 100], opacityFrom: 0.4, opacityTo: 0.5 } }, dropShadow: { enabled: false, left: 0, top: 0, blur: 1, opacity: 0.4 } }, tooltip: { enabled: true, offsetY: 0, formatter: void 0, style: { fontSize: "12px", fontFamily: void 0 } } }, yaxis: this.yAxis, theme: { mode: "light", palette: "palette1", monochrome: { enabled: false, color: "#008FFB", shadeTo: "light", shadeIntensity: 0.65 } } };
        } }]), t2;
      }();
      var P = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.graphics = new m(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = true), this.helpers = new w(this), this.xAxisAnnotations = new k(this), this.yAxisAnnotations = new A(this), this.pointsAnnotations = new S(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = true), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
        }
        return r(t2, [{ key: "drawAxesAnnotations", value: function() {
          var t3 = this.w;
          if (t3.globals.axisCharts) {
            for (var e2 = this.yAxisAnnotations.drawYAxisAnnotations(), i2 = this.xAxisAnnotations.drawXAxisAnnotations(), a2 = this.pointsAnnotations.drawPointAnnotations(), s2 = t3.config.chart.animations.enabled, r2 = [e2, i2, a2], o2 = [i2.node, e2.node, a2.node], n2 = 0; n2 < 3; n2++)
              t3.globals.dom.elGraphical.add(r2[n2]), !s2 || t3.globals.resized || t3.globals.dataChanged || "scatter" !== t3.config.chart.type && "bubble" !== t3.config.chart.type && t3.globals.dataPoints > 1 && o2[n2].classList.add("apexcharts-element-hidden"), t3.globals.delayedElements.push({ el: o2[n2], index: 0 });
            this.helpers.annotationsBackground();
          }
        } }, { key: "drawImageAnnos", value: function() {
          var t3 = this;
          this.w.config.annotations.images.map(function(e2, i2) {
            t3.addImage(e2, i2);
          });
        } }, { key: "drawTextAnnos", value: function() {
          var t3 = this;
          this.w.config.annotations.texts.map(function(e2, i2) {
            t3.addText(e2, i2);
          });
        } }, { key: "addXaxisAnnotation", value: function(t3, e2, i2) {
          this.xAxisAnnotations.addXaxisAnnotation(t3, e2, i2);
        } }, { key: "addYaxisAnnotation", value: function(t3, e2, i2) {
          this.yAxisAnnotations.addYaxisAnnotation(t3, e2, i2);
        } }, { key: "addPointAnnotation", value: function(t3, e2, i2) {
          this.pointsAnnotations.addPointAnnotation(t3, e2, i2);
        } }, { key: "addText", value: function(t3, e2) {
          var i2 = t3.x, a2 = t3.y, s2 = t3.text, r2 = t3.textAnchor, o2 = t3.foreColor, n2 = t3.fontSize, l2 = t3.fontFamily, h2 = t3.fontWeight, c2 = t3.cssClass, d2 = t3.backgroundColor, g2 = t3.borderWidth, u2 = t3.strokeDashArray, f2 = t3.borderRadius, p2 = t3.borderColor, x2 = t3.appendTo, b2 = void 0 === x2 ? ".apexcharts-annotations" : x2, v2 = t3.paddingLeft, m2 = void 0 === v2 ? 4 : v2, y2 = t3.paddingRight, w2 = void 0 === y2 ? 4 : y2, k2 = t3.paddingBottom, A2 = void 0 === k2 ? 2 : k2, S2 = t3.paddingTop, C2 = void 0 === S2 ? 2 : S2, L2 = this.w, P2 = this.graphics.drawText({ x: i2, y: a2, text: s2, textAnchor: r2 || "start", fontSize: n2 || "12px", fontWeight: h2 || "regular", fontFamily: l2 || L2.config.chart.fontFamily, foreColor: o2 || L2.config.chart.foreColor, cssClass: c2 }), T2 = L2.globals.dom.baseEl.querySelector(b2);
          T2 && T2.appendChild(P2.node);
          var M2 = P2.bbox();
          if (s2) {
            var I2 = this.graphics.drawRect(M2.x - m2, M2.y - C2, M2.width + m2 + w2, M2.height + A2 + C2, f2, d2 || "transparent", 1, g2, p2, u2);
            T2.insertBefore(I2.node, P2.node);
          }
        } }, { key: "addImage", value: function(t3, e2) {
          var i2 = this.w, a2 = t3.path, s2 = t3.x, r2 = void 0 === s2 ? 0 : s2, o2 = t3.y, n2 = void 0 === o2 ? 0 : o2, l2 = t3.width, h2 = void 0 === l2 ? 20 : l2, c2 = t3.height, d2 = void 0 === c2 ? 20 : c2, g2 = t3.appendTo, u2 = void 0 === g2 ? ".apexcharts-annotations" : g2, f2 = i2.globals.dom.Paper.image(a2);
          f2.size(h2, d2).move(r2, n2);
          var p2 = i2.globals.dom.baseEl.querySelector(u2);
          return p2 && p2.appendChild(f2.node), f2;
        } }, { key: "addXaxisAnnotationExternal", value: function(t3, e2, i2) {
          return this.addAnnotationExternal({ params: t3, pushToMemory: e2, context: i2, type: "xaxis", contextMethod: i2.addXaxisAnnotation }), i2;
        } }, { key: "addYaxisAnnotationExternal", value: function(t3, e2, i2) {
          return this.addAnnotationExternal({ params: t3, pushToMemory: e2, context: i2, type: "yaxis", contextMethod: i2.addYaxisAnnotation }), i2;
        } }, { key: "addPointAnnotationExternal", value: function(t3, e2, i2) {
          return void 0 === this.invertAxis && (this.invertAxis = i2.w.globals.isBarHorizontal), this.addAnnotationExternal({ params: t3, pushToMemory: e2, context: i2, type: "point", contextMethod: i2.addPointAnnotation }), i2;
        } }, { key: "addAnnotationExternal", value: function(t3) {
          var e2 = t3.params, i2 = t3.pushToMemory, a2 = t3.context, s2 = t3.type, r2 = t3.contextMethod, o2 = a2, n2 = o2.w, l2 = n2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations")), h2 = l2.childNodes.length + 1, c2 = new L(), d2 = Object.assign({}, "xaxis" === s2 ? c2.xAxisAnnotation : "yaxis" === s2 ? c2.yAxisAnnotation : c2.pointAnnotation), g2 = x.extend(d2, e2);
          switch (s2) {
            case "xaxis":
              this.addXaxisAnnotation(g2, l2, h2);
              break;
            case "yaxis":
              this.addYaxisAnnotation(g2, l2, h2);
              break;
            case "point":
              this.addPointAnnotation(g2, l2, h2);
          }
          var u2 = n2.globals.dom.baseEl.querySelector(".apexcharts-".concat(s2, "-annotations .apexcharts-").concat(s2, "-annotation-label[rel='").concat(h2, "']")), f2 = this.helpers.addBackgroundToAnno(u2, g2);
          return f2 && l2.insertBefore(f2.node, u2), i2 && n2.globals.memory.methodsToExec.push({ context: o2, id: g2.id ? g2.id : x.randomId(), method: r2, label: "addAnnotation", params: e2 }), a2;
        } }, { key: "clearAnnotations", value: function(t3) {
          var e2 = t3.w, i2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
          e2.globals.memory.methodsToExec.map(function(t4, i3) {
            "addText" !== t4.label && "addAnnotation" !== t4.label || e2.globals.memory.methodsToExec.splice(i3, 1);
          }), i2 = x.listToArray(i2), Array.prototype.forEach.call(i2, function(t4) {
            for (; t4.firstChild; )
              t4.removeChild(t4.firstChild);
          });
        } }, { key: "removeAnnotation", value: function(t3, e2) {
          var i2 = t3.w, a2 = i2.globals.dom.baseEl.querySelectorAll(".".concat(e2));
          a2 && (i2.globals.memory.methodsToExec.map(function(t4, a3) {
            t4.id === e2 && i2.globals.memory.methodsToExec.splice(a3, 1);
          }), Array.prototype.forEach.call(a2, function(t4) {
            t4.parentElement.removeChild(t4);
          }));
        } }]), t2;
      }();
      var T = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        }
        return r(t2, [{ key: "isValidDate", value: function(t3) {
          return !isNaN(this.parseDate(t3));
        } }, { key: "getTimeStamp", value: function(t3) {
          return Date.parse(t3) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t3).toISOString().substr(0, 25)).getTime() : new Date(t3).getTime() : t3;
        } }, { key: "getDate", value: function(t3) {
          return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t3).toUTCString()) : new Date(t3);
        } }, { key: "parseDate", value: function(t3) {
          var e2 = Date.parse(t3);
          if (!isNaN(e2))
            return this.getTimeStamp(t3);
          var i2 = Date.parse(t3.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
          return i2 = this.getTimeStamp(i2);
        } }, { key: "parseDateWithTimezone", value: function(t3) {
          return Date.parse(t3.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
        } }, { key: "formatDate", value: function(t3, e2) {
          var i2 = this.w.globals.locale, a2 = this.w.config.xaxis.labels.datetimeUTC, s2 = ["\0"].concat(u(i2.months)), r2 = [""].concat(u(i2.shortMonths)), o2 = [""].concat(u(i2.days)), n2 = [""].concat(u(i2.shortDays));
          function l2(t4, e3) {
            var i3 = t4 + "";
            for (e3 = e3 || 2; i3.length < e3; )
              i3 = "0" + i3;
            return i3;
          }
          var h2 = a2 ? t3.getUTCFullYear() : t3.getFullYear();
          e2 = (e2 = (e2 = e2.replace(/(^|[^\\])yyyy+/g, "$1" + h2)).replace(/(^|[^\\])yy/g, "$1" + h2.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h2);
          var c2 = (a2 ? t3.getUTCMonth() : t3.getMonth()) + 1;
          e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])MMMM+/g, "$1" + s2[0])).replace(/(^|[^\\])MMM/g, "$1" + r2[0])).replace(/(^|[^\\])MM/g, "$1" + l2(c2))).replace(/(^|[^\\])M/g, "$1" + c2);
          var d2 = a2 ? t3.getUTCDate() : t3.getDate();
          e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])dddd+/g, "$1" + o2[0])).replace(/(^|[^\\])ddd/g, "$1" + n2[0])).replace(/(^|[^\\])dd/g, "$1" + l2(d2))).replace(/(^|[^\\])d/g, "$1" + d2);
          var g2 = a2 ? t3.getUTCHours() : t3.getHours(), f2 = g2 > 12 ? g2 - 12 : 0 === g2 ? 12 : g2;
          e2 = (e2 = (e2 = (e2 = e2.replace(/(^|[^\\])HH+/g, "$1" + l2(g2))).replace(/(^|[^\\])H/g, "$1" + g2)).replace(/(^|[^\\])hh+/g, "$1" + l2(f2))).replace(/(^|[^\\])h/g, "$1" + f2);
          var p2 = a2 ? t3.getUTCMinutes() : t3.getMinutes();
          e2 = (e2 = e2.replace(/(^|[^\\])mm+/g, "$1" + l2(p2))).replace(/(^|[^\\])m/g, "$1" + p2);
          var x2 = a2 ? t3.getUTCSeconds() : t3.getSeconds();
          e2 = (e2 = e2.replace(/(^|[^\\])ss+/g, "$1" + l2(x2))).replace(/(^|[^\\])s/g, "$1" + x2);
          var b2 = a2 ? t3.getUTCMilliseconds() : t3.getMilliseconds();
          e2 = e2.replace(/(^|[^\\])fff+/g, "$1" + l2(b2, 3)), b2 = Math.round(b2 / 10), e2 = e2.replace(/(^|[^\\])ff/g, "$1" + l2(b2)), b2 = Math.round(b2 / 10);
          var v2 = g2 < 12 ? "AM" : "PM";
          e2 = (e2 = (e2 = e2.replace(/(^|[^\\])f/g, "$1" + b2)).replace(/(^|[^\\])TT+/g, "$1" + v2)).replace(/(^|[^\\])T/g, "$1" + v2.charAt(0));
          var m2 = v2.toLowerCase();
          e2 = (e2 = e2.replace(/(^|[^\\])tt+/g, "$1" + m2)).replace(/(^|[^\\])t/g, "$1" + m2.charAt(0));
          var y2 = -t3.getTimezoneOffset(), w2 = a2 || !y2 ? "Z" : y2 > 0 ? "+" : "-";
          if (!a2) {
            var k2 = (y2 = Math.abs(y2)) % 60;
            w2 += l2(Math.floor(y2 / 60)) + ":" + l2(k2);
          }
          e2 = e2.replace(/(^|[^\\])K/g, "$1" + w2);
          var A2 = (a2 ? t3.getUTCDay() : t3.getDay()) + 1;
          return e2 = (e2 = (e2 = (e2 = (e2 = e2.replace(new RegExp(o2[0], "g"), o2[A2])).replace(new RegExp(n2[0], "g"), n2[A2])).replace(new RegExp(s2[0], "g"), s2[c2])).replace(new RegExp(r2[0], "g"), r2[c2])).replace(/\\(.)/g, "$1");
        } }, { key: "getTimeUnitsfromTimestamp", value: function(t3, e2, i2) {
          var a2 = this.w;
          void 0 !== a2.config.xaxis.min && (t3 = a2.config.xaxis.min), void 0 !== a2.config.xaxis.max && (e2 = a2.config.xaxis.max);
          var s2 = this.getDate(t3), r2 = this.getDate(e2), o2 = this.formatDate(s2, "yyyy MM dd HH mm ss fff").split(" "), n2 = this.formatDate(r2, "yyyy MM dd HH mm ss fff").split(" ");
          return { minMillisecond: parseInt(o2[6], 10), maxMillisecond: parseInt(n2[6], 10), minSecond: parseInt(o2[5], 10), maxSecond: parseInt(n2[5], 10), minMinute: parseInt(o2[4], 10), maxMinute: parseInt(n2[4], 10), minHour: parseInt(o2[3], 10), maxHour: parseInt(n2[3], 10), minDate: parseInt(o2[2], 10), maxDate: parseInt(n2[2], 10), minMonth: parseInt(o2[1], 10) - 1, maxMonth: parseInt(n2[1], 10) - 1, minYear: parseInt(o2[0], 10), maxYear: parseInt(n2[0], 10) };
        } }, { key: "isLeapYear", value: function(t3) {
          return t3 % 4 == 0 && t3 % 100 != 0 || t3 % 400 == 0;
        } }, { key: "calculcateLastDaysOfMonth", value: function(t3, e2, i2) {
          return this.determineDaysOfMonths(t3, e2) - i2;
        } }, { key: "determineDaysOfYear", value: function(t3) {
          var e2 = 365;
          return this.isLeapYear(t3) && (e2 = 366), e2;
        } }, { key: "determineRemainingDaysOfYear", value: function(t3, e2, i2) {
          var a2 = this.daysCntOfYear[e2] + i2;
          return e2 > 1 && this.isLeapYear() && a2++, a2;
        } }, { key: "determineDaysOfMonths", value: function(t3, e2) {
          var i2 = 30;
          switch (t3 = x.monthMod(t3), true) {
            case this.months30.indexOf(t3) > -1:
              2 === t3 && (i2 = this.isLeapYear(e2) ? 29 : 28);
              break;
            case this.months31.indexOf(t3) > -1:
            default:
              i2 = 31;
          }
          return i2;
        } }]), t2;
      }();
      var M = function(t2) {
        var e2, i2 = t2.ctx, a2 = t2.seriesIndex, s2 = t2.dataPointIndex, r2 = t2.y1, o2 = t2.y2, n2 = t2.w, l2 = n2.globals.seriesRangeStart[a2][s2], h2 = n2.globals.seriesRangeEnd[a2][s2], c2 = n2.globals.labels[s2], d2 = n2.config.series[a2].name ? n2.config.series[a2].name : "", g2 = n2.config.tooltip.y.formatter, u2 = n2.config.tooltip.y.title.formatter, f2 = { w: n2, seriesIndex: a2, dataPointIndex: s2, start: l2, end: h2 };
        "function" == typeof u2 && (d2 = u2(d2, f2)), null !== (e2 = n2.config.series[a2].data[s2]) && void 0 !== e2 && e2.x && (c2 = n2.config.series[a2].data[s2].x + ":"), "function" == typeof g2 && (c2 = g2(c2, f2)), Number.isFinite(r2) && Number.isFinite(o2) && (l2 = r2, h2 = o2);
        var p2 = "", x2 = "", b2 = n2.globals.colors[a2];
        if (void 0 === n2.config.tooltip.x.formatter)
          if ("datetime" === n2.config.xaxis.type) {
            var v2 = new T(i2);
            p2 = v2.formatDate(v2.getDate(l2), n2.config.tooltip.x.format), x2 = v2.formatDate(v2.getDate(h2), n2.config.tooltip.x.format);
          } else
            p2 = l2, x2 = h2;
        else
          p2 = n2.config.tooltip.x.formatter(l2), x2 = n2.config.tooltip.x.formatter(h2);
        return { start: l2, end: h2, startVal: p2, endVal: x2, ylabel: c2, color: b2, seriesName: d2 };
      };
      var I = function(t2) {
        var e2 = t2.color, i2 = t2.seriesName, a2 = t2.ylabel, s2 = t2.start, r2 = t2.end, o2 = t2.seriesIndex, n2 = t2.dataPointIndex, l2 = t2.ctx.tooltip.tooltipLabels.getFormatters(o2);
        s2 = l2.yLbFormatter(s2), r2 = l2.yLbFormatter(r2);
        var h2 = l2.yLbFormatter(t2.w.globals.series[o2][n2]), c2 = '<span class="value start-value">\n  '.concat(s2, '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  ').concat(r2, "\n  </span>");
        return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + e2 + '">' + (i2 || "") + '</span></div><div> <span class="category">' + a2 + " </span> " + (t2.w.globals.comboCharts ? "rangeArea" === t2.w.config.series[o2].type || "rangeBar" === t2.w.config.series[o2].type ? c2 : "<span>".concat(h2, "</span>") : c2) + " </div></div>";
      };
      var X = function() {
        function t2(e2) {
          a(this, t2), this.opts = e2;
        }
        return r(t2, [{ key: "line", value: function() {
          return { chart: { animations: { easing: "swing" } }, dataLabels: { enabled: false }, stroke: { width: 5, curve: "straight" }, markers: { size: 0, hover: { sizeOffset: 6 } }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "sparkline", value: function(t3) {
          this.opts.yaxis[0].show = false, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = false, this.opts.yaxis[0].axisTicks.show = false, this.opts.yaxis[0].floating = true;
          return x.extend(t3, { grid: { show: false, padding: { left: 0, right: 0, top: 0, bottom: 0 } }, legend: { show: false }, xaxis: { labels: { show: false }, tooltip: { enabled: false }, axisBorder: { show: false }, axisTicks: { show: false } }, chart: { toolbar: { show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false } });
        } }, { key: "bar", value: function() {
          return { chart: { stacked: false, animations: { easing: "swing" } }, plotOptions: { bar: { dataLabels: { position: "center" } } }, dataLabels: { style: { colors: ["#fff"] }, background: { enabled: false } }, stroke: { width: 0, lineCap: "round" }, fill: { opacity: 0.85 }, legend: { markers: { shape: "square", radius: 2, size: 8 } }, tooltip: { shared: false, intersect: true }, xaxis: { tooltip: { enabled: false }, tickPlacement: "between", crosshairs: { width: "barWidth", position: "back", fill: { type: "gradient" }, dropShadow: { enabled: false }, stroke: { width: 0 } } } };
        } }, { key: "candlestick", value: function() {
          var t3 = this;
          return { stroke: { width: 1, colors: ["#333"] }, fill: { opacity: 1 }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e2) {
            var i2 = e2.seriesIndex, a2 = e2.dataPointIndex, s2 = e2.w;
            return t3._getBoxTooltip(s2, i2, a2, ["Open", "High", "", "Low", "Close"], "candlestick");
          } }, states: { active: { filter: { type: "none" } } }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "boxPlot", value: function() {
          var t3 = this;
          return { chart: { animations: { dynamicAnimation: { enabled: false } } }, stroke: { width: 1, colors: ["#24292e"] }, dataLabels: { enabled: false }, tooltip: { shared: true, custom: function(e2) {
            var i2 = e2.seriesIndex, a2 = e2.dataPointIndex, s2 = e2.w;
            return t3._getBoxTooltip(s2, i2, a2, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot");
          } }, markers: { size: 5, strokeWidth: 1, strokeColors: "#111" }, xaxis: { crosshairs: { width: 1 } } };
        } }, { key: "rangeBar", value: function() {
          return { stroke: { width: 0, lineCap: "square" }, plotOptions: { bar: { borderRadius: 0, dataLabels: { position: "center" } } }, dataLabels: { enabled: false, formatter: function(t3, e2) {
            e2.ctx;
            var i2 = e2.seriesIndex, a2 = e2.dataPointIndex, s2 = e2.w, r2 = function() {
              var t4 = s2.globals.seriesRangeStart[i2][a2];
              return s2.globals.seriesRangeEnd[i2][a2] - t4;
            };
            return s2.globals.comboCharts ? "rangeBar" === s2.config.series[i2].type || "rangeArea" === s2.config.series[i2].type ? r2() : t3 : r2();
          }, background: { enabled: false }, style: { colors: ["#fff"] } }, tooltip: { shared: false, followCursor: true, custom: function(t3) {
            return t3.w.config.plotOptions && t3.w.config.plotOptions.bar && t3.w.config.plotOptions.bar.horizontal ? function(t4) {
              var e2 = M(t4), i2 = e2.color, a2 = e2.seriesName, s2 = e2.ylabel, r2 = e2.startVal, o2 = e2.endVal;
              return I({ color: i2, seriesName: a2, ylabel: s2, start: r2, end: o2 });
            }(t3) : function(t4) {
              var e2 = M(t4), i2 = e2.color, a2 = e2.seriesName, s2 = e2.ylabel, r2 = e2.start, o2 = e2.end;
              return I({ color: i2, seriesName: a2, ylabel: s2, start: r2, end: o2 });
            }(t3);
          } }, xaxis: { tickPlacement: "between", tooltip: { enabled: false }, crosshairs: { stroke: { width: 0 } } } };
        } }, { key: "area", value: function() {
          return { stroke: { width: 4, fill: { type: "solid", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } } }, fill: { type: "gradient", gradient: { inverseColors: false, shade: "light", type: "vertical", opacityFrom: 0.65, opacityTo: 0.5, stops: [0, 100, 100] } }, markers: { size: 0, hover: { sizeOffset: 6 } }, tooltip: { followCursor: false } };
        } }, { key: "rangeArea", value: function() {
          return { stroke: { curve: "straight", width: 0 }, fill: { type: "solid", opacity: 0.6 }, markers: { size: 0 }, states: { hover: { filter: { type: "none" } }, active: { filter: { type: "none" } } }, tooltip: { intersect: false, shared: true, followCursor: true, custom: function(t3) {
            return function(t4) {
              var i2 = M(t4), a2 = i2.color, s2 = i2.seriesName, r2 = i2.ylabel, o2 = i2.start, n2 = i2.end;
              return I(e(e({}, t4), {}, { color: a2, seriesName: s2, ylabel: r2, start: o2, end: n2 }));
            }(t3);
          } } };
        } }, { key: "brush", value: function(t3) {
          return x.extend(t3, { chart: { toolbar: { autoSelected: "selection", show: false }, zoom: { enabled: false } }, dataLabels: { enabled: false }, stroke: { width: 1 }, tooltip: { enabled: false }, xaxis: { tooltip: { enabled: false } } });
        } }, { key: "stacked100", value: function(t3) {
          t3.dataLabels = t3.dataLabels || {}, t3.dataLabels.formatter = t3.dataLabels.formatter || void 0;
          var e2 = t3.dataLabels.formatter;
          return t3.yaxis.forEach(function(e3, i2) {
            t3.yaxis[i2].min = 0, t3.yaxis[i2].max = 100;
          }), "bar" === t3.chart.type && (t3.dataLabels.formatter = e2 || function(t4) {
            return "number" == typeof t4 && t4 ? t4.toFixed(0) + "%" : t4;
          }), t3;
        } }, { key: "convertCatToNumeric", value: function(t3) {
          return t3.xaxis.convertedCatToNumeric = true, t3;
        } }, { key: "convertCatToNumericXaxis", value: function(t3, e2, i2) {
          t3.xaxis.type = "numeric", t3.xaxis.labels = t3.xaxis.labels || {}, t3.xaxis.labels.formatter = t3.xaxis.labels.formatter || function(t4) {
            return x.isNumber(t4) ? Math.floor(t4) : t4;
          };
          var a2 = t3.xaxis.labels.formatter, s2 = t3.xaxis.categories && t3.xaxis.categories.length ? t3.xaxis.categories : t3.labels;
          return i2 && i2.length && (s2 = i2.map(function(t4) {
            return Array.isArray(t4) ? t4 : String(t4);
          })), s2 && s2.length && (t3.xaxis.labels.formatter = function(t4) {
            return x.isNumber(t4) ? a2(s2[Math.floor(t4) - 1]) : a2(t4);
          }), t3.xaxis.categories = [], t3.labels = [], t3.xaxis.tickAmount = t3.xaxis.tickAmount || "dataPoints", t3;
        } }, { key: "bubble", value: function() {
          return { dataLabels: { style: { colors: ["#fff"] } }, tooltip: { shared: false, intersect: true }, xaxis: { crosshairs: { width: 0 } }, fill: { type: "solid", gradient: { shade: "light", inverse: true, shadeIntensity: 0.55, opacityFrom: 0.4, opacityTo: 0.8 } } };
        } }, { key: "scatter", value: function() {
          return { dataLabels: { enabled: false }, tooltip: { shared: false, intersect: true }, markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } } };
        } }, { key: "heatmap", value: function() {
          return { chart: { stacked: false }, fill: { opacity: 1 }, dataLabels: { style: { colors: ["#fff"] } }, stroke: { colors: ["#fff"] }, tooltip: { followCursor: true, marker: { show: false }, x: { show: false } }, legend: { position: "top", markers: { shape: "square", size: 10, offsetY: 2 } }, grid: { padding: { right: 20 } } };
        } }, { key: "treemap", value: function() {
          return { chart: { zoom: { enabled: false } }, dataLabels: { style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] } }, stroke: { show: true, width: 2, colors: ["#fff"] }, legend: { show: false }, fill: { gradient: { stops: [0, 100] } }, tooltip: { followCursor: true, x: { show: false } }, grid: { padding: { left: 0, right: 0 } }, xaxis: { crosshairs: { show: false }, tooltip: { enabled: false } } };
        } }, { key: "pie", value: function() {
          return { chart: { toolbar: { show: false } }, plotOptions: { pie: { donut: { labels: { show: false } } } }, dataLabels: { formatter: function(t3) {
            return t3.toFixed(1) + "%";
          }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", stops: [0, 100] } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "donut", value: function() {
          return { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t3) {
            return t3.toFixed(1) + "%";
          }, style: { colors: ["#fff"] }, background: { enabled: false }, dropShadow: { enabled: true } }, stroke: { colors: ["#fff"] }, fill: { opacity: 1, gradient: { shade: "light", shadeIntensity: 0.35, stops: [80, 100], opacityFrom: 1, opacityTo: 1 } }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "polarArea", value: function() {
          return this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6, { chart: { toolbar: { show: false } }, dataLabels: { formatter: function(t3) {
            return t3.toFixed(1) + "%";
          }, enabled: false }, stroke: { show: true, width: 2 }, fill: { opacity: 0.7 }, tooltip: { theme: "dark", fillSeriesColor: true }, legend: { position: "right" } };
        } }, { key: "radar", value: function() {
          return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, { dataLabels: { enabled: false, style: { fontSize: "11px" } }, stroke: { width: 2 }, markers: { size: 3, strokeWidth: 1, strokeOpacity: 1 }, fill: { opacity: 0.2 }, tooltip: { shared: false, intersect: true, followCursor: true }, grid: { show: false }, xaxis: { labels: { formatter: function(t3) {
            return t3;
          }, style: { colors: ["#a8a8a8"], fontSize: "11px" } }, tooltip: { enabled: false }, crosshairs: { show: false } } };
        } }, { key: "radialBar", value: function() {
          return { chart: { animations: { dynamicAnimation: { enabled: true, speed: 800 } }, toolbar: { show: false } }, fill: { gradient: { shade: "dark", shadeIntensity: 0.4, inverseColors: false, type: "diagonal2", opacityFrom: 1, opacityTo: 1, stops: [70, 98, 100] } }, legend: { show: false, position: "right" }, tooltip: { enabled: false, fillSeriesColor: true } };
        } }, { key: "_getBoxTooltip", value: function(t3, e2, i2, a2, s2) {
          var r2 = t3.globals.seriesCandleO[e2][i2], o2 = t3.globals.seriesCandleH[e2][i2], n2 = t3.globals.seriesCandleM[e2][i2], l2 = t3.globals.seriesCandleL[e2][i2], h2 = t3.globals.seriesCandleC[e2][i2];
          return t3.config.series[e2].type && t3.config.series[e2].type !== s2 ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t3.config.series[e2].name ? t3.config.series[e2].name : "series-" + (e2 + 1), ": <strong>").concat(t3.globals.series[e2][i2], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t3.config.chart.type, '">') + "<div>".concat(a2[0], ': <span class="value">') + r2 + "</span></div>" + "<div>".concat(a2[1], ': <span class="value">') + o2 + "</span></div>" + (n2 ? "<div>".concat(a2[2], ': <span class="value">') + n2 + "</span></div>" : "") + "<div>".concat(a2[3], ': <span class="value">') + l2 + "</span></div>" + "<div>".concat(a2[4], ': <span class="value">') + h2 + "</span></div></div>";
        } }]), t2;
      }();
      var z = function() {
        function t2(e2) {
          a(this, t2), this.opts = e2;
        }
        return r(t2, [{ key: "init", value: function(t3) {
          var e2 = t3.responsiveOverride, a2 = this.opts, s2 = new L(), r2 = new X(a2);
          this.chartType = a2.chart.type, "histogram" === this.chartType && (a2.chart.type = "bar", a2 = x.extend({ plotOptions: { bar: { columnWidth: "99.99%" } } }, a2)), a2 = this.extendYAxis(a2), a2 = this.extendAnnotations(a2);
          var o2 = s2.init(), n2 = {};
          if (a2 && "object" === i(a2)) {
            var l2 = {};
            l2 = -1 !== ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "rangeArea", "histogram", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(a2.chart.type) ? r2[a2.chart.type]() : r2.line(), a2.chart.brush && a2.chart.brush.enabled && (l2 = r2.brush(l2)), a2.chart.stacked && "100%" === a2.chart.stackType && (a2 = r2.stacked100(a2)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a2), a2.xaxis = a2.xaxis || window.Apex.xaxis || {}, e2 || (a2.xaxis.convertedCatToNumeric = false), ((a2 = this.checkForCatToNumericXAxis(this.chartType, l2, a2)).chart.sparkline && a2.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (l2 = r2.sparkline(l2)), n2 = x.extend(o2, l2);
          }
          var h2 = x.extend(n2, window.Apex);
          return o2 = x.extend(h2, a2), o2 = this.handleUserInputErrors(o2);
        } }, { key: "checkForCatToNumericXAxis", value: function(t3, e2, i2) {
          var a2 = new X(i2), s2 = ("bar" === t3 || "boxPlot" === t3) && i2.plotOptions && i2.plotOptions.bar && i2.plotOptions.bar.horizontal, r2 = "pie" === t3 || "polarArea" === t3 || "donut" === t3 || "radar" === t3 || "radialBar" === t3 || "heatmap" === t3, o2 = "datetime" !== i2.xaxis.type && "numeric" !== i2.xaxis.type, n2 = i2.xaxis.tickPlacement ? i2.xaxis.tickPlacement : e2.xaxis && e2.xaxis.tickPlacement;
          return s2 || r2 || !o2 || "between" === n2 || (i2 = a2.convertCatToNumeric(i2)), i2;
        } }, { key: "extendYAxis", value: function(t3, e2) {
          var i2 = new L();
          (void 0 === t3.yaxis || !t3.yaxis || Array.isArray(t3.yaxis) && 0 === t3.yaxis.length) && (t3.yaxis = {}), t3.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t3.yaxis = x.extend(t3.yaxis, window.Apex.yaxis)), t3.yaxis.constructor !== Array ? t3.yaxis = [x.extend(i2.yAxis, t3.yaxis)] : t3.yaxis = x.extendArray(t3.yaxis, i2.yAxis);
          var a2 = false;
          t3.yaxis.forEach(function(t4) {
            t4.logarithmic && (a2 = true);
          });
          var s2 = t3.series;
          return e2 && !s2 && (s2 = e2.config.series), a2 && s2.length !== t3.yaxis.length && s2.length && (t3.yaxis = s2.map(function(e3, a3) {
            if (e3.name || (s2[a3].name = "series-".concat(a3 + 1)), t3.yaxis[a3])
              return t3.yaxis[a3].seriesName = s2[a3].name, t3.yaxis[a3];
            var r2 = x.extend(i2.yAxis, t3.yaxis[0]);
            return r2.show = false, r2;
          })), a2 && s2.length > 1 && s2.length !== t3.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."), t3;
        } }, { key: "extendAnnotations", value: function(t3) {
          return void 0 === t3.annotations && (t3.annotations = {}, t3.annotations.yaxis = [], t3.annotations.xaxis = [], t3.annotations.points = []), t3 = this.extendYAxisAnnotations(t3), t3 = this.extendXAxisAnnotations(t3), t3 = this.extendPointAnnotations(t3);
        } }, { key: "extendYAxisAnnotations", value: function(t3) {
          var e2 = new L();
          return t3.annotations.yaxis = x.extendArray(void 0 !== t3.annotations.yaxis ? t3.annotations.yaxis : [], e2.yAxisAnnotation), t3;
        } }, { key: "extendXAxisAnnotations", value: function(t3) {
          var e2 = new L();
          return t3.annotations.xaxis = x.extendArray(void 0 !== t3.annotations.xaxis ? t3.annotations.xaxis : [], e2.xAxisAnnotation), t3;
        } }, { key: "extendPointAnnotations", value: function(t3) {
          var e2 = new L();
          return t3.annotations.points = x.extendArray(void 0 !== t3.annotations.points ? t3.annotations.points : [], e2.pointAnnotation), t3;
        } }, { key: "checkForDarkTheme", value: function(t3) {
          t3.theme && "dark" === t3.theme.mode && (t3.tooltip || (t3.tooltip = {}), "light" !== t3.tooltip.theme && (t3.tooltip.theme = "dark"), t3.chart.foreColor || (t3.chart.foreColor = "#f6f7f8"), t3.chart.background || (t3.chart.background = "#424242"), t3.theme.palette || (t3.theme.palette = "palette4"));
        } }, { key: "handleUserInputErrors", value: function(t3) {
          var e2 = t3;
          if (e2.tooltip.shared && e2.tooltip.intersect)
            throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
          if ("bar" === e2.chart.type && e2.plotOptions.bar.horizontal) {
            if (e2.yaxis.length > 1)
              throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
            e2.yaxis[0].reversed && (e2.yaxis[0].opposite = true), e2.xaxis.tooltip.enabled = false, e2.yaxis[0].tooltip.enabled = false, e2.chart.zoom.enabled = false;
          }
          return "bar" !== e2.chart.type && "rangeBar" !== e2.chart.type || e2.tooltip.shared && "barWidth" === e2.xaxis.crosshairs.width && e2.series.length > 1 && (e2.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e2.chart.type && "boxPlot" !== e2.chart.type || e2.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e2.chart.type, " chart is not supported.")), e2.yaxis[0].reversed = false), e2;
        } }]), t2;
      }();
      var E = function() {
        function t2() {
          a(this, t2);
        }
        return r(t2, [{ key: "initGlobalVars", value: function(t3) {
          t3.series = [], t3.seriesCandleO = [], t3.seriesCandleH = [], t3.seriesCandleM = [], t3.seriesCandleL = [], t3.seriesCandleC = [], t3.seriesRangeStart = [], t3.seriesRangeEnd = [], t3.seriesRange = [], t3.seriesPercent = [], t3.seriesGoals = [], t3.seriesX = [], t3.seriesZ = [], t3.seriesNames = [], t3.seriesTotals = [], t3.seriesLog = [], t3.seriesColors = [], t3.stackedSeriesTotals = [], t3.seriesXvalues = [], t3.seriesYvalues = [], t3.labels = [], t3.hasGroups = false, t3.groups = [], t3.categoryLabels = [], t3.timescaleLabels = [], t3.noLabelsProvided = false, t3.resizeTimer = null, t3.selectionResizeTimer = null, t3.delayedElements = [], t3.pointsArray = [], t3.dataLabelsRects = [], t3.isXNumeric = false, t3.xaxisLabelsCount = 0, t3.skipLastTimelinelabel = false, t3.skipFirstTimelinelabel = false, t3.isDataXYZ = false, t3.isMultiLineX = false, t3.isMultipleYAxis = false, t3.maxY = -Number.MAX_VALUE, t3.minY = Number.MIN_VALUE, t3.minYArr = [], t3.maxYArr = [], t3.maxX = -Number.MAX_VALUE, t3.minX = Number.MAX_VALUE, t3.initialMaxX = -Number.MAX_VALUE, t3.initialMinX = Number.MAX_VALUE, t3.maxDate = 0, t3.minDate = Number.MAX_VALUE, t3.minZ = Number.MAX_VALUE, t3.maxZ = -Number.MAX_VALUE, t3.minXDiff = Number.MAX_VALUE, t3.yAxisScale = [], t3.xAxisScale = null, t3.xAxisTicksPositions = [], t3.yLabelsCoords = [], t3.yTitleCoords = [], t3.barPadForNumericAxis = 0, t3.padHorizontal = 0, t3.xRange = 0, t3.yRange = [], t3.zRange = 0, t3.dataPoints = 0, t3.xTickAmount = 0;
        } }, { key: "globalVars", value: function(t3) {
          return { chartID: null, cuid: null, events: { beforeMount: [], mounted: [], updated: [], clicked: [], selection: [], dataPointSelection: [], zoomed: [], scrolled: [] }, colors: [], clientX: null, clientY: null, fill: { colors: [] }, stroke: { colors: [] }, dataLabels: { style: { colors: [] } }, radarPolygons: { fill: { colors: [] } }, markers: { colors: [], size: t3.markers.size, largestSize: 0 }, animationEnded: false, isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints, isDirty: false, isExecCalled: false, initialConfig: null, initialSeries: [], lastXAxis: [], lastYAxis: [], columnSeries: null, labels: [], timescaleLabels: [], noLabelsProvided: false, allSeriesCollapsed: false, collapsedSeries: [], collapsedSeriesIndices: [], ancillaryCollapsedSeries: [], ancillaryCollapsedSeriesIndices: [], risingSeries: [], dataFormatXNumeric: false, capturedSeriesIndex: -1, capturedDataPointIndex: -1, selectedDataPoints: [], goldenPadding: 35, invalidLogScale: false, ignoreYAxisIndexes: [], yAxisSameScaleIndices: [], maxValsInArrayIndex: 0, radialSize: 0, selection: void 0, zoomEnabled: "zoom" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.zoom && t3.chart.zoom.enabled, panEnabled: "pan" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.pan, selectionEnabled: "selection" === t3.chart.toolbar.autoSelected && t3.chart.toolbar.tools.selection, yaxis: null, mousedown: false, lastClientPosition: {}, visibleXRange: void 0, yValueDecimal: 0, total: 0, SVGNS: "http://www.w3.org/2000/svg", svgWidth: 0, svgHeight: 0, noData: false, locale: {}, dom: {}, memory: { methodsToExec: [] }, shouldAnimate: true, skipLastTimelinelabel: false, skipFirstTimelinelabel: false, delayedElements: [], axisCharts: true, isDataXYZ: false, resized: false, resizeTimer: null, comboCharts: false, dataChanged: false, previousPaths: [], allSeriesHasEqualX: true, pointsArray: [], dataLabelsRects: [], lastDrawnDataLabelsIndexes: [], hasNullValues: false, easing: null, zoomed: false, gridWidth: 0, gridHeight: 0, rotateXLabels: false, defaultLabels: false, xLabelFormatter: void 0, yLabelFormatters: [], xaxisTooltipFormatter: void 0, ttKeyFormatter: void 0, ttVal: void 0, ttZFormatter: void 0, LINE_HEIGHT_RATIO: 1.618, xAxisLabelsHeight: 0, xAxisGroupLabelsHeight: 0, xAxisLabelsWidth: 0, yAxisLabelsWidth: 0, scaleX: 1, scaleY: 1, translateX: 0, translateY: 0, translateYAxisX: [], yAxisWidths: [], translateXAxisY: 0, translateXAxisX: 0, tooltip: null };
        } }, { key: "init", value: function(t3) {
          var e2 = this.globalVars(t3);
          return this.initGlobalVars(e2), e2.initialConfig = x.extend({}, t3), e2.initialSeries = x.clone(t3.series), e2.lastXAxis = x.clone(e2.initialConfig.xaxis), e2.lastYAxis = x.clone(e2.initialConfig.yaxis), e2;
        } }]), t2;
      }();
      var Y = function() {
        function t2(e2) {
          a(this, t2), this.opts = e2;
        }
        return r(t2, [{ key: "init", value: function() {
          var t3 = new z(this.opts).init({ responsiveOverride: false });
          return { config: t3, globals: new E().init(t3) };
        } }]), t2;
      }();
      var F = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.opts = null, this.seriesIndex = 0;
        }
        return r(t2, [{ key: "clippedImgArea", value: function(t3) {
          var e2 = this.w, i2 = e2.config, a2 = parseInt(e2.globals.gridWidth, 10), s2 = parseInt(e2.globals.gridHeight, 10), r2 = a2 > s2 ? a2 : s2, o2 = t3.image, n2 = 0, l2 = 0;
          void 0 === t3.width && void 0 === t3.height ? void 0 !== i2.fill.image.width && void 0 !== i2.fill.image.height ? (n2 = i2.fill.image.width + 1, l2 = i2.fill.image.height) : (n2 = r2 + 1, l2 = r2) : (n2 = t3.width, l2 = t3.height);
          var h2 = document.createElementNS(e2.globals.SVGNS, "pattern");
          m.setAttrs(h2, { id: t3.patternID, patternUnits: t3.patternUnits ? t3.patternUnits : "userSpaceOnUse", width: n2 + "px", height: l2 + "px" });
          var c2 = document.createElementNS(e2.globals.SVGNS, "image");
          h2.appendChild(c2), c2.setAttributeNS(window.SVG.xlink, "href", o2), m.setAttrs(c2, { x: 0, y: 0, preserveAspectRatio: "none", width: n2 + "px", height: l2 + "px" }), c2.style.opacity = t3.opacity, e2.globals.dom.elDefs.node.appendChild(h2);
        } }, { key: "getSeriesIndex", value: function(t3) {
          var e2 = this.w;
          return ("bar" === e2.config.chart.type || "rangeBar" === e2.config.chart.type) && e2.config.plotOptions.bar.distributed || "heatmap" === e2.config.chart.type || "treemap" === e2.config.chart.type ? this.seriesIndex = t3.seriesNumber : this.seriesIndex = t3.seriesNumber % e2.globals.series.length, this.seriesIndex;
        } }, { key: "fillPath", value: function(t3) {
          var e2 = this.w;
          this.opts = t3;
          var i2, a2, s2, r2 = this.w.config;
          this.seriesIndex = this.getSeriesIndex(t3);
          var o2 = this.getFillColors()[this.seriesIndex];
          void 0 !== e2.globals.seriesColors[this.seriesIndex] && (o2 = e2.globals.seriesColors[this.seriesIndex]), "function" == typeof o2 && (o2 = o2({ seriesIndex: this.seriesIndex, dataPointIndex: t3.dataPointIndex, value: t3.value, w: e2 }));
          var n2 = t3.fillType ? t3.fillType : this.getFillType(this.seriesIndex), l2 = Array.isArray(r2.fill.opacity) ? r2.fill.opacity[this.seriesIndex] : r2.fill.opacity;
          t3.color && (o2 = t3.color);
          var h2 = o2;
          if (-1 === o2.indexOf("rgb") ? o2.length < 9 && (h2 = x.hexToRgba(o2, l2)) : o2.indexOf("rgba") > -1 && (l2 = x.getOpacityFromRGBA(o2)), t3.opacity && (l2 = t3.opacity), "pattern" === n2 && (a2 = this.handlePatternFill({ fillConfig: t3.fillConfig, patternFill: a2, fillColor: o2, fillOpacity: l2, defaultColor: h2 })), "gradient" === n2 && (s2 = this.handleGradientFill({ fillConfig: t3.fillConfig, fillColor: o2, fillOpacity: l2, i: this.seriesIndex })), "image" === n2) {
            var c2 = r2.fill.image.src, d2 = t3.patternID ? t3.patternID : "";
            this.clippedImgArea({ opacity: l2, image: Array.isArray(c2) ? t3.seriesNumber < c2.length ? c2[t3.seriesNumber] : c2[0] : c2, width: t3.width ? t3.width : void 0, height: t3.height ? t3.height : void 0, patternUnits: t3.patternUnits, patternID: "pattern".concat(e2.globals.cuid).concat(t3.seriesNumber + 1).concat(d2) }), i2 = "url(#pattern".concat(e2.globals.cuid).concat(t3.seriesNumber + 1).concat(d2, ")");
          } else
            i2 = "gradient" === n2 ? s2 : "pattern" === n2 ? a2 : h2;
          return t3.solid && (i2 = h2), i2;
        } }, { key: "getFillType", value: function(t3) {
          var e2 = this.w;
          return Array.isArray(e2.config.fill.type) ? e2.config.fill.type[t3] : e2.config.fill.type;
        } }, { key: "getFillColors", value: function() {
          var t3 = this.w, e2 = t3.config, i2 = this.opts, a2 = [];
          return t3.globals.comboCharts ? "line" === t3.config.series[this.seriesIndex].type ? Array.isArray(t3.globals.stroke.colors) ? a2 = t3.globals.stroke.colors : a2.push(t3.globals.stroke.colors) : Array.isArray(t3.globals.fill.colors) ? a2 = t3.globals.fill.colors : a2.push(t3.globals.fill.colors) : "line" === e2.chart.type ? Array.isArray(t3.globals.stroke.colors) ? a2 = t3.globals.stroke.colors : a2.push(t3.globals.stroke.colors) : Array.isArray(t3.globals.fill.colors) ? a2 = t3.globals.fill.colors : a2.push(t3.globals.fill.colors), void 0 !== i2.fillColors && (a2 = [], Array.isArray(i2.fillColors) ? a2 = i2.fillColors.slice() : a2.push(i2.fillColors)), a2;
        } }, { key: "handlePatternFill", value: function(t3) {
          var e2 = t3.fillConfig, i2 = t3.patternFill, a2 = t3.fillColor, s2 = t3.fillOpacity, r2 = t3.defaultColor, o2 = this.w.config.fill;
          e2 && (o2 = e2);
          var n2 = this.opts, l2 = new m(this.ctx), h2 = Array.isArray(o2.pattern.strokeWidth) ? o2.pattern.strokeWidth[this.seriesIndex] : o2.pattern.strokeWidth, c2 = a2;
          Array.isArray(o2.pattern.style) ? i2 = void 0 !== o2.pattern.style[n2.seriesNumber] ? l2.drawPattern(o2.pattern.style[n2.seriesNumber], o2.pattern.width, o2.pattern.height, c2, h2, s2) : r2 : i2 = l2.drawPattern(o2.pattern.style, o2.pattern.width, o2.pattern.height, c2, h2, s2);
          return i2;
        } }, { key: "handleGradientFill", value: function(t3) {
          var e2 = t3.fillColor, i2 = t3.fillOpacity, a2 = t3.fillConfig, s2 = t3.i, r2 = this.w.config.fill;
          a2 && (r2 = a2);
          var o2, n2 = this.opts, l2 = new m(this.ctx), h2 = new x(), c2 = r2.gradient.type, d2 = e2, g2 = void 0 === r2.gradient.opacityFrom ? i2 : Array.isArray(r2.gradient.opacityFrom) ? r2.gradient.opacityFrom[s2] : r2.gradient.opacityFrom;
          d2.indexOf("rgba") > -1 && (g2 = x.getOpacityFromRGBA(d2));
          var u2 = void 0 === r2.gradient.opacityTo ? i2 : Array.isArray(r2.gradient.opacityTo) ? r2.gradient.opacityTo[s2] : r2.gradient.opacityTo;
          if (void 0 === r2.gradient.gradientToColors || 0 === r2.gradient.gradientToColors.length)
            o2 = "dark" === r2.gradient.shade ? h2.shadeColor(-1 * parseFloat(r2.gradient.shadeIntensity), e2.indexOf("rgb") > -1 ? x.rgb2hex(e2) : e2) : h2.shadeColor(parseFloat(r2.gradient.shadeIntensity), e2.indexOf("rgb") > -1 ? x.rgb2hex(e2) : e2);
          else if (r2.gradient.gradientToColors[n2.seriesNumber]) {
            var f2 = r2.gradient.gradientToColors[n2.seriesNumber];
            o2 = f2, f2.indexOf("rgba") > -1 && (u2 = x.getOpacityFromRGBA(f2));
          } else
            o2 = e2;
          if (r2.gradient.gradientFrom && (d2 = r2.gradient.gradientFrom), r2.gradient.gradientTo && (o2 = r2.gradient.gradientTo), r2.gradient.inverseColors) {
            var p2 = d2;
            d2 = o2, o2 = p2;
          }
          return d2.indexOf("rgb") > -1 && (d2 = x.rgb2hex(d2)), o2.indexOf("rgb") > -1 && (o2 = x.rgb2hex(o2)), l2.drawGradient(c2, d2, o2, g2, u2, n2.size, r2.gradient.stops, r2.gradient.colorStops, s2);
        } }]), t2;
      }();
      var R = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "setGlobalMarkerSize", value: function() {
          var t3 = this.w;
          if (t3.globals.markers.size = Array.isArray(t3.config.markers.size) ? t3.config.markers.size : [t3.config.markers.size], t3.globals.markers.size.length > 0) {
            if (t3.globals.markers.size.length < t3.globals.series.length + 1)
              for (var e2 = 0; e2 <= t3.globals.series.length; e2++)
                void 0 === t3.globals.markers.size[e2] && t3.globals.markers.size.push(t3.globals.markers.size[0]);
          } else
            t3.globals.markers.size = t3.config.series.map(function(e3) {
              return t3.config.markers.size;
            });
        } }, { key: "plotChartMarkers", value: function(t3, e2, i2, a2) {
          var s2, r2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o2 = this.w, n2 = e2, l2 = t3, h2 = null, c2 = new m(this.ctx), d2 = o2.config.markers.discrete && o2.config.markers.discrete.length;
          if ((o2.globals.markers.size[e2] > 0 || r2 || d2) && (h2 = c2.group({ class: r2 || d2 ? "" : "apexcharts-series-markers" })).attr("clip-path", "url(#gridRectMarkerMask".concat(o2.globals.cuid, ")")), Array.isArray(l2.x))
            for (var g2 = 0; g2 < l2.x.length; g2++) {
              var u2 = i2;
              1 === i2 && 0 === g2 && (u2 = 0), 1 === i2 && 1 === g2 && (u2 = 1);
              var f2 = "apexcharts-marker";
              "line" !== o2.config.chart.type && "area" !== o2.config.chart.type || o2.globals.comboCharts || o2.config.tooltip.intersect || (f2 += " no-pointer-events");
              var p2 = Array.isArray(o2.config.markers.size) ? o2.globals.markers.size[e2] > 0 : o2.config.markers.size > 0;
              if (p2 || r2 || d2) {
                x.isNumber(l2.y[g2]) ? f2 += " w".concat(x.randomId()) : f2 = "apexcharts-nullpoint";
                var b2 = this.getMarkerConfig({ cssClass: f2, seriesIndex: e2, dataPointIndex: u2 });
                o2.config.series[n2].data[u2] && (o2.config.series[n2].data[u2].fillColor && (b2.pointFillColor = o2.config.series[n2].data[u2].fillColor), o2.config.series[n2].data[u2].strokeColor && (b2.pointStrokeColor = o2.config.series[n2].data[u2].strokeColor)), a2 && (b2.pSize = a2), (s2 = c2.drawMarker(l2.x[g2], l2.y[g2], b2)).attr("rel", u2), s2.attr("j", u2), s2.attr("index", e2), s2.node.setAttribute("default-marker-size", b2.pSize);
                var y2 = new v(this.ctx);
                y2.setSelectionFilter(s2, e2, u2), this.addEvents(s2), h2 && h2.add(s2);
              } else
                void 0 === o2.globals.pointsArray[e2] && (o2.globals.pointsArray[e2] = []), o2.globals.pointsArray[e2].push([l2.x[g2], l2.y[g2]]);
            }
          return h2;
        } }, { key: "getMarkerConfig", value: function(t3) {
          var e2 = t3.cssClass, i2 = t3.seriesIndex, a2 = t3.dataPointIndex, s2 = void 0 === a2 ? null : a2, r2 = t3.finishRadius, o2 = void 0 === r2 ? null : r2, n2 = this.w, l2 = this.getMarkerStyle(i2), h2 = n2.globals.markers.size[i2], c2 = n2.config.markers;
          return null !== s2 && c2.discrete.length && c2.discrete.map(function(t4) {
            t4.seriesIndex === i2 && t4.dataPointIndex === s2 && (l2.pointStrokeColor = t4.strokeColor, l2.pointFillColor = t4.fillColor, h2 = t4.size, l2.pointShape = t4.shape);
          }), { pSize: null === o2 ? h2 : o2, pRadius: c2.radius, width: Array.isArray(c2.width) ? c2.width[i2] : c2.width, height: Array.isArray(c2.height) ? c2.height[i2] : c2.height, pointStrokeWidth: Array.isArray(c2.strokeWidth) ? c2.strokeWidth[i2] : c2.strokeWidth, pointStrokeColor: l2.pointStrokeColor, pointFillColor: l2.pointFillColor, shape: l2.pointShape || (Array.isArray(c2.shape) ? c2.shape[i2] : c2.shape), class: e2, pointStrokeOpacity: Array.isArray(c2.strokeOpacity) ? c2.strokeOpacity[i2] : c2.strokeOpacity, pointStrokeDashArray: Array.isArray(c2.strokeDashArray) ? c2.strokeDashArray[i2] : c2.strokeDashArray, pointFillOpacity: Array.isArray(c2.fillOpacity) ? c2.fillOpacity[i2] : c2.fillOpacity, seriesIndex: i2 };
        } }, { key: "addEvents", value: function(t3) {
          var e2 = this.w, i2 = new m(this.ctx);
          t3.node.addEventListener("mouseenter", i2.pathMouseEnter.bind(this.ctx, t3)), t3.node.addEventListener("mouseleave", i2.pathMouseLeave.bind(this.ctx, t3)), t3.node.addEventListener("mousedown", i2.pathMouseDown.bind(this.ctx, t3)), t3.node.addEventListener("click", e2.config.markers.onClick), t3.node.addEventListener("dblclick", e2.config.markers.onDblClick), t3.node.addEventListener("touchstart", i2.pathMouseDown.bind(this.ctx, t3), { passive: true });
        } }, { key: "getMarkerStyle", value: function(t3) {
          var e2 = this.w, i2 = e2.globals.markers.colors, a2 = e2.config.markers.strokeColor || e2.config.markers.strokeColors;
          return { pointStrokeColor: Array.isArray(a2) ? a2[t3] : a2, pointFillColor: Array.isArray(i2) ? i2[t3] : i2 };
        } }]), t2;
      }();
      var D = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;
        }
        return r(t2, [{ key: "draw", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = new m(this.ctx), r2 = i2.realIndex, o2 = i2.pointsPos, n2 = i2.zRatio, l2 = i2.elParent, h2 = s2.group({ class: "apexcharts-series-markers apexcharts-series-".concat(a2.config.chart.type) });
          if (h2.attr("clip-path", "url(#gridRectMarkerMask".concat(a2.globals.cuid, ")")), Array.isArray(o2.x))
            for (var c2 = 0; c2 < o2.x.length; c2++) {
              var d2 = e2 + 1, g2 = true;
              0 === e2 && 0 === c2 && (d2 = 0), 0 === e2 && 1 === c2 && (d2 = 1);
              var u2 = 0, f2 = a2.globals.markers.size[r2];
              if (n2 !== 1 / 0) {
                f2 = a2.globals.seriesZ[r2][d2] / n2;
                var p2 = a2.config.plotOptions.bubble;
                p2.minBubbleRadius && f2 < p2.minBubbleRadius && (f2 = p2.minBubbleRadius), p2.maxBubbleRadius && f2 > p2.maxBubbleRadius && (f2 = p2.maxBubbleRadius);
              }
              a2.config.chart.animations.enabled || (u2 = f2);
              var x2 = o2.x[c2], b2 = o2.y[c2];
              if (u2 = u2 || 0, null !== b2 && void 0 !== a2.globals.series[r2][d2] || (g2 = false), g2) {
                var v2 = this.drawPoint(x2, b2, u2, f2, r2, d2, e2);
                h2.add(v2);
              }
              l2.add(h2);
            }
        } }, { key: "drawPoint", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = this.w, l2 = s2, h2 = new b(this.ctx), c2 = new v(this.ctx), d2 = new F(this.ctx), g2 = new R(this.ctx), u2 = new m(this.ctx), f2 = g2.getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: l2, dataPointIndex: r2, finishRadius: "bubble" === n2.config.chart.type || n2.globals.comboCharts && n2.config.series[s2] && "bubble" === n2.config.series[s2].type ? a2 : null });
          a2 = f2.pSize;
          var p2, x2 = d2.fillPath({ seriesNumber: s2, dataPointIndex: r2, color: f2.pointFillColor, patternUnits: "objectBoundingBox", value: n2.globals.series[s2][o2] });
          if ("circle" === f2.shape ? p2 = u2.drawCircle(i2) : "square" !== f2.shape && "rect" !== f2.shape || (p2 = u2.drawRect(0, 0, f2.width - f2.pointStrokeWidth / 2, f2.height - f2.pointStrokeWidth / 2, f2.pRadius)), n2.config.series[l2].data[r2] && n2.config.series[l2].data[r2].fillColor && (x2 = n2.config.series[l2].data[r2].fillColor), p2.attr({ x: t3 - f2.width / 2 - f2.pointStrokeWidth / 2, y: e2 - f2.height / 2 - f2.pointStrokeWidth / 2, cx: t3, cy: e2, fill: x2, "fill-opacity": f2.pointFillOpacity, stroke: f2.pointStrokeColor, r: a2, "stroke-width": f2.pointStrokeWidth, "stroke-dasharray": f2.pointStrokeDashArray, "stroke-opacity": f2.pointStrokeOpacity }), n2.config.chart.dropShadow.enabled) {
            var y2 = n2.config.chart.dropShadow;
            c2.dropShadow(p2, y2, s2);
          }
          if (!this.initialAnim || n2.globals.dataChanged || n2.globals.resized)
            n2.globals.animationEnded = true;
          else {
            var w2 = n2.config.chart.animations.speed;
            h2.animateMarker(p2, 0, "circle" === f2.shape ? a2 : { width: f2.width, height: f2.height }, w2, n2.globals.easing, function() {
              window.setTimeout(function() {
                h2.animationCompleted(p2);
              }, 100);
            });
          }
          if (n2.globals.dataChanged && "circle" === f2.shape)
            if (this.dynamicAnim) {
              var k2, A2, S2, C2, L2 = n2.config.chart.animations.dynamicAnimation.speed;
              null != (C2 = n2.globals.previousPaths[s2] && n2.globals.previousPaths[s2][o2]) && (k2 = C2.x, A2 = C2.y, S2 = void 0 !== C2.r ? C2.r : a2);
              for (var P2 = 0; P2 < n2.globals.collapsedSeries.length; P2++)
                n2.globals.collapsedSeries[P2].index === s2 && (L2 = 1, a2 = 0);
              0 === t3 && 0 === e2 && (a2 = 0), h2.animateCircle(p2, { cx: k2, cy: A2, r: S2 }, { cx: t3, cy: e2, r: a2 }, L2, n2.globals.easing);
            } else
              p2.attr({ r: a2 });
          return p2.attr({ rel: r2, j: r2, index: s2, "default-marker-size": a2 }), c2.setSelectionFilter(p2, s2, r2), g2.addEvents(p2), p2.node.classList.add("apexcharts-marker"), p2;
        } }, { key: "centerTextInBubble", value: function(t3) {
          var e2 = this.w;
          return { y: t3 += parseInt(e2.config.dataLabels.style.fontSize, 10) / 4 };
        } }]), t2;
      }();
      var H = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "dataLabelsCorrection", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = this.w, l2 = false, h2 = new m(this.ctx).getTextRects(i2, o2), c2 = h2.width, d2 = h2.height;
          e2 < 0 && (e2 = 0), e2 > n2.globals.gridHeight + d2 && (e2 = n2.globals.gridHeight + d2 / 2), void 0 === n2.globals.dataLabelsRects[a2] && (n2.globals.dataLabelsRects[a2] = []), n2.globals.dataLabelsRects[a2].push({ x: t3, y: e2, width: c2, height: d2 });
          var g2 = n2.globals.dataLabelsRects[a2].length - 2, u2 = void 0 !== n2.globals.lastDrawnDataLabelsIndexes[a2] ? n2.globals.lastDrawnDataLabelsIndexes[a2][n2.globals.lastDrawnDataLabelsIndexes[a2].length - 1] : 0;
          if (void 0 !== n2.globals.dataLabelsRects[a2][g2]) {
            var f2 = n2.globals.dataLabelsRects[a2][u2];
            (t3 > f2.x + f2.width + 2 || e2 > f2.y + f2.height + 2 || t3 + c2 < f2.x) && (l2 = true);
          }
          return (0 === s2 || r2) && (l2 = true), { x: t3, y: e2, textRects: h2, drawnextLabel: l2 };
        } }, { key: "drawDataLabel", value: function(t3) {
          var e2 = this, i2 = t3.type, a2 = t3.pos, s2 = t3.i, r2 = t3.j, o2 = t3.isRangeStart, n2 = t3.strokeWidth, l2 = void 0 === n2 ? 2 : n2, h2 = this.w, c2 = new m(this.ctx), d2 = h2.config.dataLabels, g2 = 0, u2 = 0, f2 = r2, p2 = null;
          if (!d2.enabled || !Array.isArray(a2.x))
            return p2;
          p2 = c2.group({ class: "apexcharts-data-labels" });
          for (var x2 = 0; x2 < a2.x.length; x2++)
            if (g2 = a2.x[x2] + d2.offsetX, u2 = a2.y[x2] + d2.offsetY + l2, !isNaN(g2)) {
              1 === r2 && 0 === x2 && (f2 = 0), 1 === r2 && 1 === x2 && (f2 = 1);
              var b2 = h2.globals.series[s2][f2];
              "rangeArea" === i2 && (b2 = o2 ? h2.globals.seriesRangeStart[s2][f2] : h2.globals.seriesRangeEnd[s2][f2]);
              var v2 = "", y2 = function(t4) {
                return h2.config.dataLabels.formatter(t4, { ctx: e2.ctx, seriesIndex: s2, dataPointIndex: f2, w: h2 });
              };
              if ("bubble" === h2.config.chart.type)
                v2 = y2(b2 = h2.globals.seriesZ[s2][f2]), u2 = a2.y[x2], u2 = new D(this.ctx).centerTextInBubble(u2, s2, f2).y;
              else
                void 0 !== b2 && (v2 = y2(b2));
              this.plotDataLabelsText({ x: g2, y: u2, text: v2, i: s2, j: f2, parent: p2, offsetCorrection: true, dataLabelsConfig: h2.config.dataLabels });
            }
          return p2;
        } }, { key: "plotDataLabelsText", value: function(t3) {
          var e2 = this.w, i2 = new m(this.ctx), a2 = t3.x, s2 = t3.y, r2 = t3.i, o2 = t3.j, n2 = t3.text, l2 = t3.textAnchor, h2 = t3.fontSize, c2 = t3.parent, d2 = t3.dataLabelsConfig, g2 = t3.color, u2 = t3.alwaysDrawDataLabel, f2 = t3.offsetCorrection;
          if (!(Array.isArray(e2.config.dataLabels.enabledOnSeries) && e2.config.dataLabels.enabledOnSeries.indexOf(r2) < 0)) {
            var p2 = { x: a2, y: s2, drawnextLabel: true, textRects: null };
            f2 && (p2 = this.dataLabelsCorrection(a2, s2, n2, r2, o2, u2, parseInt(d2.style.fontSize, 10))), e2.globals.zoomed || (a2 = p2.x, s2 = p2.y), p2.textRects && (a2 < -10 - p2.textRects.width || a2 > e2.globals.gridWidth + p2.textRects.width + 10) && (n2 = "");
            var x2 = e2.globals.dataLabels.style.colors[r2];
            (("bar" === e2.config.chart.type || "rangeBar" === e2.config.chart.type) && e2.config.plotOptions.bar.distributed || e2.config.dataLabels.distributed) && (x2 = e2.globals.dataLabels.style.colors[o2]), "function" == typeof x2 && (x2 = x2({ series: e2.globals.series, seriesIndex: r2, dataPointIndex: o2, w: e2 })), g2 && (x2 = g2);
            var b2 = d2.offsetX, y2 = d2.offsetY;
            if ("bar" !== e2.config.chart.type && "rangeBar" !== e2.config.chart.type || (b2 = 0, y2 = 0), p2.drawnextLabel) {
              var w2 = i2.drawText({ width: 100, height: parseInt(d2.style.fontSize, 10), x: a2 + b2, y: s2 + y2, foreColor: x2, textAnchor: l2 || d2.textAnchor, text: n2, fontSize: h2 || d2.style.fontSize, fontFamily: d2.style.fontFamily, fontWeight: d2.style.fontWeight || "normal" });
              if (w2.attr({ class: "apexcharts-datalabel", cx: a2, cy: s2 }), d2.dropShadow.enabled) {
                var k2 = d2.dropShadow;
                new v(this.ctx).dropShadow(w2, k2);
              }
              c2.add(w2), void 0 === e2.globals.lastDrawnDataLabelsIndexes[r2] && (e2.globals.lastDrawnDataLabelsIndexes[r2] = []), e2.globals.lastDrawnDataLabelsIndexes[r2].push(o2);
            }
          }
        } }, { key: "addBackgroundToDataLabel", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.config.dataLabels.background, s2 = a2.padding, r2 = a2.padding / 2, o2 = e2.width, n2 = e2.height, l2 = new m(this.ctx).drawRect(e2.x - s2, e2.y - r2 / 2, o2 + 2 * s2, n2 + r2, a2.borderRadius, "transparent" === i2.config.chart.background ? "#fff" : i2.config.chart.background, a2.opacity, a2.borderWidth, a2.borderColor);
          a2.dropShadow.enabled && new v(this.ctx).dropShadow(l2, a2.dropShadow);
          return l2;
        } }, { key: "dataLabelsBackground", value: function() {
          var t3 = this.w;
          if ("bubble" !== t3.config.chart.type)
            for (var e2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), i2 = 0; i2 < e2.length; i2++) {
              var a2 = e2[i2], s2 = a2.getBBox(), r2 = null;
              if (s2.width && s2.height && (r2 = this.addBackgroundToDataLabel(a2, s2)), r2) {
                a2.parentNode.insertBefore(r2.node, a2);
                var o2 = a2.getAttribute("fill");
                t3.config.chart.animations.enabled && !t3.globals.resized && !t3.globals.dataChanged ? r2.animate().attr({ fill: o2 }) : r2.attr({ fill: o2 }), a2.setAttribute("fill", t3.config.dataLabels.background.foreColor);
              }
            }
        } }, { key: "bringForward", value: function() {
          for (var t3 = this.w, e2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), i2 = t3.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), a2 = 0; a2 < e2.length; a2++)
            i2 && i2.insertBefore(e2[a2], i2.nextSibling);
        } }]), t2;
      }();
      var N = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.legendInactiveClass = "legend-mouseover-inactive";
        }
        return r(t2, [{ key: "getAllSeriesEls", value: function() {
          return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series");
        } }, { key: "getSeriesByName", value: function(t3) {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(x.escapeString(t3), "']"));
        } }, { key: "isSeriesHidden", value: function(t3) {
          var e2 = this.getSeriesByName(t3), i2 = parseInt(e2.getAttribute("data:realIndex"), 10);
          return { isHidden: e2.classList.contains("apexcharts-series-collapsed"), realIndex: i2 };
        } }, { key: "addCollapsedClassToSeries", value: function(t3, e2) {
          var i2 = this.w;
          function a2(i3) {
            for (var a3 = 0; a3 < i3.length; a3++)
              i3[a3].index === e2 && t3.node.classList.add("apexcharts-series-collapsed");
          }
          a2(i2.globals.collapsedSeries), a2(i2.globals.ancillaryCollapsedSeries);
        } }, { key: "toggleSeries", value: function(t3) {
          var e2 = this.isSeriesHidden(t3);
          return this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, e2.isHidden), e2.isHidden;
        } }, { key: "showSeries", value: function(t3) {
          var e2 = this.isSeriesHidden(t3);
          e2.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, true);
        } }, { key: "hideSeries", value: function(t3) {
          var e2 = this.isSeriesHidden(t3);
          e2.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e2.realIndex, false);
        } }, { key: "resetSeries", value: function() {
          var t3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a2 = this.w, s2 = x.clone(a2.globals.initialSeries);
          a2.globals.previousPaths = [], i2 ? (a2.globals.collapsedSeries = [], a2.globals.ancillaryCollapsedSeries = [], a2.globals.collapsedSeriesIndices = [], a2.globals.ancillaryCollapsedSeriesIndices = []) : s2 = this.emptyCollapsedSeries(s2), a2.config.series = s2, t3 && (e2 && (a2.globals.zoomed = false, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s2, a2.config.chart.animations.dynamicAnimation.enabled));
        } }, { key: "emptyCollapsedSeries", value: function(t3) {
          for (var e2 = this.w, i2 = 0; i2 < t3.length; i2++)
            e2.globals.collapsedSeriesIndices.indexOf(i2) > -1 && (t3[i2].data = []);
          return t3;
        } }, { key: "toggleSeriesOnHover", value: function(t3, e2) {
          var i2 = this.w;
          e2 || (e2 = t3.target);
          var a2 = i2.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");
          if ("mousemove" === t3.type) {
            var s2 = parseInt(e2.getAttribute("rel"), 10) - 1, r2 = null, o2 = null;
            i2.globals.axisCharts || "radialBar" === i2.config.chart.type ? i2.globals.axisCharts ? (r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(s2, "']")), o2 = i2.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(s2, "']"))) : r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s2 + 1, "']")) : r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(s2 + 1, "'] path"));
            for (var n2 = 0; n2 < a2.length; n2++)
              a2[n2].classList.add(this.legendInactiveClass);
            null !== r2 && (i2.globals.axisCharts || r2.parentNode.classList.remove(this.legendInactiveClass), r2.classList.remove(this.legendInactiveClass), null !== o2 && o2.classList.remove(this.legendInactiveClass));
          } else if ("mouseout" === t3.type)
            for (var l2 = 0; l2 < a2.length; l2++)
              a2[l2].classList.remove(this.legendInactiveClass);
        } }, { key: "highlightRangeInSeries", value: function(t3, e2) {
          var i2 = this, a2 = this.w, s2 = a2.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"), r2 = function(t4) {
            for (var e3 = 0; e3 < s2.length; e3++)
              s2[e3].classList[t4](i2.legendInactiveClass);
          };
          if ("mousemove" === t3.type) {
            var o2 = parseInt(e2.getAttribute("rel"), 10) - 1;
            r2("add"), function(t4) {
              for (var e3 = 0; e3 < s2.length; e3++) {
                var a3 = parseInt(s2[e3].getAttribute("val"), 10);
                a3 >= t4.from && a3 <= t4.to && s2[e3].classList.remove(i2.legendInactiveClass);
              }
            }(a2.config.plotOptions.heatmap.colorScale.ranges[o2]);
          } else
            "mouseout" === t3.type && r2("remove");
        } }, { key: "getActiveConfigSeriesIndex", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "asc", e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], i2 = this.w, a2 = 0;
          if (i2.config.series.length > 1) {
            for (var s2 = i2.config.series.map(function(t4, a3) {
              return t4.data && t4.data.length > 0 && (!i2.globals.comboCharts || 0 === e2.length || e2.length && e2.indexOf(i2.config.series[a3].type) > -1) ? a3 : -1;
            }), r2 = "asc" === t3 ? 0 : s2.length - 1; "asc" === t3 ? r2 < s2.length : r2 >= 0; "asc" === t3 ? r2++ : r2--)
              if (-1 !== s2[r2]) {
                a2 = s2[r2];
                break;
              }
          }
          return a2;
        } }, { key: "getBarSeriesIndices", value: function() {
          return this.w.globals.comboCharts ? this.w.config.series.map(function(t3, e2) {
            return "bar" === t3.type || "column" === t3.type ? e2 : -1;
          }).filter(function(t3) {
            return -1 !== t3;
          }) : this.w.config.series.map(function(t3, e2) {
            return e2;
          });
        } }, { key: "getPreviousPaths", value: function() {
          var t3 = this.w;
          function e2(e3, i3, a3) {
            for (var s3 = e3[i3].childNodes, r2 = { type: a3, paths: [], realIndex: e3[i3].getAttribute("data:realIndex") }, o2 = 0; o2 < s3.length; o2++)
              if (s3[o2].hasAttribute("pathTo")) {
                var n2 = s3[o2].getAttribute("pathTo");
                r2.paths.push({ d: n2 });
              }
            t3.globals.previousPaths.push(r2);
          }
          t3.globals.previousPaths = [];
          ["line", "area", "bar", "rangebar", "rangeArea", "candlestick", "radar"].forEach(function(i3) {
            for (var a3, s3 = (a3 = i3, t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(a3, "-series .apexcharts-series"))), r2 = 0; r2 < s3.length; r2++)
              e2(s3, r2, i3);
          }), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
          var i2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3.config.chart.type, " .apexcharts-series"));
          if (i2.length > 0)
            for (var a2 = function(e3) {
              for (var i3 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e3, "'] rect")), a3 = [], s3 = function(t4) {
                var e4 = function(e5) {
                  return i3[t4].getAttribute(e5);
                }, s4 = { x: parseFloat(e4("x")), y: parseFloat(e4("y")), width: parseFloat(e4("width")), height: parseFloat(e4("height")) };
                a3.push({ rect: s4, color: i3[t4].getAttribute("color") });
              }, r2 = 0; r2 < i3.length; r2++)
                s3(r2);
              t3.globals.previousPaths.push(a3);
            }, s2 = 0; s2 < i2.length; s2++)
              a2(s2);
          t3.globals.axisCharts || (t3.globals.previousPaths = t3.globals.series);
        } }, { key: "handlePrevBubbleScatterPaths", value: function(t3) {
          var e2 = this.w, i2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3, "-series .apexcharts-series"));
          if (i2.length > 0)
            for (var a2 = 0; a2 < i2.length; a2++) {
              for (var s2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t3, "-series .apexcharts-series[data\\:realIndex='").concat(a2, "'] circle")), r2 = [], o2 = 0; o2 < s2.length; o2++)
                r2.push({ x: s2[o2].getAttribute("cx"), y: s2[o2].getAttribute("cy"), r: s2[o2].getAttribute("r") });
              e2.globals.previousPaths.push(r2);
            }
        } }, { key: "clearPreviousPaths", value: function() {
          var t3 = this.w;
          t3.globals.previousPaths = [], t3.globals.allSeriesCollapsed = false;
        } }, { key: "handleNoData", value: function() {
          var t3 = this.w, e2 = t3.config.noData, i2 = new m(this.ctx), a2 = t3.globals.svgWidth / 2, s2 = t3.globals.svgHeight / 2, r2 = "middle";
          if (t3.globals.noData = true, t3.globals.animationEnded = true, "left" === e2.align ? (a2 = 10, r2 = "start") : "right" === e2.align && (a2 = t3.globals.svgWidth - 10, r2 = "end"), "top" === e2.verticalAlign ? s2 = 50 : "bottom" === e2.verticalAlign && (s2 = t3.globals.svgHeight - 50), a2 += e2.offsetX, s2 = s2 + parseInt(e2.style.fontSize, 10) + 2 + e2.offsetY, void 0 !== e2.text && "" !== e2.text) {
            var o2 = i2.drawText({ x: a2, y: s2, text: e2.text, textAnchor: r2, fontSize: e2.style.fontSize, fontFamily: e2.style.fontFamily, foreColor: e2.style.color, opacity: 1, class: "apexcharts-text-nodata" });
            t3.globals.dom.Paper.add(o2);
          }
        } }, { key: "setNullSeriesToZeroValues", value: function(t3) {
          for (var e2 = this.w, i2 = 0; i2 < t3.length; i2++)
            if (0 === t3[i2].length)
              for (var a2 = 0; a2 < t3[e2.globals.maxValsInArrayIndex].length; a2++)
                t3[i2].push(0);
          return t3;
        } }, { key: "hasAllSeriesEqualX", value: function() {
          for (var t3 = true, e2 = this.w, i2 = this.filteredSeriesX(), a2 = 0; a2 < i2.length - 1; a2++)
            if (i2[a2][0] !== i2[a2 + 1][0]) {
              t3 = false;
              break;
            }
          return e2.globals.allSeriesHasEqualX = t3, t3;
        } }, { key: "filteredSeriesX", value: function() {
          var t3 = this.w.globals.seriesX.map(function(t4) {
            return t4.length > 0 ? t4 : [];
          });
          return t3;
        } }]), t2;
      }();
      var O = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new y(this.ctx);
        }
        return r(t2, [{ key: "isMultiFormat", value: function() {
          return this.isFormatXY() || this.isFormat2DArray();
        } }, { key: "isFormatXY", value: function() {
          var t3 = this.w.config.series.slice(), e2 = new N(this.ctx);
          if (this.activeSeriesIndex = e2.getActiveConfigSeriesIndex(), void 0 !== t3[this.activeSeriesIndex].data && t3[this.activeSeriesIndex].data.length > 0 && null !== t3[this.activeSeriesIndex].data[0] && void 0 !== t3[this.activeSeriesIndex].data[0].x && null !== t3[this.activeSeriesIndex].data[0])
            return true;
        } }, { key: "isFormat2DArray", value: function() {
          var t3 = this.w.config.series.slice(), e2 = new N(this.ctx);
          if (this.activeSeriesIndex = e2.getActiveConfigSeriesIndex(), void 0 !== t3[this.activeSeriesIndex].data && t3[this.activeSeriesIndex].data.length > 0 && void 0 !== t3[this.activeSeriesIndex].data[0] && null !== t3[this.activeSeriesIndex].data[0] && t3[this.activeSeriesIndex].data[0].constructor === Array)
            return true;
        } }, { key: "handleFormat2DArray", value: function(t3, e2) {
          for (var i2 = this.w.config, a2 = this.w.globals, s2 = "boxPlot" === i2.chart.type || "boxPlot" === i2.series[e2].type, r2 = 0; r2 < t3[e2].data.length; r2++)
            if (void 0 !== t3[e2].data[r2][1] && (Array.isArray(t3[e2].data[r2][1]) && 4 === t3[e2].data[r2][1].length && !s2 ? this.twoDSeries.push(x.parseNumber(t3[e2].data[r2][1][3])) : t3[e2].data[r2].length >= 5 ? this.twoDSeries.push(x.parseNumber(t3[e2].data[r2][4])) : this.twoDSeries.push(x.parseNumber(t3[e2].data[r2][1])), a2.dataFormatXNumeric = true), "datetime" === i2.xaxis.type) {
              var o2 = new Date(t3[e2].data[r2][0]);
              o2 = new Date(o2).getTime(), this.twoDSeriesX.push(o2);
            } else
              this.twoDSeriesX.push(t3[e2].data[r2][0]);
          for (var n2 = 0; n2 < t3[e2].data.length; n2++)
            void 0 !== t3[e2].data[n2][2] && (this.threeDSeries.push(t3[e2].data[n2][2]), a2.isDataXYZ = true);
        } }, { key: "handleFormatXY", value: function(t3, e2) {
          var i2 = this.w.config, a2 = this.w.globals, s2 = new T(this.ctx), r2 = e2;
          a2.collapsedSeriesIndices.indexOf(e2) > -1 && (r2 = this.activeSeriesIndex);
          for (var o2 = 0; o2 < t3[e2].data.length; o2++)
            void 0 !== t3[e2].data[o2].y && (Array.isArray(t3[e2].data[o2].y) ? this.twoDSeries.push(x.parseNumber(t3[e2].data[o2].y[t3[e2].data[o2].y.length - 1])) : this.twoDSeries.push(x.parseNumber(t3[e2].data[o2].y))), void 0 !== t3[e2].data[o2].goals && Array.isArray(t3[e2].data[o2].goals) ? (void 0 === this.seriesGoals[e2] && (this.seriesGoals[e2] = []), this.seriesGoals[e2].push(t3[e2].data[o2].goals)) : (void 0 === this.seriesGoals[e2] && (this.seriesGoals[e2] = []), this.seriesGoals[e2].push(null));
          for (var n2 = 0; n2 < t3[r2].data.length; n2++) {
            var l2 = "string" == typeof t3[r2].data[n2].x, h2 = Array.isArray(t3[r2].data[n2].x), c2 = !h2 && !!s2.isValidDate(t3[r2].data[n2].x.toString());
            if (l2 || c2)
              if (l2 || i2.xaxis.convertedCatToNumeric) {
                var d2 = a2.isBarHorizontal && a2.isRangeData;
                "datetime" !== i2.xaxis.type || d2 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t3[r2].data[n2].x)) : this.twoDSeriesX.push(s2.parseDate(t3[r2].data[n2].x));
              } else
                "datetime" === i2.xaxis.type ? this.twoDSeriesX.push(s2.parseDate(t3[r2].data[n2].x.toString())) : (a2.dataFormatXNumeric = true, a2.isXNumeric = true, this.twoDSeriesX.push(parseFloat(t3[r2].data[n2].x)));
            else
              h2 ? (this.fallbackToCategory = true, this.twoDSeriesX.push(t3[r2].data[n2].x)) : (a2.isXNumeric = true, a2.dataFormatXNumeric = true, this.twoDSeriesX.push(t3[r2].data[n2].x));
          }
          if (t3[e2].data[0] && void 0 !== t3[e2].data[0].z) {
            for (var g2 = 0; g2 < t3[e2].data.length; g2++)
              this.threeDSeries.push(t3[e2].data[g2].z);
            a2.isDataXYZ = true;
          }
        } }, { key: "handleRangeData", value: function(t3, e2) {
          var i2 = this.w.globals, a2 = {};
          return this.isFormat2DArray() ? a2 = this.handleRangeDataFormat("array", t3, e2) : this.isFormatXY() && (a2 = this.handleRangeDataFormat("xy", t3, e2)), i2.seriesRangeStart.push(a2.start), i2.seriesRangeEnd.push(a2.end), i2.seriesRange.push(a2.rangeUniques), i2.seriesRange.forEach(function(t4, e3) {
            t4 && t4.forEach(function(t5, e4) {
              t5.y.forEach(function(e5, i3) {
                for (var a3 = 0; a3 < t5.y.length; a3++)
                  if (i3 !== a3) {
                    var s2 = e5.y1, r2 = e5.y2, o2 = t5.y[a3].y1;
                    s2 <= t5.y[a3].y2 && o2 <= r2 && (t5.overlaps.indexOf(e5.rangeName) < 0 && t5.overlaps.push(e5.rangeName), t5.overlaps.indexOf(t5.y[a3].rangeName) < 0 && t5.overlaps.push(t5.y[a3].rangeName));
                  }
              });
            });
          }), a2;
        } }, { key: "handleCandleStickBoxData", value: function(t3, e2) {
          var i2 = this.w.globals, a2 = {};
          return this.isFormat2DArray() ? a2 = this.handleCandleStickBoxDataFormat("array", t3, e2) : this.isFormatXY() && (a2 = this.handleCandleStickBoxDataFormat("xy", t3, e2)), i2.seriesCandleO[e2] = a2.o, i2.seriesCandleH[e2] = a2.h, i2.seriesCandleM[e2] = a2.m, i2.seriesCandleL[e2] = a2.l, i2.seriesCandleC[e2] = a2.c, a2;
        } }, { key: "handleRangeDataFormat", value: function(t3, e2, i2) {
          var a2 = [], s2 = [], r2 = e2[i2].data.filter(function(t4, e3, i3) {
            return e3 === i3.findIndex(function(e4) {
              return e4.x === t4.x;
            });
          }).map(function(t4, e3) {
            return { x: t4.x, overlaps: [], y: [] };
          });
          if ("array" === t3)
            for (var o2 = 0; o2 < e2[i2].data.length; o2++)
              Array.isArray(e2[i2].data[o2]) ? (a2.push(e2[i2].data[o2][1][0]), s2.push(e2[i2].data[o2][1][1])) : (a2.push(e2[i2].data[o2]), s2.push(e2[i2].data[o2]));
          else if ("xy" === t3)
            for (var n2 = function(t4) {
              var o3 = Array.isArray(e2[i2].data[t4].y), n3 = x.randomId(), l3 = e2[i2].data[t4].x, h2 = { y1: o3 ? e2[i2].data[t4].y[0] : e2[i2].data[t4].y, y2: o3 ? e2[i2].data[t4].y[1] : e2[i2].data[t4].y, rangeName: n3 };
              e2[i2].data[t4].rangeName = n3;
              var c2 = r2.findIndex(function(t5) {
                return t5.x === l3;
              });
              r2[c2].y.push(h2), a2.push(h2.y1), s2.push(h2.y2);
            }, l2 = 0; l2 < e2[i2].data.length; l2++)
              n2(l2);
          return { start: a2, end: s2, rangeUniques: r2 };
        } }, { key: "handleCandleStickBoxDataFormat", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = "boxPlot" === a2.config.chart.type || "boxPlot" === a2.config.series[i2].type, r2 = [], o2 = [], n2 = [], l2 = [], h2 = [];
          if ("array" === t3)
            if (s2 && 6 === e2[i2].data[0].length || !s2 && 5 === e2[i2].data[0].length)
              for (var c2 = 0; c2 < e2[i2].data.length; c2++)
                r2.push(e2[i2].data[c2][1]), o2.push(e2[i2].data[c2][2]), s2 ? (n2.push(e2[i2].data[c2][3]), l2.push(e2[i2].data[c2][4]), h2.push(e2[i2].data[c2][5])) : (l2.push(e2[i2].data[c2][3]), h2.push(e2[i2].data[c2][4]));
            else
              for (var d2 = 0; d2 < e2[i2].data.length; d2++)
                Array.isArray(e2[i2].data[d2][1]) && (r2.push(e2[i2].data[d2][1][0]), o2.push(e2[i2].data[d2][1][1]), s2 ? (n2.push(e2[i2].data[d2][1][2]), l2.push(e2[i2].data[d2][1][3]), h2.push(e2[i2].data[d2][1][4])) : (l2.push(e2[i2].data[d2][1][2]), h2.push(e2[i2].data[d2][1][3])));
          else if ("xy" === t3)
            for (var g2 = 0; g2 < e2[i2].data.length; g2++)
              Array.isArray(e2[i2].data[g2].y) && (r2.push(e2[i2].data[g2].y[0]), o2.push(e2[i2].data[g2].y[1]), s2 ? (n2.push(e2[i2].data[g2].y[2]), l2.push(e2[i2].data[g2].y[3]), h2.push(e2[i2].data[g2].y[4])) : (l2.push(e2[i2].data[g2].y[2]), h2.push(e2[i2].data[g2].y[3])));
          return { o: r2, h: o2, m: n2, l: l2, c: h2 };
        } }, { key: "parseDataAxisCharts", value: function(t3) {
          var e2 = this, i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, a2 = this.w.config, s2 = this.w.globals, r2 = new T(i2), o2 = a2.labels.length > 0 ? a2.labels.slice() : a2.xaxis.categories.slice();
          s2.isRangeBar = "rangeBar" === a2.chart.type && s2.isBarHorizontal, s2.hasGroups = "category" === a2.xaxis.type && a2.xaxis.group.groups.length > 0, s2.hasGroups && (s2.groups = a2.xaxis.group.groups);
          for (var n2 = function() {
            for (var t4 = 0; t4 < o2.length; t4++)
              if ("string" == typeof o2[t4]) {
                if (!r2.isValidDate(o2[t4]))
                  throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                e2.twoDSeriesX.push(r2.parseDate(o2[t4]));
              } else
                e2.twoDSeriesX.push(o2[t4]);
          }, l2 = 0; l2 < t3.length; l2++) {
            if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t3[l2].data)
              return void console.error("It is a possibility that you may have not included 'data' property in series.");
            if ("rangeBar" !== a2.chart.type && "rangeArea" !== a2.chart.type && "rangeBar" !== t3[l2].type && "rangeArea" !== t3[l2].type || (s2.isRangeData = true, s2.isComboCharts ? "rangeBar" !== t3[l2].type && "rangeArea" !== t3[l2].type || this.handleRangeData(t3, l2) : "rangeBar" !== a2.chart.type && "rangeArea" !== a2.chart.type || this.handleRangeData(t3, l2)), this.isMultiFormat())
              this.isFormat2DArray() ? this.handleFormat2DArray(t3, l2) : this.isFormatXY() && this.handleFormatXY(t3, l2), "candlestick" !== a2.chart.type && "candlestick" !== t3[l2].type && "boxPlot" !== a2.chart.type && "boxPlot" !== t3[l2].type || this.handleCandleStickBoxData(t3, l2), s2.series.push(this.twoDSeries), s2.labels.push(this.twoDSeriesX), s2.seriesX.push(this.twoDSeriesX), s2.seriesGoals = this.seriesGoals, l2 !== this.activeSeriesIndex || this.fallbackToCategory || (s2.isXNumeric = true);
            else {
              "datetime" === a2.xaxis.type ? (s2.isXNumeric = true, n2(), s2.seriesX.push(this.twoDSeriesX)) : "numeric" === a2.xaxis.type && (s2.isXNumeric = true, o2.length > 0 && (this.twoDSeriesX = o2, s2.seriesX.push(this.twoDSeriesX))), s2.labels.push(this.twoDSeriesX);
              var h2 = t3[l2].data.map(function(t4) {
                return x.parseNumber(t4);
              });
              s2.series.push(h2);
            }
            s2.seriesZ.push(this.threeDSeries), void 0 !== t3[l2].name ? s2.seriesNames.push(t3[l2].name) : s2.seriesNames.push("series-" + parseInt(l2 + 1, 10)), void 0 !== t3[l2].color ? s2.seriesColors.push(t3[l2].color) : s2.seriesColors.push(void 0);
          }
          return this.w;
        } }, { key: "parseDataNonAxisCharts", value: function(t3) {
          var e2 = this.w.globals, i2 = this.w.config;
          e2.series = t3.slice(), e2.seriesNames = i2.labels.slice();
          for (var a2 = 0; a2 < e2.series.length; a2++)
            void 0 === e2.seriesNames[a2] && e2.seriesNames.push("series-" + (a2 + 1));
          return this.w;
        } }, { key: "handleExternalLabelsData", value: function(t3) {
          var e2 = this.w.config, i2 = this.w.globals;
          if (e2.xaxis.categories.length > 0)
            i2.labels = e2.xaxis.categories;
          else if (e2.labels.length > 0)
            i2.labels = e2.labels.slice();
          else if (this.fallbackToCategory) {
            if (i2.labels = i2.labels[0], i2.seriesRange.length && (i2.seriesRange.map(function(t4) {
              t4.forEach(function(t5) {
                i2.labels.indexOf(t5.x) < 0 && t5.x && i2.labels.push(t5.x);
              });
            }), i2.labels = i2.labels.filter(function(t4, e3, i3) {
              return i3.indexOf(t4) === e3;
            })), e2.xaxis.convertedCatToNumeric)
              new X(e2).convertCatToNumericXaxis(e2, this.ctx, i2.seriesX[0]), this._generateExternalLabels(t3);
          } else
            this._generateExternalLabels(t3);
        } }, { key: "_generateExternalLabels", value: function(t3) {
          var e2 = this.w.globals, i2 = this.w.config, a2 = [];
          if (e2.axisCharts) {
            if (e2.series.length > 0)
              if (this.isFormatXY())
                for (var s2 = i2.series.map(function(t4, e3) {
                  return t4.data.filter(function(t5, e4, i3) {
                    return i3.findIndex(function(e5) {
                      return e5.x === t5.x;
                    }) === e4;
                  });
                }), r2 = s2.reduce(function(t4, e3, i3, a3) {
                  return a3[t4].length > e3.length ? t4 : i3;
                }, 0), o2 = 0; o2 < s2[r2].length; o2++)
                  a2.push(o2 + 1);
              else
                for (var n2 = 0; n2 < e2.series[e2.maxValsInArrayIndex].length; n2++)
                  a2.push(n2 + 1);
            e2.seriesX = [];
            for (var l2 = 0; l2 < t3.length; l2++)
              e2.seriesX.push(a2);
            e2.isXNumeric = true;
          }
          if (0 === a2.length) {
            a2 = e2.axisCharts ? [] : e2.series.map(function(t4, e3) {
              return e3 + 1;
            });
            for (var h2 = 0; h2 < t3.length; h2++)
              e2.seriesX.push(a2);
          }
          e2.labels = a2, i2.xaxis.convertedCatToNumeric && (e2.categoryLabels = a2.map(function(t4) {
            return i2.xaxis.labels.formatter(t4);
          })), e2.noLabelsProvided = true;
        } }, { key: "parseData", value: function(t3) {
          var e2 = this.w, i2 = e2.config, a2 = e2.globals;
          if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = false, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a2.axisCharts ? (this.parseDataAxisCharts(t3), this.coreUtils.getLargestSeries()) : this.parseDataNonAxisCharts(t3), "bar" === i2.chart.type && i2.chart.stacked) {
            var s2 = new N(this.ctx);
            a2.series = s2.setNullSeriesToZeroValues(a2.series);
          }
          this.coreUtils.getSeriesTotals(), a2.axisCharts && (a2.stackedSeriesTotals = this.coreUtils.getStackedSeriesTotals()), this.coreUtils.getPercentSeries(), a2.dataFormatXNumeric || a2.isXNumeric && ("numeric" !== i2.xaxis.type || 0 !== i2.labels.length || 0 !== i2.xaxis.categories.length) || this.handleExternalLabelsData(t3);
          for (var r2 = this.coreUtils.getCategoryLabels(a2.labels), o2 = 0; o2 < r2.length; o2++)
            if (Array.isArray(r2[o2])) {
              a2.isMultiLineX = true;
              break;
            }
        } }, { key: "excludeCollapsedSeriesInYAxis", value: function() {
          var t3 = this, e2 = this.w;
          e2.globals.ignoreYAxisIndexes = e2.globals.collapsedSeries.map(function(i2, a2) {
            if (t3.w.globals.isMultipleYAxis && !e2.config.chart.stacked)
              return i2.index;
          });
        } }]), t2;
      }();
      var W = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.tooltipKeyFormat = "dd MMM";
        }
        return r(t2, [{ key: "xLabelFormat", value: function(t3, e2, i2, a2) {
          var s2 = this.w;
          if ("datetime" === s2.config.xaxis.type && void 0 === s2.config.xaxis.labels.formatter && void 0 === s2.config.tooltip.x.formatter) {
            var r2 = new T(this.ctx);
            return r2.formatDate(r2.getDate(e2), s2.config.tooltip.x.format);
          }
          return t3(e2, i2, a2);
        } }, { key: "defaultGeneralFormatter", value: function(t3) {
          return Array.isArray(t3) ? t3.map(function(t4) {
            return t4;
          }) : t3;
        } }, { key: "defaultYFormatter", value: function(t3, e2, i2) {
          var a2 = this.w;
          return x.isNumber(t3) && (t3 = 0 !== a2.globals.yValueDecimal ? t3.toFixed(void 0 !== e2.decimalsInFloat ? e2.decimalsInFloat : a2.globals.yValueDecimal) : a2.globals.maxYArr[i2] - a2.globals.minYArr[i2] < 5 ? t3.toFixed(1) : t3.toFixed(0)), t3;
        } }, { key: "setLabelFormatters", value: function() {
          var t3 = this, e2 = this.w;
          return e2.globals.xaxisTooltipFormatter = function(e3) {
            return t3.defaultGeneralFormatter(e3);
          }, e2.globals.ttKeyFormatter = function(e3) {
            return t3.defaultGeneralFormatter(e3);
          }, e2.globals.ttZFormatter = function(t4) {
            return t4;
          }, e2.globals.legendFormatter = function(e3) {
            return t3.defaultGeneralFormatter(e3);
          }, void 0 !== e2.config.xaxis.labels.formatter ? e2.globals.xLabelFormatter = e2.config.xaxis.labels.formatter : e2.globals.xLabelFormatter = function(t4) {
            if (x.isNumber(t4)) {
              if (!e2.config.xaxis.convertedCatToNumeric && "numeric" === e2.config.xaxis.type) {
                if (x.isNumber(e2.config.xaxis.decimalsInFloat))
                  return t4.toFixed(e2.config.xaxis.decimalsInFloat);
                var i2 = e2.globals.maxX - e2.globals.minX;
                return i2 > 0 && i2 < 100 ? t4.toFixed(1) : t4.toFixed(0);
              }
              if (e2.globals.isBarHorizontal) {
                if (e2.globals.maxY - e2.globals.minYArr < 4)
                  return t4.toFixed(1);
              }
              return t4.toFixed(0);
            }
            return t4;
          }, "function" == typeof e2.config.tooltip.x.formatter ? e2.globals.ttKeyFormatter = e2.config.tooltip.x.formatter : e2.globals.ttKeyFormatter = e2.globals.xLabelFormatter, "function" == typeof e2.config.xaxis.tooltip.formatter && (e2.globals.xaxisTooltipFormatter = e2.config.xaxis.tooltip.formatter), (Array.isArray(e2.config.tooltip.y) || void 0 !== e2.config.tooltip.y.formatter) && (e2.globals.ttVal = e2.config.tooltip.y), void 0 !== e2.config.tooltip.z.formatter && (e2.globals.ttZFormatter = e2.config.tooltip.z.formatter), void 0 !== e2.config.legend.formatter && (e2.globals.legendFormatter = e2.config.legend.formatter), e2.config.yaxis.forEach(function(i2, a2) {
            void 0 !== i2.labels.formatter ? e2.globals.yLabelFormatters[a2] = i2.labels.formatter : e2.globals.yLabelFormatters[a2] = function(s2) {
              return e2.globals.xyCharts ? Array.isArray(s2) ? s2.map(function(e3) {
                return t3.defaultYFormatter(e3, i2, a2);
              }) : t3.defaultYFormatter(s2, i2, a2) : s2;
            };
          }), e2.globals;
        } }, { key: "heatmapLabelFormatters", value: function() {
          var t3 = this.w;
          if ("heatmap" === t3.config.chart.type) {
            t3.globals.yAxisScale[0].result = t3.globals.seriesNames.slice();
            var e2 = t3.globals.seriesNames.reduce(function(t4, e3) {
              return t4.length > e3.length ? t4 : e3;
            }, 0);
            t3.globals.yAxisScale[0].niceMax = e2, t3.globals.yAxisScale[0].niceMin = e2;
          }
        } }]), t2;
      }();
      var B = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "getLabel", value: function(t3, e2, i2, a2) {
          var s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [], r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px", o2 = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6], n2 = this.w, l2 = void 0 === t3[a2] ? "" : t3[a2], h2 = l2, c2 = n2.globals.xLabelFormatter, d2 = n2.config.xaxis.labels.formatter, g2 = false, u2 = new W(this.ctx), f2 = l2;
          o2 && (h2 = u2.xLabelFormat(c2, l2, f2, { i: a2, dateFormatter: new T(this.ctx).formatDate, w: n2 }), void 0 !== d2 && (h2 = d2(l2, t3[a2], { i: a2, dateFormatter: new T(this.ctx).formatDate, w: n2 })));
          var p2 = function(t4) {
            var i3 = null;
            return e2.forEach(function(t5) {
              "month" === t5.unit ? i3 = "year" : "day" === t5.unit ? i3 = "month" : "hour" === t5.unit ? i3 = "day" : "minute" === t5.unit && (i3 = "hour");
            }), i3 === t4;
          };
          e2.length > 0 ? (g2 = p2(e2[a2].unit), i2 = e2[a2].position, h2 = e2[a2].value) : "datetime" === n2.config.xaxis.type && void 0 === d2 && (h2 = ""), void 0 === h2 && (h2 = ""), h2 = Array.isArray(h2) ? h2 : h2.toString();
          var x2 = new m(this.ctx), b2 = {};
          b2 = n2.globals.rotateXLabels && o2 ? x2.getTextRects(h2, parseInt(r2, 10), null, "rotate(".concat(n2.config.xaxis.labels.rotate, " 0 0)"), false) : x2.getTextRects(h2, parseInt(r2, 10));
          var v2 = !n2.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
          return !Array.isArray(h2) && (0 === h2.indexOf("NaN") || 0 === h2.toLowerCase().indexOf("invalid") || h2.toLowerCase().indexOf("infinity") >= 0 || s2.indexOf(h2) >= 0 && v2) && (h2 = ""), { x: i2, text: h2, textRect: b2, isBold: g2 };
        } }, { key: "checkLabelBasedOnTickamount", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = a2.config.xaxis.tickAmount;
          return "dataPoints" === s2 && (s2 = Math.round(a2.globals.gridWidth / 120)), s2 > i2 || t3 % Math.round(i2 / (s2 + 1)) == 0 || (e2.text = ""), e2;
        } }, { key: "checkForOverflowingLabels", value: function(t3, e2, i2, a2, s2) {
          var r2 = this.w;
          if (0 === t3 && r2.globals.skipFirstTimelinelabel && (e2.text = ""), t3 === i2 - 1 && r2.globals.skipLastTimelinelabel && (e2.text = ""), r2.config.xaxis.labels.hideOverlappingLabels && a2.length > 0) {
            var o2 = s2[s2.length - 1];
            e2.x < o2.textRect.width / (r2.globals.rotateXLabels ? Math.abs(r2.config.xaxis.labels.rotate) / 12 : 1.01) + o2.x && (e2.text = "");
          }
          return e2;
        } }, { key: "checkForReversedLabels", value: function(t3, e2) {
          var i2 = this.w;
          return i2.config.yaxis[t3] && i2.config.yaxis[t3].reversed && e2.reverse(), e2;
        } }, { key: "isYAxisHidden", value: function(t3) {
          var e2 = this.w, i2 = new y(this.ctx);
          return !e2.config.yaxis[t3].show || !e2.config.yaxis[t3].showForNullSeries && i2.isSeriesNull(t3) && -1 === e2.globals.collapsedSeriesIndices.indexOf(t3);
        } }, { key: "getYAxisForeColor", value: function(t3, e2) {
          var i2 = this.w;
          return Array.isArray(t3) && i2.globals.yAxisScale[e2] && this.ctx.theme.pushExtraColors(t3, i2.globals.yAxisScale[e2].result.length, false), t3;
        } }, { key: "drawYAxisTicks", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = this.w, l2 = new m(this.ctx), h2 = n2.globals.translateY;
          if (a2.show && e2 > 0) {
            true === n2.config.yaxis[s2].opposite && (t3 += a2.width);
            for (var c2 = e2; c2 >= 0; c2--) {
              var d2 = h2 + e2 / 10 + n2.config.yaxis[s2].labels.offsetY - 1;
              n2.globals.isBarHorizontal && (d2 = r2 * c2), "heatmap" === n2.config.chart.type && (d2 += r2 / 2);
              var g2 = l2.drawLine(t3 + i2.offsetX - a2.width + a2.offsetX, d2 + a2.offsetY, t3 + i2.offsetX + a2.offsetX, d2 + a2.offsetY, a2.color);
              o2.add(g2), h2 += r2;
            }
          }
        } }]), t2;
      }();
      var V = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "scaleSvgNode", value: function(t3, e2) {
          var i2 = parseFloat(t3.getAttributeNS(null, "width")), a2 = parseFloat(t3.getAttributeNS(null, "height"));
          t3.setAttributeNS(null, "width", i2 * e2), t3.setAttributeNS(null, "height", a2 * e2), t3.setAttributeNS(null, "viewBox", "0 0 " + i2 + " " + a2);
        } }, { key: "fixSvgStringForIe11", value: function(t3) {
          if (!x.isIE11())
            return t3.replace(/&nbsp;/g, "&#160;");
          var e2 = 0, i2 = t3.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, function(t4) {
            return 2 === ++e2 ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"' : t4;
          });
          return i2 = (i2 = i2.replace(/xmlns:NS\d+=""/g, "")).replace(/NS\d+:(\w+:\w+=")/g, "$1");
        } }, { key: "getSvgString", value: function(t3) {
          null == t3 && (t3 = 1);
          var e2 = this.w.globals.dom.Paper.svg();
          if (1 !== t3) {
            var i2 = this.w.globals.dom.Paper.node.cloneNode(true);
            this.scaleSvgNode(i2, t3), e2 = new XMLSerializer().serializeToString(i2);
          }
          return this.fixSvgStringForIe11(e2);
        } }, { key: "cleanup", value: function() {
          var t3 = this.w, e2 = t3.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"), i2 = t3.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"), a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
          Array.prototype.forEach.call(a2, function(t4) {
            t4.setAttribute("width", 0);
          }), e2 && e2[0] && (e2[0].setAttribute("x", -500), e2[0].setAttribute("x1", -500), e2[0].setAttribute("x2", -500)), i2 && i2[0] && (i2[0].setAttribute("y", -100), i2[0].setAttribute("y1", -100), i2[0].setAttribute("y2", -100));
        } }, { key: "svgUrl", value: function() {
          this.cleanup();
          var t3 = this.getSvgString(), e2 = new Blob([t3], { type: "image/svg+xml;charset=utf-8" });
          return URL.createObjectURL(e2);
        } }, { key: "dataURI", value: function(t3) {
          var e2 = this;
          return new Promise(function(i2) {
            var a2 = e2.w, s2 = t3 ? t3.scale || t3.width / a2.globals.svgWidth : 1;
            e2.cleanup();
            var r2 = document.createElement("canvas");
            r2.width = a2.globals.svgWidth * s2, r2.height = parseInt(a2.globals.dom.elWrap.style.height, 10) * s2;
            var o2 = "transparent" === a2.config.chart.background ? "#fff" : a2.config.chart.background, n2 = r2.getContext("2d");
            n2.fillStyle = o2, n2.fillRect(0, 0, r2.width * s2, r2.height * s2);
            var l2 = e2.getSvgString(s2);
            if (window.canvg && x.isIE11()) {
              var h2 = window.canvg.Canvg.fromString(n2, l2, { ignoreClear: true, ignoreDimensions: true });
              h2.start();
              var c2 = r2.msToBlob();
              h2.stop(), i2({ blob: c2 });
            } else {
              var d2 = "data:image/svg+xml," + encodeURIComponent(l2), g2 = new Image();
              g2.crossOrigin = "anonymous", g2.onload = function() {
                if (n2.drawImage(g2, 0, 0), r2.msToBlob) {
                  var t4 = r2.msToBlob();
                  i2({ blob: t4 });
                } else {
                  var e3 = r2.toDataURL("image/png");
                  i2({ imgURI: e3 });
                }
              }, g2.src = d2;
            }
          });
        } }, { key: "exportToSVG", value: function() {
          this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, ".svg");
        } }, { key: "exportToPng", value: function() {
          var t3 = this;
          this.dataURI().then(function(e2) {
            var i2 = e2.imgURI, a2 = e2.blob;
            a2 ? navigator.msSaveOrOpenBlob(a2, t3.w.globals.chartID + ".png") : t3.triggerDownload(i2, t3.w.config.chart.toolbar.export.png.filename, ".png");
          });
        } }, { key: "exportToCSV", value: function(t3) {
          var e2 = this, i2 = t3.series, a2 = t3.fileName, s2 = t3.columnDelimiter, r2 = void 0 === s2 ? "," : s2, o2 = t3.lineDelimiter, n2 = void 0 === o2 ? "\n" : o2, l2 = this.w;
          i2 || (i2 = l2.config.series);
          var h2 = [], c2 = [], d2 = "", g2 = l2.globals.series.map(function(t4, e3) {
            return -1 === l2.globals.collapsedSeriesIndices.indexOf(e3) ? t4 : [];
          }), f2 = Math.max.apply(Math, u(i2.map(function(t4) {
            return t4.data ? t4.data.length : 0;
          }))), p2 = new O(this.ctx), b2 = new B(this.ctx), v2 = function(t4) {
            var i3 = "";
            if (l2.globals.axisCharts) {
              if ("category" === l2.config.xaxis.type || l2.config.xaxis.convertedCatToNumeric)
                if (l2.globals.isBarHorizontal) {
                  var a3 = l2.globals.yLabelFormatters[0], s3 = new N(e2.ctx).getActiveConfigSeriesIndex();
                  i3 = a3(l2.globals.labels[t4], { seriesIndex: s3, dataPointIndex: t4, w: l2 });
                } else
                  i3 = b2.getLabel(l2.globals.labels, l2.globals.timescaleLabels, 0, t4).text;
              "datetime" === l2.config.xaxis.type && (l2.config.xaxis.categories.length ? i3 = l2.config.xaxis.categories[t4] : l2.config.labels.length && (i3 = l2.config.labels[t4]));
            } else
              i3 = l2.config.labels[t4];
            return Array.isArray(i3) && (i3 = i3.join(" ")), x.isNumber(i3) ? i3 : i3.split(r2).join("");
          }, m2 = function(t4, e3) {
            if (h2.length && 0 === e3 && c2.push(h2.join(r2)), t4.data) {
              t4.data = t4.data.length && t4.data || u(Array(f2)).map(function() {
                return "";
              });
              for (var a3 = 0; a3 < t4.data.length; a3++) {
                h2 = [];
                var s3 = v2(a3);
                if (s3 || (p2.isFormatXY() ? s3 = i2[e3].data[a3].x : p2.isFormat2DArray() && (s3 = i2[e3].data[a3] ? i2[e3].data[a3][0] : "")), 0 === e3) {
                  h2.push((n3 = s3, "datetime" === l2.config.xaxis.type && String(n3).length >= 10 ? l2.config.chart.toolbar.export.csv.dateFormatter(s3) : x.isNumber(s3) ? s3 : s3.split(r2).join("")));
                  for (var o3 = 0; o3 < l2.globals.series.length; o3++)
                    p2.isFormatXY() ? h2.push(i2[o3].data[a3].y) : h2.push(g2[o3][a3]);
                }
                ("candlestick" === l2.config.chart.type || t4.type && "candlestick" === t4.type) && (h2.pop(), h2.push(l2.globals.seriesCandleO[e3][a3]), h2.push(l2.globals.seriesCandleH[e3][a3]), h2.push(l2.globals.seriesCandleL[e3][a3]), h2.push(l2.globals.seriesCandleC[e3][a3])), ("boxPlot" === l2.config.chart.type || t4.type && "boxPlot" === t4.type) && (h2.pop(), h2.push(l2.globals.seriesCandleO[e3][a3]), h2.push(l2.globals.seriesCandleH[e3][a3]), h2.push(l2.globals.seriesCandleM[e3][a3]), h2.push(l2.globals.seriesCandleL[e3][a3]), h2.push(l2.globals.seriesCandleC[e3][a3])), "rangeBar" === l2.config.chart.type && (h2.pop(), h2.push(l2.globals.seriesRangeStart[e3][a3]), h2.push(l2.globals.seriesRangeEnd[e3][a3])), h2.length && c2.push(h2.join(r2));
              }
            }
            var n3;
          };
          h2.push(l2.config.chart.toolbar.export.csv.headerCategory), "boxPlot" === l2.config.chart.type ? (h2.push("minimum"), h2.push("q1"), h2.push("median"), h2.push("q3"), h2.push("maximum")) : "candlestick" === l2.config.chart.type ? (h2.push("open"), h2.push("high"), h2.push("low"), h2.push("close")) : "rangeBar" === l2.config.chart.type ? (h2.push("minimum"), h2.push("maximum")) : i2.map(function(t4, e3) {
            var i3 = t4.name ? t4.name : "series-".concat(e3);
            l2.globals.axisCharts && h2.push(i3.split(r2).join("") ? i3.split(r2).join("") : "series-".concat(e3));
          }), l2.globals.axisCharts || (h2.push(l2.config.chart.toolbar.export.csv.headerValue), c2.push(h2.join(r2))), i2.map(function(t4, e3) {
            l2.globals.axisCharts ? m2(t4, e3) : ((h2 = []).push(l2.globals.labels[e3].split(r2).join("")), h2.push(g2[e3]), c2.push(h2.join(r2)));
          }), d2 += c2.join(n2), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\uFEFF" + d2), a2 || l2.config.chart.toolbar.export.csv.filename, ".csv");
        } }, { key: "triggerDownload", value: function(t3, e2, i2) {
          var a2 = document.createElement("a");
          a2.href = t3, a2.download = (e2 || this.w.globals.chartID) + i2, document.body.appendChild(a2), a2.click(), document.body.removeChild(a2);
        } }]), t2;
      }();
      var G = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.axesUtils = new B(e2), this.xaxisLabels = i2.globals.labels.slice(), i2.globals.timescaleLabels.length > 0 && !i2.globals.isBarHorizontal && (this.xaxisLabels = i2.globals.timescaleLabels.slice()), i2.config.xaxis.overwriteCategories && (this.xaxisLabels = i2.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === i2.config.xaxis.position ? this.offY = 0 : this.offY = i2.globals.gridHeight + 1, this.offY = this.offY + i2.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === i2.config.chart.type && i2.config.plotOptions.bar.horizontal, this.xaxisFontSize = i2.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = i2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = i2.config.xaxis.labels.style.colors, this.xaxisBorderWidth = i2.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = i2.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = i2.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = i2.config.xaxis.axisBorder.height, this.yaxis = i2.config.yaxis[0];
        }
        return r(t2, [{ key: "drawXaxis", value: function() {
          var t3 = this.w, e2 = new m(this.ctx), i2 = e2.group({ class: "apexcharts-xaxis", transform: "translate(".concat(t3.config.xaxis.offsetX, ", ").concat(t3.config.xaxis.offsetY, ")") }), a2 = e2.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(t3.globals.translateXAxisX, ", ").concat(t3.globals.translateXAxisY, ")") });
          i2.add(a2);
          for (var s2 = [], r2 = 0; r2 < this.xaxisLabels.length; r2++)
            s2.push(this.xaxisLabels[r2]);
          if (this.drawXAxisLabelAndGroup(true, e2, a2, s2, t3.globals.isXNumeric, function(t4, e3) {
            return e3;
          }), t3.globals.hasGroups) {
            var o2 = t3.globals.groups;
            s2 = [];
            for (var n2 = 0; n2 < o2.length; n2++)
              s2.push(o2[n2].title);
            var l2 = {};
            t3.config.xaxis.group.style && (l2.xaxisFontSize = t3.config.xaxis.group.style.fontSize, l2.xaxisFontFamily = t3.config.xaxis.group.style.fontFamily, l2.xaxisForeColors = t3.config.xaxis.group.style.colors, l2.fontWeight = t3.config.xaxis.group.style.fontWeight, l2.cssClass = t3.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(false, e2, a2, s2, false, function(t4, e3) {
              return o2[t4].cols * e3;
            }, l2);
          }
          if (void 0 !== t3.config.xaxis.title.text) {
            var h2 = e2.group({ class: "apexcharts-xaxis-title" }), c2 = e2.drawText({ x: t3.globals.gridWidth / 2 + t3.config.xaxis.title.offsetX, y: this.offY + parseFloat(this.xaxisFontSize) + t3.globals.xAxisLabelsHeight + t3.config.xaxis.title.offsetY, text: t3.config.xaxis.title.text, textAnchor: "middle", fontSize: t3.config.xaxis.title.style.fontSize, fontFamily: t3.config.xaxis.title.style.fontFamily, fontWeight: t3.config.xaxis.title.style.fontWeight, foreColor: t3.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + t3.config.xaxis.title.style.cssClass });
            h2.add(c2), i2.add(h2);
          }
          if (t3.config.xaxis.axisBorder.show) {
            var d2 = t3.globals.barPadForNumericAxis, g2 = e2.drawLine(t3.globals.padHorizontal + t3.config.xaxis.axisBorder.offsetX - d2, this.offY, this.xaxisBorderWidth + d2, this.offY, t3.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
            i2.add(g2);
          }
          return i2;
        } }, { key: "drawXAxisLabelAndGroup", value: function(t3, e2, i2, a2, s2, r2) {
          var o2, n2 = this, l2 = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {}, h2 = [], c2 = [], d2 = this.w, g2 = l2.xaxisFontSize || this.xaxisFontSize, u2 = l2.xaxisFontFamily || this.xaxisFontFamily, f2 = l2.xaxisForeColors || this.xaxisForeColors, p2 = l2.fontWeight || d2.config.xaxis.labels.style.fontWeight, x2 = l2.cssClass || d2.config.xaxis.labels.style.cssClass, b2 = d2.globals.padHorizontal, v2 = a2.length, m2 = "category" === d2.config.xaxis.type ? d2.globals.dataPoints : v2;
          if (0 === m2 && v2 > m2 && (m2 = v2), s2) {
            var y2 = m2 > 1 ? m2 - 1 : m2;
            o2 = d2.globals.gridWidth / y2, b2 = b2 + r2(0, o2) / 2 + d2.config.xaxis.labels.offsetX;
          } else
            o2 = d2.globals.gridWidth / m2, b2 = b2 + r2(0, o2) + d2.config.xaxis.labels.offsetX;
          for (var w2 = function(s3) {
            var l3 = b2 - r2(s3, o2) / 2 + d2.config.xaxis.labels.offsetX;
            0 === s3 && 1 === v2 && o2 / 2 === b2 && 1 === m2 && (l3 = d2.globals.gridWidth / 2);
            var y3 = n2.axesUtils.getLabel(a2, d2.globals.timescaleLabels, l3, s3, h2, g2, t3), w3 = 28;
            d2.globals.rotateXLabels && t3 && (w3 = 22), t3 || (w3 = w3 + parseFloat(g2) + (d2.globals.xAxisLabelsHeight - d2.globals.xAxisGroupLabelsHeight) + (d2.globals.rotateXLabels ? 10 : 0)), y3 = void 0 !== d2.config.xaxis.tickAmount && "dataPoints" !== d2.config.xaxis.tickAmount && "datetime" !== d2.config.xaxis.type ? n2.axesUtils.checkLabelBasedOnTickamount(s3, y3, v2) : n2.axesUtils.checkForOverflowingLabels(s3, y3, v2, h2, c2);
            if (t3 && y3.text && d2.globals.xaxisLabelsCount++, d2.config.xaxis.labels.show) {
              var k3 = e2.drawText({ x: y3.x, y: n2.offY + d2.config.xaxis.labels.offsetY + w3 - ("top" === d2.config.xaxis.position ? d2.globals.xAxisHeight + d2.config.xaxis.axisTicks.height - 2 : 0), text: y3.text, textAnchor: "middle", fontWeight: y3.isBold ? 600 : p2, fontSize: g2, fontFamily: u2, foreColor: Array.isArray(f2) ? t3 && d2.config.xaxis.convertedCatToNumeric ? f2[d2.globals.minX + s3 - 1] : f2[s3] : f2, isPlainText: false, cssClass: (t3 ? "apexcharts-xaxis-label " : "apexcharts-xaxis-group-label ") + x2 });
              if (i2.add(k3), k3.on("click", function(t4) {
                if ("function" == typeof d2.config.chart.events.xAxisLabelClick) {
                  var e3 = Object.assign({}, d2, { labelIndex: s3 });
                  d2.config.chart.events.xAxisLabelClick(t4, n2.ctx, e3);
                }
              }), t3) {
                var A2 = document.createElementNS(d2.globals.SVGNS, "title");
                A2.textContent = Array.isArray(y3.text) ? y3.text.join(" ") : y3.text, k3.node.appendChild(A2), "" !== y3.text && (h2.push(y3.text), c2.push(y3));
              }
            }
            s3 < v2 - 1 && (b2 += r2(s3 + 1, o2));
          }, k2 = 0; k2 <= v2 - 1; k2++)
            w2(k2);
        } }, { key: "drawXaxisInversed", value: function(t3) {
          var e2, i2, a2 = this, s2 = this.w, r2 = new m(this.ctx), o2 = s2.config.yaxis[0].opposite ? s2.globals.translateYAxisX[t3] : 0, n2 = r2.group({ class: "apexcharts-yaxis apexcharts-xaxis-inversed", rel: t3 }), l2 = r2.group({ class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g", transform: "translate(" + o2 + ", 0)" });
          n2.add(l2);
          var h2 = [];
          if (s2.config.yaxis[t3].show)
            for (var c2 = 0; c2 < this.xaxisLabels.length; c2++)
              h2.push(this.xaxisLabels[c2]);
          e2 = s2.globals.gridHeight / h2.length, i2 = -e2 / 2.2;
          var d2 = s2.globals.yLabelFormatters[0], g2 = s2.config.yaxis[0].labels;
          if (g2.show)
            for (var u2 = function(o3) {
              var n3 = void 0 === h2[o3] ? "" : h2[o3];
              n3 = d2(n3, { seriesIndex: t3, dataPointIndex: o3, w: s2 });
              var c3 = a2.axesUtils.getYAxisForeColor(g2.style.colors, t3), u3 = 0;
              Array.isArray(n3) && (u3 = n3.length / 2 * parseInt(g2.style.fontSize, 10));
              var f3 = r2.drawText({ x: g2.offsetX - 15, y: i2 + e2 + g2.offsetY - u3, text: n3, textAnchor: a2.yaxis.opposite ? "start" : "end", foreColor: Array.isArray(c3) ? c3[o3] : c3, fontSize: g2.style.fontSize, fontFamily: g2.style.fontFamily, fontWeight: g2.style.fontWeight, isPlainText: false, cssClass: "apexcharts-yaxis-label " + g2.style.cssClass, maxWidth: g2.maxWidth });
              l2.add(f3), f3.on("click", function(t4) {
                if ("function" == typeof s2.config.chart.events.xAxisLabelClick) {
                  var e3 = Object.assign({}, s2, { labelIndex: o3 });
                  s2.config.chart.events.xAxisLabelClick(t4, a2.ctx, e3);
                }
              });
              var p3 = document.createElementNS(s2.globals.SVGNS, "title");
              if (p3.textContent = Array.isArray(n3) ? n3.join(" ") : n3, f3.node.appendChild(p3), 0 !== s2.config.yaxis[t3].labels.rotate) {
                var x3 = r2.rotateAroundCenter(f3.node);
                f3.node.setAttribute("transform", "rotate(".concat(s2.config.yaxis[t3].labels.rotate, " 0 ").concat(x3.y, ")"));
              }
              i2 += e2;
            }, f2 = 0; f2 <= h2.length - 1; f2++)
              u2(f2);
          if (void 0 !== s2.config.yaxis[0].title.text) {
            var p2 = r2.group({ class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed", transform: "translate(" + o2 + ", 0)" }), x2 = r2.drawText({ x: 0, y: s2.globals.gridHeight / 2, text: s2.config.yaxis[0].title.text, textAnchor: "middle", foreColor: s2.config.yaxis[0].title.style.color, fontSize: s2.config.yaxis[0].title.style.fontSize, fontWeight: s2.config.yaxis[0].title.style.fontWeight, fontFamily: s2.config.yaxis[0].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + s2.config.yaxis[0].title.style.cssClass });
            p2.add(x2), n2.add(p2);
          }
          var b2 = 0;
          this.isCategoryBarHorizontal && s2.config.yaxis[0].opposite && (b2 = s2.globals.gridWidth);
          var v2 = s2.config.xaxis.axisBorder;
          if (v2.show) {
            var y2 = r2.drawLine(s2.globals.padHorizontal + v2.offsetX + b2, 1 + v2.offsetY, s2.globals.padHorizontal + v2.offsetX + b2, s2.globals.gridHeight + v2.offsetY, v2.color, 0);
            n2.add(y2);
          }
          return s2.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b2, h2.length, s2.config.yaxis[0].axisBorder, s2.config.yaxis[0].axisTicks, 0, e2, n2), n2;
        } }, { key: "drawXaxisTicks", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = t3;
          if (!(t3 < 0 || t3 - 2 > a2.globals.gridWidth)) {
            var r2 = this.offY + a2.config.xaxis.axisTicks.offsetY;
            if (e2 = e2 + r2 + a2.config.xaxis.axisTicks.height, "top" === a2.config.xaxis.position && (e2 = r2 - a2.config.xaxis.axisTicks.height), a2.config.xaxis.axisTicks.show) {
              var o2 = new m(this.ctx).drawLine(t3 + a2.config.xaxis.axisTicks.offsetX, r2 + a2.config.xaxis.offsetY, s2 + a2.config.xaxis.axisTicks.offsetX, e2 + a2.config.xaxis.offsetY, a2.config.xaxis.axisTicks.color);
              i2.add(o2), o2.node.classList.add("apexcharts-xaxis-tick");
            }
          }
        } }, { key: "getXAxisTicksPositions", value: function() {
          var t3 = this.w, e2 = [], i2 = this.xaxisLabels.length, a2 = t3.globals.padHorizontal;
          if (t3.globals.timescaleLabels.length > 0)
            for (var s2 = 0; s2 < i2; s2++)
              a2 = this.xaxisLabels[s2].position, e2.push(a2);
          else
            for (var r2 = i2, o2 = 0; o2 < r2; o2++) {
              var n2 = r2;
              t3.globals.isXNumeric && "bar" !== t3.config.chart.type && (n2 -= 1), a2 += t3.globals.gridWidth / n2, e2.push(a2);
            }
          return e2;
        } }, { key: "xAxisLabelCorrections", value: function() {
          var t3 = this.w, e2 = new m(this.ctx), i2 = t3.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"), a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"), s2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"), r2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
          if (t3.globals.rotateXLabels || t3.config.xaxis.labels.rotateAlways)
            for (var o2 = 0; o2 < a2.length; o2++) {
              var n2 = e2.rotateAroundCenter(a2[o2]);
              n2.y = n2.y - 1, n2.x = n2.x + 1, a2[o2].setAttribute("transform", "rotate(".concat(t3.config.xaxis.labels.rotate, " ").concat(n2.x, " ").concat(n2.y, ")")), a2[o2].setAttribute("text-anchor", "end");
              i2.setAttribute("transform", "translate(0, ".concat(-10, ")"));
              var l2 = a2[o2].childNodes;
              t3.config.xaxis.labels.trim && Array.prototype.forEach.call(l2, function(i3) {
                e2.placeTextWithEllipsis(i3, i3.textContent, t3.globals.xAxisLabelsHeight - ("bottom" === t3.config.legend.position ? 20 : 10));
              });
            }
          else
            !function() {
              for (var i3 = t3.globals.gridWidth / (t3.globals.labels.length + 1), s3 = 0; s3 < a2.length; s3++) {
                var r3 = a2[s3].childNodes;
                t3.config.xaxis.labels.trim && "datetime" !== t3.config.xaxis.type && Array.prototype.forEach.call(r3, function(t4) {
                  e2.placeTextWithEllipsis(t4, t4.textContent, i3);
                });
              }
            }();
          if (s2.length > 0) {
            var h2 = s2[s2.length - 1].getBBox(), c2 = s2[0].getBBox();
            h2.x < -20 && s2[s2.length - 1].parentNode.removeChild(s2[s2.length - 1]), c2.x + c2.width > t3.globals.gridWidth && !t3.globals.isBarHorizontal && s2[0].parentNode.removeChild(s2[0]);
            for (var d2 = 0; d2 < r2.length; d2++)
              e2.placeTextWithEllipsis(r2[d2], r2[d2].textContent, t3.config.yaxis[0].labels.maxWidth - (t3.config.yaxis[0].title.text ? 2 * parseFloat(t3.config.yaxis[0].title.style.fontSize) : 0) - 15);
          }
        } }]), t2;
      }();
      var j = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.xaxisLabels = i2.globals.labels.slice(), this.axesUtils = new B(e2), this.isRangeBar = i2.globals.seriesRange.length, i2.globals.timescaleLabels.length > 0 && (this.xaxisLabels = i2.globals.timescaleLabels.slice());
        }
        return r(t2, [{ key: "drawGridArea", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e2 = this.w, i2 = new m(this.ctx);
          null === t3 && (t3 = i2.group({ class: "apexcharts-grid" }));
          var a2 = i2.drawLine(e2.globals.padHorizontal, 1, e2.globals.padHorizontal, e2.globals.gridHeight, "transparent"), s2 = i2.drawLine(e2.globals.padHorizontal, e2.globals.gridHeight, e2.globals.gridWidth, e2.globals.gridHeight, "transparent");
          return t3.add(s2), t3.add(a2), t3;
        } }, { key: "drawGrid", value: function() {
          var t3 = null;
          return this.w.globals.axisCharts && (t3 = this.renderGrid(), this.drawGridArea(t3.el)), t3;
        } }, { key: "createGridMask", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = new m(this.ctx), a2 = Array.isArray(t3.config.stroke.width) ? 0 : t3.config.stroke.width;
          if (Array.isArray(t3.config.stroke.width)) {
            var s2 = 0;
            t3.config.stroke.width.forEach(function(t4) {
              s2 = Math.max(s2, t4);
            }), a2 = s2;
          }
          e2.dom.elGridRectMask = document.createElementNS(e2.SVGNS, "clipPath"), e2.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e2.cuid)), e2.dom.elGridRectMarkerMask = document.createElementNS(e2.SVGNS, "clipPath"), e2.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e2.cuid)), e2.dom.elForecastMask = document.createElementNS(e2.SVGNS, "clipPath"), e2.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e2.cuid)), e2.dom.elNonForecastMask = document.createElementNS(e2.SVGNS, "clipPath"), e2.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e2.cuid));
          var r2 = t3.config.chart.type, o2 = 0, n2 = 0;
          ("bar" === r2 || "rangeBar" === r2 || "candlestick" === r2 || "boxPlot" === r2 || t3.globals.comboBarCount > 0) && t3.globals.isXNumeric && !t3.globals.isBarHorizontal && (o2 = t3.config.grid.padding.left, n2 = t3.config.grid.padding.right, e2.barPadForNumericAxis > o2 && (o2 = e2.barPadForNumericAxis, n2 = e2.barPadForNumericAxis)), e2.dom.elGridRect = i2.drawRect(-a2 / 2 - o2 - 2, -a2 / 2, e2.gridWidth + a2 + n2 + o2 + 4, e2.gridHeight + a2, 0, "#fff");
          var l2 = t3.globals.markers.largestSize + 1;
          e2.dom.elGridRectMarker = i2.drawRect(2 * -l2, 2 * -l2, e2.gridWidth + 4 * l2, e2.gridHeight + 4 * l2, 0, "#fff"), e2.dom.elGridRectMask.appendChild(e2.dom.elGridRect.node), e2.dom.elGridRectMarkerMask.appendChild(e2.dom.elGridRectMarker.node);
          var h2 = e2.dom.baseEl.querySelector("defs");
          h2.appendChild(e2.dom.elGridRectMask), h2.appendChild(e2.dom.elForecastMask), h2.appendChild(e2.dom.elNonForecastMask), h2.appendChild(e2.dom.elGridRectMarkerMask);
        } }, { key: "_drawGridLines", value: function(t3) {
          var e2 = t3.i, i2 = t3.x1, a2 = t3.y1, s2 = t3.x2, r2 = t3.y2, o2 = t3.xCount, n2 = t3.parent, l2 = this.w;
          if (!(0 === e2 && l2.globals.skipFirstTimelinelabel || e2 === o2 - 1 && l2.globals.skipLastTimelinelabel && !l2.config.xaxis.labels.formatter || "radar" === l2.config.chart.type)) {
            l2.config.grid.xaxis.lines.show && this._drawGridLine({ x1: i2, y1: a2, x2: s2, y2: r2, parent: n2 });
            var h2 = 0;
            if (l2.globals.hasGroups && "between" === l2.config.xaxis.tickPlacement) {
              var c2 = l2.globals.groups;
              if (c2) {
                for (var d2 = 0, g2 = 0; d2 < e2 && g2 < c2.length; g2++)
                  d2 += c2[g2].cols;
                d2 === e2 && (h2 = 0.6 * l2.globals.xAxisLabelsHeight);
              }
            }
            new G(this.ctx).drawXaxisTicks(i2, h2, this.elg);
          }
        } }, { key: "_drawGridLine", value: function(t3) {
          var e2 = t3.x1, i2 = t3.y1, a2 = t3.x2, s2 = t3.y2, r2 = t3.parent, o2 = this.w, n2 = r2.node.classList.contains("apexcharts-gridlines-horizontal"), l2 = o2.config.grid.strokeDashArray, h2 = o2.globals.barPadForNumericAxis, c2 = new m(this).drawLine(e2 - (n2 ? h2 : 0), i2, a2 + (n2 ? h2 : 0), s2, o2.config.grid.borderColor, l2);
          c2.node.classList.add("apexcharts-gridline"), r2.add(c2);
        } }, { key: "_drawGridBandRect", value: function(t3) {
          var e2 = t3.c, i2 = t3.x1, a2 = t3.y1, s2 = t3.x2, r2 = t3.y2, o2 = t3.type, n2 = this.w, l2 = new m(this.ctx), h2 = n2.globals.barPadForNumericAxis;
          if ("column" !== o2 || "datetime" !== n2.config.xaxis.type) {
            var c2 = n2.config.grid[o2].colors[e2], d2 = l2.drawRect(i2 - ("row" === o2 ? h2 : 0), a2, s2 + ("row" === o2 ? 2 * h2 : 0), r2, 0, c2, n2.config.grid[o2].opacity);
            this.elg.add(d2), d2.attr("clip-path", "url(#gridRectMask".concat(n2.globals.cuid, ")")), d2.node.classList.add("apexcharts-grid-".concat(o2));
          }
        } }, { key: "_drawXYLines", value: function(t3) {
          var e2 = this, i2 = t3.xCount, a2 = t3.tickAmount, s2 = this.w;
          if (s2.config.grid.xaxis.lines.show || s2.config.xaxis.axisTicks.show) {
            var r2, o2 = s2.globals.padHorizontal, n2 = s2.globals.gridHeight;
            s2.globals.timescaleLabels.length ? function(t4) {
              for (var a3 = t4.xC, s3 = t4.x1, r3 = t4.y1, o3 = t4.x2, n3 = t4.y2, l3 = 0; l3 < a3; l3++)
                s3 = e2.xaxisLabels[l3].position, o3 = e2.xaxisLabels[l3].position, e2._drawGridLines({ i: l3, x1: s3, y1: r3, x2: o3, y2: n3, xCount: i2, parent: e2.elgridLinesV });
            }({ xC: i2, x1: o2, y1: 0, x2: r2, y2: n2 }) : (s2.globals.isXNumeric && (i2 = s2.globals.xAxisScale.result.length), s2.config.xaxis.convertedCatToNumeric && (i2 = s2.globals.xaxisLabelsCount), function(t4) {
              var a3 = t4.xC, r3 = t4.x1, o3 = t4.y1, n3 = t4.x2, l3 = t4.y2;
              if (void 0 !== s2.config.xaxis.tickAmount && "dataPoints" !== s2.config.xaxis.tickAmount && "on" === s2.config.xaxis.tickPlacement)
                s2.globals.dom.baseEl.querySelectorAll(".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)").forEach(function(t5, a4) {
                  var s3 = t5.getBBox();
                  e2._drawGridLines({ i: a4, x1: s3.x + s3.width / 2, y1: o3, x2: s3.x + s3.width / 2, y2: l3, xCount: i2, parent: e2.elgridLinesV });
                });
              else
                for (var h3 = 0; h3 < a3 + (s2.globals.isXNumeric ? 0 : 1); h3++)
                  0 === h3 && 1 === a3 && 1 === s2.globals.dataPoints && (n3 = r3 = s2.globals.gridWidth / 2), e2._drawGridLines({ i: h3, x1: r3, y1: o3, x2: n3, y2: l3, xCount: i2, parent: e2.elgridLinesV }), n3 = r3 += s2.globals.gridWidth / (s2.globals.isXNumeric ? a3 - 1 : a3);
            }({ xC: i2, x1: o2, y1: 0, x2: r2, y2: n2 }));
          }
          if (s2.config.grid.yaxis.lines.show) {
            var l2 = 0, h2 = 0, c2 = s2.globals.gridWidth, d2 = a2 + 1;
            this.isRangeBar && (d2 = s2.globals.labels.length);
            for (var g2 = 0; g2 < d2 + (this.isRangeBar ? 1 : 0); g2++)
              this._drawGridLine({ x1: 0, y1: l2, x2: c2, y2: h2, parent: this.elgridLinesH }), h2 = l2 += s2.globals.gridHeight / (this.isRangeBar ? d2 : a2);
          }
        } }, { key: "_drawInvertedXYLines", value: function(t3) {
          var e2 = t3.xCount, i2 = this.w;
          if (i2.config.grid.xaxis.lines.show || i2.config.xaxis.axisTicks.show)
            for (var a2, s2 = i2.globals.padHorizontal, r2 = i2.globals.gridHeight, o2 = 0; o2 < e2 + 1; o2++) {
              i2.config.grid.xaxis.lines.show && this._drawGridLine({ x1: s2, y1: 0, x2: a2, y2: r2, parent: this.elgridLinesV }), new G(this.ctx).drawXaxisTicks(s2, 0, this.elg), a2 = s2 = s2 + i2.globals.gridWidth / e2 + 0.3;
            }
          if (i2.config.grid.yaxis.lines.show)
            for (var n2 = 0, l2 = 0, h2 = i2.globals.gridWidth, c2 = 0; c2 < i2.globals.dataPoints + 1; c2++)
              this._drawGridLine({ x1: 0, y1: n2, x2: h2, y2: l2, parent: this.elgridLinesH }), l2 = n2 += i2.globals.gridHeight / i2.globals.dataPoints;
        } }, { key: "renderGrid", value: function() {
          var t3 = this.w, e2 = new m(this.ctx);
          this.elg = e2.group({ class: "apexcharts-grid" }), this.elgridLinesH = e2.group({ class: "apexcharts-gridlines-horizontal" }), this.elgridLinesV = e2.group({ class: "apexcharts-gridlines-vertical" }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t3.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide());
          for (var i2, a2 = t3.globals.yAxisScale.length ? t3.globals.yAxisScale[0].result.length - 1 : 5, s2 = 0; s2 < t3.globals.series.length && (void 0 !== t3.globals.yAxisScale[s2] && (a2 = t3.globals.yAxisScale[s2].result.length - 1), !(a2 > 2)); s2++)
            ;
          return !t3.globals.isBarHorizontal || this.isRangeBar ? (i2 = this.xaxisLabels.length, this.isRangeBar && (a2 = t3.globals.labels.length, t3.config.xaxis.tickAmount && t3.config.xaxis.labels.formatter && (i2 = t3.config.xaxis.tickAmount)), this._drawXYLines({ xCount: i2, tickAmount: a2 })) : (i2 = a2, a2 = t3.globals.xTickAmount, this._drawInvertedXYLines({ xCount: i2, tickAmount: a2 })), this.drawGridBands(i2, a2), { el: this.elg, xAxisTickWidth: t3.globals.gridWidth / i2 };
        } }, { key: "drawGridBands", value: function(t3, e2) {
          var i2 = this.w;
          if (void 0 !== i2.config.grid.row.colors && i2.config.grid.row.colors.length > 0)
            for (var a2 = 0, s2 = i2.globals.gridHeight / e2, r2 = i2.globals.gridWidth, o2 = 0, n2 = 0; o2 < e2; o2++, n2++)
              n2 >= i2.config.grid.row.colors.length && (n2 = 0), this._drawGridBandRect({ c: n2, x1: 0, y1: a2, x2: r2, y2: s2, type: "row" }), a2 += i2.globals.gridHeight / e2;
          if (void 0 !== i2.config.grid.column.colors && i2.config.grid.column.colors.length > 0)
            for (var l2 = i2.globals.isBarHorizontal || "category" !== i2.config.xaxis.type && !i2.config.xaxis.convertedCatToNumeric ? t3 : t3 - 1, h2 = i2.globals.padHorizontal, c2 = i2.globals.padHorizontal + i2.globals.gridWidth / l2, d2 = i2.globals.gridHeight, g2 = 0, u2 = 0; g2 < t3; g2++, u2++)
              u2 >= i2.config.grid.column.colors.length && (u2 = 0), this._drawGridBandRect({ c: u2, x1: h2, y1: 0, x2: c2, y2: d2, type: "column" }), h2 += i2.globals.gridWidth / l2;
        } }]), t2;
      }();
      var _3 = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "niceScale", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, s2 = arguments.length > 4 ? arguments[4] : void 0, r2 = this.w, o2 = Math.abs(e2 - t3);
          if ("dataPoints" === (i2 = this._adjustTicksForSmallRange(i2, a2, o2)) && (i2 = r2.globals.dataPoints - 1), t3 === Number.MIN_VALUE && 0 === e2 || !x.isNumber(t3) && !x.isNumber(e2) || t3 === Number.MIN_VALUE && e2 === -Number.MAX_VALUE) {
            t3 = 0, e2 = i2;
            var n2 = this.linearScale(t3, e2, i2);
            return n2;
          }
          t3 > e2 ? (console.warn("axis.min cannot be greater than axis.max"), e2 = t3 + 0.1) : t3 === e2 && (t3 = 0 === t3 ? 0 : t3 - 0.5, e2 = 0 === e2 ? 2 : e2 + 0.5);
          var l2 = [];
          o2 < 1 && s2 && ("candlestick" === r2.config.chart.type || "candlestick" === r2.config.series[a2].type || "boxPlot" === r2.config.chart.type || "boxPlot" === r2.config.series[a2].type || r2.globals.isRangeData) && (e2 *= 1.01);
          var h2 = i2 + 1;
          h2 < 2 ? h2 = 2 : h2 > 2 && (h2 -= 2);
          var c2 = o2 / h2, d2 = Math.floor(x.log10(c2)), g2 = Math.pow(10, d2), u2 = Math.round(c2 / g2);
          u2 < 1 && (u2 = 1);
          var f2 = u2 * g2, p2 = f2 * Math.floor(t3 / f2), b2 = f2 * Math.ceil(e2 / f2), v2 = p2;
          if (s2 && o2 > 2) {
            for (; l2.push(v2), !((v2 += f2) > b2); )
              ;
            return { result: l2, niceMin: l2[0], niceMax: l2[l2.length - 1] };
          }
          var m2 = t3;
          (l2 = []).push(m2);
          for (var y2 = Math.abs(e2 - t3) / i2, w2 = 0; w2 <= i2; w2++)
            m2 += y2, l2.push(m2);
          return l2[l2.length - 2] >= e2 && l2.pop(), { result: l2, niceMin: l2[0], niceMax: l2[l2.length - 1] };
        } }, { key: "linearScale", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, a2 = arguments.length > 3 ? arguments[3] : void 0, s2 = Math.abs(e2 - t3);
          "dataPoints" === (i2 = this._adjustTicksForSmallRange(i2, a2, s2)) && (i2 = this.w.globals.dataPoints - 1);
          var r2 = s2 / i2;
          i2 === Number.MAX_VALUE && (i2 = 10, r2 = 1);
          for (var o2 = [], n2 = t3; i2 >= 0; )
            o2.push(n2), n2 += r2, i2 -= 1;
          return { result: o2, niceMin: o2[0], niceMax: o2[o2.length - 1] };
        } }, { key: "logarithmicScaleNice", value: function(t3, e2, i2) {
          e2 <= 0 && (e2 = Math.max(t3, i2)), t3 <= 0 && (t3 = Math.min(e2, i2));
          for (var a2 = [], s2 = Math.ceil(Math.log(e2) / Math.log(i2) + 1), r2 = Math.floor(Math.log(t3) / Math.log(i2)); r2 < s2; r2++)
            a2.push(Math.pow(i2, r2));
          return { result: a2, niceMin: a2[0], niceMax: a2[a2.length - 1] };
        } }, { key: "logarithmicScale", value: function(t3, e2, i2) {
          e2 <= 0 && (e2 = Math.max(t3, i2)), t3 <= 0 && (t3 = Math.min(e2, i2));
          for (var a2 = [], s2 = Math.log(e2) / Math.log(i2), r2 = Math.log(t3) / Math.log(i2), o2 = s2 - r2, n2 = Math.round(o2), l2 = o2 / n2, h2 = 0, c2 = r2; h2 < n2; h2++, c2 += l2)
            a2.push(Math.pow(i2, c2));
          return a2.push(Math.pow(i2, s2)), { result: a2, niceMin: t3, niceMax: e2 };
        } }, { key: "_adjustTicksForSmallRange", value: function(t3, e2, i2) {
          var a2 = t3;
          if (void 0 !== e2 && this.w.config.yaxis[e2].labels.formatter && void 0 === this.w.config.yaxis[e2].tickAmount) {
            var s2 = this.w.config.yaxis[e2].labels.formatter(1);
            x.isNumber(Number(s2)) && !x.isFloat(s2) && (a2 = Math.ceil(i2));
          }
          return a2 < t3 ? a2 : t3;
        } }, { key: "setYScaleForIndex", value: function(t3, e2, i2) {
          var a2 = this.w.globals, s2 = this.w.config, r2 = a2.isBarHorizontal ? s2.xaxis : s2.yaxis[t3];
          void 0 === a2.yAxisScale[t3] && (a2.yAxisScale[t3] = []);
          var o2 = Math.abs(i2 - e2);
          if (r2.logarithmic && o2 <= 5 && (a2.invalidLogScale = true), r2.logarithmic && o2 > 5)
            a2.allSeriesCollapsed = false, a2.yAxisScale[t3] = this.logarithmicScale(e2, i2, r2.logBase), a2.yAxisScale[t3] = r2.forceNiceScale ? this.logarithmicScaleNice(e2, i2, r2.logBase) : this.logarithmicScale(e2, i2, r2.logBase);
          else if (i2 !== -Number.MAX_VALUE && x.isNumber(i2))
            if (a2.allSeriesCollapsed = false, void 0 === r2.min && void 0 === r2.max || r2.forceNiceScale) {
              var n2 = void 0 === s2.yaxis[t3].max && void 0 === s2.yaxis[t3].min || s2.yaxis[t3].forceNiceScale;
              a2.yAxisScale[t3] = this.niceScale(e2, i2, r2.tickAmount ? r2.tickAmount : o2 < 5 && o2 > 1 ? o2 + 1 : 5, t3, n2);
            } else
              a2.yAxisScale[t3] = this.linearScale(e2, i2, r2.tickAmount, t3);
          else
            a2.yAxisScale[t3] = this.linearScale(0, 5, 5);
        } }, { key: "setXScale", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.globals, s2 = i2.config.xaxis, r2 = Math.abs(e2 - t3);
          return e2 !== -Number.MAX_VALUE && x.isNumber(e2) ? a2.xAxisScale = this.linearScale(t3, e2, s2.tickAmount ? s2.tickAmount : r2 < 5 && r2 > 1 ? r2 + 1 : 5, 0) : a2.xAxisScale = this.linearScale(0, 5, 5), a2.xAxisScale;
        } }, { key: "setMultipleYScales", value: function() {
          var t3 = this, e2 = this.w.globals, i2 = this.w.config, a2 = e2.minYArr.concat([]), s2 = e2.maxYArr.concat([]), r2 = [];
          i2.yaxis.forEach(function(e3, o2) {
            var n2 = o2;
            i2.series.forEach(function(t4, i3) {
              t4.name === e3.seriesName && (n2 = i3, o2 !== i3 ? r2.push({ index: i3, similarIndex: o2, alreadyExists: true }) : r2.push({ index: i3 }));
            });
            var l2 = a2[n2], h2 = s2[n2];
            t3.setYScaleForIndex(o2, l2, h2);
          }), this.sameScaleInMultipleAxes(a2, s2, r2);
        } }, { key: "sameScaleInMultipleAxes", value: function(t3, e2, i2) {
          var a2 = this, s2 = this.w.config, r2 = this.w.globals, o2 = [];
          i2.forEach(function(t4) {
            t4.alreadyExists && (void 0 === o2[t4.index] && (o2[t4.index] = []), o2[t4.index].push(t4.index), o2[t4.index].push(t4.similarIndex));
          }), r2.yAxisSameScaleIndices = o2, o2.forEach(function(t4, e3) {
            o2.forEach(function(i3, a3) {
              var s3, r3;
              e3 !== a3 && (s3 = t4, r3 = i3, s3.filter(function(t5) {
                return -1 !== r3.indexOf(t5);
              })).length > 0 && (o2[e3] = o2[e3].concat(o2[a3]));
            });
          });
          var n2 = o2.map(function(t4) {
            return t4.filter(function(e3, i3) {
              return t4.indexOf(e3) === i3;
            });
          }).map(function(t4) {
            return t4.sort();
          });
          o2 = o2.filter(function(t4) {
            return !!t4;
          });
          var l2 = n2.slice(), h2 = l2.map(function(t4) {
            return JSON.stringify(t4);
          });
          l2 = l2.filter(function(t4, e3) {
            return h2.indexOf(JSON.stringify(t4)) === e3;
          });
          var c2 = [], d2 = [];
          t3.forEach(function(t4, i3) {
            l2.forEach(function(a3, s3) {
              a3.indexOf(i3) > -1 && (void 0 === c2[s3] && (c2[s3] = [], d2[s3] = []), c2[s3].push({ key: i3, value: t4 }), d2[s3].push({ key: i3, value: e2[i3] }));
            });
          });
          var g2 = Array.apply(null, Array(l2.length)).map(Number.prototype.valueOf, Number.MIN_VALUE), u2 = Array.apply(null, Array(l2.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
          c2.forEach(function(t4, e3) {
            t4.forEach(function(t5, i3) {
              g2[e3] = Math.min(t5.value, g2[e3]);
            });
          }), d2.forEach(function(t4, e3) {
            t4.forEach(function(t5, i3) {
              u2[e3] = Math.max(t5.value, u2[e3]);
            });
          }), t3.forEach(function(t4, e3) {
            d2.forEach(function(t5, i3) {
              var o3 = g2[i3], n3 = u2[i3];
              s2.chart.stacked && (n3 = 0, t5.forEach(function(t6, e4) {
                t6.value !== -Number.MAX_VALUE && (n3 += t6.value), o3 !== Number.MIN_VALUE && (o3 += c2[i3][e4].value);
              })), t5.forEach(function(i4, l3) {
                t5[l3].key === e3 && (void 0 !== s2.yaxis[e3].min && (o3 = "function" == typeof s2.yaxis[e3].min ? s2.yaxis[e3].min(r2.minY) : s2.yaxis[e3].min), void 0 !== s2.yaxis[e3].max && (n3 = "function" == typeof s2.yaxis[e3].max ? s2.yaxis[e3].max(r2.maxY) : s2.yaxis[e3].max), a2.setYScaleForIndex(e3, o3, n3));
              });
            });
          });
        } }, { key: "autoScaleY", value: function(t3, e2, i2) {
          t3 || (t3 = this);
          var a2 = t3.w;
          if (a2.globals.isMultipleYAxis || a2.globals.collapsedSeries.length)
            return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."), e2;
          var s2 = a2.globals.seriesX[0], r2 = a2.config.chart.stacked;
          return e2.forEach(function(t4, o2) {
            for (var n2 = 0, l2 = 0; l2 < s2.length; l2++)
              if (s2[l2] >= i2.xaxis.min) {
                n2 = l2;
                break;
              }
            var h2, c2, d2 = a2.globals.minYArr[o2], g2 = a2.globals.maxYArr[o2], u2 = a2.globals.stackedSeriesTotals;
            a2.globals.series.forEach(function(o3, l3) {
              var f2 = o3[n2];
              r2 ? (f2 = u2[n2], h2 = c2 = f2, u2.forEach(function(t5, e3) {
                s2[e3] <= i2.xaxis.max && s2[e3] >= i2.xaxis.min && (t5 > c2 && null !== t5 && (c2 = t5), o3[e3] < h2 && null !== o3[e3] && (h2 = o3[e3]));
              })) : (h2 = c2 = f2, o3.forEach(function(t5, e3) {
                if (s2[e3] <= i2.xaxis.max && s2[e3] >= i2.xaxis.min) {
                  var r3 = t5, o4 = t5;
                  a2.globals.series.forEach(function(i3, a3) {
                    null !== t5 && (r3 = Math.min(i3[e3], r3), o4 = Math.max(i3[e3], o4));
                  }), o4 > c2 && null !== o4 && (c2 = o4), r3 < h2 && null !== r3 && (h2 = r3);
                }
              })), void 0 === h2 && void 0 === c2 && (h2 = d2, c2 = g2), c2 *= c2 < 0 ? 0.9 : 1.1, 0 === (h2 *= h2 < 0 ? 1.1 : 0.9) && 0 === c2 && (h2 = -1, c2 = 1), c2 < 0 && c2 < g2 && (c2 = g2), h2 < 0 && h2 > d2 && (h2 = d2), e2.length > 1 ? (e2[l3].min = void 0 === t4.min ? h2 : t4.min, e2[l3].max = void 0 === t4.max ? c2 : t4.max) : (e2[0].min = void 0 === t4.min ? h2 : t4.min, e2[0].max = void 0 === t4.max ? c2 : t4.max);
            });
          }), e2;
        } }]), t2;
      }();
      var U = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.scales = new _3(e2);
        }
        return r(t2, [{ key: "init", value: function() {
          this.setYRange(), this.setXRange(), this.setZRange();
        } }, { key: "getMinYMaxY", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s2 = this.w.config, r2 = this.w.globals, o2 = -Number.MAX_VALUE, n2 = Number.MIN_VALUE;
          null === a2 && (a2 = t3 + 1);
          var l2 = r2.series, h2 = l2, c2 = l2;
          "candlestick" === s2.chart.type ? (h2 = r2.seriesCandleL, c2 = r2.seriesCandleH) : "boxPlot" === s2.chart.type ? (h2 = r2.seriesCandleO, c2 = r2.seriesCandleC) : r2.isRangeData && (h2 = r2.seriesRangeStart, c2 = r2.seriesRangeEnd);
          for (var d2 = t3; d2 < a2; d2++) {
            r2.dataPoints = Math.max(r2.dataPoints, l2[d2].length), r2.categoryLabels.length && (r2.dataPoints = r2.categoryLabels.filter(function(t4) {
              return void 0 !== t4;
            }).length);
            for (var g2 = 0; g2 < r2.series[d2].length; g2++) {
              var u2 = l2[d2][g2];
              null !== u2 && x.isNumber(u2) ? (void 0 !== c2[d2][g2] && (o2 = Math.max(o2, c2[d2][g2]), e2 = Math.min(e2, c2[d2][g2])), void 0 !== h2[d2][g2] && (e2 = Math.min(e2, h2[d2][g2]), i2 = Math.max(i2, h2[d2][g2])), "candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type && "rangeArea" === this.w.config.chart.type && "rangeBar" === this.w.config.chart.type || ("candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type || void 0 !== r2.seriesCandleC[d2][g2] && (o2 = Math.max(o2, r2.seriesCandleO[d2][g2]), o2 = Math.max(o2, r2.seriesCandleH[d2][g2]), o2 = Math.max(o2, r2.seriesCandleL[d2][g2]), o2 = Math.max(o2, r2.seriesCandleC[d2][g2]), "boxPlot" === this.w.config.chart.type && (o2 = Math.max(o2, r2.seriesCandleM[d2][g2]))), !s2.series[d2].type || "candlestick" === s2.series[d2].type && "boxPlot" === s2.series[d2].type && "rangeArea" === s2.series[d2].type && "rangeBar" === s2.series[d2].type || (o2 = Math.max(o2, r2.series[d2][g2]), e2 = Math.min(e2, r2.series[d2][g2])), i2 = o2), r2.seriesGoals[d2] && r2.seriesGoals[d2][g2] && Array.isArray(r2.seriesGoals[d2][g2]) && r2.seriesGoals[d2][g2].forEach(function(t4) {
                n2 !== Number.MIN_VALUE && (n2 = Math.min(n2, t4.value), e2 = n2), o2 = Math.max(o2, t4.value), i2 = o2;
              }), x.isFloat(u2) && (u2 = x.noExponents(u2), r2.yValueDecimal = Math.max(r2.yValueDecimal, u2.toString().split(".")[1].length)), n2 > h2[d2][g2] && h2[d2][g2] < 0 && (n2 = h2[d2][g2])) : r2.hasNullValues = true;
            }
          }
          return "rangeBar" === s2.chart.type && r2.seriesRangeStart.length && r2.isBarHorizontal && (n2 = e2), "bar" === s2.chart.type && (n2 < 0 && o2 < 0 && (o2 = 0), n2 === Number.MIN_VALUE && (n2 = 0)), { minY: n2, maxY: o2, lowestY: e2, highestY: i2 };
        } }, { key: "setYRange", value: function() {
          var t3 = this.w.globals, e2 = this.w.config;
          t3.maxY = -Number.MAX_VALUE, t3.minY = Number.MIN_VALUE;
          var i2 = Number.MAX_VALUE;
          if (t3.isMultipleYAxis)
            for (var a2 = 0; a2 < t3.series.length; a2++) {
              var s2 = this.getMinYMaxY(a2, i2, null, a2 + 1);
              t3.minYArr.push(s2.minY), t3.maxYArr.push(s2.maxY), i2 = s2.lowestY;
            }
          var r2 = this.getMinYMaxY(0, i2, null, t3.series.length);
          if (t3.minY = r2.minY, t3.maxY = r2.maxY, i2 = r2.lowestY, e2.chart.stacked && this._setStackedMinMax(), ("line" === e2.chart.type || "area" === e2.chart.type || "candlestick" === e2.chart.type || "boxPlot" === e2.chart.type || "rangeBar" === e2.chart.type && !t3.isBarHorizontal) && t3.minY === Number.MIN_VALUE && i2 !== -Number.MAX_VALUE && i2 !== t3.maxY) {
            var o2 = t3.maxY - i2;
            (i2 >= 0 && i2 <= 10 || void 0 !== e2.yaxis[0].min || void 0 !== e2.yaxis[0].max) && (o2 = 0), t3.minY = i2 - 5 * o2 / 100, i2 > 0 && t3.minY < 0 && (t3.minY = 0), t3.maxY = t3.maxY + 5 * o2 / 100;
          }
          if (e2.yaxis.forEach(function(e3, i3) {
            void 0 !== e3.max && ("number" == typeof e3.max ? t3.maxYArr[i3] = e3.max : "function" == typeof e3.max && (t3.maxYArr[i3] = e3.max(t3.isMultipleYAxis ? t3.maxYArr[i3] : t3.maxY)), t3.maxY = t3.maxYArr[i3]), void 0 !== e3.min && ("number" == typeof e3.min ? t3.minYArr[i3] = e3.min : "function" == typeof e3.min && (t3.minYArr[i3] = e3.min(t3.isMultipleYAxis ? t3.minYArr[i3] === Number.MIN_VALUE ? 0 : t3.minYArr[i3] : t3.minY)), t3.minY = t3.minYArr[i3]);
          }), t3.isBarHorizontal) {
            ["min", "max"].forEach(function(i3) {
              void 0 !== e2.xaxis[i3] && "number" == typeof e2.xaxis[i3] && ("min" === i3 ? t3.minY = e2.xaxis[i3] : t3.maxY = e2.xaxis[i3]);
            });
          }
          return t3.isMultipleYAxis ? (this.scales.setMultipleYScales(), t3.minY = i2, t3.yAxisScale.forEach(function(e3, i3) {
            t3.minYArr[i3] = e3.niceMin, t3.maxYArr[i3] = e3.niceMax;
          })) : (this.scales.setYScaleForIndex(0, t3.minY, t3.maxY), t3.minY = t3.yAxisScale[0].niceMin, t3.maxY = t3.yAxisScale[0].niceMax, t3.minYArr[0] = t3.yAxisScale[0].niceMin, t3.maxYArr[0] = t3.yAxisScale[0].niceMax), { minY: t3.minY, maxY: t3.maxY, minYArr: t3.minYArr, maxYArr: t3.maxYArr, yAxisScale: t3.yAxisScale };
        } }, { key: "setXRange", value: function() {
          var t3 = this.w.globals, e2 = this.w.config, i2 = "numeric" === e2.xaxis.type || "datetime" === e2.xaxis.type || "category" === e2.xaxis.type && !t3.noLabelsProvided || t3.noLabelsProvided || t3.isXNumeric;
          if (t3.isXNumeric && function() {
            for (var e3 = 0; e3 < t3.series.length; e3++)
              if (t3.labels[e3])
                for (var i3 = 0; i3 < t3.labels[e3].length; i3++)
                  null !== t3.labels[e3][i3] && x.isNumber(t3.labels[e3][i3]) && (t3.maxX = Math.max(t3.maxX, t3.labels[e3][i3]), t3.initialMaxX = Math.max(t3.maxX, t3.labels[e3][i3]), t3.minX = Math.min(t3.minX, t3.labels[e3][i3]), t3.initialMinX = Math.min(t3.minX, t3.labels[e3][i3]));
          }(), t3.noLabelsProvided && 0 === e2.xaxis.categories.length && (t3.maxX = t3.labels[t3.labels.length - 1], t3.initialMaxX = t3.labels[t3.labels.length - 1], t3.minX = 1, t3.initialMinX = 1), t3.isXNumeric || t3.noLabelsProvided || t3.dataFormatXNumeric) {
            var a2;
            if (void 0 === e2.xaxis.tickAmount ? (a2 = Math.round(t3.svgWidth / 150), "numeric" === e2.xaxis.type && t3.dataPoints < 30 && (a2 = t3.dataPoints - 1), a2 > t3.dataPoints && 0 !== t3.dataPoints && (a2 = t3.dataPoints - 1)) : "dataPoints" === e2.xaxis.tickAmount ? (t3.series.length > 1 && (a2 = t3.series[t3.maxValsInArrayIndex].length - 1), t3.isXNumeric && (a2 = t3.maxX - t3.minX - 1)) : a2 = e2.xaxis.tickAmount, t3.xTickAmount = a2, void 0 !== e2.xaxis.max && "number" == typeof e2.xaxis.max && (t3.maxX = e2.xaxis.max), void 0 !== e2.xaxis.min && "number" == typeof e2.xaxis.min && (t3.minX = e2.xaxis.min), void 0 !== e2.xaxis.range && (t3.minX = t3.maxX - e2.xaxis.range), t3.minX !== Number.MAX_VALUE && t3.maxX !== -Number.MAX_VALUE)
              if (e2.xaxis.convertedCatToNumeric && !t3.dataFormatXNumeric) {
                for (var s2 = [], r2 = t3.minX - 1; r2 < t3.maxX; r2++)
                  s2.push(r2 + 1);
                t3.xAxisScale = { result: s2, niceMin: s2[0], niceMax: s2[s2.length - 1] };
              } else
                t3.xAxisScale = this.scales.setXScale(t3.minX, t3.maxX);
            else
              t3.xAxisScale = this.scales.linearScale(1, a2, a2), t3.noLabelsProvided && t3.labels.length > 0 && (t3.xAxisScale = this.scales.linearScale(1, t3.labels.length, a2 - 1), t3.seriesX = t3.labels.slice());
            i2 && (t3.labels = t3.xAxisScale.result.slice());
          }
          return t3.isBarHorizontal && t3.labels.length && (t3.xTickAmount = t3.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), { minX: t3.minX, maxX: t3.maxX };
        } }, { key: "setZRange", value: function() {
          var t3 = this.w.globals;
          if (t3.isDataXYZ) {
            for (var e2 = 0; e2 < t3.series.length; e2++)
              if (void 0 !== t3.seriesZ[e2])
                for (var i2 = 0; i2 < t3.seriesZ[e2].length; i2++)
                  null !== t3.seriesZ[e2][i2] && x.isNumber(t3.seriesZ[e2][i2]) && (t3.maxZ = Math.max(t3.maxZ, t3.seriesZ[e2][i2]), t3.minZ = Math.min(t3.minZ, t3.seriesZ[e2][i2]));
          }
        } }, { key: "_handleSingleDataPoint", value: function() {
          var t3 = this.w.globals, e2 = this.w.config;
          if (t3.minX === t3.maxX) {
            var i2 = new T(this.ctx);
            if ("datetime" === e2.xaxis.type) {
              var a2 = i2.getDate(t3.minX);
              e2.xaxis.labels.datetimeUTC ? a2.setUTCDate(a2.getUTCDate() - 2) : a2.setDate(a2.getDate() - 2), t3.minX = new Date(a2).getTime();
              var s2 = i2.getDate(t3.maxX);
              e2.xaxis.labels.datetimeUTC ? s2.setUTCDate(s2.getUTCDate() + 2) : s2.setDate(s2.getDate() + 2), t3.maxX = new Date(s2).getTime();
            } else
              ("numeric" === e2.xaxis.type || "category" === e2.xaxis.type && !t3.noLabelsProvided) && (t3.minX = t3.minX - 2, t3.initialMinX = t3.minX, t3.maxX = t3.maxX + 2, t3.initialMaxX = t3.maxX);
          }
        } }, { key: "_getMinXDiff", value: function() {
          var t3 = this.w.globals;
          t3.isXNumeric && t3.seriesX.forEach(function(e2, i2) {
            1 === e2.length && e2.push(t3.seriesX[t3.maxValsInArrayIndex][t3.seriesX[t3.maxValsInArrayIndex].length - 1]);
            var a2 = e2.slice();
            a2.sort(function(t4, e3) {
              return t4 - e3;
            }), a2.forEach(function(e3, i3) {
              if (i3 > 0) {
                var s2 = e3 - a2[i3 - 1];
                s2 > 0 && (t3.minXDiff = Math.min(s2, t3.minXDiff));
              }
            }), 1 !== t3.dataPoints && t3.minXDiff !== Number.MAX_VALUE || (t3.minXDiff = 0.5);
          });
        } }, { key: "_setStackedMinMax", value: function() {
          var t3 = this.w.globals, e2 = [], i2 = [];
          if (t3.series.length)
            for (var a2 = 0; a2 < t3.series[t3.maxValsInArrayIndex].length; a2++)
              for (var s2 = 0, r2 = 0, o2 = 0; o2 < t3.series.length; o2++)
                null !== t3.series[o2][a2] && x.isNumber(t3.series[o2][a2]) && (t3.series[o2][a2] > 0 ? s2 = s2 + parseFloat(t3.series[o2][a2]) + 1e-4 : r2 += parseFloat(t3.series[o2][a2])), o2 === t3.series.length - 1 && (e2.push(s2), i2.push(r2));
          for (var n2 = 0; n2 < e2.length; n2++)
            t3.maxY = Math.max(t3.maxY, e2[n2]), t3.minY = Math.min(t3.minY, i2[n2]);
        } }]), t2;
      }();
      var q = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.xaxisFontSize = i2.config.xaxis.labels.style.fontSize, this.axisFontFamily = i2.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = i2.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === i2.config.chart.type && i2.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === i2.config.xaxis.position && (this.xAxisoffX = i2.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new B(e2);
        }
        return r(t2, [{ key: "drawYaxis", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = new m(this.ctx), s2 = i2.config.yaxis[t3].labels.style, r2 = s2.fontSize, o2 = s2.fontFamily, n2 = s2.fontWeight, l2 = a2.group({ class: "apexcharts-yaxis", rel: t3, transform: "translate(" + i2.globals.translateYAxisX[t3] + ", 0)" });
          if (this.axesUtils.isYAxisHidden(t3))
            return l2;
          var h2 = a2.group({ class: "apexcharts-yaxis-texts-g" });
          l2.add(h2);
          var c2 = i2.globals.yAxisScale[t3].result.length - 1, d2 = i2.globals.gridHeight / c2, g2 = i2.globals.translateY, u2 = i2.globals.yLabelFormatters[t3], f2 = i2.globals.yAxisScale[t3].result.slice();
          f2 = this.axesUtils.checkForReversedLabels(t3, f2);
          var p2 = "";
          if (i2.config.yaxis[t3].labels.show)
            for (var x2 = function(l3) {
              var x3 = f2[l3];
              x3 = u2(x3, l3, i2);
              var b3 = i2.config.yaxis[t3].labels.padding;
              i2.config.yaxis[t3].opposite && 0 !== i2.config.yaxis.length && (b3 *= -1);
              var v3 = e2.axesUtils.getYAxisForeColor(s2.colors, t3), m2 = a2.drawText({ x: b3, y: g2 + c2 / 10 + i2.config.yaxis[t3].labels.offsetY + 1, text: x3, textAnchor: i2.config.yaxis[t3].opposite ? "start" : "end", fontSize: r2, fontFamily: o2, fontWeight: n2, maxWidth: i2.config.yaxis[t3].labels.maxWidth, foreColor: Array.isArray(v3) ? v3[l3] : v3, isPlainText: false, cssClass: "apexcharts-yaxis-label " + s2.cssClass });
              l3 === c2 && (p2 = m2), h2.add(m2);
              var y3 = document.createElementNS(i2.globals.SVGNS, "title");
              if (y3.textContent = Array.isArray(x3) ? x3.join(" ") : x3, m2.node.appendChild(y3), 0 !== i2.config.yaxis[t3].labels.rotate) {
                var w3 = a2.rotateAroundCenter(p2.node), k3 = a2.rotateAroundCenter(m2.node);
                m2.node.setAttribute("transform", "rotate(".concat(i2.config.yaxis[t3].labels.rotate, " ").concat(w3.x, " ").concat(k3.y, ")"));
              }
              g2 += d2;
            }, b2 = c2; b2 >= 0; b2--)
              x2(b2);
          if (void 0 !== i2.config.yaxis[t3].title.text) {
            var v2 = a2.group({ class: "apexcharts-yaxis-title" }), y2 = 0;
            i2.config.yaxis[t3].opposite && (y2 = i2.globals.translateYAxisX[t3]);
            var w2 = a2.drawText({ x: y2, y: i2.globals.gridHeight / 2 + i2.globals.translateY + i2.config.yaxis[t3].title.offsetY, text: i2.config.yaxis[t3].title.text, textAnchor: "end", foreColor: i2.config.yaxis[t3].title.style.color, fontSize: i2.config.yaxis[t3].title.style.fontSize, fontWeight: i2.config.yaxis[t3].title.style.fontWeight, fontFamily: i2.config.yaxis[t3].title.style.fontFamily, cssClass: "apexcharts-yaxis-title-text " + i2.config.yaxis[t3].title.style.cssClass });
            v2.add(w2), l2.add(v2);
          }
          var k2 = i2.config.yaxis[t3].axisBorder, A2 = 31 + k2.offsetX;
          if (i2.config.yaxis[t3].opposite && (A2 = -31 - k2.offsetX), k2.show) {
            var S2 = a2.drawLine(A2, i2.globals.translateY + k2.offsetY - 2, A2, i2.globals.gridHeight + i2.globals.translateY + k2.offsetY + 2, k2.color, 0, k2.width);
            l2.add(S2);
          }
          return i2.config.yaxis[t3].axisTicks.show && this.axesUtils.drawYAxisTicks(A2, c2, k2, i2.config.yaxis[t3].axisTicks, t3, d2, l2), l2;
        } }, { key: "drawYaxisInversed", value: function(t3) {
          var e2 = this.w, i2 = new m(this.ctx), a2 = i2.group({ class: "apexcharts-xaxis apexcharts-yaxis-inversed" }), s2 = i2.group({ class: "apexcharts-xaxis-texts-g", transform: "translate(".concat(e2.globals.translateXAxisX, ", ").concat(e2.globals.translateXAxisY, ")") });
          a2.add(s2);
          var r2 = e2.globals.yAxisScale[t3].result.length - 1, o2 = e2.globals.gridWidth / r2 + 0.1, n2 = o2 + e2.config.xaxis.labels.offsetX, l2 = e2.globals.xLabelFormatter, h2 = e2.globals.yAxisScale[t3].result.slice(), c2 = e2.globals.timescaleLabels;
          c2.length > 0 && (this.xaxisLabels = c2.slice(), r2 = (h2 = c2.slice()).length), h2 = this.axesUtils.checkForReversedLabels(t3, h2);
          var d2 = c2.length;
          if (e2.config.xaxis.labels.show)
            for (var g2 = d2 ? 0 : r2; d2 ? g2 < d2 : g2 >= 0; d2 ? g2++ : g2--) {
              var u2 = h2[g2];
              u2 = l2(u2, g2, e2);
              var f2 = e2.globals.gridWidth + e2.globals.padHorizontal - (n2 - o2 + e2.config.xaxis.labels.offsetX);
              if (c2.length) {
                var p2 = this.axesUtils.getLabel(h2, c2, f2, g2, this.drawnLabels, this.xaxisFontSize);
                f2 = p2.x, u2 = p2.text, this.drawnLabels.push(p2.text), 0 === g2 && e2.globals.skipFirstTimelinelabel && (u2 = ""), g2 === h2.length - 1 && e2.globals.skipLastTimelinelabel && (u2 = "");
              }
              var x2 = i2.drawText({ x: f2, y: this.xAxisoffX + e2.config.xaxis.labels.offsetY + 30 - ("top" === e2.config.xaxis.position ? e2.globals.xAxisHeight + e2.config.xaxis.axisTicks.height - 2 : 0), text: u2, textAnchor: "middle", foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t3] : this.xaxisForeColors, fontSize: this.xaxisFontSize, fontFamily: this.xaxisFontFamily, fontWeight: e2.config.xaxis.labels.style.fontWeight, isPlainText: false, cssClass: "apexcharts-xaxis-label " + e2.config.xaxis.labels.style.cssClass });
              s2.add(x2), x2.tspan(u2);
              var b2 = document.createElementNS(e2.globals.SVGNS, "title");
              b2.textContent = u2, x2.node.appendChild(b2), n2 += o2;
            }
          return this.inversedYAxisTitleText(a2), this.inversedYAxisBorder(a2), a2;
        } }, { key: "inversedYAxisBorder", value: function(t3) {
          var e2 = this.w, i2 = new m(this.ctx), a2 = e2.config.xaxis.axisBorder;
          if (a2.show) {
            var s2 = 0;
            "bar" === e2.config.chart.type && e2.globals.isXNumeric && (s2 -= 15);
            var r2 = i2.drawLine(e2.globals.padHorizontal + s2 + a2.offsetX, this.xAxisoffX, e2.globals.gridWidth, this.xAxisoffX, a2.color, 0, a2.height);
            t3.add(r2);
          }
        } }, { key: "inversedYAxisTitleText", value: function(t3) {
          var e2 = this.w, i2 = new m(this.ctx);
          if (void 0 !== e2.config.xaxis.title.text) {
            var a2 = i2.group({ class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed" }), s2 = i2.drawText({ x: e2.globals.gridWidth / 2 + e2.config.xaxis.title.offsetX, y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e2.config.xaxis.title.style.fontSize) + e2.config.xaxis.title.offsetY + 20, text: e2.config.xaxis.title.text, textAnchor: "middle", fontSize: e2.config.xaxis.title.style.fontSize, fontFamily: e2.config.xaxis.title.style.fontFamily, fontWeight: e2.config.xaxis.title.style.fontWeight, foreColor: e2.config.xaxis.title.style.color, cssClass: "apexcharts-xaxis-title-text " + e2.config.xaxis.title.style.cssClass });
            a2.add(s2), t3.add(a2);
          }
        } }, { key: "yAxisTitleRotate", value: function(t3, e2) {
          var i2 = this.w, a2 = new m(this.ctx), s2 = { width: 0, height: 0 }, r2 = { width: 0, height: 0 }, o2 = i2.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t3, "'] .apexcharts-yaxis-texts-g"));
          null !== o2 && (s2 = o2.getBoundingClientRect());
          var n2 = i2.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t3, "'] .apexcharts-yaxis-title text"));
          if (null !== n2 && (r2 = n2.getBoundingClientRect()), null !== n2) {
            var l2 = this.xPaddingForYAxisTitle(t3, s2, r2, e2);
            n2.setAttribute("x", l2.xPos - (e2 ? 10 : 0));
          }
          if (null !== n2) {
            var h2 = a2.rotateAroundCenter(n2);
            n2.setAttribute("transform", "rotate(".concat(e2 ? -1 * i2.config.yaxis[t3].title.rotate : i2.config.yaxis[t3].title.rotate, " ").concat(h2.x, " ").concat(h2.y, ")"));
          }
        } }, { key: "xPaddingForYAxisTitle", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = 0, o2 = 0, n2 = 10;
          return void 0 === s2.config.yaxis[t3].title.text || t3 < 0 ? { xPos: o2, padd: 0 } : (a2 ? (o2 = e2.width + s2.config.yaxis[t3].title.offsetX + i2.width / 2 + n2 / 2, 0 === (r2 += 1) && (o2 -= n2 / 2)) : (o2 = -1 * e2.width + s2.config.yaxis[t3].title.offsetX + n2 / 2 + i2.width / 2, s2.globals.isBarHorizontal && (n2 = 25, o2 = -1 * e2.width - s2.config.yaxis[t3].title.offsetX - n2)), { xPos: o2, padd: n2 });
        } }, { key: "setYAxisXPosition", value: function(t3, e2) {
          var i2 = this.w, a2 = 0, s2 = 0, r2 = 18, o2 = 1;
          i2.config.yaxis.length > 1 && (this.multipleYs = true), i2.config.yaxis.map(function(n2, l2) {
            var h2 = i2.globals.ignoreYAxisIndexes.indexOf(l2) > -1 || !n2.show || n2.floating || 0 === t3[l2].width, c2 = t3[l2].width + e2[l2].width;
            n2.opposite ? i2.globals.isBarHorizontal ? (s2 = i2.globals.gridWidth + i2.globals.translateX - 1, i2.globals.translateYAxisX[l2] = s2 - n2.labels.offsetX) : (s2 = i2.globals.gridWidth + i2.globals.translateX + o2, h2 || (o2 = o2 + c2 + 20), i2.globals.translateYAxisX[l2] = s2 - n2.labels.offsetX + 20) : (a2 = i2.globals.translateX - r2, h2 || (r2 = r2 + c2 + 20), i2.globals.translateYAxisX[l2] = a2 + n2.labels.offsetX);
          });
        } }, { key: "setYAxisTextAlignments", value: function() {
          var t3 = this.w, e2 = t3.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
          (e2 = x.listToArray(e2)).forEach(function(e3, i2) {
            var a2 = t3.config.yaxis[i2];
            if (a2 && void 0 !== a2.labels.align) {
              var s2 = t3.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i2, "'] .apexcharts-yaxis-texts-g")), r2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i2, "'] .apexcharts-yaxis-label"));
              r2 = x.listToArray(r2);
              var o2 = s2.getBoundingClientRect();
              "left" === a2.labels.align ? (r2.forEach(function(t4, e4) {
                t4.setAttribute("text-anchor", "start");
              }), a2.opposite || s2.setAttribute("transform", "translate(-".concat(o2.width, ", 0)"))) : "center" === a2.labels.align ? (r2.forEach(function(t4, e4) {
                t4.setAttribute("text-anchor", "middle");
              }), s2.setAttribute("transform", "translate(".concat(o2.width / 2 * (a2.opposite ? 1 : -1), ", 0)"))) : "right" === a2.labels.align && (r2.forEach(function(t4, e4) {
                t4.setAttribute("text-anchor", "end");
              }), a2.opposite && s2.setAttribute("transform", "translate(".concat(o2.width, ", 0)")));
            }
          });
        } }]), t2;
      }();
      var Z = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.documentEvent = x.bind(this.documentEvent, this);
        }
        return r(t2, [{ key: "addEventListener", value: function(t3, e2) {
          var i2 = this.w;
          i2.globals.events.hasOwnProperty(t3) ? i2.globals.events[t3].push(e2) : i2.globals.events[t3] = [e2];
        } }, { key: "removeEventListener", value: function(t3, e2) {
          var i2 = this.w;
          if (i2.globals.events.hasOwnProperty(t3)) {
            var a2 = i2.globals.events[t3].indexOf(e2);
            -1 !== a2 && i2.globals.events[t3].splice(a2, 1);
          }
        } }, { key: "fireEvent", value: function(t3, e2) {
          var i2 = this.w;
          if (i2.globals.events.hasOwnProperty(t3)) {
            e2 && e2.length || (e2 = []);
            for (var a2 = i2.globals.events[t3], s2 = a2.length, r2 = 0; r2 < s2; r2++)
              a2[r2].apply(null, e2);
          }
        } }, { key: "setupEventHandlers", value: function() {
          var t3 = this, e2 = this.w, i2 = this.ctx, a2 = e2.globals.dom.baseEl.querySelector(e2.globals.chartClass);
          this.ctx.eventList.forEach(function(t4) {
            a2.addEventListener(t4, function(t5) {
              var a3 = Object.assign({}, e2, { seriesIndex: e2.globals.capturedSeriesIndex, dataPointIndex: e2.globals.capturedDataPointIndex });
              "mousemove" === t5.type || "touchmove" === t5.type ? "function" == typeof e2.config.chart.events.mouseMove && e2.config.chart.events.mouseMove(t5, i2, a3) : "mouseleave" === t5.type || "touchleave" === t5.type ? "function" == typeof e2.config.chart.events.mouseLeave && e2.config.chart.events.mouseLeave(t5, i2, a3) : ("mouseup" === t5.type && 1 === t5.which || "touchend" === t5.type) && ("function" == typeof e2.config.chart.events.click && e2.config.chart.events.click(t5, i2, a3), i2.ctx.events.fireEvent("click", [t5, i2, a3]));
            }, { capture: false, passive: true });
          }), this.ctx.eventList.forEach(function(i3) {
            e2.globals.dom.baseEl.addEventListener(i3, t3.documentEvent, { passive: true });
          }), this.ctx.core.setupBrushHandler();
        } }, { key: "documentEvent", value: function(t3) {
          var e2 = this.w, i2 = t3.target.className;
          if ("click" === t3.type) {
            var a2 = e2.globals.dom.baseEl.querySelector(".apexcharts-menu");
            a2 && a2.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== i2 && a2.classList.remove("apexcharts-menu-open");
          }
          e2.globals.clientX = "touchmove" === t3.type ? t3.touches[0].clientX : t3.clientX, e2.globals.clientY = "touchmove" === t3.type ? t3.touches[0].clientY : t3.clientY;
        } }]), t2;
      }();
      var $ = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "setCurrentLocaleValues", value: function(t3) {
          var e2 = this.w.config.chart.locales;
          window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e2 = this.w.config.chart.locales.concat(window.Apex.chart.locales));
          var i2 = e2.filter(function(e3) {
            return e3.name === t3;
          })[0];
          if (!i2)
            throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
          var a2 = x.extend(C, i2);
          this.w.globals.locale = a2.options;
        } }]), t2;
      }();
      var J = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "drawAxis", value: function(t3, e2) {
          var i2, a2, s2 = this.w.globals, r2 = this.w.config, o2 = new G(this.ctx), n2 = new q(this.ctx);
          s2.axisCharts && "radar" !== t3 && (s2.isBarHorizontal ? (a2 = n2.drawYaxisInversed(0), i2 = o2.drawXaxisInversed(0), s2.dom.elGraphical.add(i2), s2.dom.elGraphical.add(a2)) : (i2 = o2.drawXaxis(), s2.dom.elGraphical.add(i2), r2.yaxis.map(function(t4, e3) {
            -1 === s2.ignoreYAxisIndexes.indexOf(e3) && (a2 = n2.drawYaxis(e3), s2.dom.Paper.add(a2));
          })));
        } }]), t2;
      }();
      var Q = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "drawXCrosshairs", value: function() {
          var t3 = this.w, e2 = new m(this.ctx), i2 = new v(this.ctx), a2 = t3.config.xaxis.crosshairs.fill.gradient, s2 = t3.config.xaxis.crosshairs.dropShadow, r2 = t3.config.xaxis.crosshairs.fill.type, o2 = a2.colorFrom, n2 = a2.colorTo, l2 = a2.opacityFrom, h2 = a2.opacityTo, c2 = a2.stops, d2 = s2.enabled, g2 = s2.left, u2 = s2.top, f2 = s2.blur, p2 = s2.color, b2 = s2.opacity, y2 = t3.config.xaxis.crosshairs.fill.color;
          if (t3.config.xaxis.crosshairs.show) {
            "gradient" === r2 && (y2 = e2.drawGradient("vertical", o2, n2, l2, h2, null, c2, null));
            var w2 = e2.drawRect();
            1 === t3.config.xaxis.crosshairs.width && (w2 = e2.drawLine());
            var k2 = t3.globals.gridHeight;
            (!x.isNumber(k2) || k2 < 0) && (k2 = 0);
            var A2 = t3.config.xaxis.crosshairs.width;
            (!x.isNumber(A2) || A2 < 0) && (A2 = 0), w2.attr({ class: "apexcharts-xcrosshairs", x: 0, y: 0, y2: k2, width: A2, height: k2, fill: y2, filter: "none", "fill-opacity": t3.config.xaxis.crosshairs.opacity, stroke: t3.config.xaxis.crosshairs.stroke.color, "stroke-width": t3.config.xaxis.crosshairs.stroke.width, "stroke-dasharray": t3.config.xaxis.crosshairs.stroke.dashArray }), d2 && (w2 = i2.dropShadow(w2, { left: g2, top: u2, blur: f2, color: p2, opacity: b2 })), t3.globals.dom.elGraphical.add(w2);
          }
        } }, { key: "drawYCrosshairs", value: function() {
          var t3 = this.w, e2 = new m(this.ctx), i2 = t3.config.yaxis[0].crosshairs, a2 = t3.globals.barPadForNumericAxis;
          if (t3.config.yaxis[0].crosshairs.show) {
            var s2 = e2.drawLine(-a2, 0, t3.globals.gridWidth + a2, 0, i2.stroke.color, i2.stroke.dashArray, i2.stroke.width);
            s2.attr({ class: "apexcharts-ycrosshairs" }), t3.globals.dom.elGraphical.add(s2);
          }
          var r2 = e2.drawLine(-a2, 0, t3.globals.gridWidth + a2, 0, i2.stroke.color, 0, 0);
          r2.attr({ class: "apexcharts-ycrosshairs-hidden" }), t3.globals.dom.elGraphical.add(r2);
        } }]), t2;
      }();
      var K = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "checkResponsiveConfig", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = i2.config;
          if (0 !== a2.responsive.length) {
            var s2 = a2.responsive.slice();
            s2.sort(function(t4, e3) {
              return t4.breakpoint > e3.breakpoint ? 1 : e3.breakpoint > t4.breakpoint ? -1 : 0;
            }).reverse();
            var r2 = new z({}), o2 = function() {
              var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, a3 = s2[0].breakpoint, o3 = window.innerWidth > 0 ? window.innerWidth : screen.width;
              if (o3 > a3) {
                var n3 = y.extendArrayProps(r2, i2.globals.initialConfig, i2);
                t4 = x.extend(n3, t4), t4 = x.extend(i2.config, t4), e2.overrideResponsiveOptions(t4);
              } else
                for (var l2 = 0; l2 < s2.length; l2++)
                  o3 < s2[l2].breakpoint && (t4 = y.extendArrayProps(r2, s2[l2].options, i2), t4 = x.extend(i2.config, t4), e2.overrideResponsiveOptions(t4));
            };
            if (t3) {
              var n2 = y.extendArrayProps(r2, t3, i2);
              n2 = x.extend(i2.config, n2), o2(n2 = x.extend(n2, t3));
            } else
              o2({});
          }
        } }, { key: "overrideResponsiveOptions", value: function(t3) {
          var e2 = new z(t3).init({ responsiveOverride: true });
          this.w.config = e2;
        } }]), t2;
      }();
      var tt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.colors = [], this.w = e2.w;
          var i2 = this.w;
          this.isColorFn = false, this.isHeatmapDistributed = "treemap" === i2.config.chart.type && i2.config.plotOptions.treemap.distributed || "heatmap" === i2.config.chart.type && i2.config.plotOptions.heatmap.distributed, this.isBarDistributed = i2.config.plotOptions.bar.distributed && ("bar" === i2.config.chart.type || "rangeBar" === i2.config.chart.type);
        }
        return r(t2, [{ key: "init", value: function() {
          this.setDefaultColors();
        } }, { key: "setDefaultColors", value: function() {
          var t3 = this, e2 = this.w, i2 = new x();
          if (e2.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(e2.config.theme.mode)), void 0 === e2.config.colors ? e2.globals.colors = this.predefined() : (e2.globals.colors = e2.config.colors, Array.isArray(e2.config.colors) && e2.config.colors.length > 0 && "function" == typeof e2.config.colors[0] && (e2.globals.colors = e2.config.series.map(function(i3, a3) {
            var s3 = e2.config.colors[a3];
            return s3 || (s3 = e2.config.colors[0]), "function" == typeof s3 ? (t3.isColorFn = true, s3({ value: e2.globals.axisCharts ? e2.globals.series[a3][0] ? e2.globals.series[a3][0] : 0 : e2.globals.series[a3], seriesIndex: a3, dataPointIndex: a3, w: e2 })) : s3;
          }))), e2.globals.seriesColors.map(function(t4, i3) {
            t4 && (e2.globals.colors[i3] = t4);
          }), e2.config.theme.monochrome.enabled) {
            var a2 = [], s2 = e2.globals.series.length;
            (this.isBarDistributed || this.isHeatmapDistributed) && (s2 = e2.globals.series[0].length * e2.globals.series.length);
            for (var r2 = e2.config.theme.monochrome.color, o2 = 1 / (s2 / e2.config.theme.monochrome.shadeIntensity), n2 = e2.config.theme.monochrome.shadeTo, l2 = 0, h2 = 0; h2 < s2; h2++) {
              var c2 = void 0;
              "dark" === n2 ? (c2 = i2.shadeColor(-1 * l2, r2), l2 += o2) : (c2 = i2.shadeColor(l2, r2), l2 += o2), a2.push(c2);
            }
            e2.globals.colors = a2.slice();
          }
          var d2 = e2.globals.colors.slice();
          this.pushExtraColors(e2.globals.colors);
          ["fill", "stroke"].forEach(function(i3) {
            void 0 === e2.config[i3].colors ? e2.globals[i3].colors = t3.isColorFn ? e2.config.colors : d2 : e2.globals[i3].colors = e2.config[i3].colors.slice(), t3.pushExtraColors(e2.globals[i3].colors);
          }), void 0 === e2.config.dataLabels.style.colors ? e2.globals.dataLabels.style.colors = d2 : e2.globals.dataLabels.style.colors = e2.config.dataLabels.style.colors.slice(), this.pushExtraColors(e2.globals.dataLabels.style.colors, 50), void 0 === e2.config.plotOptions.radar.polygons.fill.colors ? e2.globals.radarPolygons.fill.colors = ["dark" === e2.config.theme.mode ? "#424242" : "none"] : e2.globals.radarPolygons.fill.colors = e2.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(e2.globals.radarPolygons.fill.colors, 20), void 0 === e2.config.markers.colors ? e2.globals.markers.colors = d2 : e2.globals.markers.colors = e2.config.markers.colors.slice(), this.pushExtraColors(e2.globals.markers.colors);
        } }, { key: "pushExtraColors", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a2 = this.w, s2 = e2 || a2.globals.series.length;
          if (null === i2 && (i2 = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === a2.config.chart.type && a2.config.plotOptions.heatmap.colorScale.inverse), i2 && a2.globals.series.length && (s2 = a2.globals.series[a2.globals.maxValsInArrayIndex].length * a2.globals.series.length), t3.length < s2)
            for (var r2 = s2 - t3.length, o2 = 0; o2 < r2; o2++)
              t3.push(t3[o2]);
        } }, { key: "updateThemeOptions", value: function(t3) {
          t3.chart = t3.chart || {}, t3.tooltip = t3.tooltip || {};
          var e2 = t3.theme.mode || "light", i2 = t3.theme.palette ? t3.theme.palette : "dark" === e2 ? "palette4" : "palette1", a2 = t3.chart.foreColor ? t3.chart.foreColor : "dark" === e2 ? "#f6f7f8" : "#373d3f";
          return t3.tooltip.theme = e2, t3.chart.foreColor = a2, t3.theme.palette = i2, t3;
        } }, { key: "predefined", value: function() {
          switch (this.w.config.theme.palette) {
            case "palette1":
            default:
              this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
              break;
            case "palette2":
              this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
              break;
            case "palette3":
              this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
              break;
            case "palette4":
              this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
              break;
            case "palette5":
              this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
              break;
            case "palette6":
              this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
              break;
            case "palette7":
              this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
              break;
            case "palette8":
              this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
              break;
            case "palette9":
              this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
              break;
            case "palette10":
              this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"];
          }
          return this.colors;
        } }]), t2;
      }();
      var et = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "draw", value: function() {
          this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
        } }, { key: "drawTitleSubtitle", value: function(t3) {
          var e2 = this.w, i2 = "title" === t3 ? e2.config.title : e2.config.subtitle, a2 = e2.globals.svgWidth / 2, s2 = i2.offsetY, r2 = "middle";
          if ("left" === i2.align ? (a2 = 10, r2 = "start") : "right" === i2.align && (a2 = e2.globals.svgWidth - 10, r2 = "end"), a2 += i2.offsetX, s2 = s2 + parseInt(i2.style.fontSize, 10) + i2.margin / 2, void 0 !== i2.text) {
            var o2 = new m(this.ctx).drawText({ x: a2, y: s2, text: i2.text, textAnchor: r2, fontSize: i2.style.fontSize, fontFamily: i2.style.fontFamily, fontWeight: i2.style.fontWeight, foreColor: i2.style.color, opacity: 1 });
            o2.node.setAttribute("class", "apexcharts-".concat(t3, "-text")), e2.globals.dom.Paper.add(o2);
          }
        } }]), t2;
      }();
      var it = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return r(t2, [{ key: "getTitleSubtitleCoords", value: function(t3) {
          var e2 = this.w, i2 = 0, a2 = 0, s2 = "title" === t3 ? e2.config.title.floating : e2.config.subtitle.floating, r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-".concat(t3, "-text"));
          if (null !== r2 && !s2) {
            var o2 = r2.getBoundingClientRect();
            i2 = o2.width, a2 = e2.globals.axisCharts ? o2.height + 5 : o2.height;
          }
          return { width: i2, height: a2 };
        } }, { key: "getLegendsRect", value: function() {
          var t3 = this.w, e2 = t3.globals.dom.baseEl.querySelector(".apexcharts-legend");
          t3.config.legend.height || "top" !== t3.config.legend.position && "bottom" !== t3.config.legend.position || (e2.style.maxHeight = t3.globals.svgHeight / 2 + "px");
          var i2 = Object.assign({}, x.getBoundingClientRect(e2));
          return null !== e2 && !t3.config.legend.floating && t3.config.legend.show ? this.dCtx.lgRect = { x: i2.x, y: i2.y, height: i2.height, width: 0 === i2.height ? 0 : i2.width } : this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }, "left" !== t3.config.legend.position && "right" !== t3.config.legend.position || 1.5 * this.dCtx.lgRect.width > t3.globals.svgWidth && (this.dCtx.lgRect.width = t3.globals.svgWidth / 1.5), this.dCtx.lgRect;
        } }, { key: "getLargestStringFromMultiArr", value: function(t3, e2) {
          var i2 = t3;
          if (this.w.globals.isMultiLineX) {
            var a2 = e2.map(function(t4, e3) {
              return Array.isArray(t4) ? t4.length : 1;
            }), s2 = Math.max.apply(Math, u(a2));
            i2 = e2[a2.indexOf(s2)];
          }
          return i2;
        } }]), t2;
      }();
      var at = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return r(t2, [{ key: "getxAxisLabelsCoords", value: function() {
          var t3, e2 = this.w, i2 = e2.globals.labels.slice();
          if (e2.config.xaxis.convertedCatToNumeric && 0 === i2.length && (i2 = e2.globals.categoryLabels), e2.globals.timescaleLabels.length > 0) {
            var a2 = this.getxAxisTimeScaleLabelsCoords();
            t3 = { width: a2.width, height: a2.height }, e2.globals.rotateXLabels = false;
          } else {
            this.dCtx.lgWidthForSideLegends = "left" !== e2.config.legend.position && "right" !== e2.config.legend.position || e2.config.legend.floating ? 0 : this.dCtx.lgRect.width;
            var s2 = e2.globals.xLabelFormatter, r2 = x.getLargestStringFromArr(i2), o2 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r2, i2);
            e2.globals.isBarHorizontal && (o2 = r2 = e2.globals.yAxisScale[0].result.reduce(function(t4, e3) {
              return t4.length > e3.length ? t4 : e3;
            }, 0));
            var n2 = new W(this.dCtx.ctx), l2 = r2;
            r2 = n2.xLabelFormat(s2, r2, l2, { i: void 0, dateFormatter: new T(this.dCtx.ctx).formatDate, w: e2 }), o2 = n2.xLabelFormat(s2, o2, l2, { i: void 0, dateFormatter: new T(this.dCtx.ctx).formatDate, w: e2 }), (e2.config.xaxis.convertedCatToNumeric && void 0 === r2 || "" === String(r2).trim()) && (o2 = r2 = "1");
            var h2 = new m(this.dCtx.ctx), c2 = h2.getTextRects(r2, e2.config.xaxis.labels.style.fontSize), d2 = c2;
            if (r2 !== o2 && (d2 = h2.getTextRects(o2, e2.config.xaxis.labels.style.fontSize)), (t3 = { width: c2.width >= d2.width ? c2.width : d2.width, height: c2.height >= d2.height ? c2.height : d2.height }).width * i2.length > e2.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e2.config.xaxis.labels.rotate || e2.config.xaxis.labels.rotateAlways) {
              if (!e2.globals.isBarHorizontal) {
                e2.globals.rotateXLabels = true;
                var g2 = function(t4) {
                  return h2.getTextRects(t4, e2.config.xaxis.labels.style.fontSize, e2.config.xaxis.labels.style.fontFamily, "rotate(".concat(e2.config.xaxis.labels.rotate, " 0 0)"), false);
                };
                c2 = g2(r2), r2 !== o2 && (d2 = g2(o2)), t3.height = (c2.height > d2.height ? c2.height : d2.height) / 1.5, t3.width = c2.width > d2.width ? c2.width : d2.width;
              }
            } else
              e2.globals.rotateXLabels = false;
          }
          return e2.config.xaxis.labels.show || (t3 = { width: 0, height: 0 }), { width: t3.width, height: t3.height };
        } }, { key: "getxAxisGroupLabelsCoords", value: function() {
          var t3, e2 = this.w;
          if (!e2.globals.hasGroups)
            return { width: 0, height: 0 };
          var i2, a2 = (null === (t3 = e2.config.xaxis.group.style) || void 0 === t3 ? void 0 : t3.fontSize) || e2.config.xaxis.labels.style.fontSize, s2 = e2.globals.groups.map(function(t4) {
            return t4.title;
          }), r2 = x.getLargestStringFromArr(s2), o2 = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r2, s2), n2 = new m(this.dCtx.ctx), l2 = n2.getTextRects(r2, a2), h2 = l2;
          return r2 !== o2 && (h2 = n2.getTextRects(o2, a2)), i2 = { width: l2.width >= h2.width ? l2.width : h2.width, height: l2.height >= h2.height ? l2.height : h2.height }, e2.config.xaxis.labels.show || (i2 = { width: 0, height: 0 }), { width: i2.width, height: i2.height };
        } }, { key: "getxAxisTitleCoords", value: function() {
          var t3 = this.w, e2 = 0, i2 = 0;
          if (void 0 !== t3.config.xaxis.title.text) {
            var a2 = new m(this.dCtx.ctx).getTextRects(t3.config.xaxis.title.text, t3.config.xaxis.title.style.fontSize);
            e2 = a2.width, i2 = a2.height;
          }
          return { width: e2, height: i2 };
        } }, { key: "getxAxisTimeScaleLabelsCoords", value: function() {
          var t3, e2 = this.w;
          this.dCtx.timescaleLabels = e2.globals.timescaleLabels.slice();
          var i2 = this.dCtx.timescaleLabels.map(function(t4) {
            return t4.value;
          }), a2 = i2.reduce(function(t4, e3) {
            return void 0 === t4 ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t4.length > e3.length ? t4 : e3;
          }, 0);
          return 1.05 * (t3 = new m(this.dCtx.ctx).getTextRects(a2, e2.config.xaxis.labels.style.fontSize)).width * i2.length > e2.globals.gridWidth && 0 !== e2.config.xaxis.labels.rotate && (e2.globals.overlappingXLabels = true), t3;
        } }, { key: "additionalPaddingXLabels", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = i2.globals, s2 = i2.config, r2 = s2.xaxis.type, o2 = t3.width;
          a2.skipLastTimelinelabel = false, a2.skipFirstTimelinelabel = false;
          var n2 = i2.config.yaxis[0].opposite && i2.globals.isBarHorizontal, l2 = function(t4, n3) {
            (function(t5) {
              return -1 !== a2.collapsedSeriesIndices.indexOf(t5);
            })(n3) || function(t5) {
              if (e2.dCtx.timescaleLabels && e2.dCtx.timescaleLabels.length) {
                var n4 = e2.dCtx.timescaleLabels[0], l3 = e2.dCtx.timescaleLabels[e2.dCtx.timescaleLabels.length - 1].position + o2 / 1.75 - e2.dCtx.yAxisWidthRight, h2 = n4.position - o2 / 1.75 + e2.dCtx.yAxisWidthLeft, c2 = "right" === i2.config.legend.position && e2.dCtx.lgRect.width > 0 ? e2.dCtx.lgRect.width : 0;
                l3 > a2.svgWidth - a2.translateX - c2 && (a2.skipLastTimelinelabel = true), h2 < -(t5.show && !t5.floating || "bar" !== s2.chart.type && "candlestick" !== s2.chart.type && "rangeBar" !== s2.chart.type && "boxPlot" !== s2.chart.type ? 10 : o2 / 1.75) && (a2.skipFirstTimelinelabel = true);
              } else
                "datetime" === r2 ? e2.dCtx.gridPad.right < o2 && !a2.rotateXLabels && (a2.skipLastTimelinelabel = true) : "datetime" !== r2 && e2.dCtx.gridPad.right < o2 / 2 - e2.dCtx.yAxisWidthRight && !a2.rotateXLabels && !i2.config.xaxis.labels.trim && ("between" !== i2.config.xaxis.tickPlacement || i2.globals.isBarHorizontal) && (e2.dCtx.xPadRight = o2 / 2 + 1);
            }(t4);
          };
          s2.yaxis.forEach(function(t4, i3) {
            n2 ? (e2.dCtx.gridPad.left < o2 && (e2.dCtx.xPadLeft = o2 / 2 + 1), e2.dCtx.xPadRight = o2 / 2 + 1) : l2(t4, i3);
          });
        } }]), t2;
      }();
      var st = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return r(t2, [{ key: "getyAxisLabelsCoords", value: function() {
          var t3 = this, e2 = this.w, i2 = [], a2 = 10, s2 = new B(this.dCtx.ctx);
          return e2.config.yaxis.map(function(r2, o2) {
            var n2 = e2.globals.yAxisScale[o2], l2 = 0;
            if (!s2.isYAxisHidden(o2) && r2.labels.show && void 0 !== r2.labels.minWidth && (l2 = r2.labels.minWidth), !s2.isYAxisHidden(o2) && r2.labels.show && n2.result.length) {
              var h2 = e2.globals.yLabelFormatters[o2], c2 = n2.niceMin === Number.MIN_VALUE ? 0 : n2.niceMin, d2 = String(c2).length > String(n2.niceMax).length ? c2 : n2.niceMax, g2 = h2(d2, { seriesIndex: o2, dataPointIndex: -1, w: e2 }), u2 = g2;
              if (void 0 !== g2 && 0 !== g2.length || (g2 = d2), e2.globals.isBarHorizontal) {
                a2 = 0;
                var f2 = e2.globals.labels.slice();
                g2 = h2(g2 = x.getLargestStringFromArr(f2), { seriesIndex: o2, dataPointIndex: -1, w: e2 }), u2 = t3.dCtx.dimHelpers.getLargestStringFromMultiArr(g2, f2);
              }
              var p2 = new m(t3.dCtx.ctx), b2 = "rotate(".concat(r2.labels.rotate, " 0 0)"), v2 = p2.getTextRects(g2, r2.labels.style.fontSize, r2.labels.style.fontFamily, b2, false), y2 = v2;
              g2 !== u2 && (y2 = p2.getTextRects(u2, r2.labels.style.fontSize, r2.labels.style.fontFamily, b2, false)), i2.push({ width: (l2 > y2.width || l2 > v2.width ? l2 : y2.width > v2.width ? y2.width : v2.width) + a2, height: y2.height > v2.height ? y2.height : v2.height });
            } else
              i2.push({ width: 0, height: 0 });
          }), i2;
        } }, { key: "getyAxisTitleCoords", value: function() {
          var t3 = this, e2 = this.w, i2 = [];
          return e2.config.yaxis.map(function(e3, a2) {
            if (e3.show && void 0 !== e3.title.text) {
              var s2 = new m(t3.dCtx.ctx), r2 = "rotate(".concat(e3.title.rotate, " 0 0)"), o2 = s2.getTextRects(e3.title.text, e3.title.style.fontSize, e3.title.style.fontFamily, r2, false);
              i2.push({ width: o2.width, height: o2.height });
            } else
              i2.push({ width: 0, height: 0 });
          }), i2;
        } }, { key: "getTotalYAxisWidth", value: function() {
          var t3 = this.w, e2 = 0, i2 = 0, a2 = 0, s2 = t3.globals.yAxisScale.length > 1 ? 10 : 0, r2 = new B(this.dCtx.ctx), o2 = function(o3, n2) {
            var l2 = t3.config.yaxis[n2].floating, h2 = 0;
            o3.width > 0 && !l2 ? (h2 = o3.width + s2, function(e3) {
              return t3.globals.ignoreYAxisIndexes.indexOf(e3) > -1;
            }(n2) && (h2 = h2 - o3.width - s2)) : h2 = l2 || r2.isYAxisHidden(n2) ? 0 : 5, t3.config.yaxis[n2].opposite ? a2 += h2 : i2 += h2, e2 += h2;
          };
          return t3.globals.yLabelsCoords.map(function(t4, e3) {
            o2(t4, e3);
          }), t3.globals.yTitleCoords.map(function(t4, e3) {
            o2(t4, e3);
          }), t3.globals.isBarHorizontal && !t3.config.yaxis[0].floating && (e2 = t3.globals.yLabelsCoords[0].width + t3.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i2, this.dCtx.yAxisWidthRight = a2, e2;
        } }]), t2;
      }();
      var rt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.dCtx = e2;
        }
        return r(t2, [{ key: "gridPadForColumnsInNumericAxis", value: function(t3) {
          var e2 = this.w;
          if (e2.globals.noData || e2.globals.allSeriesCollapsed)
            return 0;
          var i2 = function(t4) {
            return "bar" === t4 || "rangeBar" === t4 || "candlestick" === t4 || "boxPlot" === t4;
          }, a2 = e2.config.chart.type, s2 = 0, r2 = i2(a2) ? e2.config.series.length : 1;
          if (e2.globals.comboBarCount > 0 && (r2 = e2.globals.comboBarCount), e2.globals.collapsedSeries.forEach(function(t4) {
            i2(t4.type) && (r2 -= 1);
          }), e2.config.chart.stacked && (r2 = 1), (i2(a2) || e2.globals.comboBarCount > 0) && e2.globals.isXNumeric && !e2.globals.isBarHorizontal && r2 > 0) {
            var o2, n2, l2 = Math.abs(e2.globals.initialMaxX - e2.globals.initialMinX);
            l2 <= 3 && (l2 = e2.globals.dataPoints), o2 = l2 / t3, e2.globals.minXDiff && e2.globals.minXDiff / o2 > 0 && (n2 = e2.globals.minXDiff / o2), n2 > t3 / 2 && (n2 /= 2), (s2 = n2 / r2 * parseInt(e2.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (s2 = 1), s2 = s2 / (r2 > 1 ? 1 : 1.5) + 5, e2.globals.barPadForNumericAxis = s2;
          }
          return s2;
        } }, { key: "gridPadFortitleSubtitle", value: function() {
          var t3 = this, e2 = this.w, i2 = e2.globals, a2 = this.dCtx.isSparkline || !e2.globals.axisCharts ? 0 : 10;
          ["title", "subtitle"].forEach(function(i3) {
            void 0 !== e2.config[i3].text ? a2 += e2.config[i3].margin : a2 += t3.dCtx.isSparkline || !e2.globals.axisCharts ? 0 : 5;
          }), !e2.config.legend.show || "bottom" !== e2.config.legend.position || e2.config.legend.floating || e2.globals.axisCharts || (a2 += 10);
          var s2 = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"), r2 = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
          i2.gridHeight = i2.gridHeight - s2.height - r2.height - a2, i2.translateY = i2.translateY + s2.height + r2.height + a2;
        } }, { key: "setGridXPosForDualYAxis", value: function(t3, e2) {
          var i2 = this.w, a2 = new B(this.dCtx.ctx);
          i2.config.yaxis.map(function(s2, r2) {
            -1 !== i2.globals.ignoreYAxisIndexes.indexOf(r2) || s2.floating || a2.isYAxisHidden(r2) || (s2.opposite && (i2.globals.translateX = i2.globals.translateX - (e2[r2].width + t3[r2].width) - parseInt(i2.config.yaxis[r2].labels.style.fontSize, 10) / 1.2 - 12), i2.globals.translateX < 2 && (i2.globals.translateX = 2));
          });
        } }]), t2;
      }();
      var ot = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new it(this), this.dimYAxis = new st(this), this.dimXAxis = new at(this), this.dimGrid = new rt(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;
        }
        return r(t2, [{ key: "plotCoords", value: function() {
          var t3 = this, e2 = this.w, i2 = e2.globals;
          this.lgRect = this.dimHelpers.getLegendsRect(), this.isSparkline && (e2.config.markers.discrete.length > 0 || e2.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function(e3) {
            var i3 = g(e3, 2), a3 = i3[0], s2 = i3[1];
            t3.gridPad[a3] = Math.max(s2, t3.w.globals.markers.largestSize / 1.5);
          }), i2.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i2.gridHeight = i2.gridHeight - this.gridPad.top - this.gridPad.bottom, i2.gridWidth = i2.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
          var a2 = this.dimGrid.gridPadForColumnsInNumericAxis(i2.gridWidth);
          i2.gridWidth = i2.gridWidth - 2 * a2, i2.translateX = i2.translateX + this.gridPad.left + this.xPadLeft + (a2 > 0 ? a2 + 4 : 0), i2.translateY = i2.translateY + this.gridPad.top;
        } }, { key: "setDimensionsForAxisCharts", value: function() {
          var t3 = this, e2 = this.w, i2 = e2.globals, a2 = this.dimYAxis.getyAxisLabelsCoords(), s2 = this.dimYAxis.getyAxisTitleCoords();
          e2.globals.yLabelsCoords = [], e2.globals.yTitleCoords = [], e2.config.yaxis.map(function(t4, i3) {
            e2.globals.yLabelsCoords.push({ width: a2[i3].width, index: i3 }), e2.globals.yTitleCoords.push({ width: s2[i3].width, index: i3 });
          }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
          var r2 = this.dimXAxis.getxAxisLabelsCoords(), o2 = this.dimXAxis.getxAxisGroupLabelsCoords(), n2 = this.dimXAxis.getxAxisTitleCoords();
          this.conditionalChecksForAxisCoords(r2, n2, o2), i2.translateXAxisY = e2.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i2.translateXAxisX = e2.globals.rotateXLabels && e2.globals.isXNumeric && e2.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e2.globals.isBarHorizontal && (i2.rotateXLabels = false, i2.translateXAxisY = parseInt(e2.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i2.translateXAxisY = i2.translateXAxisY + e2.config.xaxis.labels.offsetY, i2.translateXAxisX = i2.translateXAxisX + e2.config.xaxis.labels.offsetX;
          var l2 = this.yAxisWidth, h2 = this.xAxisHeight;
          i2.xAxisLabelsHeight = this.xAxisHeight - n2.height, i2.xAxisGroupLabelsHeight = i2.xAxisLabelsHeight - r2.height, i2.xAxisLabelsWidth = this.xAxisWidth, i2.xAxisHeight = this.xAxisHeight;
          var c2 = 10;
          ("radar" === e2.config.chart.type || this.isSparkline) && (l2 = 0, h2 = i2.goldenPadding), this.isSparkline && (this.lgRect = { height: 0, width: 0 }), (this.isSparkline || "treemap" === e2.config.chart.type) && (l2 = 0, h2 = 0, c2 = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(r2);
          var d2 = function() {
            i2.translateX = l2, i2.gridHeight = i2.svgHeight - t3.lgRect.height - h2 - (t3.isSparkline || "treemap" === e2.config.chart.type ? 0 : e2.globals.rotateXLabels ? 10 : 15), i2.gridWidth = i2.svgWidth - l2;
          };
          switch ("top" === e2.config.xaxis.position && (c2 = i2.xAxisHeight - e2.config.xaxis.axisTicks.height - 5), e2.config.legend.position) {
            case "bottom":
              i2.translateY = c2, d2();
              break;
            case "top":
              i2.translateY = this.lgRect.height + c2, d2();
              break;
            case "left":
              i2.translateY = c2, i2.translateX = this.lgRect.width + l2, i2.gridHeight = i2.svgHeight - h2 - 12, i2.gridWidth = i2.svgWidth - this.lgRect.width - l2;
              break;
            case "right":
              i2.translateY = c2, i2.translateX = l2, i2.gridHeight = i2.svgHeight - h2 - 12, i2.gridWidth = i2.svgWidth - this.lgRect.width - l2 - 5;
              break;
            default:
              throw new Error("Legend position not supported");
          }
          this.dimGrid.setGridXPosForDualYAxis(s2, a2), new q(this.ctx).setYAxisXPosition(a2, s2);
        } }, { key: "setDimensionsForNonAxisCharts", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = t3.config, a2 = 0;
          t3.config.legend.show && !t3.config.legend.floating && (a2 = 20);
          var s2 = "pie" === i2.chart.type || "polarArea" === i2.chart.type || "donut" === i2.chart.type ? "pie" : "radialBar", r2 = i2.plotOptions[s2].offsetY, o2 = i2.plotOptions[s2].offsetX;
          if (!i2.legend.show || i2.legend.floating)
            return e2.gridHeight = e2.svgHeight - i2.grid.padding.left + i2.grid.padding.right, e2.gridWidth = e2.gridHeight, e2.translateY = r2, void (e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2);
          switch (i2.legend.position) {
            case "bottom":
              e2.gridHeight = e2.svgHeight - this.lgRect.height - e2.goldenPadding, e2.gridWidth = e2.svgWidth, e2.translateY = r2 - 10, e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2;
              break;
            case "top":
              e2.gridHeight = e2.svgHeight - this.lgRect.height - e2.goldenPadding, e2.gridWidth = e2.svgWidth, e2.translateY = this.lgRect.height + r2 + 10, e2.translateX = o2 + (e2.svgWidth - e2.gridWidth) / 2;
              break;
            case "left":
              e2.gridWidth = e2.svgWidth - this.lgRect.width - a2, e2.gridHeight = "auto" !== i2.chart.height ? e2.svgHeight : e2.gridWidth, e2.translateY = r2, e2.translateX = o2 + this.lgRect.width + a2;
              break;
            case "right":
              e2.gridWidth = e2.svgWidth - this.lgRect.width - a2 - 5, e2.gridHeight = "auto" !== i2.chart.height ? e2.svgHeight : e2.gridWidth, e2.translateY = r2, e2.translateX = o2 + 10;
              break;
            default:
              throw new Error("Legend position not supported");
          }
        } }, { key: "conditionalChecksForAxisCoords", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = a2.globals.hasGroups ? 2 : 1, r2 = i2.height + t3.height + e2.height, o2 = a2.globals.isMultiLineX ? 1.2 : a2.globals.LINE_HEIGHT_RATIO, n2 = a2.globals.rotateXLabels ? 22 : 10, l2 = a2.globals.rotateXLabels && "bottom" === a2.config.legend.position ? 10 : 0;
          this.xAxisHeight = r2 * o2 + s2 * n2 + l2, this.xAxisWidth = t3.width, this.xAxisHeight - e2.height > a2.config.xaxis.labels.maxHeight && (this.xAxisHeight = a2.config.xaxis.labels.maxHeight), a2.config.xaxis.labels.minHeight && this.xAxisHeight < a2.config.xaxis.labels.minHeight && (this.xAxisHeight = a2.config.xaxis.labels.minHeight), a2.config.xaxis.floating && (this.xAxisHeight = 0);
          var h2 = 0, c2 = 0;
          a2.config.yaxis.forEach(function(t4) {
            h2 += t4.labels.minWidth, c2 += t4.labels.maxWidth;
          }), this.yAxisWidth < h2 && (this.yAxisWidth = h2), this.yAxisWidth > c2 && (this.yAxisWidth = c2);
        } }]), t2;
      }();
      var nt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.lgCtx = e2;
        }
        return r(t2, [{ key: "getLegendStyles", value: function() {
          var t3 = document.createElement("style");
          t3.setAttribute("type", "text/css");
          var e2 = document.createTextNode("	\n    	\n      .apexcharts-legend {	\n        display: flex;	\n        overflow: auto;	\n        padding: 0 10px;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {	\n        flex-wrap: wrap	\n      }	\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	\n        flex-direction: column;	\n        bottom: 0;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	\n        justify-content: flex-start;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {	\n        justify-content: center;  	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {	\n        justify-content: flex-end;	\n      }	\n      .apexcharts-legend-series {	\n        cursor: pointer;	\n        line-height: normal;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{	\n        display: flex;	\n        align-items: center;	\n      }	\n      .apexcharts-legend-text {	\n        position: relative;	\n        font-size: 14px;	\n      }	\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {	\n        pointer-events: none;	\n      }	\n      .apexcharts-legend-marker {	\n        position: relative;	\n        display: inline-block;	\n        cursor: pointer;	\n        margin-right: 3px;	\n        border-style: solid;\n      }	\n      	\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{	\n        display: inline-block;	\n      }	\n      .apexcharts-legend-series.apexcharts-no-click {	\n        cursor: auto;	\n      }	\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {	\n        display: none !important;	\n      }	\n      .apexcharts-inactive-legend {	\n        opacity: 0.45;	\n      }");
          return t3.appendChild(e2), t3;
        } }, { key: "getLegendBBox", value: function() {
          var t3 = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(), e2 = t3.width;
          return { clwh: t3.height, clww: e2 };
        } }, { key: "appendToForeignObject", value: function() {
          var t3 = this.w.globals;
          t3.dom.elLegendForeign = document.createElementNS(t3.SVGNS, "foreignObject");
          var e2 = t3.dom.elLegendForeign;
          e2.setAttribute("x", 0), e2.setAttribute("y", 0), e2.setAttribute("width", t3.svgWidth), e2.setAttribute("height", t3.svgHeight), t3.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), e2.appendChild(t3.dom.elLegendWrap), e2.appendChild(this.getLegendStyles()), t3.dom.Paper.node.insertBefore(e2, t3.dom.elGraphical.node);
        } }, { key: "toggleDataSeries", value: function(t3, e2) {
          var i2 = this, a2 = this.w;
          if (a2.globals.axisCharts || "radialBar" === a2.config.chart.type) {
            a2.globals.resized = true;
            var s2 = null, r2 = null;
            if (a2.globals.risingSeries = [], a2.globals.axisCharts ? (s2 = a2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t3, "']")), r2 = parseInt(s2.getAttribute("data:realIndex"), 10)) : (s2 = a2.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t3 + 1, "']")), r2 = parseInt(s2.getAttribute("rel"), 10) - 1), e2)
              [{ cs: a2.globals.collapsedSeries, csi: a2.globals.collapsedSeriesIndices }, { cs: a2.globals.ancillaryCollapsedSeries, csi: a2.globals.ancillaryCollapsedSeriesIndices }].forEach(function(t4) {
                i2.riseCollapsedSeries(t4.cs, t4.csi, r2);
              });
            else
              this.hideSeries({ seriesEl: s2, realIndex: r2 });
          } else {
            var o2 = a2.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t3 + 1, "'] path")), n2 = a2.config.chart.type;
            if ("pie" === n2 || "polarArea" === n2 || "donut" === n2) {
              var l2 = a2.config.plotOptions.pie.donut.labels;
              new m(this.lgCtx.ctx).pathMouseDown(o2.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o2.members[0].node, l2);
            }
            o2.fire("click");
          }
        } }, { key: "hideSeries", value: function(t3) {
          var e2 = t3.seriesEl, i2 = t3.realIndex, a2 = this.w, s2 = x.clone(a2.config.series);
          if (a2.globals.axisCharts) {
            var r2 = false;
            if (a2.config.yaxis[i2] && a2.config.yaxis[i2].show && a2.config.yaxis[i2].showAlways && (r2 = true, a2.globals.ancillaryCollapsedSeriesIndices.indexOf(i2) < 0 && (a2.globals.ancillaryCollapsedSeries.push({ index: i2, data: s2[i2].data.slice(), type: e2.parentNode.className.baseVal.split("-")[1] }), a2.globals.ancillaryCollapsedSeriesIndices.push(i2))), !r2) {
              a2.globals.collapsedSeries.push({ index: i2, data: s2[i2].data.slice(), type: e2.parentNode.className.baseVal.split("-")[1] }), a2.globals.collapsedSeriesIndices.push(i2);
              var o2 = a2.globals.risingSeries.indexOf(i2);
              a2.globals.risingSeries.splice(o2, 1);
            }
          } else
            a2.globals.collapsedSeries.push({ index: i2, data: s2[i2] }), a2.globals.collapsedSeriesIndices.push(i2);
          for (var n2 = e2.childNodes, l2 = 0; l2 < n2.length; l2++)
            n2[l2].classList.contains("apexcharts-series-markers-wrap") && (n2[l2].classList.contains("apexcharts-hide") ? n2[l2].classList.remove("apexcharts-hide") : n2[l2].classList.add("apexcharts-hide"));
          a2.globals.allSeriesCollapsed = a2.globals.collapsedSeries.length === a2.config.series.length, s2 = this._getSeriesBasedOnCollapsedState(s2), this.lgCtx.ctx.updateHelpers._updateSeries(s2, a2.config.chart.animations.dynamicAnimation.enabled);
        } }, { key: "riseCollapsedSeries", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = x.clone(a2.config.series);
          if (t3.length > 0) {
            for (var r2 = 0; r2 < t3.length; r2++)
              t3[r2].index === i2 && (a2.globals.axisCharts ? (s2[i2].data = t3[r2].data.slice(), t3.splice(r2, 1), e2.splice(r2, 1), a2.globals.risingSeries.push(i2)) : (s2[i2] = t3[r2].data, t3.splice(r2, 1), e2.splice(r2, 1), a2.globals.risingSeries.push(i2)));
            s2 = this._getSeriesBasedOnCollapsedState(s2), this.lgCtx.ctx.updateHelpers._updateSeries(s2, a2.config.chart.animations.dynamicAnimation.enabled);
          }
        } }, { key: "_getSeriesBasedOnCollapsedState", value: function(t3) {
          var e2 = this.w;
          return e2.globals.axisCharts ? t3.forEach(function(i2, a2) {
            e2.globals.collapsedSeriesIndices.indexOf(a2) > -1 && (t3[a2].data = []);
          }) : t3.forEach(function(i2, a2) {
            e2.globals.collapsedSeriesIndices.indexOf(a2) > -1 && (t3[a2] = 0);
          }), t3;
        } }]), t2;
      }();
      var lt = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new nt(this);
        }
        return r(t2, [{ key: "init", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = t3.config;
          if ((i2.legend.showForSingleSeries && 1 === e2.series.length || this.isBarsDistributed || e2.series.length > 1 || !e2.axisCharts) && i2.legend.show) {
            for (; e2.dom.elLegendWrap.firstChild; )
              e2.dom.elLegendWrap.removeChild(e2.dom.elLegendWrap.firstChild);
            this.drawLegends(), x.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), "bottom" === i2.legend.position || "top" === i2.legend.position ? this.legendAlignHorizontal() : "right" !== i2.legend.position && "left" !== i2.legend.position || this.legendAlignVertical();
          }
        } }, { key: "drawLegends", value: function() {
          var t3 = this, e2 = this.w, i2 = e2.config.legend.fontFamily, a2 = e2.globals.seriesNames, s2 = e2.globals.colors.slice();
          if ("heatmap" === e2.config.chart.type) {
            var r2 = e2.config.plotOptions.heatmap.colorScale.ranges;
            a2 = r2.map(function(t4) {
              return t4.name ? t4.name : t4.from + " - " + t4.to;
            }), s2 = r2.map(function(t4) {
              return t4.color;
            });
          } else
            this.isBarsDistributed && (a2 = e2.globals.labels.slice());
          e2.config.legend.customLegendItems.length && (a2 = e2.config.legend.customLegendItems);
          for (var o2 = e2.globals.legendFormatter, n2 = e2.config.legend.inverseOrder, l2 = n2 ? a2.length - 1 : 0; n2 ? l2 >= 0 : l2 <= a2.length - 1; n2 ? l2-- : l2++) {
            var h2 = o2(a2[l2], { seriesIndex: l2, w: e2 }), c2 = false, d2 = false;
            if (e2.globals.collapsedSeries.length > 0)
              for (var g2 = 0; g2 < e2.globals.collapsedSeries.length; g2++)
                e2.globals.collapsedSeries[g2].index === l2 && (c2 = true);
            if (e2.globals.ancillaryCollapsedSeriesIndices.length > 0)
              for (var u2 = 0; u2 < e2.globals.ancillaryCollapsedSeriesIndices.length; u2++)
                e2.globals.ancillaryCollapsedSeriesIndices[u2] === l2 && (d2 = true);
            var f2 = document.createElement("span");
            f2.classList.add("apexcharts-legend-marker");
            var p2 = e2.config.legend.markers.offsetX, b2 = e2.config.legend.markers.offsetY, v2 = e2.config.legend.markers.height, w2 = e2.config.legend.markers.width, k2 = e2.config.legend.markers.strokeWidth, A2 = e2.config.legend.markers.strokeColor, S2 = e2.config.legend.markers.radius, C2 = f2.style;
            C2.background = s2[l2], C2.color = s2[l2], C2.setProperty("background", s2[l2], "important"), e2.config.legend.markers.fillColors && e2.config.legend.markers.fillColors[l2] && (C2.background = e2.config.legend.markers.fillColors[l2]), void 0 !== e2.globals.seriesColors[l2] && (C2.background = e2.globals.seriesColors[l2], C2.color = e2.globals.seriesColors[l2]), C2.height = Array.isArray(v2) ? parseFloat(v2[l2]) + "px" : parseFloat(v2) + "px", C2.width = Array.isArray(w2) ? parseFloat(w2[l2]) + "px" : parseFloat(w2) + "px", C2.left = (Array.isArray(p2) ? parseFloat(p2[l2]) : parseFloat(p2)) + "px", C2.top = (Array.isArray(b2) ? parseFloat(b2[l2]) : parseFloat(b2)) + "px", C2.borderWidth = Array.isArray(k2) ? k2[l2] : k2, C2.borderColor = Array.isArray(A2) ? A2[l2] : A2, C2.borderRadius = Array.isArray(S2) ? parseFloat(S2[l2]) + "px" : parseFloat(S2) + "px", e2.config.legend.markers.customHTML && (Array.isArray(e2.config.legend.markers.customHTML) ? e2.config.legend.markers.customHTML[l2] && (f2.innerHTML = e2.config.legend.markers.customHTML[l2]()) : f2.innerHTML = e2.config.legend.markers.customHTML()), m.setAttrs(f2, { rel: l2 + 1, "data:collapsed": c2 || d2 }), (c2 || d2) && f2.classList.add("apexcharts-inactive-legend");
            var L2 = document.createElement("div"), P2 = document.createElement("span");
            P2.classList.add("apexcharts-legend-text"), P2.innerHTML = Array.isArray(h2) ? h2.join(" ") : h2;
            var T2 = e2.config.legend.labels.useSeriesColors ? e2.globals.colors[l2] : e2.config.legend.labels.colors;
            T2 || (T2 = e2.config.chart.foreColor), P2.style.color = T2, P2.style.fontSize = parseFloat(e2.config.legend.fontSize) + "px", P2.style.fontWeight = e2.config.legend.fontWeight, P2.style.fontFamily = i2 || e2.config.chart.fontFamily, m.setAttrs(P2, { rel: l2 + 1, i: l2, "data:default-text": encodeURIComponent(h2), "data:collapsed": c2 || d2 }), L2.appendChild(f2), L2.appendChild(P2);
            var M2 = new y(this.ctx);
            if (!e2.config.legend.showForZeroSeries)
              0 === M2.getSeriesTotalByIndex(l2) && M2.seriesHaveSameValues(l2) && !M2.isSeriesNull(l2) && -1 === e2.globals.collapsedSeriesIndices.indexOf(l2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(l2) && L2.classList.add("apexcharts-hidden-zero-series");
            e2.config.legend.showForNullSeries || M2.isSeriesNull(l2) && -1 === e2.globals.collapsedSeriesIndices.indexOf(l2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(l2) && L2.classList.add("apexcharts-hidden-null-series"), e2.globals.dom.elLegendWrap.appendChild(L2), e2.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e2.config.legend.horizontalAlign)), e2.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e2.config.legend.position), L2.classList.add("apexcharts-legend-series"), L2.style.margin = "".concat(e2.config.legend.itemMargin.vertical, "px ").concat(e2.config.legend.itemMargin.horizontal, "px"), e2.globals.dom.elLegendWrap.style.width = e2.config.legend.width ? e2.config.legend.width + "px" : "", e2.globals.dom.elLegendWrap.style.height = e2.config.legend.height ? e2.config.legend.height + "px" : "", m.setAttrs(L2, { rel: l2 + 1, seriesName: x.escapeString(a2[l2]), "data:collapsed": c2 || d2 }), (c2 || d2) && L2.classList.add("apexcharts-inactive-legend"), e2.config.legend.onItemClick.toggleDataSeries || L2.classList.add("apexcharts-no-click");
          }
          e2.globals.dom.elWrap.addEventListener("click", t3.onLegendClick, true), e2.config.legend.onItemHover.highlightDataSeries && 0 === e2.config.legend.customLegendItems.length && (e2.globals.dom.elWrap.addEventListener("mousemove", t3.onLegendHovered, true), e2.globals.dom.elWrap.addEventListener("mouseout", t3.onLegendHovered, true));
        } }, { key: "setLegendWrapXY", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.globals.dom.baseEl.querySelector(".apexcharts-legend"), s2 = a2.getBoundingClientRect(), r2 = 0, o2 = 0;
          if ("bottom" === i2.config.legend.position)
            o2 += i2.globals.svgHeight - s2.height / 2;
          else if ("top" === i2.config.legend.position) {
            var n2 = new ot(this.ctx), l2 = n2.dimHelpers.getTitleSubtitleCoords("title").height, h2 = n2.dimHelpers.getTitleSubtitleCoords("subtitle").height;
            o2 = o2 + (l2 > 0 ? l2 - 10 : 0) + (h2 > 0 ? h2 - 10 : 0);
          }
          a2.style.position = "absolute", r2 = r2 + t3 + i2.config.legend.offsetX, o2 = o2 + e2 + i2.config.legend.offsetY, a2.style.left = r2 + "px", a2.style.top = o2 + "px", "bottom" === i2.config.legend.position ? (a2.style.top = "auto", a2.style.bottom = 5 - i2.config.legend.offsetY + "px") : "right" === i2.config.legend.position && (a2.style.left = "auto", a2.style.right = 25 + i2.config.legend.offsetX + "px");
          ["width", "height"].forEach(function(t4) {
            a2.style[t4] && (a2.style[t4] = parseInt(i2.config.legend[t4], 10) + "px");
          });
        } }, { key: "legendAlignHorizontal", value: function() {
          var t3 = this.w;
          t3.globals.dom.baseEl.querySelector(".apexcharts-legend").style.right = 0;
          var e2 = this.legendHelpers.getLegendBBox(), i2 = new ot(this.ctx), a2 = i2.dimHelpers.getTitleSubtitleCoords("title"), s2 = i2.dimHelpers.getTitleSubtitleCoords("subtitle"), r2 = 0;
          "bottom" === t3.config.legend.position ? r2 = -e2.clwh / 1.8 : "top" === t3.config.legend.position && (r2 = a2.height + s2.height + t3.config.title.margin + t3.config.subtitle.margin - 10), this.setLegendWrapXY(20, r2);
        } }, { key: "legendAlignVertical", value: function() {
          var t3 = this.w, e2 = this.legendHelpers.getLegendBBox(), i2 = 0;
          "left" === t3.config.legend.position && (i2 = 20), "right" === t3.config.legend.position && (i2 = t3.globals.svgWidth - e2.clww - 10), this.setLegendWrapXY(i2, 20);
        } }, { key: "onLegendHovered", value: function(t3) {
          var e2 = this.w, i2 = t3.target.classList.contains("apexcharts-legend-text") || t3.target.classList.contains("apexcharts-legend-marker");
          if ("heatmap" === e2.config.chart.type || this.isBarsDistributed) {
            if (i2) {
              var a2 = parseInt(t3.target.getAttribute("rel"), 10) - 1;
              this.ctx.events.fireEvent("legendHover", [this.ctx, a2, this.w]), new N(this.ctx).highlightRangeInSeries(t3, t3.target);
            }
          } else
            !t3.target.classList.contains("apexcharts-inactive-legend") && i2 && new N(this.ctx).toggleSeriesOnHover(t3, t3.target);
        } }, { key: "onLegendClick", value: function(t3) {
          var e2 = this.w;
          if (!e2.config.legend.customLegendItems.length && (t3.target.classList.contains("apexcharts-legend-text") || t3.target.classList.contains("apexcharts-legend-marker"))) {
            var i2 = parseInt(t3.target.getAttribute("rel"), 10) - 1, a2 = "true" === t3.target.getAttribute("data:collapsed"), s2 = this.w.config.chart.events.legendClick;
            "function" == typeof s2 && s2(this.ctx, i2, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, i2, this.w]);
            var r2 = this.w.config.legend.markers.onClick;
            "function" == typeof r2 && t3.target.classList.contains("apexcharts-legend-marker") && (r2(this.ctx, i2, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, i2, this.w])), "treemap" !== e2.config.chart.type && "heatmap" !== e2.config.chart.type && !this.isBarsDistributed && e2.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i2, a2);
          }
        } }]), t2;
      }();
      var ht = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = i2.globals.minX, this.maxX = i2.globals.maxX;
        }
        return r(t2, [{ key: "createToolbar", value: function() {
          var t3 = this, e2 = this.w, i2 = function() {
            return document.createElement("div");
          }, a2 = i2();
          if (a2.setAttribute("class", "apexcharts-toolbar"), a2.style.top = e2.config.chart.toolbar.offsetY + "px", a2.style.right = 3 - e2.config.chart.toolbar.offsetX + "px", e2.globals.dom.elWrap.appendChild(a2), this.elZoom = i2(), this.elZoomIn = i2(), this.elZoomOut = i2(), this.elPan = i2(), this.elSelection = i2(), this.elZoomReset = i2(), this.elMenuIcon = i2(), this.elMenu = i2(), this.elCustomIcons = [], this.t = e2.config.chart.toolbar.tools, Array.isArray(this.t.customIcons))
            for (var s2 = 0; s2 < this.t.customIcons.length; s2++)
              this.elCustomIcons.push(i2());
          var r2 = [], o2 = function(i3, a3, s3) {
            var o3 = i3.toLowerCase();
            t3.t[o3] && e2.config.chart.zoom.enabled && r2.push({ el: a3, icon: "string" == typeof t3.t[o3] ? t3.t[o3] : s3, title: t3.localeValues[i3], class: "apexcharts-".concat(o3, "-icon") });
          };
          o2("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), o2("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
          var n2 = function(i3) {
            t3.t[i3] && e2.config.chart[i3].enabled && r2.push({ el: "zoom" === i3 ? t3.elZoom : t3.elSelection, icon: "string" == typeof t3.t[i3] ? t3.t[i3] : "zoom" === i3 ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>', title: t3.localeValues["zoom" === i3 ? "selectionZoom" : "selection"], class: e2.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(i3, "-icon") });
          };
          n2("zoom"), n2("selection"), this.t.pan && e2.config.chart.zoom.enabled && r2.push({ el: this.elPan, icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>', title: this.localeValues.pan, class: e2.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon" }), o2("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && r2.push({ el: this.elMenuIcon, icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>', title: this.localeValues.menu, class: "apexcharts-menu-icon" });
          for (var l2 = 0; l2 < this.elCustomIcons.length; l2++)
            r2.push({ el: this.elCustomIcons[l2], icon: this.t.customIcons[l2].icon, title: this.t.customIcons[l2].title, index: this.t.customIcons[l2].index, class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[l2].class });
          r2.forEach(function(t4, e3) {
            t4.index && x.moveIndexInArray(r2, e3, t4.index);
          });
          for (var h2 = 0; h2 < r2.length; h2++)
            m.setAttrs(r2[h2].el, { class: r2[h2].class, title: r2[h2].title }), r2[h2].el.innerHTML = r2[h2].icon, a2.appendChild(r2[h2].el);
          this._createHamburgerMenu(a2), e2.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e2.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e2.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();
        } }, { key: "_createHamburgerMenu", value: function(t3) {
          this.elMenuItems = [], t3.appendChild(this.elMenu), m.setAttrs(this.elMenu, { class: "apexcharts-menu" });
          var e2 = [{ name: "exportSVG", title: this.localeValues.exportToSVG }, { name: "exportPNG", title: this.localeValues.exportToPNG }, { name: "exportCSV", title: this.localeValues.exportToCSV }];
          this.w.globals.allSeriesHasEqualX || e2.splice(2, 1);
          for (var i2 = 0; i2 < e2.length; i2++)
            this.elMenuItems.push(document.createElement("div")), this.elMenuItems[i2].innerHTML = e2[i2].title, m.setAttrs(this.elMenuItems[i2], { class: "apexcharts-menu-item ".concat(e2[i2].name), title: e2[i2].title }), this.elMenu.appendChild(this.elMenuItems[i2]);
        } }, { key: "addToolbarEventListeners", value: function() {
          var t3 = this;
          this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function(e3) {
            e3.classList.contains("exportSVG") ? e3.addEventListener("click", t3.handleDownload.bind(t3, "svg")) : e3.classList.contains("exportPNG") ? e3.addEventListener("click", t3.handleDownload.bind(t3, "png")) : e3.classList.contains("exportCSV") && e3.addEventListener("click", t3.handleDownload.bind(t3, "csv"));
          });
          for (var e2 = 0; e2 < this.t.customIcons.length; e2++)
            this.elCustomIcons[e2].addEventListener("click", this.t.customIcons[e2].click.bind(this, this.ctx, this.ctx.w));
        } }, { key: "toggleZoomSelection", value: function(t3) {
          this.ctx.getSyncedCharts().forEach(function(e2) {
            e2.ctx.toolbar.toggleOtherControls();
            var i2 = "selection" === t3 ? e2.ctx.toolbar.elSelection : e2.ctx.toolbar.elZoom, a2 = "selection" === t3 ? "selectionEnabled" : "zoomEnabled";
            e2.w.globals[a2] = !e2.w.globals[a2], i2.classList.contains(e2.ctx.toolbar.selectedClass) ? i2.classList.remove(e2.ctx.toolbar.selectedClass) : i2.classList.add(e2.ctx.toolbar.selectedClass);
          });
        } }, { key: "getToolbarIconsReference", value: function() {
          var t3 = this.w;
          this.elZoom || (this.elZoom = t3.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t3.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t3.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
        } }, { key: "enableZoomPanFromToolbar", value: function(t3) {
          this.toggleOtherControls(), "pan" === t3 ? this.w.globals.panEnabled = true : this.w.globals.zoomEnabled = true;
          var e2 = "pan" === t3 ? this.elPan : this.elZoom, i2 = "pan" === t3 ? this.elZoom : this.elPan;
          e2 && e2.classList.add(this.selectedClass), i2 && i2.classList.remove(this.selectedClass);
        } }, { key: "togglePanning", value: function() {
          this.ctx.getSyncedCharts().forEach(function(t3) {
            t3.ctx.toolbar.toggleOtherControls(), t3.w.globals.panEnabled = !t3.w.globals.panEnabled, t3.ctx.toolbar.elPan.classList.contains(t3.ctx.toolbar.selectedClass) ? t3.ctx.toolbar.elPan.classList.remove(t3.ctx.toolbar.selectedClass) : t3.ctx.toolbar.elPan.classList.add(t3.ctx.toolbar.selectedClass);
          });
        } }, { key: "toggleOtherControls", value: function() {
          var t3 = this, e2 = this.w;
          e2.globals.panEnabled = false, e2.globals.zoomEnabled = false, e2.globals.selectionEnabled = false, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function(e3) {
            e3 && e3.classList.remove(t3.selectedClass);
          });
        } }, { key: "handleZoomIn", value: function() {
          var t3 = this.w;
          t3.globals.isRangeBar && (this.minX = t3.globals.minY, this.maxX = t3.globals.maxY);
          var e2 = (this.minX + this.maxX) / 2, i2 = (this.minX + e2) / 2, a2 = (this.maxX + e2) / 2, s2 = this._getNewMinXMaxX(i2, a2);
          t3.globals.disableZoomIn || this.zoomUpdateOptions(s2.minX, s2.maxX);
        } }, { key: "handleZoomOut", value: function() {
          var t3 = this.w;
          if (t3.globals.isRangeBar && (this.minX = t3.globals.minY, this.maxX = t3.globals.maxY), !("datetime" === t3.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
            var e2 = (this.minX + this.maxX) / 2, i2 = this.minX - (e2 - this.minX), a2 = this.maxX - (e2 - this.maxX), s2 = this._getNewMinXMaxX(i2, a2);
            t3.globals.disableZoomOut || this.zoomUpdateOptions(s2.minX, s2.maxX);
          }
        } }, { key: "_getNewMinXMaxX", value: function(t3, e2) {
          var i2 = this.w.config.xaxis.convertedCatToNumeric;
          return { minX: i2 ? Math.floor(t3) : t3, maxX: i2 ? Math.floor(e2) : e2 };
        } }, { key: "zoomUpdateOptions", value: function(t3, e2) {
          var i2 = this.w;
          if (void 0 !== t3 || void 0 !== e2) {
            if (!(i2.config.xaxis.convertedCatToNumeric && (t3 < 1 && (t3 = 1, e2 = i2.globals.dataPoints), e2 - t3 < 2))) {
              var a2 = { min: t3, max: e2 }, s2 = this.getBeforeZoomRange(a2);
              s2 && (a2 = s2.xaxis);
              var r2 = { xaxis: a2 }, o2 = x.clone(i2.globals.initialConfig.yaxis);
              if (i2.config.chart.zoom.autoScaleYaxis)
                o2 = new _3(this.ctx).autoScaleY(this.ctx, o2, { xaxis: a2 });
              i2.config.chart.group || (r2.yaxis = o2), this.w.globals.zoomed = true, this.ctx.updateHelpers._updateOptions(r2, false, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a2, o2);
            }
          } else
            this.handleZoomReset();
        } }, { key: "zoomCallback", value: function(t3, e2) {
          "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, { xaxis: t3, yaxis: e2 });
        } }, { key: "getBeforeZoomRange", value: function(t3, e2) {
          var i2 = null;
          return "function" == typeof this.ev.beforeZoom && (i2 = this.ev.beforeZoom(this, { xaxis: t3, yaxis: e2 })), i2;
        } }, { key: "toggleMenu", value: function() {
          var t3 = this;
          window.setTimeout(function() {
            t3.elMenu.classList.contains("apexcharts-menu-open") ? t3.elMenu.classList.remove("apexcharts-menu-open") : t3.elMenu.classList.add("apexcharts-menu-open");
          }, 0);
        } }, { key: "handleDownload", value: function(t3) {
          var e2 = this.w, i2 = new V(this.ctx);
          switch (t3) {
            case "svg":
              i2.exportToSVG(this.ctx);
              break;
            case "png":
              i2.exportToPng(this.ctx);
              break;
            case "csv":
              i2.exportToCSV({ series: e2.config.series, columnDelimiter: e2.config.chart.toolbar.export.csv.columnDelimiter });
          }
        } }, { key: "handleZoomReset", value: function(t3) {
          this.ctx.getSyncedCharts().forEach(function(t4) {
            var e2 = t4.w;
            if (e2.globals.lastXAxis.min = void 0, e2.globals.lastXAxis.max = void 0, t4.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e2.config.chart.events.beforeResetZoom) {
              var i2 = e2.config.chart.events.beforeResetZoom(t4, e2);
              i2 && t4.updateHelpers.revertDefaultAxisMinMax(i2);
            }
            "function" == typeof e2.config.chart.events.zoomed && t4.ctx.toolbar.zoomCallback({ min: e2.config.xaxis.min, max: e2.config.xaxis.max }), e2.globals.zoomed = false;
            var a2 = t4.ctx.series.emptyCollapsedSeries(x.clone(e2.globals.initialSeries));
            t4.updateHelpers._updateSeries(a2, e2.config.chart.animations.dynamicAnimation.enabled);
          });
        } }, { key: "destroy", value: function() {
          this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
        } }]), t2;
      }();
      var ct = function(t2) {
        n(i2, ht);
        var e2 = d(i2);
        function i2(t3) {
          var s2;
          return a(this, i2), (s2 = e2.call(this, t3)).ctx = t3, s2.w = t3.w, s2.dragged = false, s2.graphics = new m(s2.ctx), s2.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"], s2.clientX = 0, s2.clientY = 0, s2.startX = 0, s2.endX = 0, s2.dragX = 0, s2.startY = 0, s2.endY = 0, s2.dragY = 0, s2.moveDirection = "none", s2;
        }
        return r(i2, [{ key: "init", value: function(t3) {
          var e3 = this, i3 = t3.xyRatios, a2 = this.w, s2 = this;
          this.xyRatios = i3, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a2.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), a2.globals.dom.elGraphical.add(this.zoomRect), a2.globals.dom.elGraphical.add(this.selectionRect), "x" === a2.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, minY: 0, maxX: a2.globals.gridWidth, maxY: a2.globals.gridHeight }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === a2.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({ minX: 0, maxX: a2.globals.gridWidth }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = a2.globals.dom.baseEl.querySelector("".concat(a2.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach(function(t4) {
            e3.hoverArea.addEventListener(t4, s2.svgMouseEvents.bind(s2, i3), { capture: false, passive: true });
          });
        } }, { key: "destroy", value: function() {
          this.slDraggableRect && (this.slDraggableRect.draggable(false), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
        } }, { key: "svgMouseEvents", value: function(t3, e3) {
          var i3 = this.w, a2 = this, s2 = this.ctx.toolbar, r2 = i3.globals.zoomEnabled ? i3.config.chart.zoom.type : i3.config.chart.selection.type, o2 = i3.config.chart.toolbar.autoSelected;
          if (e3.shiftKey ? (this.shiftWasPressed = true, s2.enableZoomPanFromToolbar("pan" === o2 ? "zoom" : "pan")) : this.shiftWasPressed && (s2.enableZoomPanFromToolbar(o2), this.shiftWasPressed = false), e3.target) {
            var n2, l2 = e3.target.classList;
            if (e3.target.parentNode && null !== e3.target.parentNode && (n2 = e3.target.parentNode.classList), !(l2.contains("apexcharts-selection-rect") || l2.contains("apexcharts-legend-marker") || l2.contains("apexcharts-legend-text") || n2 && n2.contains("apexcharts-toolbar"))) {
              if (a2.clientX = "touchmove" === e3.type || "touchstart" === e3.type ? e3.touches[0].clientX : "touchend" === e3.type ? e3.changedTouches[0].clientX : e3.clientX, a2.clientY = "touchmove" === e3.type || "touchstart" === e3.type ? e3.touches[0].clientY : "touchend" === e3.type ? e3.changedTouches[0].clientY : e3.clientY, "mousedown" === e3.type && 1 === e3.which) {
                var h2 = a2.gridRect.getBoundingClientRect();
                a2.startX = a2.clientX - h2.left, a2.startY = a2.clientY - h2.top, a2.dragged = false, a2.w.globals.mousedown = true;
              }
              if (("mousemove" === e3.type && 1 === e3.which || "touchmove" === e3.type) && (a2.dragged = true, i3.globals.panEnabled ? (i3.globals.selection = null, a2.w.globals.mousedown && a2.panDragging({ context: a2, zoomtype: r2, xyRatios: t3 })) : (a2.w.globals.mousedown && i3.globals.zoomEnabled || a2.w.globals.mousedown && i3.globals.selectionEnabled) && (a2.selection = a2.selectionDrawing({ context: a2, zoomtype: r2 }))), "mouseup" === e3.type || "touchend" === e3.type || "mouseleave" === e3.type) {
                var c2 = a2.gridRect.getBoundingClientRect();
                a2.w.globals.mousedown && (a2.endX = a2.clientX - c2.left, a2.endY = a2.clientY - c2.top, a2.dragX = Math.abs(a2.endX - a2.startX), a2.dragY = Math.abs(a2.endY - a2.startY), (i3.globals.zoomEnabled || i3.globals.selectionEnabled) && a2.selectionDrawn({ context: a2, zoomtype: r2 }), i3.globals.panEnabled && i3.config.xaxis.convertedCatToNumeric && a2.delayedPanScrolled()), i3.globals.zoomEnabled && a2.hideSelectionRect(this.selectionRect), a2.dragged = false, a2.w.globals.mousedown = false;
              }
              this.makeSelectionRectDraggable();
            }
          }
        } }, { key: "makeSelectionRectDraggable", value: function() {
          var t3 = this.w;
          if (this.selectionRect) {
            var e3 = this.selectionRect.node.getBoundingClientRect();
            e3.width > 0 && e3.height > 0 && this.slDraggableRect.selectize({ points: "l, r", pointSize: 8, pointType: "rect" }).resize({ constraint: { minX: 0, minY: 0, maxX: t3.globals.gridWidth, maxY: t3.globals.gridHeight } }).on("resizing", this.selectionDragging.bind(this, "resizing"));
          }
        } }, { key: "preselectedSelection", value: function() {
          var t3 = this.w, e3 = this.xyRatios;
          if (!t3.globals.zoomEnabled) {
            if (void 0 !== t3.globals.selection && null !== t3.globals.selection)
              this.drawSelectionRect(t3.globals.selection);
            else if (void 0 !== t3.config.chart.selection.xaxis.min && void 0 !== t3.config.chart.selection.xaxis.max) {
              var i3 = (t3.config.chart.selection.xaxis.min - t3.globals.minX) / e3.xRatio, a2 = { x: i3, y: 0, width: t3.globals.gridWidth - (t3.globals.maxX - t3.config.chart.selection.xaxis.max) / e3.xRatio - i3, height: t3.globals.gridHeight, translateX: 0, translateY: 0, selectionEnabled: true };
              this.drawSelectionRect(a2), this.makeSelectionRectDraggable(), "function" == typeof t3.config.chart.events.selection && t3.config.chart.events.selection(this.ctx, { xaxis: { min: t3.config.chart.selection.xaxis.min, max: t3.config.chart.selection.xaxis.max }, yaxis: {} });
            }
          }
        } }, { key: "drawSelectionRect", value: function(t3) {
          var e3 = t3.x, i3 = t3.y, a2 = t3.width, s2 = t3.height, r2 = t3.translateX, o2 = void 0 === r2 ? 0 : r2, n2 = t3.translateY, l2 = void 0 === n2 ? 0 : n2, h2 = this.w, c2 = this.zoomRect, d2 = this.selectionRect;
          if (this.dragged || null !== h2.globals.selection) {
            var g2 = { transform: "translate(" + o2 + ", " + l2 + ")" };
            h2.globals.zoomEnabled && this.dragged && (a2 < 0 && (a2 = 1), c2.attr({ x: e3, y: i3, width: a2, height: s2, fill: h2.config.chart.zoom.zoomedArea.fill.color, "fill-opacity": h2.config.chart.zoom.zoomedArea.fill.opacity, stroke: h2.config.chart.zoom.zoomedArea.stroke.color, "stroke-width": h2.config.chart.zoom.zoomedArea.stroke.width, "stroke-opacity": h2.config.chart.zoom.zoomedArea.stroke.opacity }), m.setAttrs(c2.node, g2)), h2.globals.selectionEnabled && (d2.attr({ x: e3, y: i3, width: a2 > 0 ? a2 : 0, height: s2 > 0 ? s2 : 0, fill: h2.config.chart.selection.fill.color, "fill-opacity": h2.config.chart.selection.fill.opacity, stroke: h2.config.chart.selection.stroke.color, "stroke-width": h2.config.chart.selection.stroke.width, "stroke-dasharray": h2.config.chart.selection.stroke.dashArray, "stroke-opacity": h2.config.chart.selection.stroke.opacity }), m.setAttrs(d2.node, g2));
          }
        } }, { key: "hideSelectionRect", value: function(t3) {
          t3 && t3.attr({ x: 0, y: 0, width: 0, height: 0 });
        } }, { key: "selectionDrawing", value: function(t3) {
          var e3 = t3.context, i3 = t3.zoomtype, a2 = this.w, s2 = e3, r2 = this.gridRect.getBoundingClientRect(), o2 = s2.startX - 1, n2 = s2.startY, l2 = false, h2 = false, c2 = s2.clientX - r2.left - o2, d2 = s2.clientY - r2.top - n2, g2 = {};
          return Math.abs(c2 + o2) > a2.globals.gridWidth ? c2 = a2.globals.gridWidth - o2 : s2.clientX - r2.left < 0 && (c2 = o2), o2 > s2.clientX - r2.left && (l2 = true, c2 = Math.abs(c2)), n2 > s2.clientY - r2.top && (h2 = true, d2 = Math.abs(d2)), g2 = "x" === i3 ? { x: l2 ? o2 - c2 : o2, y: 0, width: c2, height: a2.globals.gridHeight } : "y" === i3 ? { x: 0, y: h2 ? n2 - d2 : n2, width: a2.globals.gridWidth, height: d2 } : { x: l2 ? o2 - c2 : o2, y: h2 ? n2 - d2 : n2, width: c2, height: d2 }, s2.drawSelectionRect(g2), s2.selectionDragging("resizing"), g2;
        } }, { key: "selectionDragging", value: function(t3, e3) {
          var i3 = this, a2 = this.w, s2 = this.xyRatios, r2 = this.selectionRect, o2 = 0;
          "resizing" === t3 && (o2 = 30);
          var n2 = function(t4) {
            return parseFloat(r2.node.getAttribute(t4));
          }, l2 = { x: n2("x"), y: n2("y"), width: n2("width"), height: n2("height") };
          a2.globals.selection = l2, "function" == typeof a2.config.chart.events.selection && a2.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function() {
            var t4 = i3.gridRect.getBoundingClientRect(), e4 = r2.node.getBoundingClientRect(), o3 = { xaxis: { min: a2.globals.xAxisScale.niceMin + (e4.left - t4.left) * s2.xRatio, max: a2.globals.xAxisScale.niceMin + (e4.right - t4.left) * s2.xRatio }, yaxis: { min: a2.globals.yAxisScale[0].niceMin + (t4.bottom - e4.bottom) * s2.yRatio[0], max: a2.globals.yAxisScale[0].niceMax - (e4.top - t4.top) * s2.yRatio[0] } };
            a2.config.chart.events.selection(i3.ctx, o3), a2.config.chart.brush.enabled && void 0 !== a2.config.chart.events.brushScrolled && a2.config.chart.events.brushScrolled(i3.ctx, o3);
          }, o2));
        } }, { key: "selectionDrawn", value: function(t3) {
          var e3 = t3.context, i3 = t3.zoomtype, a2 = this.w, s2 = e3, r2 = this.xyRatios, o2 = this.ctx.toolbar;
          if (s2.startX > s2.endX) {
            var n2 = s2.startX;
            s2.startX = s2.endX, s2.endX = n2;
          }
          if (s2.startY > s2.endY) {
            var l2 = s2.startY;
            s2.startY = s2.endY, s2.endY = l2;
          }
          var h2 = void 0, c2 = void 0;
          a2.globals.isRangeBar ? (h2 = a2.globals.yAxisScale[0].niceMin + s2.startX * r2.invertedYRatio, c2 = a2.globals.yAxisScale[0].niceMin + s2.endX * r2.invertedYRatio) : (h2 = a2.globals.xAxisScale.niceMin + s2.startX * r2.xRatio, c2 = a2.globals.xAxisScale.niceMin + s2.endX * r2.xRatio);
          var d2 = [], g2 = [];
          if (a2.config.yaxis.forEach(function(t4, e4) {
            d2.push(a2.globals.yAxisScale[e4].niceMax - r2.yRatio[e4] * s2.startY), g2.push(a2.globals.yAxisScale[e4].niceMax - r2.yRatio[e4] * s2.endY);
          }), s2.dragged && (s2.dragX > 10 || s2.dragY > 10) && h2 !== c2) {
            if (a2.globals.zoomEnabled) {
              var u2 = x.clone(a2.globals.initialConfig.yaxis), f2 = x.clone(a2.globals.initialConfig.xaxis);
              if (a2.globals.zoomed = true, a2.config.xaxis.convertedCatToNumeric && (h2 = Math.floor(h2), c2 = Math.floor(c2), h2 < 1 && (h2 = 1, c2 = a2.globals.dataPoints), c2 - h2 < 2 && (c2 = h2 + 1)), "xy" !== i3 && "x" !== i3 || (f2 = { min: h2, max: c2 }), "xy" !== i3 && "y" !== i3 || u2.forEach(function(t4, e4) {
                u2[e4].min = g2[e4], u2[e4].max = d2[e4];
              }), a2.config.chart.zoom.autoScaleYaxis) {
                var p2 = new _3(s2.ctx);
                u2 = p2.autoScaleY(s2.ctx, u2, { xaxis: f2 });
              }
              if (o2) {
                var b2 = o2.getBeforeZoomRange(f2, u2);
                b2 && (f2 = b2.xaxis ? b2.xaxis : f2, u2 = b2.yaxis ? b2.yaxis : u2);
              }
              var v2 = { xaxis: f2 };
              a2.config.chart.group || (v2.yaxis = u2), s2.ctx.updateHelpers._updateOptions(v2, false, s2.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof a2.config.chart.events.zoomed && o2.zoomCallback(f2, u2);
            } else if (a2.globals.selectionEnabled) {
              var m2, y2 = null;
              m2 = { min: h2, max: c2 }, "xy" !== i3 && "y" !== i3 || (y2 = x.clone(a2.config.yaxis)).forEach(function(t4, e4) {
                y2[e4].min = g2[e4], y2[e4].max = d2[e4];
              }), a2.globals.selection = s2.selection, "function" == typeof a2.config.chart.events.selection && a2.config.chart.events.selection(s2.ctx, { xaxis: m2, yaxis: y2 });
            }
          }
        } }, { key: "panDragging", value: function(t3) {
          var e3 = t3.context, i3 = this.w, a2 = e3;
          if (void 0 !== i3.globals.lastClientPosition.x) {
            var s2 = i3.globals.lastClientPosition.x - a2.clientX, r2 = i3.globals.lastClientPosition.y - a2.clientY;
            Math.abs(s2) > Math.abs(r2) && s2 > 0 ? this.moveDirection = "left" : Math.abs(s2) > Math.abs(r2) && s2 < 0 ? this.moveDirection = "right" : Math.abs(r2) > Math.abs(s2) && r2 > 0 ? this.moveDirection = "up" : Math.abs(r2) > Math.abs(s2) && r2 < 0 && (this.moveDirection = "down");
          }
          i3.globals.lastClientPosition = { x: a2.clientX, y: a2.clientY };
          var o2 = i3.globals.isRangeBar ? i3.globals.minY : i3.globals.minX, n2 = i3.globals.isRangeBar ? i3.globals.maxY : i3.globals.maxX;
          i3.config.xaxis.convertedCatToNumeric || a2.panScrolled(o2, n2);
        } }, { key: "delayedPanScrolled", value: function() {
          var t3 = this.w, e3 = t3.globals.minX, i3 = t3.globals.maxX, a2 = (t3.globals.maxX - t3.globals.minX) / 2;
          "left" === this.moveDirection ? (e3 = t3.globals.minX + a2, i3 = t3.globals.maxX + a2) : "right" === this.moveDirection && (e3 = t3.globals.minX - a2, i3 = t3.globals.maxX - a2), e3 = Math.floor(e3), i3 = Math.floor(i3), this.updateScrolledChart({ xaxis: { min: e3, max: i3 } }, e3, i3);
        } }, { key: "panScrolled", value: function(t3, e3) {
          var i3 = this.w, a2 = this.xyRatios, s2 = x.clone(i3.globals.initialConfig.yaxis), r2 = a2.xRatio, o2 = i3.globals.minX, n2 = i3.globals.maxX;
          i3.globals.isRangeBar && (r2 = a2.invertedYRatio, o2 = i3.globals.minY, n2 = i3.globals.maxY), "left" === this.moveDirection ? (t3 = o2 + i3.globals.gridWidth / 15 * r2, e3 = n2 + i3.globals.gridWidth / 15 * r2) : "right" === this.moveDirection && (t3 = o2 - i3.globals.gridWidth / 15 * r2, e3 = n2 - i3.globals.gridWidth / 15 * r2), i3.globals.isRangeBar || (t3 < i3.globals.initialMinX || e3 > i3.globals.initialMaxX) && (t3 = o2, e3 = n2);
          var l2 = { min: t3, max: e3 };
          i3.config.chart.zoom.autoScaleYaxis && (s2 = new _3(this.ctx).autoScaleY(this.ctx, s2, { xaxis: l2 }));
          var h2 = { xaxis: { min: t3, max: e3 } };
          i3.config.chart.group || (h2.yaxis = s2), this.updateScrolledChart(h2, t3, e3);
        } }, { key: "updateScrolledChart", value: function(t3, e3, i3) {
          var a2 = this.w;
          this.ctx.updateHelpers._updateOptions(t3, false, false), "function" == typeof a2.config.chart.events.scrolled && a2.config.chart.events.scrolled(this.ctx, { xaxis: { min: e3, max: i3 } });
        } }]), i2;
      }();
      var dt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ttCtx = e2, this.ctx = e2.ctx;
        }
        return r(t2, [{ key: "getNearestValues", value: function(t3) {
          var e2 = t3.hoverArea, i2 = t3.elGrid, a2 = t3.clientX, s2 = t3.clientY, r2 = this.w, o2 = i2.getBoundingClientRect(), n2 = o2.width, l2 = o2.height, h2 = n2 / (r2.globals.dataPoints - 1), c2 = l2 / r2.globals.dataPoints, d2 = this.hasBars();
          !r2.globals.comboCharts && !d2 || r2.config.xaxis.convertedCatToNumeric || (h2 = n2 / r2.globals.dataPoints);
          var g2 = a2 - o2.left - r2.globals.barPadForNumericAxis, u2 = s2 - o2.top;
          g2 < 0 || u2 < 0 || g2 > n2 || u2 > l2 ? (e2.classList.remove("hovering-zoom"), e2.classList.remove("hovering-pan")) : r2.globals.zoomEnabled ? (e2.classList.remove("hovering-pan"), e2.classList.add("hovering-zoom")) : r2.globals.panEnabled && (e2.classList.remove("hovering-zoom"), e2.classList.add("hovering-pan"));
          var f2 = Math.round(g2 / h2), p2 = Math.floor(u2 / c2);
          d2 && !r2.config.xaxis.convertedCatToNumeric && (f2 = Math.ceil(g2 / h2), f2 -= 1);
          var b2 = null, v2 = null, m2 = [], y2 = [];
          if (r2.globals.seriesXvalues.forEach(function(t4) {
            m2.push([t4[0] + 1e-6].concat(t4));
          }), r2.globals.seriesYvalues.forEach(function(t4) {
            y2.push([t4[0] + 1e-6].concat(t4));
          }), m2 = m2.map(function(t4) {
            return t4.filter(function(t5) {
              return x.isNumber(t5);
            });
          }), y2 = y2.map(function(t4) {
            return t4.filter(function(t5) {
              return x.isNumber(t5);
            });
          }), r2.globals.isXNumeric) {
            var w2 = this.ttCtx.getElGrid().getBoundingClientRect(), k2 = g2 * (w2.width / n2), A2 = u2 * (w2.height / l2);
            b2 = (v2 = this.closestInMultiArray(k2, A2, m2, y2)).index, f2 = v2.j, null !== b2 && (m2 = r2.globals.seriesXvalues[b2], f2 = (v2 = this.closestInArray(k2, m2)).index);
          }
          return r2.globals.capturedSeriesIndex = null === b2 ? -1 : b2, (!f2 || f2 < 1) && (f2 = 0), r2.globals.isBarHorizontal ? r2.globals.capturedDataPointIndex = p2 : r2.globals.capturedDataPointIndex = f2, { capturedSeries: b2, j: r2.globals.isBarHorizontal ? p2 : f2, hoverX: g2, hoverY: u2 };
        } }, { key: "closestInMultiArray", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = 0, o2 = null, n2 = -1;
          s2.globals.series.length > 1 ? r2 = this.getFirstActiveXArray(i2) : o2 = 0;
          var l2 = i2[r2][0], h2 = Math.abs(t3 - l2);
          if (i2.forEach(function(e3) {
            e3.forEach(function(e4, i3) {
              var a3 = Math.abs(t3 - e4);
              a3 < h2 && (h2 = a3, n2 = i3);
            });
          }), -1 !== n2) {
            var c2 = a2[r2][n2], d2 = Math.abs(e2 - c2);
            o2 = r2, a2.forEach(function(t4, i3) {
              var a3 = Math.abs(e2 - t4[n2]);
              a3 < d2 && (d2 = a3, o2 = i3);
            });
          }
          return { index: o2, j: n2 };
        } }, { key: "getFirstActiveXArray", value: function(t3) {
          for (var e2 = this.w, i2 = 0, a2 = t3.map(function(t4, e3) {
            return t4.length > 0 ? e3 : -1;
          }), s2 = 0; s2 < a2.length; s2++)
            if (-1 !== a2[s2] && -1 === e2.globals.collapsedSeriesIndices.indexOf(s2) && -1 === e2.globals.ancillaryCollapsedSeriesIndices.indexOf(s2)) {
              i2 = a2[s2];
              break;
            }
          return i2;
        } }, { key: "closestInArray", value: function(t3, e2) {
          for (var i2 = e2[0], a2 = null, s2 = Math.abs(t3 - i2), r2 = 0; r2 < e2.length; r2++) {
            var o2 = Math.abs(t3 - e2[r2]);
            o2 < s2 && (s2 = o2, a2 = r2);
          }
          return { index: a2 };
        } }, { key: "isXoverlap", value: function(t3) {
          var e2 = [], i2 = this.w.globals.seriesX.filter(function(t4) {
            return void 0 !== t4[0];
          });
          if (i2.length > 0)
            for (var a2 = 0; a2 < i2.length - 1; a2++)
              void 0 !== i2[a2][t3] && void 0 !== i2[a2 + 1][t3] && i2[a2][t3] !== i2[a2 + 1][t3] && e2.push("unEqual");
          return 0 === e2.length;
        } }, { key: "isInitialSeriesSameLen", value: function() {
          for (var t3 = true, e2 = this.w.globals.initialSeries, i2 = 0; i2 < e2.length - 1; i2++)
            if (e2[i2].data.length !== e2[i2 + 1].data.length) {
              t3 = false;
              break;
            }
          return t3;
        } }, { key: "getBarsHeight", value: function(t3) {
          return u(t3).reduce(function(t4, e2) {
            return t4 + e2.getBBox().height;
          }, 0);
        } }, { key: "getElMarkers", value: function() {
          return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers");
        } }, { key: "getAllMarkers", value: function() {
          var t3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
          (t3 = u(t3)).sort(function(t4, e3) {
            var i2 = Number(t4.getAttribute("data:realIndex")), a2 = Number(e3.getAttribute("data:realIndex"));
            return a2 < i2 ? 1 : a2 > i2 ? -1 : 0;
          });
          var e2 = [];
          return t3.forEach(function(t4) {
            e2.push(t4.querySelector(".apexcharts-marker"));
          }), e2;
        } }, { key: "hasMarkers", value: function() {
          return this.getElMarkers().length > 0;
        } }, { key: "getElBars", value: function() {
          return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series");
        } }, { key: "hasBars", value: function() {
          return this.getElBars().length > 0;
        } }, { key: "getHoverMarkerSize", value: function(t3) {
          var e2 = this.w, i2 = e2.config.markers.hover.size;
          return void 0 === i2 && (i2 = e2.globals.markers.size[t3] + e2.config.markers.hover.sizeOffset), i2;
        } }, { key: "toggleAllTooltipSeriesGroups", value: function(t3) {
          var e2 = this.w, i2 = this.ttCtx;
          0 === i2.allTooltipSeriesGroups.length && (i2.allTooltipSeriesGroups = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
          for (var a2 = i2.allTooltipSeriesGroups, s2 = 0; s2 < a2.length; s2++)
            "enable" === t3 ? (a2[s2].classList.add("apexcharts-active"), a2[s2].style.display = e2.config.tooltip.items.display) : (a2[s2].classList.remove("apexcharts-active"), a2[s2].style.display = "none");
        } }]), t2;
      }();
      var gt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ctx = e2.ctx, this.ttCtx = e2, this.tooltipUtil = new dt(e2);
        }
        return r(t2, [{ key: "drawSeriesTexts", value: function(t3) {
          var e2 = t3.shared, i2 = void 0 === e2 || e2, a2 = t3.ttItems, s2 = t3.i, r2 = void 0 === s2 ? 0 : s2, o2 = t3.j, n2 = void 0 === o2 ? null : o2, l2 = t3.y1, h2 = t3.y2, c2 = t3.e, d2 = this.w;
          void 0 !== d2.config.tooltip.custom ? this.handleCustomTooltip({ i: r2, j: n2, y1: l2, y2: h2, w: d2 }) : this.toggleActiveInactiveSeries(i2);
          var g2 = this.getValuesToPrint({ i: r2, j: n2 });
          this.printLabels({ i: r2, j: n2, values: g2, ttItems: a2, shared: i2, e: c2 });
          var u2 = this.ttCtx.getElTooltip();
          this.ttCtx.tooltipRect.ttWidth = u2.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u2.getBoundingClientRect().height;
        } }, { key: "printLabels", value: function(t3) {
          var i2, a2 = this, s2 = t3.i, r2 = t3.j, o2 = t3.values, n2 = t3.ttItems, l2 = t3.shared, h2 = t3.e, c2 = this.w, d2 = [], g2 = function(t4) {
            return c2.globals.seriesGoals[t4] && c2.globals.seriesGoals[t4][r2] && Array.isArray(c2.globals.seriesGoals[t4][r2]);
          }, u2 = o2.xVal, f2 = o2.zVal, p2 = o2.xAxisTTVal, x2 = "", b2 = c2.globals.colors[s2];
          null !== r2 && c2.config.plotOptions.bar.distributed && (b2 = c2.globals.colors[r2]);
          for (var v2 = function(t4, o3) {
            var v3 = a2.getFormatters(s2);
            x2 = a2.getSeriesName({ fn: v3.yLbTitleFormatter, index: s2, seriesIndex: s2, j: r2 }), "treemap" === c2.config.chart.type && (x2 = v3.yLbTitleFormatter(String(c2.config.series[s2].data[r2].x), { series: c2.globals.series, seriesIndex: s2, dataPointIndex: r2, w: c2 }));
            var m3 = c2.config.tooltip.inverseOrder ? o3 : t4;
            if (c2.globals.axisCharts) {
              var y3 = function(t5) {
                return v3.yLbFormatter(c2.globals.series[t5][r2], { series: c2.globals.series, seriesIndex: t5, dataPointIndex: r2, w: c2 });
              };
              if (l2)
                v3 = a2.getFormatters(m3), x2 = a2.getSeriesName({ fn: v3.yLbTitleFormatter, index: m3, seriesIndex: s2, j: r2 }), b2 = c2.globals.colors[m3], i2 = y3(m3), g2(m3) && (d2 = c2.globals.seriesGoals[m3][r2].map(function(t5) {
                  return { attrs: t5, val: v3.yLbFormatter(t5.value, { seriesIndex: m3, dataPointIndex: r2, w: c2 }) };
                }));
              else {
                var w2, k2 = null == h2 || null === (w2 = h2.target) || void 0 === w2 ? void 0 : w2.getAttribute("fill");
                k2 && (b2 = -1 !== k2.indexOf("url") ? document.querySelector(k2.substr(4).slice(0, -1)).childNodes[0].getAttribute("stroke") : k2), i2 = y3(s2), g2(s2) && Array.isArray(c2.globals.seriesGoals[s2][r2]) && (d2 = c2.globals.seriesGoals[s2][r2].map(function(t5) {
                  return { attrs: t5, val: v3.yLbFormatter(t5.value, { seriesIndex: s2, dataPointIndex: r2, w: c2 }) };
                }));
              }
            }
            null === r2 && (i2 = v3.yLbFormatter(c2.globals.series[s2], e(e({}, c2), {}, { seriesIndex: s2, dataPointIndex: s2 }))), a2.DOMHandling({ i: s2, t: m3, j: r2, ttItems: n2, values: { val: i2, goalVals: d2, xVal: u2, xAxisTTVal: p2, zVal: f2 }, seriesName: x2, shared: l2, pColor: b2 });
          }, m2 = 0, y2 = c2.globals.series.length - 1; m2 < c2.globals.series.length; m2++, y2--)
            v2(m2, y2);
        } }, { key: "getFormatters", value: function(t3) {
          var e2, i2 = this.w, a2 = i2.globals.yLabelFormatters[t3];
          return void 0 !== i2.globals.ttVal ? Array.isArray(i2.globals.ttVal) ? (a2 = i2.globals.ttVal[t3] && i2.globals.ttVal[t3].formatter, e2 = i2.globals.ttVal[t3] && i2.globals.ttVal[t3].title && i2.globals.ttVal[t3].title.formatter) : (a2 = i2.globals.ttVal.formatter, "function" == typeof i2.globals.ttVal.title.formatter && (e2 = i2.globals.ttVal.title.formatter)) : e2 = i2.config.tooltip.y.title.formatter, "function" != typeof a2 && (a2 = i2.globals.yLabelFormatters[0] ? i2.globals.yLabelFormatters[0] : function(t4) {
            return t4;
          }), "function" != typeof e2 && (e2 = function(t4) {
            return t4;
          }), { yLbFormatter: a2, yLbTitleFormatter: e2 };
        } }, { key: "getSeriesName", value: function(t3) {
          var e2 = t3.fn, i2 = t3.index, a2 = t3.seriesIndex, s2 = t3.j, r2 = this.w;
          return e2(String(r2.globals.seriesNames[i2]), { series: r2.globals.series, seriesIndex: a2, dataPointIndex: s2, w: r2 });
        } }, { key: "DOMHandling", value: function(t3) {
          t3.i;
          var e2 = t3.t, i2 = t3.j, a2 = t3.ttItems, s2 = t3.values, r2 = t3.seriesName, o2 = t3.shared, n2 = t3.pColor, l2 = this.w, h2 = this.ttCtx, c2 = s2.val, d2 = s2.goalVals, g2 = s2.xVal, u2 = s2.xAxisTTVal, f2 = s2.zVal, p2 = null;
          p2 = a2[e2].children, l2.config.tooltip.fillSeriesColor && (a2[e2].style.backgroundColor = n2, p2[0].style.display = "none"), h2.showTooltipTitle && (null === h2.tooltipTitle && (h2.tooltipTitle = l2.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h2.tooltipTitle.innerHTML = g2), h2.isXAxisTooltipEnabled && (h2.xaxisTooltipText.innerHTML = "" !== u2 ? u2 : g2);
          var x2 = a2[e2].querySelector(".apexcharts-tooltip-text-y-label");
          x2 && (x2.innerHTML = r2 || "");
          var b2 = a2[e2].querySelector(".apexcharts-tooltip-text-y-value");
          b2 && (b2.innerHTML = void 0 !== c2 ? c2 : ""), p2[0] && p2[0].classList.contains("apexcharts-tooltip-marker") && (l2.config.tooltip.marker.fillColors && Array.isArray(l2.config.tooltip.marker.fillColors) && (n2 = l2.config.tooltip.marker.fillColors[e2]), p2[0].style.backgroundColor = n2), l2.config.tooltip.marker.show || (p2[0].style.display = "none");
          var v2 = a2[e2].querySelector(".apexcharts-tooltip-text-goals-label"), m2 = a2[e2].querySelector(".apexcharts-tooltip-text-goals-value");
          if (d2.length && l2.globals.seriesGoals[e2]) {
            var y2 = function() {
              var t4 = "<div >", e3 = "<div>";
              d2.forEach(function(i3, a3) {
                t4 += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(i3.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(i3.attrs.name, "</div>"), e3 += "<div>".concat(i3.val, "</div>");
              }), v2.innerHTML = t4 + "</div>", m2.innerHTML = e3 + "</div>";
            };
            o2 ? l2.globals.seriesGoals[e2][i2] && Array.isArray(l2.globals.seriesGoals[e2][i2]) ? y2() : (v2.innerHTML = "", m2.innerHTML = "") : y2();
          } else
            v2.innerHTML = "", m2.innerHTML = "";
          null !== f2 && (a2[e2].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = l2.config.tooltip.z.title, a2[e2].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== f2 ? f2 : "");
          o2 && p2[0] && (null == c2 || l2.globals.ancillaryCollapsedSeriesIndices.indexOf(e2) > -1 || l2.globals.collapsedSeriesIndices.indexOf(e2) > -1 ? p2[0].parentNode.style.display = "none" : p2[0].parentNode.style.display = l2.config.tooltip.items.display);
        } }, { key: "toggleActiveInactiveSeries", value: function(t3) {
          var e2 = this.w;
          if (t3)
            this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
          else {
            this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
            var i2 = e2.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
            i2 && (i2.classList.add("apexcharts-active"), i2.style.display = e2.config.tooltip.items.display);
          }
        } }, { key: "getValuesToPrint", value: function(t3) {
          var e2 = t3.i, i2 = t3.j, a2 = this.w, s2 = this.ctx.series.filteredSeriesX(), r2 = "", o2 = "", n2 = null, l2 = null, h2 = { series: a2.globals.series, seriesIndex: e2, dataPointIndex: i2, w: a2 }, c2 = a2.globals.ttZFormatter;
          null === i2 ? l2 = a2.globals.series[e2] : a2.globals.isXNumeric && "treemap" !== a2.config.chart.type ? (r2 = s2[e2][i2], 0 === s2[e2].length && (r2 = s2[this.tooltipUtil.getFirstActiveXArray(s2)][i2])) : r2 = void 0 !== a2.globals.labels[i2] ? a2.globals.labels[i2] : "";
          var d2 = r2;
          a2.globals.isXNumeric && "datetime" === a2.config.xaxis.type ? r2 = new W(this.ctx).xLabelFormat(a2.globals.ttKeyFormatter, d2, d2, { i: void 0, dateFormatter: new T(this.ctx).formatDate, w: this.w }) : r2 = a2.globals.isBarHorizontal ? a2.globals.yLabelFormatters[0](d2, h2) : a2.globals.xLabelFormatter(d2, h2);
          return void 0 !== a2.config.tooltip.x.formatter && (r2 = a2.globals.ttKeyFormatter(d2, h2)), a2.globals.seriesZ.length > 0 && a2.globals.seriesZ[e2].length > 0 && (n2 = c2(a2.globals.seriesZ[e2][i2], a2)), o2 = "function" == typeof a2.config.xaxis.tooltip.formatter ? a2.globals.xaxisTooltipFormatter(d2, h2) : r2, { val: Array.isArray(l2) ? l2.join(" ") : l2, xVal: Array.isArray(r2) ? r2.join(" ") : r2, xAxisTTVal: Array.isArray(o2) ? o2.join(" ") : o2, zVal: n2 };
        } }, { key: "handleCustomTooltip", value: function(t3) {
          var e2 = t3.i, i2 = t3.j, a2 = t3.y1, s2 = t3.y2, r2 = t3.w, o2 = this.ttCtx.getElTooltip(), n2 = r2.config.tooltip.custom;
          Array.isArray(n2) && n2[e2] && (n2 = n2[e2]), o2.innerHTML = n2({ ctx: this.ctx, series: r2.globals.series, seriesIndex: e2, dataPointIndex: i2, y1: a2, y2: s2, w: r2 });
        } }]), t2;
      }();
      var ut = function() {
        function t2(e2) {
          a(this, t2), this.ttCtx = e2, this.ctx = e2.ctx, this.w = e2.w;
        }
        return r(t2, [{ key: "moveXCrosshairs", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, i2 = this.ttCtx, a2 = this.w, s2 = i2.getElXCrosshairs(), r2 = t3 - i2.xcrosshairsWidth / 2, o2 = a2.globals.labels.slice().length;
          if (null !== e2 && (r2 = a2.globals.gridWidth / o2 * e2), null === s2 || a2.globals.isBarHorizontal || (s2.setAttribute("x", r2), s2.setAttribute("x1", r2), s2.setAttribute("x2", r2), s2.setAttribute("y2", a2.globals.gridHeight), s2.classList.add("apexcharts-active")), r2 < 0 && (r2 = 0), r2 > a2.globals.gridWidth && (r2 = a2.globals.gridWidth), i2.isXAxisTooltipEnabled) {
            var n2 = r2;
            "tickWidth" !== a2.config.xaxis.crosshairs.width && "barWidth" !== a2.config.xaxis.crosshairs.width || (n2 = r2 + i2.xcrosshairsWidth / 2), this.moveXAxisTooltip(n2);
          }
        } }, { key: "moveYCrosshairs", value: function(t3) {
          var e2 = this.ttCtx;
          null !== e2.ycrosshairs && m.setAttrs(e2.ycrosshairs, { y1: t3, y2: t3 }), null !== e2.ycrosshairsHidden && m.setAttrs(e2.ycrosshairsHidden, { y1: t3, y2: t3 });
        } }, { key: "moveXAxisTooltip", value: function(t3) {
          var e2 = this.w, i2 = this.ttCtx;
          if (null !== i2.xaxisTooltip && 0 !== i2.xcrosshairsWidth) {
            i2.xaxisTooltip.classList.add("apexcharts-active");
            var a2 = i2.xaxisOffY + e2.config.xaxis.tooltip.offsetY + e2.globals.translateY + 1 + e2.config.xaxis.offsetY;
            if (t3 -= i2.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t3)) {
              t3 += e2.globals.translateX;
              var s2;
              s2 = new m(this.ctx).getTextRects(i2.xaxisTooltipText.innerHTML), i2.xaxisTooltipText.style.minWidth = s2.width + "px", i2.xaxisTooltip.style.left = t3 + "px", i2.xaxisTooltip.style.top = a2 + "px";
            }
          }
        } }, { key: "moveYAxisTooltip", value: function(t3) {
          var e2 = this.w, i2 = this.ttCtx;
          null === i2.yaxisTTEls && (i2.yaxisTTEls = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
          var a2 = parseInt(i2.ycrosshairsHidden.getAttribute("y1"), 10), s2 = e2.globals.translateY + a2, r2 = i2.yaxisTTEls[t3].getBoundingClientRect().height, o2 = e2.globals.translateYAxisX[t3] - 2;
          e2.config.yaxis[t3].opposite && (o2 -= 26), s2 -= r2 / 2, -1 === e2.globals.ignoreYAxisIndexes.indexOf(t3) ? (i2.yaxisTTEls[t3].classList.add("apexcharts-active"), i2.yaxisTTEls[t3].style.top = s2 + "px", i2.yaxisTTEls[t3].style.left = o2 + e2.config.yaxis[t3].tooltip.offsetX + "px") : i2.yaxisTTEls[t3].classList.remove("apexcharts-active");
        } }, { key: "moveTooltip", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a2 = this.w, s2 = this.ttCtx, r2 = s2.getElTooltip(), o2 = s2.tooltipRect, n2 = null !== i2 ? parseFloat(i2) : 1, l2 = parseFloat(t3) + n2 + 5, h2 = parseFloat(e2) + n2 / 2;
          if (l2 > a2.globals.gridWidth / 2 && (l2 = l2 - o2.ttWidth - n2 - 10), l2 > a2.globals.gridWidth - o2.ttWidth - 10 && (l2 = a2.globals.gridWidth - o2.ttWidth), l2 < -20 && (l2 = -20), a2.config.tooltip.followCursor) {
            var c2 = s2.getElGrid(), d2 = c2.getBoundingClientRect();
            h2 = s2.e.clientY + a2.globals.translateY - d2.top - o2.ttHeight / 2;
          } else
            a2.globals.isBarHorizontal || (o2.ttHeight / 2 + h2 > a2.globals.gridHeight && (h2 = a2.globals.gridHeight - o2.ttHeight + a2.globals.translateY), h2 < 0 && (h2 = 0));
          isNaN(l2) || (l2 += a2.globals.translateX, r2.style.left = l2 + "px", r2.style.top = h2 + "px");
        } }, { key: "moveMarkers", value: function(t3, e2) {
          var i2 = this.w, a2 = this.ttCtx;
          if (i2.globals.markers.size[t3] > 0)
            for (var s2 = i2.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t3, "'] .apexcharts-marker")), r2 = 0; r2 < s2.length; r2++)
              parseInt(s2[r2].getAttribute("rel"), 10) === e2 && (a2.marker.resetPointsSize(), a2.marker.enlargeCurrentPoint(e2, s2[r2]));
          else
            a2.marker.resetPointsSize(), this.moveDynamicPointOnHover(e2, t3);
        } }, { key: "moveDynamicPointOnHover", value: function(t3, e2) {
          var i2, a2, s2 = this.w, r2 = this.ttCtx, o2 = s2.globals.pointsArray, n2 = r2.tooltipUtil.getHoverMarkerSize(e2), l2 = s2.config.series[e2].type;
          if (!l2 || "column" !== l2 && "candlestick" !== l2 && "boxPlot" !== l2) {
            i2 = o2[e2][t3][0], a2 = o2[e2][t3][1] ? o2[e2][t3][1] : 0;
            var h2 = s2.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e2, "'] .apexcharts-series-markers circle"));
            h2 && a2 < s2.globals.gridHeight && a2 > 0 && (h2.setAttribute("r", n2), h2.setAttribute("cx", i2), h2.setAttribute("cy", a2)), this.moveXCrosshairs(i2), r2.fixedTooltip || this.moveTooltip(i2, a2, n2);
          }
        } }, { key: "moveDynamicPointsOnHover", value: function(t3) {
          var e2, i2 = this.ttCtx, a2 = i2.w, s2 = 0, r2 = 0, o2 = a2.globals.pointsArray;
          e2 = new N(this.ctx).getActiveConfigSeriesIndex("asc", ["line", "area", "scatter", "bubble"]);
          var n2 = i2.tooltipUtil.getHoverMarkerSize(e2);
          o2[e2] && (s2 = o2[e2][t3][0], r2 = o2[e2][t3][1]);
          var l2 = i2.tooltipUtil.getAllMarkers();
          if (null !== l2)
            for (var h2 = 0; h2 < a2.globals.series.length; h2++) {
              var c2 = o2[h2];
              if (a2.globals.comboCharts && void 0 === c2 && l2.splice(h2, 0, null), c2 && c2.length) {
                var d2 = o2[h2][t3][1], g2 = void 0;
                if (l2[h2].setAttribute("cx", s2), "rangeArea" === a2.config.chart.type && !a2.globals.comboCharts) {
                  var u2 = t3 + a2.globals.series[h2].length;
                  g2 = o2[h2][u2][1], d2 -= Math.abs(d2 - g2) / 2;
                }
                null !== d2 && !isNaN(d2) && d2 < a2.globals.gridHeight + n2 && d2 + n2 > 0 ? (l2[h2] && l2[h2].setAttribute("r", n2), l2[h2] && l2[h2].setAttribute("cy", d2)) : l2[h2] && l2[h2].setAttribute("r", 0);
              }
            }
          if (this.moveXCrosshairs(s2), !i2.fixedTooltip) {
            var f2 = r2 || a2.globals.gridHeight;
            this.moveTooltip(s2, f2, n2);
          }
        } }, { key: "moveStickyTooltipOverBars", value: function(t3) {
          var e2 = this.w, i2 = this.ttCtx, a2 = e2.globals.columnSeries ? e2.globals.columnSeries.length : e2.globals.series.length, s2 = a2 >= 2 && a2 % 2 == 0 ? Math.floor(a2 / 2) : Math.floor(a2 / 2) + 1;
          e2.globals.isBarHorizontal && (s2 = new N(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
          var r2 = e2.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(s2, "'] path[j='").concat(t3, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(s2, "'] path[j='").concat(t3, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(s2, "'] path[j='").concat(t3, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(s2, "'] path[j='").concat(t3, "']")), o2 = r2 ? parseFloat(r2.getAttribute("cx")) : 0, n2 = r2 ? parseFloat(r2.getAttribute("cy")) : 0, l2 = r2 ? parseFloat(r2.getAttribute("barWidth")) : 0, h2 = r2 ? parseFloat(r2.getAttribute("barHeight")) : 0, c2 = i2.getElGrid().getBoundingClientRect(), d2 = r2.classList.contains("apexcharts-candlestick-area") || r2.classList.contains("apexcharts-boxPlot-area");
          if (e2.globals.isXNumeric ? (r2 && !d2 && (o2 -= a2 % 2 != 0 ? l2 / 2 : 0), r2 && d2 && e2.globals.comboCharts && (o2 -= l2 / 2)) : e2.globals.isBarHorizontal || (o2 = i2.xAxisTicksPositions[t3 - 1] + i2.dataPointsDividedWidth / 2, isNaN(o2) && (o2 = i2.xAxisTicksPositions[t3] - i2.dataPointsDividedWidth / 2)), e2.globals.isBarHorizontal ? (n2 > e2.globals.gridHeight / 2 && (n2 -= i2.tooltipRect.ttHeight), (n2 = n2 + e2.config.grid.padding.top + h2 / 3) + h2 > e2.globals.gridHeight && (n2 = e2.globals.gridHeight - h2)) : e2.config.tooltip.followCursor ? n2 = i2.e.clientY - c2.top - i2.tooltipRect.ttHeight / 2 : n2 + i2.tooltipRect.ttHeight + 15 > e2.globals.gridHeight && (n2 = e2.globals.gridHeight), n2 < -10 && (n2 = -10), e2.globals.isBarHorizontal || this.moveXCrosshairs(o2), !i2.fixedTooltip) {
            var g2 = n2 || e2.globals.gridHeight;
            this.moveTooltip(o2, g2);
          }
        } }]), t2;
      }();
      var ft = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ttCtx = e2, this.ctx = e2.ctx, this.tooltipPosition = new ut(e2);
        }
        return r(t2, [{ key: "drawDynamicPoints", value: function() {
          var t3 = this.w, e2 = new m(this.ctx), i2 = new R(this.ctx), a2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
          a2 = u(a2), t3.config.chart.stacked && a2.sort(function(t4, e3) {
            return parseFloat(t4.getAttribute("data:realIndex")) - parseFloat(e3.getAttribute("data:realIndex"));
          });
          for (var s2 = 0; s2 < a2.length; s2++) {
            var r2 = a2[s2].querySelector(".apexcharts-series-markers-wrap");
            if (null !== r2) {
              var o2 = void 0, n2 = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
              "line" !== t3.config.chart.type && "area" !== t3.config.chart.type || t3.globals.comboCharts || t3.config.tooltip.intersect || (n2 += " no-pointer-events");
              var l2 = i2.getMarkerConfig({ cssClass: n2, seriesIndex: Number(r2.getAttribute("data:realIndex")) });
              (o2 = e2.drawMarker(0, 0, l2)).node.setAttribute("default-marker-size", 0);
              var h2 = document.createElementNS(t3.globals.SVGNS, "g");
              h2.classList.add("apexcharts-series-markers"), h2.appendChild(o2.node), r2.appendChild(h2);
            }
          }
        } }, { key: "enlargeCurrentPoint", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, a2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, s2 = this.w;
          "bubble" !== s2.config.chart.type && this.newPointSize(t3, e2);
          var r2 = e2.getAttribute("cx"), o2 = e2.getAttribute("cy");
          if (null !== i2 && null !== a2 && (r2 = i2, o2 = a2), this.tooltipPosition.moveXCrosshairs(r2), !this.fixedTooltip) {
            if ("radar" === s2.config.chart.type) {
              var n2 = this.ttCtx.getElGrid(), l2 = n2.getBoundingClientRect();
              r2 = this.ttCtx.e.clientX - l2.left;
            }
            this.tooltipPosition.moveTooltip(r2, o2, s2.config.markers.hover.size);
          }
        } }, { key: "enlargePoints", value: function(t3) {
          for (var e2 = this.w, i2 = this, a2 = this.ttCtx, s2 = t3, r2 = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), o2 = e2.config.markers.hover.size, n2 = 0; n2 < r2.length; n2++) {
            var l2 = r2[n2].getAttribute("rel"), h2 = r2[n2].getAttribute("index");
            if (void 0 === o2 && (o2 = e2.globals.markers.size[h2] + e2.config.markers.hover.sizeOffset), s2 === parseInt(l2, 10)) {
              i2.newPointSize(s2, r2[n2]);
              var c2 = r2[n2].getAttribute("cx"), d2 = r2[n2].getAttribute("cy");
              i2.tooltipPosition.moveXCrosshairs(c2), a2.fixedTooltip || i2.tooltipPosition.moveTooltip(c2, d2, o2);
            } else
              i2.oldPointSize(r2[n2]);
          }
        } }, { key: "newPointSize", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.config.markers.hover.size, s2 = 0 === t3 ? e2.parentNode.firstChild : e2.parentNode.lastChild;
          if ("0" !== s2.getAttribute("default-marker-size")) {
            var r2 = parseInt(s2.getAttribute("index"), 10);
            void 0 === a2 && (a2 = i2.globals.markers.size[r2] + i2.config.markers.hover.sizeOffset), a2 < 0 && (a2 = 0), s2.setAttribute("r", a2);
          }
        } }, { key: "oldPointSize", value: function(t3) {
          var e2 = parseFloat(t3.getAttribute("default-marker-size"));
          t3.setAttribute("r", e2);
        } }, { key: "resetPointsSize", value: function() {
          for (var t3 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e2 = 0; e2 < t3.length; e2++) {
            var i2 = parseFloat(t3[e2].getAttribute("default-marker-size"));
            x.isNumber(i2) && i2 >= 0 ? t3[e2].setAttribute("r", i2) : t3[e2].setAttribute("r", 0);
          }
        } }]), t2;
      }();
      var pt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ttCtx = e2;
        }
        return r(t2, [{ key: "getAttr", value: function(t3, e2) {
          return parseFloat(t3.target.getAttribute(e2));
        } }, { key: "handleHeatTreeTooltip", value: function(t3) {
          var e2 = t3.e, i2 = t3.opt, a2 = t3.x, s2 = t3.y, r2 = t3.type, o2 = this.ttCtx, n2 = this.w;
          if (e2.target.classList.contains("apexcharts-".concat(r2, "-rect"))) {
            var l2 = this.getAttr(e2, "i"), h2 = this.getAttr(e2, "j"), c2 = this.getAttr(e2, "cx"), d2 = this.getAttr(e2, "cy"), g2 = this.getAttr(e2, "width"), u2 = this.getAttr(e2, "height");
            if (o2.tooltipLabels.drawSeriesTexts({ ttItems: i2.ttItems, i: l2, j: h2, shared: false, e: e2 }), n2.globals.capturedSeriesIndex = l2, n2.globals.capturedDataPointIndex = h2, a2 = c2 + o2.tooltipRect.ttWidth / 2 + g2, s2 = d2 + o2.tooltipRect.ttHeight / 2 - u2 / 2, o2.tooltipPosition.moveXCrosshairs(c2 + g2 / 2), a2 > n2.globals.gridWidth / 2 && (a2 = c2 - o2.tooltipRect.ttWidth / 2 + g2), o2.w.config.tooltip.followCursor) {
              var f2 = n2.globals.dom.elWrap.getBoundingClientRect();
              a2 = n2.globals.clientX - f2.left - (a2 > n2.globals.gridWidth / 2 ? o2.tooltipRect.ttWidth : 0), s2 = n2.globals.clientY - f2.top - (s2 > n2.globals.gridHeight / 2 ? o2.tooltipRect.ttHeight : 0);
            }
          }
          return { x: a2, y: s2 };
        } }, { key: "handleMarkerTooltip", value: function(t3) {
          var e2, i2, a2 = t3.e, s2 = t3.opt, r2 = t3.x, o2 = t3.y, n2 = this.w, l2 = this.ttCtx;
          if (a2.target.classList.contains("apexcharts-marker")) {
            var h2 = parseInt(s2.paths.getAttribute("cx"), 10), c2 = parseInt(s2.paths.getAttribute("cy"), 10), d2 = parseFloat(s2.paths.getAttribute("val"));
            if (i2 = parseInt(s2.paths.getAttribute("rel"), 10), e2 = parseInt(s2.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, l2.intersect) {
              var g2 = x.findAncestor(s2.paths, "apexcharts-series");
              g2 && (e2 = parseInt(g2.getAttribute("data:realIndex"), 10));
            }
            if (l2.tooltipLabels.drawSeriesTexts({ ttItems: s2.ttItems, i: e2, j: i2, shared: !l2.showOnIntersect && n2.config.tooltip.shared, e: a2 }), "mouseup" === a2.type && l2.markerClick(a2, e2, i2), n2.globals.capturedSeriesIndex = e2, n2.globals.capturedDataPointIndex = i2, r2 = h2, o2 = c2 + n2.globals.translateY - 1.4 * l2.tooltipRect.ttHeight, l2.w.config.tooltip.followCursor) {
              var u2 = l2.getElGrid().getBoundingClientRect();
              o2 = l2.e.clientY + n2.globals.translateY - u2.top;
            }
            d2 < 0 && (o2 = c2), l2.marker.enlargeCurrentPoint(i2, s2.paths, r2, o2);
          }
          return { x: r2, y: o2 };
        } }, { key: "handleBarTooltip", value: function(t3) {
          var e2, i2, a2 = t3.e, s2 = t3.opt, r2 = this.w, o2 = this.ttCtx, n2 = o2.getElTooltip(), l2 = 0, h2 = 0, c2 = 0, d2 = this.getBarTooltipXY({ e: a2, opt: s2 });
          e2 = d2.i;
          var g2 = d2.barHeight, u2 = d2.j;
          r2.globals.capturedSeriesIndex = e2, r2.globals.capturedDataPointIndex = u2, r2.globals.isBarHorizontal && o2.tooltipUtil.hasBars() || !r2.config.tooltip.shared ? (h2 = d2.x, c2 = d2.y, i2 = Array.isArray(r2.config.stroke.width) ? r2.config.stroke.width[e2] : r2.config.stroke.width, l2 = h2) : r2.globals.comboCharts || r2.config.tooltip.shared || (l2 /= 2), isNaN(c2) ? c2 = r2.globals.svgHeight - o2.tooltipRect.ttHeight : c2 < 0 && (c2 = 0);
          var f2 = parseInt(s2.paths.parentNode.getAttribute("data:realIndex"), 10), p2 = r2.globals.isMultipleYAxis ? r2.config.yaxis[f2] && r2.config.yaxis[f2].reversed : r2.config.yaxis[0].reversed;
          if (h2 + o2.tooltipRect.ttWidth > r2.globals.gridWidth && !p2 ? h2 -= o2.tooltipRect.ttWidth : h2 < 0 && (h2 = 0), o2.w.config.tooltip.followCursor) {
            var x2 = o2.getElGrid().getBoundingClientRect();
            c2 = o2.e.clientY - x2.top;
          }
          null === o2.tooltip && (o2.tooltip = r2.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), r2.config.tooltip.shared || (r2.globals.comboBarCount > 0 ? o2.tooltipPosition.moveXCrosshairs(l2 + i2 / 2) : o2.tooltipPosition.moveXCrosshairs(l2)), !o2.fixedTooltip && (!r2.config.tooltip.shared || r2.globals.isBarHorizontal && o2.tooltipUtil.hasBars()) && (p2 && (h2 -= o2.tooltipRect.ttWidth) < 0 && (h2 = 0), !p2 || r2.globals.isBarHorizontal && o2.tooltipUtil.hasBars() || (c2 = c2 + g2 - 2 * (r2.globals.series[e2][u2] < 0 ? g2 : 0)), o2.tooltipRect.ttHeight + c2 > r2.globals.gridHeight ? c2 = r2.globals.gridHeight - o2.tooltipRect.ttHeight + r2.globals.translateY : (c2 = c2 + r2.globals.translateY - o2.tooltipRect.ttHeight / 2) < 0 && (c2 = 0), n2.style.left = h2 + r2.globals.translateX + "px", n2.style.top = c2 + "px");
        } }, { key: "getBarTooltipXY", value: function(t3) {
          var e2 = t3.e, i2 = t3.opt, a2 = this.w, s2 = null, r2 = this.ttCtx, o2 = 0, n2 = 0, l2 = 0, h2 = 0, c2 = 0, d2 = e2.target.classList;
          if (d2.contains("apexcharts-bar-area") || d2.contains("apexcharts-candlestick-area") || d2.contains("apexcharts-boxPlot-area") || d2.contains("apexcharts-rangebar-area")) {
            var g2 = e2.target, u2 = g2.getBoundingClientRect(), f2 = i2.elGrid.getBoundingClientRect(), p2 = u2.height;
            c2 = u2.height;
            var x2 = u2.width, b2 = parseInt(g2.getAttribute("cx"), 10), v2 = parseInt(g2.getAttribute("cy"), 10);
            h2 = parseFloat(g2.getAttribute("barWidth"));
            var m2 = "touchmove" === e2.type ? e2.touches[0].clientX : e2.clientX;
            s2 = parseInt(g2.getAttribute("j"), 10), o2 = parseInt(g2.parentNode.getAttribute("rel"), 10) - 1;
            var y2 = g2.getAttribute("data-range-y1"), w2 = g2.getAttribute("data-range-y2");
            a2.globals.comboCharts && (o2 = parseInt(g2.parentNode.getAttribute("data:realIndex"), 10)), r2.tooltipLabels.drawSeriesTexts({ ttItems: i2.ttItems, i: o2, j: s2, y1: y2 ? parseInt(y2, 10) : null, y2: w2 ? parseInt(w2, 10) : null, shared: !r2.showOnIntersect && a2.config.tooltip.shared, e: e2 }), a2.config.tooltip.followCursor ? a2.globals.isBarHorizontal ? (n2 = m2 - f2.left + 15, l2 = v2 - r2.dataPointsDividedHeight + p2 / 2 - r2.tooltipRect.ttHeight / 2) : (n2 = a2.globals.isXNumeric ? b2 - x2 / 2 : b2 - r2.dataPointsDividedWidth + x2 / 2, l2 = e2.clientY - f2.top - r2.tooltipRect.ttHeight / 2 - 15) : a2.globals.isBarHorizontal ? ((n2 = b2) < r2.xyRatios.baseLineInvertedY && (n2 = b2 - r2.tooltipRect.ttWidth), l2 = v2 - r2.dataPointsDividedHeight + p2 / 2 - r2.tooltipRect.ttHeight / 2) : (n2 = a2.globals.isXNumeric ? b2 - x2 / 2 : b2 - r2.dataPointsDividedWidth + x2 / 2, l2 = v2);
          }
          return { x: n2, y: l2, barHeight: c2, barWidth: h2, i: o2, j: s2 };
        } }]), t2;
      }();
      var xt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.ttCtx = e2;
        }
        return r(t2, [{ key: "drawXaxisTooltip", value: function() {
          var t3 = this.w, e2 = this.ttCtx, i2 = "bottom" === t3.config.xaxis.position;
          e2.xaxisOffY = i2 ? t3.globals.gridHeight + 1 : -t3.globals.xAxisHeight - t3.config.xaxis.axisTicks.height + 3;
          var a2 = i2 ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top", s2 = t3.globals.dom.elWrap;
          e2.isXAxisTooltipEnabled && (null === t3.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e2.xaxisTooltip = document.createElement("div"), e2.xaxisTooltip.setAttribute("class", a2 + " apexcharts-theme-" + t3.config.tooltip.theme), s2.appendChild(e2.xaxisTooltip), e2.xaxisTooltipText = document.createElement("div"), e2.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e2.xaxisTooltipText.style.fontFamily = t3.config.xaxis.tooltip.style.fontFamily || t3.config.chart.fontFamily, e2.xaxisTooltipText.style.fontSize = t3.config.xaxis.tooltip.style.fontSize, e2.xaxisTooltip.appendChild(e2.xaxisTooltipText)));
        } }, { key: "drawYaxisTooltip", value: function() {
          for (var t3 = this.w, e2 = this.ttCtx, i2 = function(i3) {
            var a3 = t3.config.yaxis[i3].opposite || t3.config.yaxis[i3].crosshairs.opposite;
            e2.yaxisOffX = a3 ? t3.globals.gridWidth + 1 : 1;
            var s2 = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i3, a3 ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left");
            t3.globals.yAxisSameScaleIndices.map(function(e3, a4) {
              e3.map(function(e4, a5) {
                a5 === i3 && (s2 += t3.config.yaxis[a5].show ? " " : " apexcharts-yaxistooltip-hidden");
              });
            });
            var r2 = t3.globals.dom.elWrap;
            null === t3.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i3)) && (e2.yaxisTooltip = document.createElement("div"), e2.yaxisTooltip.setAttribute("class", s2 + " apexcharts-theme-" + t3.config.tooltip.theme), r2.appendChild(e2.yaxisTooltip), 0 === i3 && (e2.yaxisTooltipText = []), e2.yaxisTooltipText[i3] = document.createElement("div"), e2.yaxisTooltipText[i3].classList.add("apexcharts-yaxistooltip-text"), e2.yaxisTooltip.appendChild(e2.yaxisTooltipText[i3]));
          }, a2 = 0; a2 < t3.config.yaxis.length; a2++)
            i2(a2);
        } }, { key: "setXCrosshairWidth", value: function() {
          var t3 = this.w, e2 = this.ttCtx, i2 = e2.getElXCrosshairs();
          if (e2.xcrosshairsWidth = parseInt(t3.config.xaxis.crosshairs.width, 10), t3.globals.comboCharts) {
            var a2 = t3.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
            if (null !== a2 && "barWidth" === t3.config.xaxis.crosshairs.width) {
              var s2 = parseFloat(a2.getAttribute("barWidth"));
              e2.xcrosshairsWidth = s2;
            } else if ("tickWidth" === t3.config.xaxis.crosshairs.width) {
              var r2 = t3.globals.labels.length;
              e2.xcrosshairsWidth = t3.globals.gridWidth / r2;
            }
          } else if ("tickWidth" === t3.config.xaxis.crosshairs.width) {
            var o2 = t3.globals.labels.length;
            e2.xcrosshairsWidth = t3.globals.gridWidth / o2;
          } else if ("barWidth" === t3.config.xaxis.crosshairs.width) {
            var n2 = t3.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
            if (null !== n2) {
              var l2 = parseFloat(n2.getAttribute("barWidth"));
              e2.xcrosshairsWidth = l2;
            } else
              e2.xcrosshairsWidth = 1;
          }
          t3.globals.isBarHorizontal && (e2.xcrosshairsWidth = 0), null !== i2 && e2.xcrosshairsWidth > 0 && i2.setAttribute("width", e2.xcrosshairsWidth);
        } }, { key: "handleYCrosshair", value: function() {
          var t3 = this.w, e2 = this.ttCtx;
          e2.ycrosshairs = t3.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e2.ycrosshairsHidden = t3.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
        } }, { key: "drawYaxisTooltipText", value: function(t3, e2, i2) {
          var a2 = this.ttCtx, s2 = this.w, r2 = s2.globals.yLabelFormatters[t3];
          if (a2.yaxisTooltips[t3]) {
            var o2 = a2.getElGrid().getBoundingClientRect(), n2 = (e2 - o2.top) * i2.yRatio[t3], l2 = s2.globals.maxYArr[t3] - s2.globals.minYArr[t3], h2 = s2.globals.minYArr[t3] + (l2 - n2);
            a2.tooltipPosition.moveYCrosshairs(e2 - o2.top), a2.yaxisTooltipText[t3].innerHTML = r2(h2), a2.tooltipPosition.moveYAxisTooltip(t3);
          }
        } }]), t2;
      }();
      var bt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.tConfig = i2.config.tooltip, this.tooltipUtil = new dt(this), this.tooltipLabels = new gt(this), this.tooltipPosition = new ut(this), this.marker = new ft(this), this.intersect = new pt(this), this.axesTooltip = new xt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !i2.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();
        }
        return r(t2, [{ key: "getElTooltip", value: function(t3) {
          return t3 || (t3 = this), t3.w.globals.dom.baseEl ? t3.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip") : null;
        } }, { key: "getElXCrosshairs", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
        } }, { key: "getElGrid", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
        } }, { key: "drawTooltip", value: function(t3) {
          var e2 = this.w;
          this.xyRatios = t3, this.isXAxisTooltipEnabled = e2.config.xaxis.tooltip.enabled && e2.globals.axisCharts, this.yaxisTooltips = e2.config.yaxis.map(function(t4, i3) {
            return !!(t4.show && t4.tooltip.enabled && e2.globals.axisCharts);
          }), this.allTooltipSeriesGroups = [], e2.globals.axisCharts || (this.showTooltipTitle = false);
          var i2 = document.createElement("div");
          if (i2.classList.add("apexcharts-tooltip"), e2.config.tooltip.cssClass && i2.classList.add(e2.config.tooltip.cssClass), i2.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e2.globals.dom.elWrap.appendChild(i2), e2.globals.axisCharts) {
            this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
            var a2 = new G(this.ctx);
            this.xAxisTicksPositions = a2.getXAxisTicksPositions();
          }
          if (!e2.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e2.config.chart.type || this.tConfig.shared || (this.showOnIntersect = true), 0 !== e2.config.markers.size && 0 !== e2.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e2.globals.collapsedSeries.length !== e2.globals.series.length) {
            this.dataPointsDividedHeight = e2.globals.gridHeight / e2.globals.dataPoints, this.dataPointsDividedWidth = e2.globals.gridWidth / e2.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e2.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i2.appendChild(this.tooltipTitle));
            var s2 = e2.globals.series.length;
            (e2.globals.xyCharts || e2.globals.comboCharts) && this.tConfig.shared && (s2 = this.showOnIntersect ? 1 : e2.globals.series.length), this.legendLabels = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(s2), this.addSVGEvents();
          }
        } }, { key: "createTTElements", value: function(t3) {
          for (var e2 = this, i2 = this.w, a2 = [], s2 = this.getElTooltip(), r2 = function(r3) {
            var o3 = document.createElement("div");
            o3.classList.add("apexcharts-tooltip-series-group"), o3.style.order = i2.config.tooltip.inverseOrder ? t3 - r3 : r3 + 1, e2.tConfig.shared && e2.tConfig.enabledOnSeries && Array.isArray(e2.tConfig.enabledOnSeries) && e2.tConfig.enabledOnSeries.indexOf(r3) < 0 && o3.classList.add("apexcharts-tooltip-series-group-hidden");
            var n2 = document.createElement("span");
            n2.classList.add("apexcharts-tooltip-marker"), n2.style.backgroundColor = i2.globals.colors[r3], o3.appendChild(n2);
            var l2 = document.createElement("div");
            l2.classList.add("apexcharts-tooltip-text"), l2.style.fontFamily = e2.tConfig.style.fontFamily || i2.config.chart.fontFamily, l2.style.fontSize = e2.tConfig.style.fontSize, ["y", "goals", "z"].forEach(function(t4) {
              var e3 = document.createElement("div");
              e3.classList.add("apexcharts-tooltip-".concat(t4, "-group"));
              var i3 = document.createElement("span");
              i3.classList.add("apexcharts-tooltip-text-".concat(t4, "-label")), e3.appendChild(i3);
              var a3 = document.createElement("span");
              a3.classList.add("apexcharts-tooltip-text-".concat(t4, "-value")), e3.appendChild(a3), l2.appendChild(e3);
            }), o3.appendChild(l2), s2.appendChild(o3), a2.push(o3);
          }, o2 = 0; o2 < t3; o2++)
            r2(o2);
          return a2;
        } }, { key: "addSVGEvents", value: function() {
          var t3 = this.w, e2 = t3.config.chart.type, i2 = this.getElTooltip(), a2 = !("bar" !== e2 && "candlestick" !== e2 && "boxPlot" !== e2 && "rangeBar" !== e2), s2 = "area" === e2 || "line" === e2 || "scatter" === e2 || "bubble" === e2 || "radar" === e2, r2 = t3.globals.dom.Paper.node, o2 = this.getElGrid();
          o2 && (this.seriesBound = o2.getBoundingClientRect());
          var n2, l2 = [], h2 = [], c2 = { hoverArea: r2, elGrid: o2, tooltipEl: i2, tooltipY: l2, tooltipX: h2, ttItems: this.ttItems };
          if (t3.globals.axisCharts && (s2 ? n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : a2 ? n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e2 && "treemap" !== e2 || (n2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), n2 && n2.length))
            for (var d2 = 0; d2 < n2.length; d2++)
              l2.push(n2[d2].getAttribute("cy")), h2.push(n2[d2].getAttribute("cx"));
          if (t3.globals.xyCharts && !this.showOnIntersect || t3.globals.comboCharts && !this.showOnIntersect || a2 && this.tooltipUtil.hasBars() && this.tConfig.shared)
            this.addPathsEventListeners([r2], c2);
          else if (a2 && !t3.globals.comboCharts || s2 && this.showOnIntersect)
            this.addDatapointEventsListeners(c2);
          else if (!t3.globals.axisCharts || "heatmap" === e2 || "treemap" === e2) {
            var g2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
            this.addPathsEventListeners(g2, c2);
          }
          if (this.showOnIntersect) {
            var u2 = t3.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
            u2.length > 0 && this.addPathsEventListeners(u2, c2), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c2);
          }
        } }, { key: "drawFixedTooltipRect", value: function() {
          var t3 = this.w, e2 = this.getElTooltip(), i2 = e2.getBoundingClientRect(), a2 = i2.width + 10, s2 = i2.height + 10, r2 = this.tConfig.fixed.offsetX, o2 = this.tConfig.fixed.offsetY, n2 = this.tConfig.fixed.position.toLowerCase();
          return n2.indexOf("right") > -1 && (r2 = r2 + t3.globals.svgWidth - a2 + 10), n2.indexOf("bottom") > -1 && (o2 = o2 + t3.globals.svgHeight - s2 - 10), e2.style.left = r2 + "px", e2.style.top = o2 + "px", { x: r2, y: o2, ttWidth: a2, ttHeight: s2 };
        } }, { key: "addDatapointEventsListeners", value: function(t3) {
          var e2 = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
          this.addPathsEventListeners(e2, t3);
        } }, { key: "addPathsEventListeners", value: function(t3, e2) {
          for (var i2 = this, a2 = function(a3) {
            var s3 = { paths: t3[a3], tooltipEl: e2.tooltipEl, tooltipY: e2.tooltipY, tooltipX: e2.tooltipX, elGrid: e2.elGrid, hoverArea: e2.hoverArea, ttItems: e2.ttItems };
            ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function(e3) {
              return t3[a3].addEventListener(e3, i2.onSeriesHover.bind(i2, s3), { capture: false, passive: true });
            });
          }, s2 = 0; s2 < t3.length; s2++)
            a2(s2);
        } }, { key: "onSeriesHover", value: function(t3, e2) {
          var i2 = this, a2 = Date.now() - this.lastHoverTime;
          a2 >= 100 ? this.seriesHover(t3, e2) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function() {
            i2.seriesHover(t3, e2);
          }, 100 - a2));
        } }, { key: "seriesHover", value: function(t3, e2) {
          var i2 = this;
          this.lastHoverTime = Date.now();
          var a2 = [], s2 = this.w;
          s2.config.chart.group && (a2 = this.ctx.getGroupedCharts()), s2.globals.axisCharts && (s2.globals.minX === -1 / 0 && s2.globals.maxX === 1 / 0 || 0 === s2.globals.dataPoints) || (a2.length ? a2.forEach(function(a3) {
            var s3 = i2.getElTooltip(a3), r2 = { paths: t3.paths, tooltipEl: s3, tooltipY: t3.tooltipY, tooltipX: t3.tooltipX, elGrid: t3.elGrid, hoverArea: t3.hoverArea, ttItems: a3.w.globals.tooltip.ttItems };
            a3.w.globals.minX === i2.w.globals.minX && a3.w.globals.maxX === i2.w.globals.maxX && a3.w.globals.tooltip.seriesHoverByContext({ chartCtx: a3, ttCtx: a3.w.globals.tooltip, opt: r2, e: e2 });
          }) : this.seriesHoverByContext({ chartCtx: this.ctx, ttCtx: this.w.globals.tooltip, opt: t3, e: e2 }));
        } }, { key: "seriesHoverByContext", value: function(t3) {
          var e2 = t3.chartCtx, i2 = t3.ttCtx, a2 = t3.opt, s2 = t3.e, r2 = e2.w, o2 = this.getElTooltip();
          if (o2) {
            if (i2.tooltipRect = { x: 0, y: 0, ttWidth: o2.getBoundingClientRect().width, ttHeight: o2.getBoundingClientRect().height }, i2.e = s2, i2.tooltipUtil.hasBars() && !r2.globals.comboCharts && !i2.isBarShared) {
              if (this.tConfig.onDatasetHover.highlightDataSeries)
                new N(e2).toggleSeriesOnHover(s2, s2.target.parentNode);
            }
            i2.fixedTooltip && i2.drawFixedTooltipRect(), r2.globals.axisCharts ? i2.axisChartsTooltips({ e: s2, opt: a2, tooltipRect: i2.tooltipRect }) : i2.nonAxisChartsTooltips({ e: s2, opt: a2, tooltipRect: i2.tooltipRect });
          }
        } }, { key: "axisChartsTooltips", value: function(t3) {
          var e2, i2, a2 = t3.e, s2 = t3.opt, r2 = this.w, o2 = s2.elGrid.getBoundingClientRect(), n2 = "touchmove" === a2.type ? a2.touches[0].clientX : a2.clientX, l2 = "touchmove" === a2.type ? a2.touches[0].clientY : a2.clientY;
          if (this.clientY = l2, this.clientX = n2, r2.globals.capturedSeriesIndex = -1, r2.globals.capturedDataPointIndex = -1, l2 < o2.top || l2 > o2.top + o2.height)
            this.handleMouseOut(s2);
          else {
            if (Array.isArray(this.tConfig.enabledOnSeries) && !r2.config.tooltip.shared) {
              var h2 = parseInt(s2.paths.getAttribute("index"), 10);
              if (this.tConfig.enabledOnSeries.indexOf(h2) < 0)
                return void this.handleMouseOut(s2);
            }
            var c2 = this.getElTooltip(), d2 = this.getElXCrosshairs(), g2 = r2.globals.xyCharts || "bar" === r2.config.chart.type && !r2.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r2.globals.comboCharts && this.tooltipUtil.hasBars();
            if ("mousemove" === a2.type || "touchmove" === a2.type || "mouseup" === a2.type) {
              if (r2.globals.collapsedSeries.length + r2.globals.ancillaryCollapsedSeries.length === r2.globals.series.length)
                return;
              null !== d2 && d2.classList.add("apexcharts-active");
              var u2 = this.yaxisTooltips.filter(function(t4) {
                return true === t4;
              });
              if (null !== this.ycrosshairs && u2.length && this.ycrosshairs.classList.add("apexcharts-active"), g2 && !this.showOnIntersect)
                this.handleStickyTooltip(a2, n2, l2, s2);
              else if ("heatmap" === r2.config.chart.type || "treemap" === r2.config.chart.type) {
                var f2 = this.intersect.handleHeatTreeTooltip({ e: a2, opt: s2, x: e2, y: i2, type: r2.config.chart.type });
                e2 = f2.x, i2 = f2.y, c2.style.left = e2 + "px", c2.style.top = i2 + "px";
              } else
                this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({ e: a2, opt: s2 }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({ e: a2, opt: s2, x: e2, y: i2 });
              if (this.yaxisTooltips.length)
                for (var p2 = 0; p2 < r2.config.yaxis.length; p2++)
                  this.axesTooltip.drawYaxisTooltipText(p2, l2, this.xyRatios);
              s2.tooltipEl.classList.add("apexcharts-active");
            } else
              "mouseout" !== a2.type && "touchend" !== a2.type || this.handleMouseOut(s2);
          }
        } }, { key: "nonAxisChartsTooltips", value: function(t3) {
          var e2 = t3.e, i2 = t3.opt, a2 = t3.tooltipRect, s2 = this.w, r2 = i2.paths.getAttribute("rel"), o2 = this.getElTooltip(), n2 = s2.globals.dom.elWrap.getBoundingClientRect();
          if ("mousemove" === e2.type || "touchmove" === e2.type) {
            o2.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({ ttItems: i2.ttItems, i: parseInt(r2, 10) - 1, shared: false });
            var l2 = s2.globals.clientX - n2.left - a2.ttWidth / 2, h2 = s2.globals.clientY - n2.top - a2.ttHeight - 10;
            if (o2.style.left = l2 + "px", o2.style.top = h2 + "px", s2.config.legend.tooltipHoverFormatter) {
              var c2 = r2 - 1, d2 = (0, s2.config.legend.tooltipHoverFormatter)(this.legendLabels[c2].getAttribute("data:default-text"), { seriesIndex: c2, dataPointIndex: c2, w: s2 });
              this.legendLabels[c2].innerHTML = d2;
            }
          } else
            "mouseout" !== e2.type && "touchend" !== e2.type || (o2.classList.remove("apexcharts-active"), s2.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t4) {
              var e3 = t4.getAttribute("data:default-text");
              t4.innerHTML = decodeURIComponent(e3);
            }));
        } }, { key: "handleStickyTooltip", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = this.tooltipUtil.getNearestValues({ context: this, hoverArea: a2.hoverArea, elGrid: a2.elGrid, clientX: e2, clientY: i2 }), o2 = r2.j, n2 = r2.capturedSeries, l2 = a2.elGrid.getBoundingClientRect();
          r2.hoverX < 0 || r2.hoverX > l2.width ? this.handleMouseOut(a2) : null !== n2 ? this.handleStickyCapturedSeries(t3, n2, a2, o2) : (this.tooltipUtil.isXoverlap(o2) || s2.globals.isBarHorizontal) && this.create(t3, this, 0, o2, a2.ttItems);
        } }, { key: "handleStickyCapturedSeries", value: function(t3, e2, i2, a2) {
          var s2 = this.w;
          if (!this.tConfig.shared && null === s2.globals.series[e2][a2])
            return void this.handleMouseOut(i2);
          void 0 !== s2.globals.series[e2][a2] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(a2) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t3, this, e2, a2, i2.ttItems) : this.create(t3, this, e2, a2, i2.ttItems, false) : this.tooltipUtil.isXoverlap(a2) && this.create(t3, this, 0, a2, i2.ttItems);
        } }, { key: "deactivateHoverFilter", value: function() {
          for (var t3 = this.w, e2 = new m(this.ctx), i2 = t3.globals.dom.Paper.select(".apexcharts-bar-area"), a2 = 0; a2 < i2.length; a2++)
            e2.pathMouseLeave(i2[a2]);
        } }, { key: "handleMouseOut", value: function(t3) {
          var e2 = this.w, i2 = this.getElXCrosshairs();
          if (t3.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e2.config.chart.type && this.marker.resetPointsSize(), null !== i2 && i2.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
            null === this.yaxisTTEls && (this.yaxisTTEls = e2.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
            for (var a2 = 0; a2 < this.yaxisTTEls.length; a2++)
              this.yaxisTTEls[a2].classList.remove("apexcharts-active");
          }
          e2.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function(t4) {
            var e3 = t4.getAttribute("data:default-text");
            t4.innerHTML = decodeURIComponent(e3);
          });
        } }, { key: "markerClick", value: function(t3, e2, i2) {
          var a2 = this.w;
          "function" == typeof a2.config.chart.events.markerClick && a2.config.chart.events.markerClick(t3, this.ctx, { seriesIndex: e2, dataPointIndex: i2, w: a2 }), this.ctx.events.fireEvent("markerClick", [t3, this.ctx, { seriesIndex: e2, dataPointIndex: i2, w: a2 }]);
        } }, { key: "create", value: function(t3, e2, i2, a2, s2) {
          var r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, o2 = this.w, n2 = e2;
          "mouseup" === t3.type && this.markerClick(t3, i2, a2), null === r2 && (r2 = this.tConfig.shared);
          var l2 = this.tooltipUtil.hasMarkers(), h2 = this.tooltipUtil.getElBars();
          if (o2.config.legend.tooltipHoverFormatter) {
            var c2 = o2.config.legend.tooltipHoverFormatter, d2 = Array.from(this.legendLabels);
            d2.forEach(function(t4) {
              var e3 = t4.getAttribute("data:default-text");
              t4.innerHTML = decodeURIComponent(e3);
            });
            for (var g2 = 0; g2 < d2.length; g2++) {
              var u2 = d2[g2], f2 = parseInt(u2.getAttribute("i"), 10), p2 = decodeURIComponent(u2.getAttribute("data:default-text")), x2 = c2(p2, { seriesIndex: r2 ? f2 : i2, dataPointIndex: a2, w: o2 });
              if (r2)
                u2.innerHTML = o2.globals.collapsedSeriesIndices.indexOf(f2) < 0 ? x2 : p2;
              else if (u2.innerHTML = f2 === i2 ? x2 : p2, i2 === f2)
                break;
            }
          }
          if (r2) {
            if (n2.tooltipLabels.drawSeriesTexts({ ttItems: s2, i: i2, j: a2, shared: !this.showOnIntersect && this.tConfig.shared }), l2 && (o2.globals.markers.largestSize > 0 ? n2.marker.enlargePoints(a2) : n2.tooltipPosition.moveDynamicPointsOnHover(a2)), this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(h2), this.barSeriesHeight > 0)) {
              var b2 = new m(this.ctx), v2 = o2.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(a2, "']"));
              this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a2);
              for (var y2 = 0; y2 < v2.length; y2++)
                b2.pathMouseEnter(v2[y2]);
            }
          } else
            n2.tooltipLabels.drawSeriesTexts({ shared: false, ttItems: s2, i: i2, j: a2 }), this.tooltipUtil.hasBars() && n2.tooltipPosition.moveStickyTooltipOverBars(a2), l2 && n2.tooltipPosition.moveMarkers(i2, a2);
        } }]), t2;
      }();
      var vt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.barCtx = e2, this.totalFormatter = this.w.config.plotOptions.bar.dataLabels.total.formatter, this.totalFormatter || (this.totalFormatter = this.w.config.dataLabels.formatter);
        }
        return r(t2, [{ key: "handleBarDataLabels", value: function(t3) {
          var e2 = t3.x, i2 = t3.y, a2 = t3.y1, s2 = t3.y2, r2 = t3.i, o2 = t3.j, n2 = t3.realIndex, l2 = t3.series, h2 = t3.barHeight, c2 = t3.barWidth, d2 = t3.barYPosition, g2 = t3.visibleSeries, u2 = t3.renderedPath, f2 = this.w, p2 = new m(this.barCtx.ctx), x2 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[n2] : this.barCtx.strokeWidth, b2 = e2 + parseFloat(c2 * g2), v2 = i2 + parseFloat(h2 * g2);
          f2.globals.isXNumeric && !f2.globals.isBarHorizontal && (b2 = e2 + parseFloat(c2 * (g2 + 1)), v2 = i2 + parseFloat(h2 * (g2 + 1)) - x2);
          var y2, w2 = null, k2 = e2, A2 = i2, S2 = {}, C2 = f2.config.dataLabels, L2 = this.barCtx.barOptions.dataLabels, P2 = this.barCtx.barOptions.dataLabels.total;
          void 0 !== d2 && this.barCtx.isRangeBar && (v2 = d2, A2 = d2);
          var T2 = C2.offsetX, M2 = C2.offsetY, I2 = { width: 0, height: 0 };
          if (f2.config.dataLabels.enabled) {
            var X2 = this.barCtx.series[r2][o2];
            I2 = p2.getTextRects(f2.globals.yLabelFormatters[0](X2), parseFloat(C2.style.fontSize));
          }
          var z2 = { x: e2, y: i2, i: r2, j: o2, realIndex: n2, renderedPath: u2, bcx: b2, bcy: v2, barHeight: h2, barWidth: c2, textRects: I2, strokeWidth: x2, dataLabelsX: k2, dataLabelsY: A2, dataLabelsConfig: C2, barDataLabelsConfig: L2, barTotalDataLabelsConfig: P2, offX: T2, offY: M2 };
          return S2 = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(z2) : this.calculateColumnsDataLabelsPosition(z2), u2.attr({ cy: S2.bcy, cx: S2.bcx, j: o2, val: l2[r2][o2], barHeight: h2, barWidth: c2 }), y2 = this.drawCalculatedDataLabels({ x: S2.dataLabelsX, y: S2.dataLabelsY, val: this.barCtx.isRangeBar ? [a2, s2] : l2[r2][o2], i: n2, j: o2, barWidth: c2, barHeight: h2, textRects: I2, dataLabelsConfig: C2 }), f2.config.chart.stacked && P2.enabled && (w2 = this.drawTotalDataLabels({ x: S2.totalDataLabelsX, y: S2.totalDataLabelsY, realIndex: n2, textAnchor: S2.totalDataLabelsAnchor, val: this.getStackedTotalDataLabel({ realIndex: n2, j: o2 }), dataLabelsConfig: C2, barTotalDataLabelsConfig: P2 })), { dataLabels: y2, totalDataLabels: w2 };
        } }, { key: "getStackedTotalDataLabel", value: function(t3) {
          var i2 = t3.realIndex, a2 = t3.j, s2 = this.w, r2 = this.barCtx.stackedSeriesTotals[a2];
          return this.totalFormatter && (r2 = this.totalFormatter(r2, e(e({}, s2), {}, { seriesIndex: i2, dataPointIndex: a2, w: s2 }))), r2;
        } }, { key: "calculateColumnsDataLabelsPosition", value: function(t3) {
          var e2, i2, a2, s2 = this.w, r2 = t3.i, o2 = t3.j, n2 = t3.realIndex, l2 = t3.y, h2 = t3.bcx, c2 = t3.barWidth, d2 = t3.barHeight, g2 = t3.textRects, u2 = t3.dataLabelsY, f2 = t3.dataLabelsConfig, p2 = t3.barDataLabelsConfig, x2 = t3.barTotalDataLabelsConfig, b2 = t3.strokeWidth, v2 = t3.offX, y2 = t3.offY;
          d2 = Math.abs(d2);
          var w2 = "vertical" === s2.config.plotOptions.bar.dataLabels.orientation;
          h2 -= b2 / 2;
          var k2 = s2.globals.gridWidth / s2.globals.dataPoints;
          if (e2 = s2.globals.isXNumeric ? h2 - c2 / 2 + v2 : h2 - k2 + c2 / 2 + v2, w2) {
            e2 = e2 + g2.height / 2 - b2 / 2 - 2;
          }
          var A2 = this.barCtx.series[r2][o2] < 0, S2 = l2;
          switch (this.barCtx.isReversed && (S2 = l2 - d2 + (A2 ? 2 * d2 : 0), l2 -= d2), p2.position) {
            case "center":
              u2 = w2 ? A2 ? S2 + d2 / 2 + y2 : S2 + d2 / 2 - y2 : A2 ? S2 - d2 / 2 + g2.height / 2 + y2 : S2 + d2 / 2 + g2.height / 2 - y2;
              break;
            case "bottom":
              u2 = w2 ? A2 ? S2 + d2 + y2 : S2 + d2 - y2 : A2 ? S2 - d2 + g2.height + b2 + y2 : S2 + d2 - g2.height / 2 + b2 - y2;
              break;
            case "top":
              u2 = w2 ? A2 ? S2 + y2 : S2 - y2 : A2 ? S2 - g2.height / 2 - y2 : S2 + g2.height + y2;
          }
          if (this.barCtx.lastActiveBarSerieIndex === n2 && x2.enabled) {
            var C2 = new m(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: n2, j: o2 }), f2.fontSize);
            i2 = A2 ? S2 - C2.height / 2 - y2 - x2.offsetY + 18 : S2 + C2.height + y2 + x2.offsetY - 18, a2 = e2 + x2.offsetX;
          }
          return s2.config.chart.stacked || (u2 < 0 ? u2 = 0 + b2 : u2 + g2.height / 3 > s2.globals.gridHeight && (u2 = s2.globals.gridHeight - b2)), { bcx: h2, bcy: l2, dataLabelsX: e2, dataLabelsY: u2, totalDataLabelsX: a2, totalDataLabelsY: i2, totalDataLabelsAnchor: "middle" };
        } }, { key: "calculateBarsDataLabelsPosition", value: function(t3) {
          var e2 = this.w, i2 = t3.x, a2 = t3.i, s2 = t3.j, r2 = t3.realIndex, o2 = t3.bcy, n2 = t3.barHeight, l2 = t3.barWidth, h2 = t3.textRects, c2 = t3.dataLabelsX, d2 = t3.strokeWidth, g2 = t3.dataLabelsConfig, u2 = t3.barDataLabelsConfig, f2 = t3.barTotalDataLabelsConfig, p2 = t3.offX, x2 = t3.offY, b2 = e2.globals.gridHeight / e2.globals.dataPoints;
          l2 = Math.abs(l2);
          var v2, y2, w2 = o2 - (this.barCtx.isRangeBar ? 0 : b2) + n2 / 2 + h2.height / 2 + x2 - 3, k2 = "start", A2 = this.barCtx.series[a2][s2] < 0, S2 = i2;
          switch (this.barCtx.isReversed && (S2 = i2 + l2 - (A2 ? 2 * l2 : 0), i2 = e2.globals.gridWidth - l2), u2.position) {
            case "center":
              c2 = A2 ? S2 + l2 / 2 - p2 : Math.max(h2.width / 2, S2 - l2 / 2) + p2;
              break;
            case "bottom":
              c2 = A2 ? S2 + l2 - d2 - Math.round(h2.width / 2) - p2 : S2 - l2 + d2 + Math.round(h2.width / 2) + p2;
              break;
            case "top":
              c2 = A2 ? S2 - d2 + Math.round(h2.width / 2) - p2 : S2 - d2 - Math.round(h2.width / 2) + p2;
          }
          if (this.barCtx.lastActiveBarSerieIndex === r2 && f2.enabled) {
            var C2 = new m(this.barCtx.ctx).getTextRects(this.getStackedTotalDataLabel({ realIndex: r2, j: s2 }), g2.fontSize);
            A2 ? (v2 = S2 - d2 + Math.round(C2.width / 2) - p2 - f2.offsetX - 15, k2 = "end") : v2 = S2 - d2 - Math.round(C2.width / 2) + p2 + f2.offsetX + 15, y2 = w2 + f2.offsetY;
          }
          return e2.config.chart.stacked || (c2 < 0 ? c2 = c2 + h2.width + d2 : c2 + h2.width / 2 > e2.globals.gridWidth && (c2 = e2.globals.gridWidth - h2.width - d2)), { bcx: i2, bcy: o2, dataLabelsX: c2, dataLabelsY: w2, totalDataLabelsX: v2, totalDataLabelsY: y2, totalDataLabelsAnchor: k2 };
        } }, { key: "drawCalculatedDataLabels", value: function(t3) {
          var i2 = t3.x, a2 = t3.y, s2 = t3.val, r2 = t3.i, o2 = t3.j, n2 = t3.textRects, l2 = t3.barHeight, h2 = t3.barWidth, c2 = t3.dataLabelsConfig, d2 = this.w, g2 = "rotate(0)";
          "vertical" === d2.config.plotOptions.bar.dataLabels.orientation && (g2 = "rotate(-90, ".concat(i2, ", ").concat(a2, ")"));
          var u2 = new H(this.barCtx.ctx), f2 = new m(this.barCtx.ctx), p2 = c2.formatter, x2 = null, b2 = d2.globals.collapsedSeriesIndices.indexOf(r2) > -1;
          if (c2.enabled && !b2) {
            x2 = f2.group({ class: "apexcharts-data-labels", transform: g2 });
            var v2 = "";
            void 0 !== s2 && (v2 = p2(s2, e(e({}, d2), {}, { seriesIndex: r2, dataPointIndex: o2, w: d2 })));
            var y2 = d2.globals.series[r2][o2] < 0, w2 = d2.config.plotOptions.bar.dataLabels.position;
            if ("vertical" === d2.config.plotOptions.bar.dataLabels.orientation && ("top" === w2 && (c2.textAnchor = y2 ? "end" : "start"), "center" === w2 && (c2.textAnchor = "middle"), "bottom" === w2 && (c2.textAnchor = y2 ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels)
              h2 < f2.getTextRects(v2, parseFloat(c2.style.fontSize)).width && (v2 = "");
            d2.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n2.width / 1.6 > Math.abs(h2) && (v2 = "") : n2.height / 1.6 > Math.abs(l2) && (v2 = ""));
            var k2 = e({}, c2);
            this.barCtx.isHorizontal && s2 < 0 && ("start" === c2.textAnchor ? k2.textAnchor = "end" : "end" === c2.textAnchor && (k2.textAnchor = "start")), u2.plotDataLabelsText({ x: i2, y: a2, text: v2, i: r2, j: o2, parent: x2, dataLabelsConfig: k2, alwaysDrawDataLabel: true, offsetCorrection: true });
          }
          return x2;
        } }, { key: "drawTotalDataLabels", value: function(t3) {
          var e2, i2 = t3.x, a2 = t3.y, s2 = t3.val, r2 = t3.realIndex, o2 = t3.textAnchor, n2 = t3.barTotalDataLabelsConfig, l2 = new m(this.barCtx.ctx);
          return n2.enabled && void 0 !== i2 && void 0 !== a2 && this.barCtx.lastActiveBarSerieIndex === r2 && (e2 = l2.drawText({ x: i2, y: a2, foreColor: n2.style.color, text: s2, textAnchor: o2, fontFamily: n2.style.fontFamily, fontSize: n2.style.fontSize, fontWeight: n2.style.fontWeight })), e2;
        } }]), t2;
      }();
      var mt = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.barCtx = e2;
        }
        return r(t2, [{ key: "initVariables", value: function(t3) {
          var e2 = this.w;
          this.barCtx.series = t3, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
          for (var i2 = 0; i2 < t3.length; i2++)
            if (t3[i2].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t3[i2].length), e2.globals.isXNumeric)
              for (var a2 = 0; a2 < t3[i2].length; a2++)
                e2.globals.seriesX[i2][a2] > e2.globals.minX && e2.globals.seriesX[i2][a2] < e2.globals.maxX && this.barCtx.visibleItems++;
            else
              this.barCtx.visibleItems = e2.globals.dataPoints;
          0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], this.barCtx.radiusOnSeriesNumber = t3.length - 1, e2.globals.comboCharts || this.checkZeroSeries({ series: t3 });
        } }, { key: "initialPositions", value: function() {
          var t3, e2, i2, a2, s2, r2, o2, n2, l2 = this.w, h2 = l2.globals.dataPoints;
          this.barCtx.isRangeBar && (h2 = l2.globals.labels.length);
          var c2 = this.barCtx.seriesLen;
          if (l2.config.plotOptions.bar.rangeBarGroupRows && (c2 = 1), this.barCtx.isHorizontal)
            s2 = (i2 = l2.globals.gridHeight / h2) / c2, l2.globals.isXNumeric && (s2 = (i2 = l2.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s2 = s2 * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, n2 = this.barCtx.baseLineInvertedY + l2.globals.padHorizontal + (this.barCtx.isReversed ? l2.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), e2 = (i2 - s2 * this.barCtx.seriesLen) / 2;
          else {
            if (a2 = l2.globals.gridWidth / this.barCtx.visibleItems, l2.config.xaxis.convertedCatToNumeric && (a2 = l2.globals.gridWidth / l2.globals.dataPoints), r2 = a2 / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l2.globals.isXNumeric) {
              var d2 = this.barCtx.xRatio;
              l2.config.xaxis.convertedCatToNumeric && (d2 = this.barCtx.initialXRatio), l2.globals.minXDiff && 0.5 !== l2.globals.minXDiff && l2.globals.minXDiff / d2 > 0 && (a2 = l2.globals.minXDiff / d2), (r2 = a2 / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r2 = 1);
            }
            o2 = l2.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? l2.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t3 = l2.globals.padHorizontal + (a2 - r2 * this.barCtx.seriesLen) / 2;
          }
          return { x: t3, y: e2, yDivision: i2, xDivision: a2, barHeight: s2, barWidth: r2, zeroH: o2, zeroW: n2 };
        } }, { key: "getPathFillColor", value: function(t3, e2, i2, a2) {
          var s2, r2, o2, n2, l2 = this.w, h2 = new F(this.barCtx.ctx), c2 = null, d2 = this.barCtx.barOptions.distributed ? i2 : e2;
          this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function(a3) {
            t3[e2][i2] >= a3.from && t3[e2][i2] <= a3.to && (c2 = a3.color);
          });
          return l2.config.series[e2].data[i2] && l2.config.series[e2].data[i2].fillColor && (c2 = l2.config.series[e2].data[i2].fillColor), h2.fillPath({ seriesNumber: this.barCtx.barOptions.distributed ? d2 : a2, dataPointIndex: i2, color: c2, value: t3[e2][i2], fillConfig: null === (s2 = l2.config.series[e2].data[i2]) || void 0 === s2 ? void 0 : s2.fill, fillType: null !== (r2 = l2.config.series[e2].data[i2]) && void 0 !== r2 && null !== (o2 = r2.fill) && void 0 !== o2 && o2.type ? null === (n2 = l2.config.series[e2].data[i2]) || void 0 === n2 ? void 0 : n2.fill.type : l2.config.fill.type });
        } }, { key: "getStrokeWidth", value: function(t3, e2, i2) {
          var a2 = 0, s2 = this.w;
          return void 0 === this.barCtx.series[t3][e2] || null === this.barCtx.series[t3][e2] ? this.barCtx.isNullValue = true : this.barCtx.isNullValue = false, s2.config.stroke.show && (this.barCtx.isNullValue || (a2 = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i2] : this.barCtx.strokeWidth)), a2;
        } }, { key: "barBackground", value: function(t3) {
          var e2 = t3.j, i2 = t3.i, a2 = t3.x1, s2 = t3.x2, r2 = t3.y1, o2 = t3.y2, n2 = t3.elSeries, l2 = this.w, h2 = new m(this.barCtx.ctx), c2 = new N(this.barCtx.ctx).getActiveConfigSeriesIndex();
          if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c2 === i2) {
            e2 >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e2 %= this.barCtx.barOptions.colors.backgroundBarColors.length);
            var d2 = this.barCtx.barOptions.colors.backgroundBarColors[e2], g2 = h2.drawRect(void 0 !== a2 ? a2 : 0, void 0 !== r2 ? r2 : 0, void 0 !== s2 ? s2 : l2.globals.gridWidth, void 0 !== o2 ? o2 : l2.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d2, this.barCtx.barOptions.colors.backgroundBarOpacity);
            n2.add(g2), g2.node.classList.add("apexcharts-backgroundBar");
          }
        } }, { key: "getColumnPaths", value: function(t3) {
          var e2 = t3.barWidth, i2 = t3.barXPosition, a2 = t3.yRatio, s2 = t3.y1, r2 = t3.y2, o2 = t3.strokeWidth, n2 = t3.series, l2 = t3.realIndex, h2 = t3.i, c2 = t3.j, d2 = t3.w, g2 = new m(this.barCtx.ctx);
          (o2 = Array.isArray(o2) ? o2[l2] : o2) || (o2 = 0);
          var u2 = { barWidth: e2, strokeWidth: o2, yRatio: a2, barXPosition: i2, y1: s2, y2: r2 }, f2 = this.getRoundedBars(d2, u2, n2, h2, c2), p2 = i2, x2 = i2 + e2, b2 = g2.move(p2, s2), v2 = g2.move(p2, s2), y2 = g2.line(x2 - o2, s2);
          return d2.globals.previousPaths.length > 0 && (v2 = this.barCtx.getPreviousPath(l2, c2, false)), b2 = b2 + g2.line(p2, f2.y2) + f2.pathWithRadius + g2.line(x2 - o2, f2.y2) + y2 + y2 + "z", v2 = v2 + g2.line(p2, s2) + y2 + y2 + y2 + y2 + y2 + g2.line(p2, s2), d2.config.chart.stacked && (this.barCtx.yArrj.push(f2.y2WithRadius), this.barCtx.yArrjF.push(Math.abs(s2 - f2.y2WithRadius)), this.barCtx.yArrjVal.push(this.barCtx.series[h2][c2])), { pathTo: b2, pathFrom: v2 };
        } }, { key: "getBarpaths", value: function(t3) {
          var e2 = t3.barYPosition, i2 = t3.barHeight, a2 = t3.x1, s2 = t3.x2, r2 = t3.strokeWidth, o2 = t3.series, n2 = t3.realIndex, l2 = t3.i, h2 = t3.j, c2 = t3.w, d2 = new m(this.barCtx.ctx);
          (r2 = Array.isArray(r2) ? r2[n2] : r2) || (r2 = 0);
          var g2 = { barHeight: i2, strokeWidth: r2, barYPosition: e2, x2: s2, x1: a2 }, u2 = this.getRoundedBars(c2, g2, o2, l2, h2), f2 = d2.move(a2, e2), p2 = d2.move(a2, e2);
          c2.globals.previousPaths.length > 0 && (p2 = this.barCtx.getPreviousPath(n2, h2, false));
          var x2 = e2, b2 = e2 + i2, v2 = d2.line(a2, b2 - r2);
          return f2 = f2 + d2.line(u2.x2, x2) + u2.pathWithRadius + d2.line(u2.x2, b2 - r2) + v2 + v2 + "z", p2 = p2 + d2.line(a2, x2) + v2 + v2 + v2 + v2 + v2 + d2.line(a2, x2), c2.config.chart.stacked && (this.barCtx.xArrj.push(u2.x2WithRadius), this.barCtx.xArrjF.push(Math.abs(a2 - u2.x2WithRadius)), this.barCtx.xArrjVal.push(this.barCtx.series[l2][h2])), { pathTo: f2, pathFrom: p2 };
        } }, { key: "getRoundedBars", value: function(t3, e2, i2, a2, s2) {
          var r2 = new m(this.barCtx.ctx), o2 = 0, n2 = t3.config.plotOptions.bar.borderRadius, l2 = Array.isArray(n2);
          l2 ? o2 = n2[a2 > n2.length - 1 ? n2.length - 1 : a2] : o2 = n2;
          if (t3.config.chart.stacked && i2.length > 1 && a2 !== this.barCtx.radiusOnSeriesNumber && !l2 && (o2 = 0), this.barCtx.isHorizontal) {
            var h2 = "", c2 = e2.x2;
            if (Math.abs(e2.x1 - e2.x2) < o2 && (o2 = Math.abs(e2.x1 - e2.x2)), void 0 !== i2[a2][s2] || null !== i2[a2][s2]) {
              var d2 = this.barCtx.isReversed ? i2[a2][s2] > 0 : i2[a2][s2] < 0;
              d2 && (o2 *= -1), c2 -= o2, h2 = r2.quadraticCurve(c2 + o2, e2.barYPosition, c2 + o2, e2.barYPosition + (d2 ? -1 * o2 : o2)) + r2.line(c2 + o2, e2.barYPosition + e2.barHeight - e2.strokeWidth - (d2 ? -1 * o2 : o2)) + r2.quadraticCurve(c2 + o2, e2.barYPosition + e2.barHeight - e2.strokeWidth, c2, e2.barYPosition + e2.barHeight - e2.strokeWidth);
            }
            return { pathWithRadius: h2, x2WithRadius: c2 + o2, x2: c2 };
          }
          var g2 = "", u2 = e2.y2;
          if (Math.abs(e2.y1 - e2.y2) < o2 && (o2 = Math.abs(e2.y1 - e2.y2)), void 0 !== i2[a2][s2] || null !== i2[a2][s2]) {
            var f2 = i2[a2][s2] < 0;
            f2 && (o2 *= -1), u2 += o2, g2 = r2.quadraticCurve(e2.barXPosition, u2 - o2, e2.barXPosition + (f2 ? -1 * o2 : o2), u2 - o2) + r2.line(e2.barXPosition + e2.barWidth - e2.strokeWidth - (f2 ? -1 * o2 : o2), u2 - o2) + r2.quadraticCurve(e2.barXPosition + e2.barWidth - e2.strokeWidth, u2 - o2, e2.barXPosition + e2.barWidth - e2.strokeWidth, u2);
          }
          return { pathWithRadius: g2, y2WithRadius: u2 - o2, y2: u2 };
        } }, { key: "checkZeroSeries", value: function(t3) {
          for (var e2 = t3.series, i2 = this.w, a2 = 0; a2 < e2.length; a2++) {
            for (var s2 = 0, r2 = 0; r2 < e2[i2.globals.maxValsInArrayIndex].length; r2++)
              s2 += e2[a2][r2];
            0 === s2 && this.barCtx.zeroSerieses.push(a2);
          }
          for (var o2 = e2.length - 1; o2 >= 0; o2--)
            this.barCtx.zeroSerieses.indexOf(o2) > -1 && o2 === this.radiusOnSeriesNumber && (this.barCtx.radiusOnSeriesNumber -= 1);
          for (var n2 = e2.length - 1; n2 >= 0; n2--)
            i2.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber) > -1 && (this.barCtx.radiusOnSeriesNumber -= 1);
        } }, { key: "getXForValue", value: function(t3, e2) {
          var i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a2 = i2 ? e2 : null;
          return null != t3 && (a2 = e2 + t3 / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t3 / this.barCtx.invertedYRatio : 0)), a2;
        } }, { key: "getYForValue", value: function(t3, e2) {
          var i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a2 = i2 ? e2 : null;
          return null != t3 && (a2 = e2 - t3 / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t3 / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), a2;
        } }, { key: "getGoalValues", value: function(t3, e2, i2, a2, s2) {
          var r2 = this, n2 = this.w, l2 = [];
          return n2.globals.seriesGoals[a2] && n2.globals.seriesGoals[a2][s2] && Array.isArray(n2.globals.seriesGoals[a2][s2]) && n2.globals.seriesGoals[a2][s2].forEach(function(a3) {
            var s3;
            l2.push((o(s3 = {}, t3, "x" === t3 ? r2.getXForValue(a3.value, e2, false) : r2.getYForValue(a3.value, i2, false)), o(s3, "attrs", a3), s3));
          }), l2;
        } }, { key: "drawGoalLine", value: function(t3) {
          var e2 = t3.barXPosition, i2 = t3.barYPosition, a2 = t3.goalX, s2 = t3.goalY, r2 = t3.barWidth, o2 = t3.barHeight, n2 = new m(this.barCtx.ctx), l2 = n2.group({ className: "apexcharts-bar-goals-groups" }), h2 = null;
          return this.barCtx.isHorizontal ? Array.isArray(a2) && a2.forEach(function(t4) {
            var e3 = void 0 !== t4.attrs.strokeHeight ? t4.attrs.strokeHeight : o2 / 2, a3 = i2 + e3 + o2 / 2;
            h2 = n2.drawLine(t4.x, a3 - 2 * e3, t4.x, a3, t4.attrs.strokeColor ? t4.attrs.strokeColor : void 0, t4.attrs.strokeDashArray, t4.attrs.strokeWidth ? t4.attrs.strokeWidth : 2, t4.attrs.strokeLineCap), l2.add(h2);
          }) : Array.isArray(s2) && s2.forEach(function(t4) {
            var i3 = void 0 !== t4.attrs.strokeWidth ? t4.attrs.strokeWidth : r2 / 2, a3 = e2 + i3 + r2 / 2;
            h2 = n2.drawLine(a3 - 2 * i3, t4.y, a3, t4.y, t4.attrs.strokeColor ? t4.attrs.strokeColor : void 0, t4.attrs.strokeDashArray, t4.attrs.strokeHeight ? t4.attrs.strokeHeight : 2, t4.attrs.strokeLineCap), l2.add(h2);
          }), l2;
        } }]), t2;
      }();
      var yt = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var s2 = this.w;
          this.barOptions = s2.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s2.config.stroke.width, this.isNullValue = false, this.isRangeBar = s2.globals.seriesRange.length && this.isHorizontal, this.xyRatios = i2, null !== this.xyRatios && (this.xRatio = i2.xRatio, this.initialXRatio = i2.initialXRatio, this.yRatio = i2.yRatio, this.invertedXRatio = i2.invertedXRatio, this.invertedYRatio = i2.invertedYRatio, this.baseLineY = i2.baseLineY, this.baseLineInvertedY = i2.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0;
          var r2 = new N(this.ctx);
          this.lastActiveBarSerieIndex = r2.getActiveConfigSeriesIndex("desc", ["bar", "column"]);
          var o2 = r2.getBarSeriesIndices(), n2 = new y(this.ctx);
          this.stackedSeriesTotals = n2.getStackedSeriesTotals(this.w.config.series.map(function(t3, e3) {
            return -1 === o2.indexOf(e3) ? e3 : -1;
          }).filter(function(t3) {
            return -1 !== t3;
          })), this.barHelpers = new mt(this);
        }
        return r(t2, [{ key: "draw", value: function(t3, i2) {
          var a2 = this.w, s2 = new m(this.ctx), r2 = new y(this.ctx, a2);
          t3 = r2.getLogSeries(t3), this.series = t3, this.yRatio = r2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3);
          var o2 = s2.group({ class: "apexcharts-bar-series apexcharts-plot-series" });
          a2.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");
          for (var n2 = 0, l2 = 0; n2 < t3.length; n2++, l2++) {
            var h2, c2, d2, g2, u2 = void 0, f2 = void 0, p2 = [], b2 = [], v2 = a2.globals.comboCharts ? i2[n2] : n2, w2 = s2.group({ class: "apexcharts-series", rel: n2 + 1, seriesName: x.escapeString(a2.globals.seriesNames[v2]), "data:realIndex": v2 });
            this.ctx.series.addCollapsedClassToSeries(w2, v2), t3[n2].length > 0 && (this.visibleI = this.visibleI + 1);
            var k2 = 0, A2 = 0;
            this.yRatio.length > 1 && (this.yaxisIndex = v2), this.isReversed = a2.config.yaxis[this.yaxisIndex] && a2.config.yaxis[this.yaxisIndex].reversed;
            var S2 = this.barHelpers.initialPositions();
            f2 = S2.y, k2 = S2.barHeight, c2 = S2.yDivision, g2 = S2.zeroW, u2 = S2.x, A2 = S2.barWidth, h2 = S2.xDivision, d2 = S2.zeroH, this.horizontal || b2.push(u2 + A2 / 2);
            for (var C2 = s2.group({ class: "apexcharts-datalabels", "data:realIndex": v2 }), L2 = s2.group({ class: "apexcharts-bar-goals-markers", style: "pointer-events: none" }), P2 = 0; P2 < a2.globals.dataPoints; P2++) {
              var T2 = this.barHelpers.getStrokeWidth(n2, P2, v2), M2 = null, I2 = { indexes: { i: n2, j: P2, realIndex: v2, bc: l2 }, x: u2, y: f2, strokeWidth: T2, elSeries: w2 };
              this.isHorizontal ? (M2 = this.drawBarPaths(e(e({}, I2), {}, { barHeight: k2, zeroW: g2, yDivision: c2 })), A2 = this.series[n2][P2] / this.invertedYRatio) : (M2 = this.drawColumnPaths(e(e({}, I2), {}, { xDivision: h2, barWidth: A2, zeroH: d2 })), k2 = this.series[n2][P2] / this.yRatio[this.yaxisIndex]);
              var X2 = this.barHelpers.drawGoalLine({ barXPosition: M2.barXPosition, barYPosition: M2.barYPosition, goalX: M2.goalX, goalY: M2.goalY, barHeight: k2, barWidth: A2 });
              X2 && L2.add(X2), f2 = M2.y, u2 = M2.x, P2 > 0 && b2.push(u2 + A2 / 2), p2.push(f2);
              var z2 = this.barHelpers.getPathFillColor(t3, n2, P2, v2);
              this.renderSeries({ realIndex: v2, pathFill: z2, j: P2, i: n2, pathFrom: M2.pathFrom, pathTo: M2.pathTo, strokeWidth: T2, elSeries: w2, x: u2, y: f2, series: t3, barHeight: k2, barWidth: A2, elDataLabelsWrap: C2, elGoalsMarkers: L2, visibleSeries: this.visibleI, type: "bar" });
            }
            a2.globals.seriesXvalues[v2] = b2, a2.globals.seriesYvalues[v2] = p2, o2.add(w2);
          }
          return o2;
        } }, { key: "renderSeries", value: function(t3) {
          var e2 = t3.realIndex, i2 = t3.pathFill, a2 = t3.lineFill, s2 = t3.j, r2 = t3.i, o2 = t3.pathFrom, n2 = t3.pathTo, l2 = t3.strokeWidth, h2 = t3.elSeries, c2 = t3.x, d2 = t3.y, g2 = t3.y1, u2 = t3.y2, f2 = t3.series, p2 = t3.barHeight, x2 = t3.barWidth, b2 = t3.barYPosition, y2 = t3.elDataLabelsWrap, w2 = t3.elGoalsMarkers, k2 = t3.visibleSeries, A2 = t3.type, S2 = this.w, C2 = new m(this.ctx);
          a2 || (a2 = this.barOptions.distributed ? S2.globals.stroke.colors[s2] : S2.globals.stroke.colors[e2]), S2.config.series[r2].data[s2] && S2.config.series[r2].data[s2].strokeColor && (a2 = S2.config.series[r2].data[s2].strokeColor), this.isNullValue && (i2 = "none");
          var L2 = s2 / S2.config.chart.animations.animateGradually.delay * (S2.config.chart.animations.speed / S2.globals.dataPoints) / 2.4, P2 = C2.renderPaths({ i: r2, j: s2, realIndex: e2, pathFrom: o2, pathTo: n2, stroke: a2, strokeWidth: l2, strokeLineCap: S2.config.stroke.lineCap, fill: i2, animationDelay: L2, initialSpeed: S2.config.chart.animations.speed, dataChangeSpeed: S2.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(A2, "-area") });
          P2.attr("clip-path", "url(#gridRectMask".concat(S2.globals.cuid, ")"));
          var T2 = S2.config.forecastDataPoints;
          T2.count > 0 && s2 >= S2.globals.dataPoints - T2.count && (P2.node.setAttribute("stroke-dasharray", T2.dashArray), P2.node.setAttribute("stroke-width", T2.strokeWidth), P2.node.setAttribute("fill-opacity", T2.fillOpacity)), void 0 !== g2 && void 0 !== u2 && (P2.attr("data-range-y1", g2), P2.attr("data-range-y2", u2)), new v(this.ctx).setSelectionFilter(P2, e2, s2), h2.add(P2);
          var M2 = new vt(this).handleBarDataLabels({ x: c2, y: d2, y1: g2, y2: u2, i: r2, j: s2, series: f2, realIndex: e2, barHeight: p2, barWidth: x2, barYPosition: b2, renderedPath: P2, visibleSeries: k2 });
          return null !== M2.dataLabels && y2.add(M2.dataLabels), M2.totalDataLabels && y2.add(M2.totalDataLabels), h2.add(y2), w2 && h2.add(w2), h2;
        } }, { key: "drawBarPaths", value: function(t3) {
          var e2 = t3.indexes, i2 = t3.barHeight, a2 = t3.strokeWidth, s2 = t3.zeroW, r2 = t3.x, o2 = t3.y, n2 = t3.yDivision, l2 = t3.elSeries, h2 = this.w, c2 = e2.i, d2 = e2.j;
          h2.globals.isXNumeric && (o2 = (h2.globals.seriesX[c2][d2] - h2.globals.minX) / this.invertedXRatio - i2);
          var g2 = o2 + i2 * this.visibleI;
          r2 = this.barHelpers.getXForValue(this.series[c2][d2], s2);
          var u2 = this.barHelpers.getBarpaths({ barYPosition: g2, barHeight: i2, x1: s2, x2: r2, strokeWidth: a2, series: this.series, realIndex: e2.realIndex, i: c2, j: d2, w: h2 });
          return h2.globals.isXNumeric || (o2 += n2), this.barHelpers.barBackground({ j: d2, i: c2, y1: g2 - i2 * this.visibleI, y2: i2 * this.seriesLen, elSeries: l2 }), { pathTo: u2.pathTo, pathFrom: u2.pathFrom, x: r2, y: o2, goalX: this.barHelpers.getGoalValues("x", s2, null, c2, d2), barYPosition: g2 };
        } }, { key: "drawColumnPaths", value: function(t3) {
          var e2 = t3.indexes, i2 = t3.x, a2 = t3.y, s2 = t3.xDivision, r2 = t3.barWidth, o2 = t3.zeroH, n2 = t3.strokeWidth, l2 = t3.elSeries, h2 = this.w, c2 = e2.realIndex, d2 = e2.i, g2 = e2.j, u2 = e2.bc;
          if (h2.globals.isXNumeric) {
            var f2 = c2;
            h2.globals.seriesX[c2].length || (f2 = h2.globals.maxValsInArrayIndex), i2 = (h2.globals.seriesX[f2][g2] - h2.globals.minX) / this.xRatio - r2 * this.seriesLen / 2;
          }
          var p2 = i2 + r2 * this.visibleI;
          a2 = this.barHelpers.getYForValue(this.series[d2][g2], o2);
          var x2 = this.barHelpers.getColumnPaths({ barXPosition: p2, barWidth: r2, y1: o2, y2: a2, strokeWidth: n2, series: this.series, realIndex: e2.realIndex, i: d2, j: g2, w: h2 });
          return h2.globals.isXNumeric || (i2 += s2), this.barHelpers.barBackground({ bc: u2, j: g2, i: d2, x1: p2 - n2 / 2 - r2 * this.visibleI, x2: r2 * this.seriesLen + n2 / 2, elSeries: l2 }), { pathTo: x2.pathTo, pathFrom: x2.pathFrom, x: i2, y: a2, goalY: this.barHelpers.getGoalValues("y", null, o2, d2, g2), barXPosition: p2 };
        } }, { key: "getPreviousPath", value: function(t3, e2) {
          for (var i2, a2 = this.w, s2 = 0; s2 < a2.globals.previousPaths.length; s2++) {
            var r2 = a2.globals.previousPaths[s2];
            r2.paths && r2.paths.length > 0 && parseInt(r2.realIndex, 10) === parseInt(t3, 10) && void 0 !== a2.globals.previousPaths[s2].paths[e2] && (i2 = a2.globals.previousPaths[s2].paths[e2].d);
          }
          return i2;
        } }]), t2;
      }();
      var wt = function(t2) {
        n(s2, yt);
        var i2 = d(s2);
        function s2() {
          return a(this, s2), i2.apply(this, arguments);
        }
        return r(s2, [{ key: "draw", value: function(t3, i3) {
          var a2 = this, s3 = this.w;
          this.graphics = new m(this.ctx), this.bar = new yt(this.ctx, this.xyRatios);
          var r2 = new y(this.ctx, s3);
          t3 = r2.getLogSeries(t3), this.yRatio = r2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3), "100%" === s3.config.chart.stackType && (t3 = s3.globals.seriesPercent.slice()), this.series = t3, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];
          for (var o2 = 0; o2 < t3.length; o2++)
            t3[o2].length > 0 && (this.totalItems += t3[o2].length);
          for (var n2 = this.graphics.group({ class: "apexcharts-bar-series apexcharts-plot-series" }), l2 = 0, h2 = 0, c2 = function(r3, o3) {
            var c3 = void 0, d3 = void 0, g3 = void 0, u2 = void 0, f2 = [], p2 = [], b2 = s3.globals.comboCharts ? i3[r3] : r3;
            a2.yRatio.length > 1 && (a2.yaxisIndex = b2), a2.isReversed = s3.config.yaxis[a2.yaxisIndex] && s3.config.yaxis[a2.yaxisIndex].reversed;
            var v2 = a2.graphics.group({ class: "apexcharts-series", seriesName: x.escapeString(s3.globals.seriesNames[b2]), rel: r3 + 1, "data:realIndex": b2 });
            a2.ctx.series.addCollapsedClassToSeries(v2, b2);
            var m2 = a2.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": b2 }), y2 = a2.graphics.group({ class: "apexcharts-bar-goals-markers", style: "pointer-events: none" }), w2 = 0, k2 = 0, A2 = a2.initialPositions(l2, h2, c3, d3, g3, u2);
            h2 = A2.y, w2 = A2.barHeight, d3 = A2.yDivision, u2 = A2.zeroW, l2 = A2.x, k2 = A2.barWidth, c3 = A2.xDivision, g3 = A2.zeroH, a2.yArrj = [], a2.yArrjF = [], a2.yArrjVal = [], a2.xArrj = [], a2.xArrjF = [], a2.xArrjVal = [], 1 === a2.prevY.length && a2.prevY[0].every(function(t4) {
              return isNaN(t4);
            }) && (a2.prevY[0] = a2.prevY[0].map(function(t4) {
              return g3;
            }), a2.prevYF[0] = a2.prevYF[0].map(function(t4) {
              return 0;
            }));
            for (var S2 = 0; S2 < s3.globals.dataPoints; S2++) {
              var C2 = a2.barHelpers.getStrokeWidth(r3, S2, b2), L2 = { indexes: { i: r3, j: S2, realIndex: b2, bc: o3 }, strokeWidth: C2, x: l2, y: h2, elSeries: v2 }, P2 = null;
              a2.isHorizontal ? (P2 = a2.drawStackedBarPaths(e(e({}, L2), {}, { zeroW: u2, barHeight: w2, yDivision: d3 })), k2 = a2.series[r3][S2] / a2.invertedYRatio) : (P2 = a2.drawStackedColumnPaths(e(e({}, L2), {}, { xDivision: c3, barWidth: k2, zeroH: g3 })), w2 = a2.series[r3][S2] / a2.yRatio[a2.yaxisIndex]);
              var T2 = a2.barHelpers.drawGoalLine({ barXPosition: P2.barXPosition, barYPosition: P2.barYPosition, goalX: P2.goalX, goalY: P2.goalY, barHeight: w2, barWidth: k2 });
              T2 && y2.add(T2), h2 = P2.y, l2 = P2.x, f2.push(l2), p2.push(h2);
              var M2 = a2.barHelpers.getPathFillColor(t3, r3, S2, b2);
              v2 = a2.renderSeries({ realIndex: b2, pathFill: M2, j: S2, i: r3, pathFrom: P2.pathFrom, pathTo: P2.pathTo, strokeWidth: C2, elSeries: v2, x: l2, y: h2, series: t3, barHeight: w2, barWidth: k2, elDataLabelsWrap: m2, elGoalsMarkers: y2, type: "bar", visibleSeries: 0 });
            }
            s3.globals.seriesXvalues[b2] = f2, s3.globals.seriesYvalues[b2] = p2, a2.prevY.push(a2.yArrj), a2.prevYF.push(a2.yArrjF), a2.prevYVal.push(a2.yArrjVal), a2.prevX.push(a2.xArrj), a2.prevXF.push(a2.xArrjF), a2.prevXVal.push(a2.xArrjVal), n2.add(v2);
          }, d2 = 0, g2 = 0; d2 < t3.length; d2++, g2++)
            c2(d2, g2);
          return n2;
        } }, { key: "initialPositions", value: function(t3, e2, i3, a2, s3, r2) {
          var o2, n2, l2 = this.w;
          return this.isHorizontal ? (o2 = (o2 = a2 = l2.globals.gridHeight / l2.globals.dataPoints) * parseInt(l2.config.plotOptions.bar.barHeight, 10) / 100, r2 = this.baseLineInvertedY + l2.globals.padHorizontal + (this.isReversed ? l2.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e2 = (a2 - o2) / 2) : (n2 = i3 = l2.globals.gridWidth / l2.globals.dataPoints, n2 = l2.globals.isXNumeric && l2.globals.dataPoints > 1 ? (i3 = l2.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : n2 * parseInt(l2.config.plotOptions.bar.columnWidth, 10) / 100, s3 = l2.globals.gridHeight - this.baseLineY[this.yaxisIndex] + (this.isReversed ? l2.globals.gridHeight : 0) - (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t3 = l2.globals.padHorizontal + (i3 - n2) / 2), { x: t3, y: e2, yDivision: a2, xDivision: i3, barHeight: o2, barWidth: n2, zeroH: s3, zeroW: r2 };
        } }, { key: "drawStackedBarPaths", value: function(t3) {
          for (var e2, i3 = t3.indexes, a2 = t3.barHeight, s3 = t3.strokeWidth, r2 = t3.zeroW, o2 = t3.x, n2 = t3.y, l2 = t3.yDivision, h2 = t3.elSeries, c2 = this.w, d2 = n2, g2 = i3.i, u2 = i3.j, f2 = 0, p2 = 0; p2 < this.prevXF.length; p2++)
            f2 += this.prevXF[p2][u2];
          if (g2 > 0) {
            var x2 = r2;
            this.prevXVal[g2 - 1][u2] < 0 ? x2 = this.series[g2][u2] >= 0 ? this.prevX[g2 - 1][u2] + f2 - 2 * (this.isReversed ? f2 : 0) : this.prevX[g2 - 1][u2] : this.prevXVal[g2 - 1][u2] >= 0 && (x2 = this.series[g2][u2] >= 0 ? this.prevX[g2 - 1][u2] : this.prevX[g2 - 1][u2] - f2 + 2 * (this.isReversed ? f2 : 0)), e2 = x2;
          } else
            e2 = r2;
          o2 = null === this.series[g2][u2] ? e2 : e2 + this.series[g2][u2] / this.invertedYRatio - 2 * (this.isReversed ? this.series[g2][u2] / this.invertedYRatio : 0);
          var b2 = this.barHelpers.getBarpaths({ barYPosition: d2, barHeight: a2, x1: e2, x2: o2, strokeWidth: s3, series: this.series, realIndex: i3.realIndex, i: g2, j: u2, w: c2 });
          return this.barHelpers.barBackground({ j: u2, i: g2, y1: d2, y2: a2, elSeries: h2 }), n2 += l2, { pathTo: b2.pathTo, pathFrom: b2.pathFrom, goalX: this.barHelpers.getGoalValues("x", r2, null, g2, u2), barYPosition: d2, x: o2, y: n2 };
        } }, { key: "drawStackedColumnPaths", value: function(t3) {
          var e2 = t3.indexes, i3 = t3.x, a2 = t3.y, s3 = t3.xDivision, r2 = t3.barWidth, o2 = t3.zeroH;
          t3.strokeWidth;
          var n2 = t3.elSeries, l2 = this.w, h2 = e2.i, c2 = e2.j, d2 = e2.bc;
          if (l2.globals.isXNumeric) {
            var g2 = l2.globals.seriesX[h2][c2];
            g2 || (g2 = 0), i3 = (g2 - l2.globals.minX) / this.xRatio - r2 / 2;
          }
          for (var u2, f2 = i3, p2 = 0, x2 = 0; x2 < this.prevYF.length; x2++)
            p2 += isNaN(this.prevYF[x2][c2]) ? 0 : this.prevYF[x2][c2];
          if (h2 > 0 && !l2.globals.isXNumeric || h2 > 0 && l2.globals.isXNumeric && l2.globals.seriesX[h2 - 1][c2] === l2.globals.seriesX[h2][c2]) {
            var b2, v2, m2 = Math.min(this.yRatio.length + 1, h2 + 1);
            if (void 0 !== this.prevY[h2 - 1]) {
              for (var y2 = 1; y2 < m2; y2++)
                if (!isNaN(this.prevY[h2 - y2][c2])) {
                  v2 = this.prevY[h2 - y2][c2];
                  break;
                }
            }
            for (var w2 = 1; w2 < m2; w2++) {
              if (this.prevYVal[h2 - w2][c2] < 0) {
                b2 = this.series[h2][c2] >= 0 ? v2 - p2 + 2 * (this.isReversed ? p2 : 0) : v2;
                break;
              }
              if (this.prevYVal[h2 - w2][c2] >= 0) {
                b2 = this.series[h2][c2] >= 0 ? v2 : v2 + p2 - 2 * (this.isReversed ? p2 : 0);
                break;
              }
            }
            void 0 === b2 && (b2 = l2.globals.gridHeight), u2 = this.prevYF[0].every(function(t4) {
              return 0 === t4;
            }) && this.prevYF.slice(1, h2).every(function(t4) {
              return t4.every(function(t5) {
                return isNaN(t5);
              });
            }) ? o2 : b2;
          } else
            u2 = o2;
          a2 = u2 - this.series[h2][c2] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[h2][c2] / this.yRatio[this.yaxisIndex] : 0);
          var k2 = this.barHelpers.getColumnPaths({ barXPosition: f2, barWidth: r2, y1: u2, y2: a2, yRatio: this.yRatio[this.yaxisIndex], strokeWidth: this.strokeWidth, series: this.series, realIndex: e2.realIndex, i: h2, j: c2, w: l2 });
          return this.barHelpers.barBackground({ bc: d2, j: c2, i: h2, x1: f2, x2: r2, elSeries: n2 }), i3 += s3, { pathTo: k2.pathTo, pathFrom: k2.pathFrom, goalY: this.barHelpers.getGoalValues("y", null, o2, h2, c2), barXPosition: f2, x: l2.globals.isXNumeric ? i3 - s3 : i3, y: a2 };
        } }]), s2;
      }();
      var kt = function(t2) {
        n(s2, yt);
        var i2 = d(s2);
        function s2() {
          return a(this, s2), i2.apply(this, arguments);
        }
        return r(s2, [{ key: "draw", value: function(t3, i3) {
          var a2 = this, s3 = this.w, r2 = new m(this.ctx), o2 = new F(this.ctx);
          this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s3.config.plotOptions.bar.horizontal;
          var n2 = new y(this.ctx, s3);
          t3 = n2.getLogSeries(t3), this.series = t3, this.yRatio = n2.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t3);
          for (var l2 = r2.group({ class: "apexcharts-".concat(s3.config.chart.type, "-series apexcharts-plot-series") }), h2 = function(n3) {
            a2.isBoxPlot = "boxPlot" === s3.config.chart.type || "boxPlot" === s3.config.series[n3].type;
            var h3, c3, d2, g2, u2 = void 0, f2 = void 0, p2 = [], b2 = [], v2 = s3.globals.comboCharts ? i3[n3] : n3, m2 = r2.group({ class: "apexcharts-series", seriesName: x.escapeString(s3.globals.seriesNames[v2]), rel: n3 + 1, "data:realIndex": v2 });
            a2.ctx.series.addCollapsedClassToSeries(m2, v2), t3[n3].length > 0 && (a2.visibleI = a2.visibleI + 1);
            var y2, w2;
            a2.yRatio.length > 1 && (a2.yaxisIndex = v2);
            var k2 = a2.barHelpers.initialPositions();
            f2 = k2.y, y2 = k2.barHeight, c3 = k2.yDivision, g2 = k2.zeroW, u2 = k2.x, w2 = k2.barWidth, h3 = k2.xDivision, d2 = k2.zeroH, b2.push(u2 + w2 / 2);
            for (var A2 = r2.group({ class: "apexcharts-datalabels", "data:realIndex": v2 }), S2 = function(i4) {
              var r3 = a2.barHelpers.getStrokeWidth(n3, i4, v2), l3 = null, x2 = { indexes: { i: n3, j: i4, realIndex: v2 }, x: u2, y: f2, strokeWidth: r3, elSeries: m2 };
              l3 = a2.isHorizontal ? a2.drawHorizontalBoxPaths(e(e({}, x2), {}, { yDivision: c3, barHeight: y2, zeroW: g2 })) : a2.drawVerticalBoxPaths(e(e({}, x2), {}, { xDivision: h3, barWidth: w2, zeroH: d2 })), f2 = l3.y, u2 = l3.x, i4 > 0 && b2.push(u2 + w2 / 2), p2.push(f2), l3.pathTo.forEach(function(e2, h4) {
                var c4 = !a2.isBoxPlot && a2.candlestickOptions.wick.useFillColor ? l3.color[h4] : s3.globals.stroke.colors[n3], d3 = o2.fillPath({ seriesNumber: v2, dataPointIndex: i4, color: l3.color[h4], value: t3[n3][i4] });
                a2.renderSeries({ realIndex: v2, pathFill: d3, lineFill: c4, j: i4, i: n3, pathFrom: l3.pathFrom, pathTo: e2, strokeWidth: r3, elSeries: m2, x: u2, y: f2, series: t3, barHeight: y2, barWidth: w2, elDataLabelsWrap: A2, visibleSeries: a2.visibleI, type: s3.config.chart.type });
              });
            }, C2 = 0; C2 < s3.globals.dataPoints; C2++)
              S2(C2);
            s3.globals.seriesXvalues[v2] = b2, s3.globals.seriesYvalues[v2] = p2, l2.add(m2);
          }, c2 = 0; c2 < t3.length; c2++)
            h2(c2);
          return l2;
        } }, { key: "drawVerticalBoxPaths", value: function(t3) {
          var e2 = t3.indexes, i3 = t3.x;
          t3.y;
          var a2 = t3.xDivision, s3 = t3.barWidth, r2 = t3.zeroH, o2 = t3.strokeWidth, n2 = this.w, l2 = new m(this.ctx), h2 = e2.i, c2 = e2.j, d2 = true, g2 = n2.config.plotOptions.candlestick.colors.upward, u2 = n2.config.plotOptions.candlestick.colors.downward, f2 = "";
          this.isBoxPlot && (f2 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
          var p2 = this.yRatio[this.yaxisIndex], x2 = e2.realIndex, b2 = this.getOHLCValue(x2, c2), v2 = r2, y2 = r2;
          b2.o > b2.c && (d2 = false);
          var w2 = Math.min(b2.o, b2.c), k2 = Math.max(b2.o, b2.c), A2 = b2.m;
          n2.globals.isXNumeric && (i3 = (n2.globals.seriesX[x2][c2] - n2.globals.minX) / this.xRatio - s3 / 2);
          var S2 = i3 + s3 * this.visibleI;
          void 0 === this.series[h2][c2] || null === this.series[h2][c2] ? (w2 = r2, k2 = r2) : (w2 = r2 - w2 / p2, k2 = r2 - k2 / p2, v2 = r2 - b2.h / p2, y2 = r2 - b2.l / p2, A2 = r2 - b2.m / p2);
          var C2 = l2.move(S2, r2), L2 = l2.move(S2 + s3 / 2, w2);
          return n2.globals.previousPaths.length > 0 && (L2 = this.getPreviousPath(x2, c2, true)), C2 = this.isBoxPlot ? [l2.move(S2, w2) + l2.line(S2 + s3 / 2, w2) + l2.line(S2 + s3 / 2, v2) + l2.line(S2 + s3 / 4, v2) + l2.line(S2 + s3 - s3 / 4, v2) + l2.line(S2 + s3 / 2, v2) + l2.line(S2 + s3 / 2, w2) + l2.line(S2 + s3, w2) + l2.line(S2 + s3, A2) + l2.line(S2, A2) + l2.line(S2, w2 + o2 / 2), l2.move(S2, A2) + l2.line(S2 + s3, A2) + l2.line(S2 + s3, k2) + l2.line(S2 + s3 / 2, k2) + l2.line(S2 + s3 / 2, y2) + l2.line(S2 + s3 - s3 / 4, y2) + l2.line(S2 + s3 / 4, y2) + l2.line(S2 + s3 / 2, y2) + l2.line(S2 + s3 / 2, k2) + l2.line(S2, k2) + l2.line(S2, A2) + "z"] : [l2.move(S2, k2) + l2.line(S2 + s3 / 2, k2) + l2.line(S2 + s3 / 2, v2) + l2.line(S2 + s3 / 2, k2) + l2.line(S2 + s3, k2) + l2.line(S2 + s3, w2) + l2.line(S2 + s3 / 2, w2) + l2.line(S2 + s3 / 2, y2) + l2.line(S2 + s3 / 2, w2) + l2.line(S2, w2) + l2.line(S2, k2 - o2 / 2)], L2 += l2.move(S2, w2), n2.globals.isXNumeric || (i3 += a2), { pathTo: C2, pathFrom: L2, x: i3, y: k2, barXPosition: S2, color: this.isBoxPlot ? f2 : d2 ? [g2] : [u2] };
        } }, { key: "drawHorizontalBoxPaths", value: function(t3) {
          var e2 = t3.indexes;
          t3.x;
          var i3 = t3.y, a2 = t3.yDivision, s3 = t3.barHeight, r2 = t3.zeroW, o2 = t3.strokeWidth, n2 = this.w, l2 = new m(this.ctx), h2 = e2.i, c2 = e2.j, d2 = this.boxOptions.colors.lower;
          this.isBoxPlot && (d2 = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
          var g2 = this.invertedYRatio, u2 = e2.realIndex, f2 = this.getOHLCValue(u2, c2), p2 = r2, x2 = r2, b2 = Math.min(f2.o, f2.c), v2 = Math.max(f2.o, f2.c), y2 = f2.m;
          n2.globals.isXNumeric && (i3 = (n2.globals.seriesX[u2][c2] - n2.globals.minX) / this.invertedXRatio - s3 / 2);
          var w2 = i3 + s3 * this.visibleI;
          void 0 === this.series[h2][c2] || null === this.series[h2][c2] ? (b2 = r2, v2 = r2) : (b2 = r2 + b2 / g2, v2 = r2 + v2 / g2, p2 = r2 + f2.h / g2, x2 = r2 + f2.l / g2, y2 = r2 + f2.m / g2);
          var k2 = l2.move(r2, w2), A2 = l2.move(b2, w2 + s3 / 2);
          return n2.globals.previousPaths.length > 0 && (A2 = this.getPreviousPath(u2, c2, true)), k2 = [l2.move(b2, w2) + l2.line(b2, w2 + s3 / 2) + l2.line(p2, w2 + s3 / 2) + l2.line(p2, w2 + s3 / 2 - s3 / 4) + l2.line(p2, w2 + s3 / 2 + s3 / 4) + l2.line(p2, w2 + s3 / 2) + l2.line(b2, w2 + s3 / 2) + l2.line(b2, w2 + s3) + l2.line(y2, w2 + s3) + l2.line(y2, w2) + l2.line(b2 + o2 / 2, w2), l2.move(y2, w2) + l2.line(y2, w2 + s3) + l2.line(v2, w2 + s3) + l2.line(v2, w2 + s3 / 2) + l2.line(x2, w2 + s3 / 2) + l2.line(x2, w2 + s3 - s3 / 4) + l2.line(x2, w2 + s3 / 4) + l2.line(x2, w2 + s3 / 2) + l2.line(v2, w2 + s3 / 2) + l2.line(v2, w2) + l2.line(y2, w2) + "z"], A2 += l2.move(b2, w2), n2.globals.isXNumeric || (i3 += a2), { pathTo: k2, pathFrom: A2, x: v2, y: i3, barYPosition: w2, color: d2 };
        } }, { key: "getOHLCValue", value: function(t3, e2) {
          var i3 = this.w;
          return { o: this.isBoxPlot ? i3.globals.seriesCandleH[t3][e2] : i3.globals.seriesCandleO[t3][e2], h: this.isBoxPlot ? i3.globals.seriesCandleO[t3][e2] : i3.globals.seriesCandleH[t3][e2], m: i3.globals.seriesCandleM[t3][e2], l: this.isBoxPlot ? i3.globals.seriesCandleC[t3][e2] : i3.globals.seriesCandleL[t3][e2], c: this.isBoxPlot ? i3.globals.seriesCandleL[t3][e2] : i3.globals.seriesCandleC[t3][e2] };
        } }]), s2;
      }();
      var At = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "checkColorRange", value: function() {
          var t3 = this.w, e2 = false, i2 = t3.config.plotOptions[t3.config.chart.type];
          return i2.colorScale.ranges.length > 0 && i2.colorScale.ranges.map(function(t4, i3) {
            t4.from <= 0 && (e2 = true);
          }), e2;
        } }, { key: "getShadeColor", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = 1, o2 = s2.config.plotOptions[t3].shadeIntensity, n2 = this.determineColor(t3, e2, i2);
          s2.globals.hasNegs || a2 ? r2 = s2.config.plotOptions[t3].reverseNegativeShade ? n2.percent < 0 ? n2.percent / 100 * (1.25 * o2) : (1 - n2.percent / 100) * (1.25 * o2) : n2.percent <= 0 ? 1 - (1 + n2.percent / 100) * o2 : (1 - n2.percent / 100) * o2 : (r2 = 1 - n2.percent / 100, "treemap" === t3 && (r2 = (1 - n2.percent / 100) * (1.25 * o2)));
          var l2 = n2.color, h2 = new x();
          return s2.config.plotOptions[t3].enableShades && (l2 = "dark" === this.w.config.theme.mode ? x.hexToRgba(h2.shadeColor(-1 * r2, n2.color), s2.config.fill.opacity) : x.hexToRgba(h2.shadeColor(r2, n2.color), s2.config.fill.opacity)), { color: l2, colorProps: n2 };
        } }, { key: "determineColor", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = a2.globals.series[e2][i2], r2 = a2.config.plotOptions[t3], o2 = r2.colorScale.inverse ? i2 : e2;
          r2.distributed && "treemap" === a2.config.chart.type && (o2 = i2);
          var n2 = a2.globals.colors[o2], l2 = null, h2 = Math.min.apply(Math, u(a2.globals.series[e2])), c2 = Math.max.apply(Math, u(a2.globals.series[e2]));
          r2.distributed || "heatmap" !== t3 || (h2 = a2.globals.minY, c2 = a2.globals.maxY), void 0 !== r2.colorScale.min && (h2 = r2.colorScale.min < a2.globals.minY ? r2.colorScale.min : a2.globals.minY, c2 = r2.colorScale.max > a2.globals.maxY ? r2.colorScale.max : a2.globals.maxY);
          var d2 = Math.abs(c2) + Math.abs(h2), g2 = 100 * s2 / (0 === d2 ? d2 - 1e-6 : d2);
          r2.colorScale.ranges.length > 0 && r2.colorScale.ranges.map(function(t4, e3) {
            if (s2 >= t4.from && s2 <= t4.to) {
              n2 = t4.color, l2 = t4.foreColor ? t4.foreColor : null, h2 = t4.from, c2 = t4.to;
              var i3 = Math.abs(c2) + Math.abs(h2);
              g2 = 100 * s2 / (0 === i3 ? i3 - 1e-6 : i3);
            }
          });
          return { color: n2, foreColor: l2, percent: g2 };
        } }, { key: "calculateDataLabels", value: function(t3) {
          var e2 = t3.text, i2 = t3.x, a2 = t3.y, s2 = t3.i, r2 = t3.j, o2 = t3.colorProps, n2 = t3.fontSize, l2 = this.w.config.dataLabels, h2 = new m(this.ctx), c2 = new H(this.ctx), d2 = null;
          if (l2.enabled) {
            d2 = h2.group({ class: "apexcharts-data-labels" });
            var g2 = l2.offsetX, u2 = l2.offsetY, f2 = i2 + g2, p2 = a2 + parseFloat(l2.style.fontSize) / 3 + u2;
            c2.plotDataLabelsText({ x: f2, y: p2, text: e2, i: s2, j: r2, color: o2.foreColor, parent: d2, fontSize: n2, dataLabelsConfig: l2 });
          }
          return d2;
        } }, { key: "addListeners", value: function(t3) {
          var e2 = new m(this.ctx);
          t3.node.addEventListener("mouseenter", e2.pathMouseEnter.bind(this, t3)), t3.node.addEventListener("mouseleave", e2.pathMouseLeave.bind(this, t3)), t3.node.addEventListener("mousedown", e2.pathMouseDown.bind(this, t3));
        } }]), t2;
      }();
      var St = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.xRatio = i2.xRatio, this.yRatio = i2.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new At(e2), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;
        }
        return r(t2, [{ key: "draw", value: function(t3) {
          var e2 = this.w, i2 = new m(this.ctx), a2 = i2.group({ class: "apexcharts-heatmap" });
          a2.attr("clip-path", "url(#gridRectMask".concat(e2.globals.cuid, ")"));
          var s2 = e2.globals.gridWidth / e2.globals.dataPoints, r2 = e2.globals.gridHeight / e2.globals.series.length, o2 = 0, n2 = false;
          this.negRange = this.helpers.checkColorRange();
          var l2 = t3.slice();
          e2.config.yaxis[0].reversed && (n2 = true, l2.reverse());
          for (var h2 = n2 ? 0 : l2.length - 1; n2 ? h2 < l2.length : h2 >= 0; n2 ? h2++ : h2--) {
            var c2 = i2.group({ class: "apexcharts-series apexcharts-heatmap-series", seriesName: x.escapeString(e2.globals.seriesNames[h2]), rel: h2 + 1, "data:realIndex": h2 });
            if (this.ctx.series.addCollapsedClassToSeries(c2, h2), e2.config.chart.dropShadow.enabled) {
              var d2 = e2.config.chart.dropShadow;
              new v(this.ctx).dropShadow(c2, d2, h2);
            }
            for (var g2 = 0, u2 = e2.config.plotOptions.heatmap.shadeIntensity, f2 = 0; f2 < l2[h2].length; f2++) {
              var p2 = this.helpers.getShadeColor(e2.config.chart.type, h2, f2, this.negRange), b2 = p2.color, y2 = p2.colorProps;
              if ("image" === e2.config.fill.type)
                b2 = new F(this.ctx).fillPath({ seriesNumber: h2, dataPointIndex: f2, opacity: e2.globals.hasNegs ? y2.percent < 0 ? 1 - (1 + y2.percent / 100) : u2 + y2.percent / 100 : y2.percent / 100, patternID: x.randomId(), width: e2.config.fill.image.width ? e2.config.fill.image.width : s2, height: e2.config.fill.image.height ? e2.config.fill.image.height : r2 });
              var w2 = this.rectRadius, k2 = i2.drawRect(g2, o2, s2, r2, w2);
              if (k2.attr({ cx: g2, cy: o2 }), k2.node.classList.add("apexcharts-heatmap-rect"), c2.add(k2), k2.attr({ fill: b2, i: h2, index: h2, j: f2, val: l2[h2][f2], "stroke-width": this.strokeWidth, stroke: e2.config.plotOptions.heatmap.useFillColorAsStroke ? b2 : e2.globals.stroke.colors[0], color: b2 }), this.helpers.addListeners(k2), e2.config.chart.animations.enabled && !e2.globals.dataChanged) {
                var A2 = 1;
                e2.globals.resized || (A2 = e2.config.chart.animations.speed), this.animateHeatMap(k2, g2, o2, s2, r2, A2);
              }
              if (e2.globals.dataChanged) {
                var S2 = 1;
                if (this.dynamicAnim.enabled && e2.globals.shouldAnimate) {
                  S2 = this.dynamicAnim.speed;
                  var C2 = e2.globals.previousPaths[h2] && e2.globals.previousPaths[h2][f2] && e2.globals.previousPaths[h2][f2].color;
                  C2 || (C2 = "rgba(255, 255, 255, 0)"), this.animateHeatColor(k2, x.isColorHex(C2) ? C2 : x.rgb2hex(C2), x.isColorHex(b2) ? b2 : x.rgb2hex(b2), S2);
                }
              }
              var L2 = (0, e2.config.dataLabels.formatter)(e2.globals.series[h2][f2], { value: e2.globals.series[h2][f2], seriesIndex: h2, dataPointIndex: f2, w: e2 }), P2 = this.helpers.calculateDataLabels({ text: L2, x: g2 + s2 / 2, y: o2 + r2 / 2, i: h2, j: f2, colorProps: y2, series: l2 });
              null !== P2 && c2.add(P2), g2 += s2;
            }
            o2 += r2, a2.add(c2);
          }
          var T2 = e2.globals.yAxisScale[0].result.slice();
          e2.config.yaxis[0].reversed ? T2.unshift("") : T2.push(""), e2.globals.yAxisScale[0].result = T2;
          var M2 = e2.globals.gridHeight / e2.globals.series.length;
          return e2.config.yaxis[0].labels.offsetY = -M2 / 2, a2;
        } }, { key: "animateHeatMap", value: function(t3, e2, i2, a2, s2, r2) {
          var o2 = new b(this.ctx);
          o2.animateRect(t3, { x: e2 + a2 / 2, y: i2 + s2 / 2, width: 0, height: 0 }, { x: e2, y: i2, width: a2, height: s2 }, r2, function() {
            o2.animationCompleted(t3);
          });
        } }, { key: "animateHeatColor", value: function(t3, e2, i2, a2) {
          t3.attr({ fill: e2 }).animate(a2).attr({ fill: i2 });
        } }]), t2;
      }();
      var Ct = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "drawYAxisTexts", value: function(t3, e2, i2, a2) {
          var s2 = this.w, r2 = s2.config.yaxis[0], o2 = s2.globals.yLabelFormatters[0];
          return new m(this.ctx).drawText({ x: t3 + r2.labels.offsetX, y: e2 + r2.labels.offsetY, text: o2(a2, i2), textAnchor: "middle", fontSize: r2.labels.style.fontSize, fontFamily: r2.labels.style.fontFamily, foreColor: Array.isArray(r2.labels.style.colors) ? r2.labels.style.colors[i2] : r2.labels.style.colors });
        } }]), t2;
      }();
      var Lt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
          var i2 = this.w;
          this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== i2.globals.stroke.colors ? i2.globals.stroke.colors : i2.globals.colors, this.defaultSize = Math.min(i2.globals.gridWidth, i2.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = i2.globals.gridWidth / 2, "radialBar" === i2.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(i2.config.plotOptions.pie.endAngle - i2.config.plotOptions.pie.startAngle), this.initialAngle = i2.config.plotOptions.pie.startAngle % this.fullAngle, i2.globals.radialSize = this.defaultSize / 2.05 - i2.config.stroke.width - (i2.config.chart.sparkline.enabled ? 0 : i2.config.chart.dropShadow.blur), this.donutSize = i2.globals.radialSize * parseInt(i2.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];
        }
        return r(t2, [{ key: "draw", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = new m(this.ctx);
          if (this.ret = a2.group({ class: "apexcharts-pie" }), i2.globals.noData)
            return this.ret;
          for (var s2 = 0, r2 = 0; r2 < t3.length; r2++)
            s2 += x.negToZero(t3[r2]);
          var o2 = [], n2 = a2.group();
          0 === s2 && (s2 = 1e-5), t3.forEach(function(t4) {
            e2.maxY = Math.max(e2.maxY, t4);
          }), i2.config.yaxis[0].max && (this.maxY = i2.config.yaxis[0].max), "back" === i2.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret);
          for (var l2 = 0; l2 < t3.length; l2++) {
            var h2 = this.fullAngle * x.negToZero(t3[l2]) / s2;
            o2.push(h2), "polarArea" === this.chartType ? (o2[l2] = this.fullAngle / t3.length, this.sliceSizes.push(i2.globals.radialSize * t3[l2] / this.maxY)) : this.sliceSizes.push(i2.globals.radialSize);
          }
          if (i2.globals.dataChanged) {
            for (var c2, d2 = 0, g2 = 0; g2 < i2.globals.previousPaths.length; g2++)
              d2 += x.negToZero(i2.globals.previousPaths[g2]);
            for (var u2 = 0; u2 < i2.globals.previousPaths.length; u2++)
              c2 = this.fullAngle * x.negToZero(i2.globals.previousPaths[u2]) / d2, this.prevSectorAngleArr.push(c2);
          }
          this.donutSize < 0 && (this.donutSize = 0);
          var f2 = i2.config.plotOptions.pie.customScale, p2 = i2.globals.gridWidth / 2, b2 = i2.globals.gridHeight / 2, v2 = p2 - i2.globals.gridWidth / 2 * f2, y2 = b2 - i2.globals.gridHeight / 2 * f2;
          if ("donut" === this.chartType) {
            var w2 = a2.drawCircle(this.donutSize);
            w2.attr({ cx: this.centerX, cy: this.centerY, fill: i2.config.plotOptions.pie.donut.background ? i2.config.plotOptions.pie.donut.background : "transparent" }), n2.add(w2);
          }
          var k2 = this.drawArcs(o2, t3);
          if (this.sliceLabels.forEach(function(t4) {
            k2.add(t4);
          }), n2.attr({ transform: "translate(".concat(v2, ", ").concat(y2, ") scale(").concat(f2, ")") }), n2.add(k2), this.ret.add(n2), this.donutDataLabels.show) {
            var A2 = this.renderInnerDataLabels(this.donutDataLabels, { hollowSize: this.donutSize, centerX: this.centerX, centerY: this.centerY, opacity: this.donutDataLabels.show, translateX: v2, translateY: y2 });
            this.ret.add(A2);
          }
          return "front" === i2.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret), this.ret;
        } }, { key: "drawArcs", value: function(t3, e2) {
          var i2 = this.w, a2 = new v(this.ctx), s2 = new m(this.ctx), r2 = new F(this.ctx), o2 = s2.group({ class: "apexcharts-slices" }), n2 = this.initialAngle, l2 = this.initialAngle, h2 = this.initialAngle, c2 = this.initialAngle;
          this.strokeWidth = i2.config.stroke.show ? i2.config.stroke.width : 0;
          for (var d2 = 0; d2 < t3.length; d2++) {
            var g2 = s2.group({ class: "apexcharts-series apexcharts-pie-series", seriesName: x.escapeString(i2.globals.seriesNames[d2]), rel: d2 + 1, "data:realIndex": d2 });
            o2.add(g2), l2 = c2, h2 = (n2 = h2) + t3[d2], c2 = l2 + this.prevSectorAngleArr[d2];
            var u2 = h2 < n2 ? this.fullAngle + h2 - n2 : h2 - n2, f2 = r2.fillPath({ seriesNumber: d2, size: this.sliceSizes[d2], value: e2[d2] }), p2 = this.getChangedPath(l2, c2), b2 = s2.drawPath({ d: p2, stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d2] : this.lineColorArr, strokeWidth: 0, fill: f2, fillOpacity: i2.config.fill.opacity, classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d2) });
            if (b2.attr({ index: 0, j: d2 }), a2.setSelectionFilter(b2, 0, d2), i2.config.chart.dropShadow.enabled) {
              var y2 = i2.config.chart.dropShadow;
              a2.dropShadow(b2, y2, d2);
            }
            this.addListeners(b2, this.donutDataLabels), m.setAttrs(b2.node, { "data:angle": u2, "data:startAngle": n2, "data:strokeWidth": this.strokeWidth, "data:value": e2[d2] });
            var w2 = { x: 0, y: 0 };
            "pie" === this.chartType || "polarArea" === this.chartType ? w2 = x.polarToCartesian(this.centerX, this.centerY, i2.globals.radialSize / 1.25 + i2.config.plotOptions.pie.dataLabels.offset, (n2 + u2 / 2) % this.fullAngle) : "donut" === this.chartType && (w2 = x.polarToCartesian(this.centerX, this.centerY, (i2.globals.radialSize + this.donutSize) / 2 + i2.config.plotOptions.pie.dataLabels.offset, (n2 + u2 / 2) % this.fullAngle)), g2.add(b2);
            var k2 = 0;
            if (!this.initialAnim || i2.globals.resized || i2.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k2 = u2 / this.fullAngle * i2.config.chart.animations.speed) && (k2 = 1), this.animDur = k2 + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i2.globals.dataChanged ? this.animatePaths(b2, { size: this.sliceSizes[d2], endAngle: h2, startAngle: n2, prevStartAngle: l2, prevEndAngle: c2, animateStartingPos: true, i: d2, animBeginArr: this.animBeginArr, shouldSetPrevPaths: true, dur: i2.config.chart.animations.dynamicAnimation.speed }) : this.animatePaths(b2, { size: this.sliceSizes[d2], endAngle: h2, startAngle: n2, i: d2, totalItems: t3.length - 1, animBeginArr: this.animBeginArr, dur: k2 }), i2.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && b2.click(this.pieClicked.bind(this, d2)), void 0 !== i2.globals.selectedDataPoints[0] && i2.globals.selectedDataPoints[0].indexOf(d2) > -1 && this.pieClicked(d2), i2.config.dataLabels.enabled) {
              var A2 = w2.x, S2 = w2.y, C2 = 100 * u2 / this.fullAngle + "%";
              if (0 !== u2 && i2.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t3[d2]) {
                var L2 = i2.config.dataLabels.formatter;
                void 0 !== L2 && (C2 = L2(i2.globals.seriesPercent[d2][0], { seriesIndex: d2, w: i2 }));
                var P2 = i2.globals.dataLabels.style.colors[d2], T2 = s2.group({ class: "apexcharts-datalabels" }), M2 = s2.drawText({ x: A2, y: S2, text: C2, textAnchor: "middle", fontSize: i2.config.dataLabels.style.fontSize, fontFamily: i2.config.dataLabels.style.fontFamily, fontWeight: i2.config.dataLabels.style.fontWeight, foreColor: P2 });
                if (T2.add(M2), i2.config.dataLabels.dropShadow.enabled) {
                  var I2 = i2.config.dataLabels.dropShadow;
                  a2.dropShadow(M2, I2);
                }
                M2.node.classList.add("apexcharts-pie-label"), i2.config.chart.animations.animate && false === i2.globals.resized && (M2.node.classList.add("apexcharts-pie-label-delay"), M2.node.style.animationDelay = i2.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(T2);
              }
            }
          }
          return o2;
        } }, { key: "addListeners", value: function(t3, e2) {
          var i2 = new m(this.ctx);
          t3.node.addEventListener("mouseenter", i2.pathMouseEnter.bind(this, t3)), t3.node.addEventListener("mouseleave", i2.pathMouseLeave.bind(this, t3)), t3.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t3.node, e2)), t3.node.addEventListener("mousedown", i2.pathMouseDown.bind(this, t3)), this.donutDataLabels.total.showAlways || (t3.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t3.node, e2)), t3.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t3.node, e2)));
        } }, { key: "animatePaths", value: function(t3, e2) {
          var i2 = this.w, a2 = e2.endAngle < e2.startAngle ? this.fullAngle + e2.endAngle - e2.startAngle : e2.endAngle - e2.startAngle, s2 = a2, r2 = e2.startAngle, o2 = e2.startAngle;
          void 0 !== e2.prevStartAngle && void 0 !== e2.prevEndAngle && (r2 = e2.prevEndAngle, s2 = e2.prevEndAngle < e2.prevStartAngle ? this.fullAngle + e2.prevEndAngle - e2.prevStartAngle : e2.prevEndAngle - e2.prevStartAngle), e2.i === i2.config.series.length - 1 && (a2 + o2 > this.fullAngle ? e2.endAngle = e2.endAngle - (a2 + o2) : a2 + o2 < this.fullAngle && (e2.endAngle = e2.endAngle + (this.fullAngle - (a2 + o2)))), a2 === this.fullAngle && (a2 = this.fullAngle - 0.01), this.animateArc(t3, r2, o2, a2, s2, e2);
        } }, { key: "animateArc", value: function(t3, e2, i2, a2, s2, r2) {
          var o2, n2 = this, l2 = this.w, h2 = new b(this.ctx), c2 = r2.size;
          (isNaN(e2) || isNaN(s2)) && (e2 = i2, s2 = a2, r2.dur = 0);
          var d2 = a2, g2 = i2, u2 = e2 < i2 ? this.fullAngle + e2 - i2 : e2 - i2;
          l2.globals.dataChanged && r2.shouldSetPrevPaths && r2.prevEndAngle && (o2 = n2.getPiePath({ me: n2, startAngle: r2.prevStartAngle, angle: r2.prevEndAngle < r2.prevStartAngle ? this.fullAngle + r2.prevEndAngle - r2.prevStartAngle : r2.prevEndAngle - r2.prevStartAngle, size: c2 }), t3.attr({ d: o2 })), 0 !== r2.dur ? t3.animate(r2.dur, l2.globals.easing, r2.animBeginArr[r2.i]).afterAll(function() {
            "pie" !== n2.chartType && "donut" !== n2.chartType && "polarArea" !== n2.chartType || this.animate(l2.config.chart.animations.dynamicAnimation.speed).attr({ "stroke-width": n2.strokeWidth }), r2.i === l2.config.series.length - 1 && h2.animationCompleted(t3);
          }).during(function(l3) {
            d2 = u2 + (a2 - u2) * l3, r2.animateStartingPos && (d2 = s2 + (a2 - s2) * l3, g2 = e2 - s2 + (i2 - (e2 - s2)) * l3), o2 = n2.getPiePath({ me: n2, startAngle: g2, angle: d2, size: c2 }), t3.node.setAttribute("data:pathOrig", o2), t3.attr({ d: o2 });
          }) : (o2 = n2.getPiePath({ me: n2, startAngle: g2, angle: a2, size: c2 }), r2.isTrack || (l2.globals.animationEnded = true), t3.node.setAttribute("data:pathOrig", o2), t3.attr({ d: o2, "stroke-width": n2.strokeWidth }));
        } }, { key: "pieClicked", value: function(t3) {
          var e2, i2 = this.w, a2 = this, s2 = a2.sliceSizes[t3] + (i2.config.plotOptions.pie.expandOnClick ? 4 : 0), r2 = i2.globals.dom.Paper.select(".apexcharts-".concat(a2.chartType.toLowerCase(), "-slice-").concat(t3)).members[0];
          if ("true" !== r2.attr("data:pieClicked")) {
            var o2 = i2.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
            Array.prototype.forEach.call(o2, function(t4) {
              t4.setAttribute("data:pieClicked", "false");
              var e3 = t4.getAttribute("data:pathOrig");
              t4.setAttribute("d", e3);
            }), r2.attr("data:pieClicked", "true");
            var n2 = parseInt(r2.attr("data:startAngle"), 10), l2 = parseInt(r2.attr("data:angle"), 10);
            e2 = a2.getPiePath({ me: a2, startAngle: n2, angle: l2, size: s2 }), 360 !== l2 && r2.plot(e2);
          } else {
            r2.attr({ "data:pieClicked": "false" }), this.revertDataLabelsInner(r2.node, this.donutDataLabels);
            var h2 = r2.attr("data:pathOrig");
            r2.attr({ d: h2 });
          }
        } }, { key: "getChangedPath", value: function(t3, e2) {
          var i2 = "";
          return this.dynamicAnim && this.w.globals.dataChanged && (i2 = this.getPiePath({ me: this, startAngle: t3, angle: e2 - t3, size: this.size })), i2;
        } }, { key: "getPiePath", value: function(t3) {
          var e2 = t3.me, i2 = t3.startAngle, a2 = t3.angle, s2 = t3.size, r2 = i2, o2 = Math.PI * (r2 - 90) / 180, n2 = a2 + i2;
          Math.ceil(n2) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (n2 = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - 0.01), Math.ceil(n2) > this.fullAngle && (n2 -= this.fullAngle);
          var l2 = Math.PI * (n2 - 90) / 180, h2 = e2.centerX + s2 * Math.cos(o2), c2 = e2.centerY + s2 * Math.sin(o2), d2 = e2.centerX + s2 * Math.cos(l2), g2 = e2.centerY + s2 * Math.sin(l2), u2 = x.polarToCartesian(e2.centerX, e2.centerY, e2.donutSize, n2), f2 = x.polarToCartesian(e2.centerX, e2.centerY, e2.donutSize, r2), p2 = a2 > 180 ? 1 : 0, b2 = ["M", h2, c2, "A", s2, s2, 0, p2, 1, d2, g2];
          return "donut" === e2.chartType ? [].concat(b2, ["L", u2.x, u2.y, "A", e2.donutSize, e2.donutSize, 0, p2, 0, f2.x, f2.y, "L", h2, c2, "z"]).join(" ") : "pie" === e2.chartType || "polarArea" === e2.chartType ? [].concat(b2, ["L", e2.centerX, e2.centerY, "L", h2, c2]).join(" ") : [].concat(b2).join(" ");
        } }, { key: "drawPolarElements", value: function(t3) {
          var e2 = this.w, i2 = new _3(this.ctx), a2 = new m(this.ctx), s2 = new Ct(this.ctx), r2 = a2.group(), o2 = a2.group(), n2 = i2.niceScale(0, Math.ceil(this.maxY), e2.config.yaxis[0].tickAmount, 0, true), l2 = n2.result.reverse(), h2 = n2.result.length;
          this.maxY = n2.niceMax;
          for (var c2 = e2.globals.radialSize, d2 = c2 / (h2 - 1), g2 = 0; g2 < h2 - 1; g2++) {
            var u2 = a2.drawCircle(c2);
            if (u2.attr({ cx: this.centerX, cy: this.centerY, fill: "none", "stroke-width": e2.config.plotOptions.polarArea.rings.strokeWidth, stroke: e2.config.plotOptions.polarArea.rings.strokeColor }), e2.config.yaxis[0].show) {
              var f2 = s2.drawYAxisTexts(this.centerX, this.centerY - c2 + parseInt(e2.config.yaxis[0].labels.style.fontSize, 10) / 2, g2, l2[g2]);
              o2.add(f2);
            }
            r2.add(u2), c2 -= d2;
          }
          this.drawSpokes(t3), t3.add(r2), t3.add(o2);
        } }, { key: "renderInnerDataLabels", value: function(t3, e2) {
          var i2 = this.w, a2 = new m(this.ctx), s2 = a2.group({ class: "apexcharts-datalabels-group", transform: "translate(".concat(e2.translateX ? e2.translateX : 0, ", ").concat(e2.translateY ? e2.translateY : 0, ") scale(").concat(i2.config.plotOptions.pie.customScale, ")") }), r2 = t3.total.show;
          s2.node.style.opacity = e2.opacity;
          var o2, n2, l2 = e2.centerX, h2 = e2.centerY;
          o2 = void 0 === t3.name.color ? i2.globals.colors[0] : t3.name.color;
          var c2 = t3.name.fontSize, d2 = t3.name.fontFamily, g2 = t3.name.fontWeight;
          n2 = void 0 === t3.value.color ? i2.config.chart.foreColor : t3.value.color;
          var u2 = t3.value.formatter, f2 = "", p2 = "";
          if (r2 ? (o2 = t3.total.color, c2 = t3.total.fontSize, d2 = t3.total.fontFamily, g2 = t3.total.fontWeight, p2 = t3.total.label, f2 = t3.total.formatter(i2)) : 1 === i2.globals.series.length && (f2 = u2(i2.globals.series[0], i2), p2 = i2.globals.seriesNames[0]), p2 && (p2 = t3.name.formatter(p2, t3.total.show, i2)), t3.name.show) {
            var x2 = a2.drawText({ x: l2, y: h2 + parseFloat(t3.name.offsetY), text: p2, textAnchor: "middle", foreColor: o2, fontSize: c2, fontWeight: g2, fontFamily: d2 });
            x2.node.classList.add("apexcharts-datalabel-label"), s2.add(x2);
          }
          if (t3.value.show) {
            var b2 = t3.name.show ? parseFloat(t3.value.offsetY) + 16 : t3.value.offsetY, v2 = a2.drawText({ x: l2, y: h2 + b2, text: f2, textAnchor: "middle", foreColor: n2, fontWeight: t3.value.fontWeight, fontSize: t3.value.fontSize, fontFamily: t3.value.fontFamily });
            v2.node.classList.add("apexcharts-datalabel-value"), s2.add(v2);
          }
          return s2;
        } }, { key: "printInnerLabels", value: function(t3, e2, i2, a2) {
          var s2, r2 = this.w;
          a2 ? s2 = void 0 === t3.name.color ? r2.globals.colors[parseInt(a2.parentNode.getAttribute("rel"), 10) - 1] : t3.name.color : r2.globals.series.length > 1 && t3.total.show && (s2 = t3.total.color);
          var o2 = r2.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"), n2 = r2.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
          i2 = (0, t3.value.formatter)(i2, r2), a2 || "function" != typeof t3.total.formatter || (i2 = t3.total.formatter(r2));
          var l2 = e2 === t3.total.label;
          e2 = t3.name.formatter(e2, l2, r2), null !== o2 && (o2.textContent = e2), null !== n2 && (n2.textContent = i2), null !== o2 && (o2.style.fill = s2);
        } }, { key: "printDataLabelsInner", value: function(t3, e2) {
          var i2 = this.w, a2 = t3.getAttribute("data:value"), s2 = i2.globals.seriesNames[parseInt(t3.parentNode.getAttribute("rel"), 10) - 1];
          i2.globals.series.length > 1 && this.printInnerLabels(e2, s2, a2, t3);
          var r2 = i2.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
          null !== r2 && (r2.style.opacity = 1);
        } }, { key: "drawSpokes", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = new m(this.ctx), s2 = i2.config.plotOptions.polarArea.spokes;
          if (0 !== s2.strokeWidth) {
            for (var r2 = [], o2 = 360 / i2.globals.series.length, n2 = 0; n2 < i2.globals.series.length; n2++)
              r2.push(x.polarToCartesian(this.centerX, this.centerY, i2.globals.radialSize, i2.config.plotOptions.pie.startAngle + o2 * n2));
            r2.forEach(function(i3, r3) {
              var o3 = a2.drawLine(i3.x, i3.y, e2.centerX, e2.centerY, Array.isArray(s2.connectorColors) ? s2.connectorColors[r3] : s2.connectorColors);
              t3.add(o3);
            });
          }
        } }, { key: "revertDataLabelsInner", value: function(t3, e2, i2) {
          var a2 = this, s2 = this.w, r2 = s2.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"), o2 = false, n2 = s2.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"), l2 = function(t4) {
            var i3 = t4.makeSliceOut, s3 = t4.printLabel;
            Array.prototype.forEach.call(n2, function(t5) {
              "true" === t5.getAttribute("data:pieClicked") && (i3 && (o2 = true), s3 && a2.printDataLabelsInner(t5, e2));
            });
          };
          if (l2({ makeSliceOut: true, printLabel: false }), e2.total.show && s2.globals.series.length > 1)
            o2 && !e2.total.showAlways ? l2({ makeSliceOut: false, printLabel: true }) : this.printInnerLabels(e2, e2.total.label, e2.total.formatter(s2));
          else if (l2({ makeSliceOut: false, printLabel: true }), !o2)
            if (s2.globals.selectedDataPoints.length && s2.globals.series.length > 1)
              if (s2.globals.selectedDataPoints[0].length > 0) {
                var h2 = s2.globals.selectedDataPoints[0], c2 = s2.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(h2));
                this.printDataLabelsInner(c2, e2);
              } else
                r2 && s2.globals.selectedDataPoints.length && 0 === s2.globals.selectedDataPoints[0].length && (r2.style.opacity = 0);
            else
              r2 && s2.globals.series.length > 1 && (r2.style.opacity = 0);
        } }]), t2;
      }();
      var Pt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
          var i2 = this.w;
          this.graphics = new m(this.ctx), this.lineColorArr = void 0 !== i2.globals.stroke.colors ? i2.globals.stroke.colors : i2.globals.colors, this.defaultSize = i2.globals.svgHeight < i2.globals.svgWidth ? i2.globals.gridHeight + 1.5 * i2.globals.goldenPadding : i2.globals.gridWidth, this.isLog = i2.config.yaxis[0].logarithmic, this.coreUtils = new y(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(i2.globals.maxY, 0) : i2.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : i2.globals.minY, this.polygons = i2.config.plotOptions.radar.polygons, this.strokeWidth = i2.config.stroke.show ? i2.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - i2.config.chart.dropShadow.blur, i2.config.xaxis.labels.show && (this.size = this.size - i2.globals.xAxisLabelsWidth / 1.75), void 0 !== i2.config.plotOptions.radar.size && (this.size = i2.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
        }
        return r(t2, [{ key: "draw", value: function(t3) {
          var i2 = this, a2 = this.w, s2 = new F(this.ctx), r2 = [], o2 = new H(this.ctx);
          t3.length && (this.dataPointsLen = t3[a2.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
          var n2 = a2.globals.gridWidth / 2, l2 = a2.globals.gridHeight / 2, h2 = n2 + a2.config.plotOptions.radar.offsetX, c2 = l2 + a2.config.plotOptions.radar.offsetY, d2 = this.graphics.group({ class: "apexcharts-radar-series apexcharts-plot-series", transform: "translate(".concat(h2 || 0, ", ").concat(c2 || 0, ")") }), g2 = [], u2 = null, f2 = null;
          if (this.yaxisLabels = this.graphics.group({ class: "apexcharts-yaxis" }), t3.forEach(function(t4, n3) {
            var l3 = t4.length === a2.globals.dataPoints, h3 = i2.graphics.group().attr({ class: "apexcharts-series", "data:longestSeries": l3, seriesName: x.escapeString(a2.globals.seriesNames[n3]), rel: n3 + 1, "data:realIndex": n3 });
            i2.dataRadiusOfPercent[n3] = [], i2.dataRadius[n3] = [], i2.angleArr[n3] = [], t4.forEach(function(t5, e2) {
              var a3 = Math.abs(i2.maxValue - i2.minValue);
              t5 += Math.abs(i2.minValue), i2.isLog && (t5 = i2.coreUtils.getLogVal(t5, 0)), i2.dataRadiusOfPercent[n3][e2] = t5 / a3, i2.dataRadius[n3][e2] = i2.dataRadiusOfPercent[n3][e2] * i2.size, i2.angleArr[n3][e2] = e2 * i2.disAngle;
            }), g2 = i2.getDataPointsPos(i2.dataRadius[n3], i2.angleArr[n3]);
            var c3 = i2.createPaths(g2, { x: 0, y: 0 });
            u2 = i2.graphics.group({ class: "apexcharts-series-markers-wrap apexcharts-element-hidden" }), f2 = i2.graphics.group({ class: "apexcharts-datalabels", "data:realIndex": n3 }), a2.globals.delayedElements.push({ el: u2.node, index: n3 });
            var d3 = { i: n3, realIndex: n3, animationDelay: n3, initialSpeed: a2.config.chart.animations.speed, dataChangeSpeed: a2.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-radar", shouldClipToGrid: false, bindEventsOnPaths: false, stroke: a2.globals.stroke.colors[n3], strokeLineCap: a2.config.stroke.lineCap }, p3 = null;
            a2.globals.previousPaths.length > 0 && (p3 = i2.getPreviousPath(n3));
            for (var b2 = 0; b2 < c3.linePathsTo.length; b2++) {
              var m2 = i2.graphics.renderPaths(e(e({}, d3), {}, { pathFrom: null === p3 ? c3.linePathsFrom[b2] : p3, pathTo: c3.linePathsTo[b2], strokeWidth: Array.isArray(i2.strokeWidth) ? i2.strokeWidth[n3] : i2.strokeWidth, fill: "none", drawShadow: false }));
              h3.add(m2);
              var y2 = s2.fillPath({ seriesNumber: n3 }), w2 = i2.graphics.renderPaths(e(e({}, d3), {}, { pathFrom: null === p3 ? c3.areaPathsFrom[b2] : p3, pathTo: c3.areaPathsTo[b2], strokeWidth: 0, fill: y2, drawShadow: false }));
              if (a2.config.chart.dropShadow.enabled) {
                var k2 = new v(i2.ctx), A2 = a2.config.chart.dropShadow;
                k2.dropShadow(w2, Object.assign({}, A2, { noUserSpaceOnUse: true }), n3);
              }
              h3.add(w2);
            }
            t4.forEach(function(t5, s3) {
              var r3 = new R(i2.ctx).getMarkerConfig({ cssClass: "apexcharts-marker", seriesIndex: n3, dataPointIndex: s3 }), l4 = i2.graphics.drawMarker(g2[s3].x, g2[s3].y, r3);
              l4.attr("rel", s3), l4.attr("j", s3), l4.attr("index", n3), l4.node.setAttribute("default-marker-size", r3.pSize);
              var c4 = i2.graphics.group({ class: "apexcharts-series-markers" });
              c4 && c4.add(l4), u2.add(c4), h3.add(u2);
              var d4 = a2.config.dataLabels;
              if (d4.enabled) {
                var p4 = d4.formatter(a2.globals.series[n3][s3], { seriesIndex: n3, dataPointIndex: s3, w: a2 });
                o2.plotDataLabelsText({ x: g2[s3].x, y: g2[s3].y, text: p4, textAnchor: "middle", i: n3, j: n3, parent: f2, offsetCorrection: false, dataLabelsConfig: e({}, d4) });
              }
              h3.add(f2);
            }), r2.push(h3);
          }), this.drawPolygons({ parent: d2 }), a2.config.xaxis.labels.show) {
            var p2 = this.drawXAxisTexts();
            d2.add(p2);
          }
          return r2.forEach(function(t4) {
            d2.add(t4);
          }), d2.add(this.yaxisLabels), d2;
        } }, { key: "drawPolygons", value: function(t3) {
          for (var e2 = this, i2 = this.w, a2 = t3.parent, s2 = new Ct(this.ctx), r2 = i2.globals.yAxisScale[0].result.reverse(), o2 = r2.length, n2 = [], l2 = this.size / (o2 - 1), h2 = 0; h2 < o2; h2++)
            n2[h2] = l2 * h2;
          n2.reverse();
          var c2 = [], d2 = [];
          n2.forEach(function(t4, i3) {
            var a3 = x.getPolygonPos(t4, e2.dataPointsLen), s3 = "";
            a3.forEach(function(t5, a4) {
              if (0 === i3) {
                var r3 = e2.graphics.drawLine(t5.x, t5.y, 0, 0, Array.isArray(e2.polygons.connectorColors) ? e2.polygons.connectorColors[a4] : e2.polygons.connectorColors);
                d2.push(r3);
              }
              0 === a4 && e2.yaxisLabelsTextsPos.push({ x: t5.x, y: t5.y }), s3 += t5.x + "," + t5.y + " ";
            }), c2.push(s3);
          }), c2.forEach(function(t4, s3) {
            var r3 = e2.polygons.strokeColors, o3 = e2.polygons.strokeWidth, n3 = e2.graphics.drawPolygon(t4, Array.isArray(r3) ? r3[s3] : r3, Array.isArray(o3) ? o3[s3] : o3, i2.globals.radarPolygons.fill.colors[s3]);
            a2.add(n3);
          }), d2.forEach(function(t4) {
            a2.add(t4);
          }), i2.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function(t4, i3) {
            var a3 = s2.drawYAxisTexts(t4.x, t4.y, i3, r2[i3]);
            e2.yaxisLabels.add(a3);
          });
        } }, { key: "drawXAxisTexts", value: function() {
          var t3 = this, i2 = this.w, a2 = i2.config.xaxis.labels, s2 = this.graphics.group({ class: "apexcharts-xaxis" }), r2 = x.getPolygonPos(this.size, this.dataPointsLen);
          return i2.globals.labels.forEach(function(o2, n2) {
            var l2 = i2.config.xaxis.labels.formatter, h2 = new H(t3.ctx);
            if (r2[n2]) {
              var c2 = t3.getTextPos(r2[n2], t3.size), d2 = l2(o2, { seriesIndex: -1, dataPointIndex: n2, w: i2 });
              h2.plotDataLabelsText({ x: c2.newX, y: c2.newY, text: d2, textAnchor: c2.textAnchor, i: n2, j: n2, parent: s2, color: Array.isArray(a2.style.colors) && a2.style.colors[n2] ? a2.style.colors[n2] : "#a8a8a8", dataLabelsConfig: e({ textAnchor: c2.textAnchor, dropShadow: { enabled: false } }, a2), offsetCorrection: false });
            }
          }), s2;
        } }, { key: "createPaths", value: function(t3, e2) {
          var i2 = this, a2 = [], s2 = [], r2 = [], o2 = [];
          if (t3.length) {
            s2 = [this.graphics.move(e2.x, e2.y)], o2 = [this.graphics.move(e2.x, e2.y)];
            var n2 = this.graphics.move(t3[0].x, t3[0].y), l2 = this.graphics.move(t3[0].x, t3[0].y);
            t3.forEach(function(e3, a3) {
              n2 += i2.graphics.line(e3.x, e3.y), l2 += i2.graphics.line(e3.x, e3.y), a3 === t3.length - 1 && (n2 += "Z", l2 += "Z");
            }), a2.push(n2), r2.push(l2);
          }
          return { linePathsFrom: s2, linePathsTo: a2, areaPathsFrom: o2, areaPathsTo: r2 };
        } }, { key: "getTextPos", value: function(t3, e2) {
          var i2 = "middle", a2 = t3.x, s2 = t3.y;
          return Math.abs(t3.x) >= 10 ? t3.x > 0 ? (i2 = "start", a2 += 10) : t3.x < 0 && (i2 = "end", a2 -= 10) : i2 = "middle", Math.abs(t3.y) >= e2 - 10 && (t3.y < 0 ? s2 -= 10 : t3.y > 0 && (s2 += 10)), { textAnchor: i2, newX: a2, newY: s2 };
        } }, { key: "getPreviousPath", value: function(t3) {
          for (var e2 = this.w, i2 = null, a2 = 0; a2 < e2.globals.previousPaths.length; a2++) {
            var s2 = e2.globals.previousPaths[a2];
            s2.paths.length > 0 && parseInt(s2.realIndex, 10) === parseInt(t3, 10) && void 0 !== e2.globals.previousPaths[a2].paths[0] && (i2 = e2.globals.previousPaths[a2].paths[0].d);
          }
          return i2;
        } }, { key: "getDataPointsPos", value: function(t3, e2) {
          var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
          t3 = t3 || [], e2 = e2 || [];
          for (var a2 = [], s2 = 0; s2 < i2; s2++) {
            var r2 = {};
            r2.x = t3[s2] * Math.sin(e2[s2]), r2.y = -t3[s2] * Math.cos(e2[s2]), a2.push(r2);
          }
          return a2;
        } }]), t2;
      }();
      var Tt = function(t2) {
        n(i2, Lt);
        var e2 = d(i2);
        function i2(t3) {
          var s2;
          a(this, i2), (s2 = e2.call(this, t3)).ctx = t3, s2.w = t3.w, s2.animBeginArr = [0], s2.animDur = 0;
          var r2 = s2.w;
          return s2.startAngle = r2.config.plotOptions.radialBar.startAngle, s2.endAngle = r2.config.plotOptions.radialBar.endAngle, s2.totalAngle = Math.abs(r2.config.plotOptions.radialBar.endAngle - r2.config.plotOptions.radialBar.startAngle), s2.trackStartAngle = r2.config.plotOptions.radialBar.track.startAngle, s2.trackEndAngle = r2.config.plotOptions.radialBar.track.endAngle, s2.donutDataLabels = s2.w.config.plotOptions.radialBar.dataLabels, s2.radialDataLabels = s2.donutDataLabels, s2.trackStartAngle || (s2.trackStartAngle = s2.startAngle), s2.trackEndAngle || (s2.trackEndAngle = s2.endAngle), 360 === s2.endAngle && (s2.endAngle = 359.99), s2.margin = parseInt(r2.config.plotOptions.radialBar.track.margin, 10), s2;
        }
        return r(i2, [{ key: "draw", value: function(t3) {
          var e3 = this.w, i3 = new m(this.ctx), a2 = i3.group({ class: "apexcharts-radialbar" });
          if (e3.globals.noData)
            return a2;
          var s2 = i3.group(), r2 = this.defaultSize / 2, o2 = e3.globals.gridWidth / 2, n2 = this.defaultSize / 2.05;
          e3.config.chart.sparkline.enabled || (n2 = n2 - e3.config.stroke.width - e3.config.chart.dropShadow.blur);
          var l2 = e3.globals.fill.colors;
          if (e3.config.plotOptions.radialBar.track.show) {
            var h2 = this.drawTracks({ size: n2, centerX: o2, centerY: r2, colorArr: l2, series: t3 });
            s2.add(h2);
          }
          var c2 = this.drawArcs({ size: n2, centerX: o2, centerY: r2, colorArr: l2, series: t3 }), d2 = 360;
          e3.config.plotOptions.radialBar.startAngle < 0 && (d2 = this.totalAngle);
          var g2 = (360 - d2) / 360;
          if (e3.globals.radialSize = n2 - n2 * g2, this.radialDataLabels.value.show) {
            var u2 = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
            e3.globals.radialSize += u2 * g2;
          }
          return s2.add(c2.g), "front" === e3.config.plotOptions.radialBar.hollow.position && (c2.g.add(c2.elHollow), c2.dataLabels && c2.g.add(c2.dataLabels)), a2.add(s2), a2;
        } }, { key: "drawTracks", value: function(t3) {
          var e3 = this.w, i3 = new m(this.ctx), a2 = i3.group({ class: "apexcharts-tracks" }), s2 = new v(this.ctx), r2 = new F(this.ctx), o2 = this.getStrokeWidth(t3);
          t3.size = t3.size - o2 / 2;
          for (var n2 = 0; n2 < t3.series.length; n2++) {
            var l2 = i3.group({ class: "apexcharts-radialbar-track apexcharts-track" });
            a2.add(l2), l2.attr({ rel: n2 + 1 }), t3.size = t3.size - o2 - this.margin;
            var h2 = e3.config.plotOptions.radialBar.track, c2 = r2.fillPath({ seriesNumber: 0, size: t3.size, fillColors: Array.isArray(h2.background) ? h2.background[n2] : h2.background, solid: true }), d2 = this.trackStartAngle, g2 = this.trackEndAngle;
            Math.abs(g2) + Math.abs(d2) >= 360 && (g2 = 360 - Math.abs(this.startAngle) - 0.1);
            var u2 = i3.drawPath({ d: "", stroke: c2, strokeWidth: o2 * parseInt(h2.strokeWidth, 10) / 100, fill: "none", strokeOpacity: h2.opacity, classes: "apexcharts-radialbar-area" });
            if (h2.dropShadow.enabled) {
              var f2 = h2.dropShadow;
              s2.dropShadow(u2, f2);
            }
            l2.add(u2), u2.attr("id", "apexcharts-radialbarTrack-" + n2), this.animatePaths(u2, { centerX: t3.centerX, centerY: t3.centerY, endAngle: g2, startAngle: d2, size: t3.size, i: n2, totalItems: 2, animBeginArr: 0, dur: 0, isTrack: true, easing: e3.globals.easing });
          }
          return a2;
        } }, { key: "drawArcs", value: function(t3) {
          var e3 = this.w, i3 = new m(this.ctx), a2 = new F(this.ctx), s2 = new v(this.ctx), r2 = i3.group(), o2 = this.getStrokeWidth(t3);
          t3.size = t3.size - o2 / 2;
          var n2 = e3.config.plotOptions.radialBar.hollow.background, l2 = t3.size - o2 * t3.series.length - this.margin * t3.series.length - o2 * parseInt(e3.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2, h2 = l2 - e3.config.plotOptions.radialBar.hollow.margin;
          void 0 !== e3.config.plotOptions.radialBar.hollow.image && (n2 = this.drawHollowImage(t3, r2, l2, n2));
          var c2 = this.drawHollow({ size: h2, centerX: t3.centerX, centerY: t3.centerY, fill: n2 || "transparent" });
          if (e3.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
            var d2 = e3.config.plotOptions.radialBar.hollow.dropShadow;
            s2.dropShadow(c2, d2);
          }
          var g2 = 1;
          !this.radialDataLabels.total.show && e3.globals.series.length > 1 && (g2 = 0);
          var u2 = null;
          this.radialDataLabels.show && (u2 = this.renderInnerDataLabels(this.radialDataLabels, { hollowSize: l2, centerX: t3.centerX, centerY: t3.centerY, opacity: g2 })), "back" === e3.config.plotOptions.radialBar.hollow.position && (r2.add(c2), u2 && r2.add(u2));
          var f2 = false;
          e3.config.plotOptions.radialBar.inverseOrder && (f2 = true);
          for (var p2 = f2 ? t3.series.length - 1 : 0; f2 ? p2 >= 0 : p2 < t3.series.length; f2 ? p2-- : p2++) {
            var b2 = i3.group({ class: "apexcharts-series apexcharts-radial-series", seriesName: x.escapeString(e3.globals.seriesNames[p2]) });
            r2.add(b2), b2.attr({ rel: p2 + 1, "data:realIndex": p2 }), this.ctx.series.addCollapsedClassToSeries(b2, p2), t3.size = t3.size - o2 - this.margin;
            var y2 = a2.fillPath({ seriesNumber: p2, size: t3.size, value: t3.series[p2] }), w2 = this.startAngle, k2 = void 0, A2 = x.negToZero(t3.series[p2] > 100 ? 100 : t3.series[p2]) / 100, S2 = Math.round(this.totalAngle * A2) + this.startAngle, C2 = void 0;
            e3.globals.dataChanged && (k2 = this.startAngle, C2 = Math.round(this.totalAngle * x.negToZero(e3.globals.previousPaths[p2]) / 100) + k2), Math.abs(S2) + Math.abs(w2) >= 360 && (S2 -= 0.01), Math.abs(C2) + Math.abs(k2) >= 360 && (C2 -= 0.01);
            var L2 = S2 - w2, P2 = Array.isArray(e3.config.stroke.dashArray) ? e3.config.stroke.dashArray[p2] : e3.config.stroke.dashArray, T2 = i3.drawPath({ d: "", stroke: y2, strokeWidth: o2, fill: "none", fillOpacity: e3.config.fill.opacity, classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + p2, strokeDashArray: P2 });
            if (m.setAttrs(T2.node, { "data:angle": L2, "data:value": t3.series[p2] }), e3.config.chart.dropShadow.enabled) {
              var M2 = e3.config.chart.dropShadow;
              s2.dropShadow(T2, M2, p2);
            }
            s2.setSelectionFilter(T2, 0, p2), this.addListeners(T2, this.radialDataLabels), b2.add(T2), T2.attr({ index: 0, j: p2 });
            var I2 = 0;
            !this.initialAnim || e3.globals.resized || e3.globals.dataChanged || (I2 = e3.config.chart.animations.speed), e3.globals.dataChanged && (I2 = e3.config.chart.animations.dynamicAnimation.speed), this.animDur = I2 / (1.2 * t3.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(T2, { centerX: t3.centerX, centerY: t3.centerY, endAngle: S2, startAngle: w2, prevEndAngle: C2, prevStartAngle: k2, size: t3.size, i: p2, totalItems: 2, animBeginArr: this.animBeginArr, dur: I2, shouldSetPrevPaths: true, easing: e3.globals.easing });
          }
          return { g: r2, elHollow: c2, dataLabels: u2 };
        } }, { key: "drawHollow", value: function(t3) {
          var e3 = new m(this.ctx).drawCircle(2 * t3.size);
          return e3.attr({ class: "apexcharts-radialbar-hollow", cx: t3.centerX, cy: t3.centerY, r: t3.size, fill: t3.fill }), e3;
        } }, { key: "drawHollowImage", value: function(t3, e3, i3, a2) {
          var s2 = this.w, r2 = new F(this.ctx), o2 = x.randomId(), n2 = s2.config.plotOptions.radialBar.hollow.image;
          if (s2.config.plotOptions.radialBar.hollow.imageClipped)
            r2.clippedImgArea({ width: i3, height: i3, image: n2, patternID: "pattern".concat(s2.globals.cuid).concat(o2) }), a2 = "url(#pattern".concat(s2.globals.cuid).concat(o2, ")");
          else {
            var l2 = s2.config.plotOptions.radialBar.hollow.imageWidth, h2 = s2.config.plotOptions.radialBar.hollow.imageHeight;
            if (void 0 === l2 && void 0 === h2) {
              var c2 = s2.globals.dom.Paper.image(n2).loaded(function(e4) {
                this.move(t3.centerX - e4.width / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t3.centerY - e4.height / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY);
              });
              e3.add(c2);
            } else {
              var d2 = s2.globals.dom.Paper.image(n2).loaded(function(e4) {
                this.move(t3.centerX - l2 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetX, t3.centerY - h2 / 2 + s2.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l2, h2);
              });
              e3.add(d2);
            }
          }
          return a2;
        } }, { key: "getStrokeWidth", value: function(t3) {
          var e3 = this.w;
          return t3.size * (100 - parseInt(e3.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t3.series.length + 1) - this.margin;
        } }]), i2;
      }();
      var Mt = function(t2) {
        n(s2, yt);
        var i2 = d(s2);
        function s2() {
          return a(this, s2), i2.apply(this, arguments);
        }
        return r(s2, [{ key: "draw", value: function(t3, i3) {
          var a2 = this.w, s3 = new m(this.ctx);
          this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t3, this.seriesRangeStart = a2.globals.seriesRangeStart, this.seriesRangeEnd = a2.globals.seriesRangeEnd, this.barHelpers.initVariables(t3);
          for (var r2 = s3.group({ class: "apexcharts-rangebar-series apexcharts-plot-series" }), o2 = 0; o2 < t3.length; o2++) {
            var n2, l2, h2, c2 = void 0, d2 = void 0, g2 = void 0, u2 = a2.globals.comboCharts ? i3[o2] : o2, f2 = s3.group({ class: "apexcharts-series", seriesName: x.escapeString(a2.globals.seriesNames[u2]), rel: o2 + 1, "data:realIndex": u2 });
            this.ctx.series.addCollapsedClassToSeries(f2, u2), t3[o2].length > 0 && (this.visibleI = this.visibleI + 1);
            var p2 = 0, b2 = 0;
            this.yRatio.length > 1 && (this.yaxisIndex = u2);
            var v2 = this.barHelpers.initialPositions();
            d2 = v2.y, h2 = v2.zeroW, c2 = v2.x, b2 = v2.barWidth, n2 = v2.xDivision, l2 = v2.zeroH;
            for (var y2 = s3.group({ class: "apexcharts-datalabels", "data:realIndex": u2 }), w2 = s3.group({ class: "apexcharts-rangebar-goals-markers", style: "pointer-events: none" }), k2 = 0; k2 < a2.globals.dataPoints; k2++) {
              var A2 = this.barHelpers.getStrokeWidth(o2, k2, u2), S2 = this.seriesRangeStart[o2][k2], C2 = this.seriesRangeEnd[o2][k2], L2 = null, P2 = null, T2 = { x: c2, y: d2, strokeWidth: A2, elSeries: f2 };
              if (g2 = v2.yDivision, p2 = v2.barHeight, this.isHorizontal) {
                P2 = d2 + p2 * this.visibleI;
                var M2 = this.seriesLen;
                a2.config.plotOptions.bar.rangeBarGroupRows && (M2 = 1);
                var I2 = (g2 - p2 * M2) / 2;
                if (void 0 === a2.config.series[o2].data[k2])
                  break;
                if (a2.config.series[o2].data[k2].x) {
                  var X2 = this.detectOverlappingBars({ i: o2, j: k2, barYPosition: P2, srty: I2, barHeight: p2, yDivision: g2, initPositions: v2 });
                  p2 = X2.barHeight, P2 = X2.barYPosition;
                }
                b2 = (L2 = this.drawRangeBarPaths(e({ indexes: { i: o2, j: k2, realIndex: u2 }, barHeight: p2, barYPosition: P2, zeroW: h2, yDivision: g2, y1: S2, y2: C2 }, T2))).barWidth;
              } else
                p2 = (L2 = this.drawRangeColumnPaths(e({ indexes: { i: o2, j: k2, realIndex: u2 }, zeroH: l2, barWidth: b2, xDivision: n2 }, T2))).barHeight;
              var z2 = this.barHelpers.drawGoalLine({ barXPosition: L2.barXPosition, barYPosition: P2, goalX: L2.goalX, goalY: L2.goalY, barHeight: p2, barWidth: b2 });
              z2 && w2.add(z2), d2 = L2.y, c2 = L2.x;
              var E2 = this.barHelpers.getPathFillColor(t3, o2, k2, u2), Y2 = a2.globals.stroke.colors[u2];
              this.renderSeries({ realIndex: u2, pathFill: E2, lineFill: Y2, j: k2, i: o2, x: c2, y: d2, y1: S2, y2: C2, pathFrom: L2.pathFrom, pathTo: L2.pathTo, strokeWidth: A2, elSeries: f2, series: t3, barHeight: p2, barYPosition: P2, barWidth: b2, elDataLabelsWrap: y2, elGoalsMarkers: w2, visibleSeries: this.visibleI, type: "rangebar" });
            }
            r2.add(f2);
          }
          return r2;
        } }, { key: "detectOverlappingBars", value: function(t3) {
          var e2 = t3.i, i3 = t3.j, a2 = t3.barYPosition, s3 = t3.srty, r2 = t3.barHeight, o2 = t3.yDivision, n2 = t3.initPositions, l2 = this.w, h2 = [], c2 = l2.config.series[e2].data[i3].rangeName, d2 = l2.config.series[e2].data[i3].x, g2 = l2.globals.labels.indexOf(d2), u2 = l2.globals.seriesRange[e2].findIndex(function(t4) {
            return t4.x === d2 && t4.overlaps.length > 0;
          });
          return a2 = l2.config.plotOptions.bar.rangeBarGroupRows ? s3 + o2 * g2 : s3 + r2 * this.visibleI + o2 * g2, u2 > -1 && !l2.config.plotOptions.bar.rangeBarOverlap && (h2 = l2.globals.seriesRange[e2][u2].overlaps).indexOf(c2) > -1 && (a2 = (r2 = n2.barHeight / h2.length) * this.visibleI + o2 * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + r2 * (this.visibleI + h2.indexOf(c2)) + o2 * g2), { barYPosition: a2, barHeight: r2 };
        } }, { key: "drawRangeColumnPaths", value: function(t3) {
          var e2 = t3.indexes, i3 = t3.x;
          t3.strokeWidth;
          var a2 = t3.xDivision, s3 = t3.barWidth, r2 = t3.zeroH, o2 = this.w, n2 = e2.i, l2 = e2.j, h2 = this.yRatio[this.yaxisIndex], c2 = e2.realIndex, d2 = this.getRangeValue(c2, l2), g2 = Math.min(d2.start, d2.end), u2 = Math.max(d2.start, d2.end);
          o2.globals.isXNumeric && (i3 = (o2.globals.seriesX[n2][l2] - o2.globals.minX) / this.xRatio - s3 / 2);
          var f2 = i3 + s3 * this.visibleI;
          void 0 === this.series[n2][l2] || null === this.series[n2][l2] ? g2 = r2 : (g2 = r2 - g2 / h2, u2 = r2 - u2 / h2);
          var p2 = Math.abs(u2 - g2), x2 = this.barHelpers.getColumnPaths({ barXPosition: f2, barWidth: s3, y1: g2, y2: u2, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, realIndex: e2.realIndex, i: c2, j: l2, w: o2 });
          return o2.globals.isXNumeric || (i3 += a2), { pathTo: x2.pathTo, pathFrom: x2.pathFrom, barHeight: p2, x: i3, y: u2, goalY: this.barHelpers.getGoalValues("y", null, r2, n2, l2), barXPosition: f2 };
        } }, { key: "drawRangeBarPaths", value: function(t3) {
          var e2 = t3.indexes, i3 = t3.y, a2 = t3.y1, s3 = t3.y2, r2 = t3.yDivision, o2 = t3.barHeight, n2 = t3.barYPosition, l2 = t3.zeroW, h2 = this.w, c2 = l2 + a2 / this.invertedYRatio, d2 = l2 + s3 / this.invertedYRatio, g2 = Math.abs(d2 - c2), u2 = this.barHelpers.getBarpaths({ barYPosition: n2, barHeight: o2, x1: c2, x2: d2, strokeWidth: this.strokeWidth, series: this.seriesRangeEnd, i: e2.realIndex, realIndex: e2.realIndex, j: e2.j, w: h2 });
          return h2.globals.isXNumeric || (i3 += r2), { pathTo: u2.pathTo, pathFrom: u2.pathFrom, barWidth: g2, x: d2, goalX: this.barHelpers.getGoalValues("x", l2, null, e2.realIndex, e2.j), y: i3 };
        } }, { key: "getRangeValue", value: function(t3, e2) {
          var i3 = this.w;
          return { start: i3.globals.seriesRangeStart[t3][e2], end: i3.globals.seriesRangeEnd[t3][e2] };
        } }]), s2;
      }();
      var It = function() {
        function t2(e2) {
          a(this, t2), this.w = e2.w, this.lineCtx = e2;
        }
        return r(t2, [{ key: "sameValueSeriesFix", value: function(t3, e2) {
          var i2 = this.w;
          if (("gradient" === i2.config.fill.type || "gradient" === i2.config.fill.type[t3]) && new y(this.lineCtx.ctx, i2).seriesHaveSameValues(t3)) {
            var a2 = e2[t3].slice();
            a2[a2.length - 1] = a2[a2.length - 1] + 1e-6, e2[t3] = a2;
          }
          return e2;
        } }, { key: "calculatePoints", value: function(t3) {
          var e2 = t3.series, i2 = t3.realIndex, a2 = t3.x, s2 = t3.y, r2 = t3.i, o2 = t3.j, n2 = t3.prevY, l2 = this.w, h2 = [], c2 = [];
          if (0 === o2) {
            var d2 = this.lineCtx.categoryAxisCorrection + l2.config.markers.offsetX;
            l2.globals.isXNumeric && (d2 = (l2.globals.seriesX[i2][0] - l2.globals.minX) / this.lineCtx.xRatio + l2.config.markers.offsetX), h2.push(d2), c2.push(x.isNumber(e2[r2][0]) ? n2 + l2.config.markers.offsetY : null), h2.push(a2 + l2.config.markers.offsetX), c2.push(x.isNumber(e2[r2][o2 + 1]) ? s2 + l2.config.markers.offsetY : null);
          } else
            h2.push(a2 + l2.config.markers.offsetX), c2.push(x.isNumber(e2[r2][o2 + 1]) ? s2 + l2.config.markers.offsetY : null);
          return { x: h2, y: c2 };
        } }, { key: "checkPreviousPaths", value: function(t3) {
          for (var e2 = t3.pathFromLine, i2 = t3.pathFromArea, a2 = t3.realIndex, s2 = this.w, r2 = 0; r2 < s2.globals.previousPaths.length; r2++) {
            var o2 = s2.globals.previousPaths[r2];
            ("line" === o2.type || "area" === o2.type) && o2.paths.length > 0 && parseInt(o2.realIndex, 10) === parseInt(a2, 10) && ("line" === o2.type ? (this.lineCtx.appendPathFrom = false, e2 = s2.globals.previousPaths[r2].paths[0].d) : "area" === o2.type && (this.lineCtx.appendPathFrom = false, i2 = s2.globals.previousPaths[r2].paths[0].d, s2.config.stroke.show && s2.globals.previousPaths[r2].paths[1] && (e2 = s2.globals.previousPaths[r2].paths[1].d)));
          }
          return { pathFromLine: e2, pathFromArea: i2 };
        } }, { key: "determineFirstPrevY", value: function(t3) {
          var e2, i2 = t3.i, a2 = t3.series, s2 = t3.prevY, r2 = t3.lineYPosition, o2 = this.w;
          if (void 0 !== (null === (e2 = a2[i2]) || void 0 === e2 ? void 0 : e2[0]))
            s2 = (r2 = o2.config.chart.stacked && i2 > 0 ? this.lineCtx.prevSeriesY[i2 - 1][0] : this.lineCtx.zeroY) - a2[i2][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? a2[i2][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);
          else if (o2.config.chart.stacked && i2 > 0 && void 0 === a2[i2][0]) {
            for (var n2 = i2 - 1; n2 >= 0; n2--)
              if (null !== a2[n2][0] && void 0 !== a2[n2][0]) {
                s2 = r2 = this.lineCtx.prevSeriesY[n2][0];
                break;
              }
          }
          return { prevY: s2, lineYPosition: r2 };
        } }]), t2;
      }();
      var Xt = function() {
        function t2(e2, i2, s2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.xyRatios = i2, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || s2, this.scatter = new D(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new It(this), this.markers = new R(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;
        }
        return r(t2, [{ key: "draw", value: function(t3, i2, a2, s2) {
          var r2 = this.w, o2 = new m(this.ctx), n2 = r2.globals.comboCharts ? i2 : r2.config.chart.type, l2 = o2.group({ class: "apexcharts-".concat(n2, "-series apexcharts-plot-series") }), h2 = new y(this.ctx, r2);
          this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t3 = h2.getLogSeries(t3), this.yRatio = h2.getLogYRatios(this.yRatio);
          for (var c2 = [], d2 = 0; d2 < t3.length; d2++) {
            t3 = this.lineHelpers.sameValueSeriesFix(d2, t3);
            var g2 = r2.globals.comboCharts ? a2[d2] : d2;
            this._initSerieVariables(t3, d2, g2);
            var u2 = [], f2 = [], p2 = r2.globals.padHorizontal + this.categoryAxisCorrection;
            this.ctx.series.addCollapsedClassToSeries(this.elSeries, g2), r2.globals.isXNumeric && r2.globals.seriesX.length > 0 && (p2 = (r2.globals.seriesX[g2][0] - r2.globals.minX) / this.xRatio), f2.push(p2);
            var x2, b2 = p2, v2 = void 0, w2 = b2, k2 = this.zeroY, A2 = this.zeroY;
            k2 = this.lineHelpers.determineFirstPrevY({ i: d2, series: t3, prevY: k2, lineYPosition: 0 }).prevY, u2.push(k2), x2 = k2;
            "rangeArea" === n2 && (v2 = A2 = this.lineHelpers.determineFirstPrevY({ i: d2, series: s2, prevY: A2, lineYPosition: 0 }).prevY);
            var S2 = { type: n2, series: t3, realIndex: g2, i: d2, x: p2, y: 1, pX: b2, pY: x2, pathsFrom: this._calculatePathsFrom({ type: n2, series: t3, i: d2, realIndex: g2, prevX: w2, prevY: k2, prevY2: A2 }), linePaths: [], areaPaths: [], seriesIndex: a2, lineYPosition: 0, xArrj: f2, yArrj: u2, seriesRangeEnd: s2 }, C2 = this._iterateOverDataPoints(e(e({}, S2), {}, { iterations: "rangeArea" === n2 ? t3[d2].length - 1 : void 0, isRangeStart: true }));
            if ("rangeArea" === n2) {
              var L2 = this._calculatePathsFrom({ series: s2, i: d2, realIndex: g2, prevX: w2, prevY: A2 }), P2 = this._iterateOverDataPoints(e(e({}, S2), {}, { series: s2, pY: v2, pathsFrom: L2, iterations: s2[d2].length - 1, isRangeStart: false }));
              C2.linePaths[0] = P2.linePath + C2.linePath, C2.pathFromLine = P2.pathFromLine + C2.pathFromLine;
            }
            this._handlePaths({ type: n2, realIndex: g2, i: d2, paths: C2 }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), c2.push(this.elSeries);
          }
          if (r2.config.chart.stacked)
            for (var T2 = c2.length; T2 > 0; T2--)
              l2.add(c2[T2 - 1]);
          else
            for (var M2 = 0; M2 < c2.length; M2++)
              l2.add(c2[M2]);
          return l2;
        } }, { key: "_initSerieVariables", value: function(t3, e2, i2) {
          var a2 = this.w, s2 = new m(this.ctx);
          this.xDivision = a2.globals.gridWidth / (a2.globals.dataPoints - ("on" === a2.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a2.config.stroke.width) ? a2.config.stroke.width[i2] : a2.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = i2), this.isReversed = a2.config.yaxis[this.yaxisIndex] && a2.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a2.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a2.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a2.globals.gridHeight || "end" === a2.config.plotOptions.area.fillTo) && (this.areaBottomY = a2.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s2.group({ class: "apexcharts-series", seriesName: x.escapeString(a2.globals.seriesNames[i2]) }), this.elPointsMain = s2.group({ class: "apexcharts-series-markers-wrap", "data:realIndex": i2 }), this.elDataLabelsWrap = s2.group({ class: "apexcharts-datalabels", "data:realIndex": i2 });
          var r2 = t3[e2].length === a2.globals.dataPoints;
          this.elSeries.attr({ "data:longestSeries": r2, rel: e2 + 1, "data:realIndex": i2 }), this.appendPathFrom = true;
        } }, { key: "_calculatePathsFrom", value: function(t3) {
          var e2, i2, a2, s2, r2 = t3.type, o2 = t3.series, n2 = t3.i, l2 = t3.realIndex, h2 = t3.prevX, c2 = t3.prevY, d2 = t3.prevY2, g2 = this.w, u2 = new m(this.ctx);
          if (null === o2[n2][0]) {
            for (var f2 = 0; f2 < o2[n2].length; f2++)
              if (null !== o2[n2][f2]) {
                h2 = this.xDivision * f2, c2 = this.zeroY - o2[n2][f2] / this.yRatio[this.yaxisIndex], e2 = u2.move(h2, c2), i2 = u2.move(h2, this.areaBottomY);
                break;
              }
          } else
            e2 = u2.move(h2, c2), "rangeArea" === r2 && (e2 = u2.move(h2, d2) + u2.line(h2, c2)), i2 = u2.move(h2, this.areaBottomY) + u2.line(h2, c2);
          if (a2 = u2.move(-1, this.zeroY) + u2.line(-1, this.zeroY), s2 = u2.move(-1, this.zeroY) + u2.line(-1, this.zeroY), g2.globals.previousPaths.length > 0) {
            var p2 = this.lineHelpers.checkPreviousPaths({ pathFromLine: a2, pathFromArea: s2, realIndex: l2 });
            a2 = p2.pathFromLine, s2 = p2.pathFromArea;
          }
          return { prevX: h2, prevY: c2, linePath: e2, areaPath: i2, pathFromLine: a2, pathFromArea: s2 };
        } }, { key: "_handlePaths", value: function(t3) {
          var i2 = t3.type, a2 = t3.realIndex, s2 = t3.i, r2 = t3.paths, o2 = this.w, n2 = new m(this.ctx), l2 = new F(this.ctx);
          this.prevSeriesY.push(r2.yArrj), o2.globals.seriesXvalues[a2] = r2.xArrj, o2.globals.seriesYvalues[a2] = r2.yArrj;
          var h2 = o2.config.forecastDataPoints;
          if (h2.count > 0 && "rangeArea" !== i2) {
            var c2 = o2.globals.seriesXvalues[a2][o2.globals.seriesXvalues[a2].length - h2.count - 1], d2 = n2.drawRect(c2, 0, o2.globals.gridWidth, o2.globals.gridHeight, 0);
            o2.globals.dom.elForecastMask.appendChild(d2.node);
            var g2 = n2.drawRect(0, 0, c2, o2.globals.gridHeight, 0);
            o2.globals.dom.elNonForecastMask.appendChild(g2.node);
          }
          this.pointsChart || o2.globals.delayedElements.push({ el: this.elPointsMain.node, index: a2 });
          var u2 = { i: s2, realIndex: a2, animationDelay: s2, initialSpeed: o2.config.chart.animations.speed, dataChangeSpeed: o2.config.chart.animations.dynamicAnimation.speed, className: "apexcharts-".concat(i2) };
          if ("area" === i2)
            for (var f2 = l2.fillPath({ seriesNumber: a2 }), p2 = 0; p2 < r2.areaPaths.length; p2++) {
              var x2 = n2.renderPaths(e(e({}, u2), {}, { pathFrom: r2.pathFromArea, pathTo: r2.areaPaths[p2], stroke: "none", strokeWidth: 0, strokeLineCap: null, fill: f2 }));
              this.elSeries.add(x2);
            }
          if (o2.config.stroke.show && !this.pointsChart) {
            var b2 = null;
            if ("line" === i2)
              b2 = l2.fillPath({ seriesNumber: a2, i: s2 });
            else if ("solid" === o2.config.stroke.fill.type)
              b2 = o2.globals.stroke.colors[a2];
            else {
              var v2 = o2.config.fill;
              o2.config.fill = o2.config.stroke.fill, b2 = l2.fillPath({ seriesNumber: a2, i: s2 }), o2.config.fill = v2;
            }
            for (var y2 = 0; y2 < r2.linePaths.length; y2++) {
              var w2 = b2;
              "rangeArea" === i2 && (w2 = l2.fillPath({ seriesNumber: a2 }));
              var k2 = e(e({}, u2), {}, { pathFrom: r2.pathFromLine, pathTo: r2.linePaths[y2], stroke: b2, strokeWidth: this.strokeWidth, strokeLineCap: o2.config.stroke.lineCap, fill: "rangeArea" === i2 ? w2 : "none" }), A2 = n2.renderPaths(k2);
              if (this.elSeries.add(A2), A2.attr("fill-rule", "evenodd"), h2.count > 0 && "rangeArea" !== i2) {
                var S2 = n2.renderPaths(k2);
                S2.node.setAttribute("stroke-dasharray", h2.dashArray), h2.strokeWidth && S2.node.setAttribute("stroke-width", h2.strokeWidth), this.elSeries.add(S2), S2.attr("clip-path", "url(#forecastMask".concat(o2.globals.cuid, ")")), A2.attr("clip-path", "url(#nonForecastMask".concat(o2.globals.cuid, ")"));
              }
            }
          }
        } }, { key: "_iterateOverDataPoints", value: function(t3) {
          var e2 = t3.type, i2 = t3.series, a2 = t3.iterations, s2 = t3.realIndex, r2 = t3.i, o2 = t3.x, n2 = t3.y, l2 = t3.pX, h2 = t3.pY, c2 = t3.pathsFrom, d2 = t3.linePaths, g2 = t3.areaPaths, u2 = t3.seriesIndex, f2 = t3.lineYPosition, p2 = t3.xArrj, b2 = t3.yArrj, v2 = t3.isRangeStart, y2 = t3.seriesRangeEnd, w2 = this.w, k2 = new m(this.ctx), A2 = this.yRatio, S2 = c2.prevY, C2 = c2.linePath, L2 = c2.areaPath, P2 = c2.pathFromLine, T2 = c2.pathFromArea, M2 = x.isNumber(w2.globals.minYArr[s2]) ? w2.globals.minYArr[s2] : w2.globals.minY;
          a2 || (a2 = w2.globals.dataPoints > 1 ? w2.globals.dataPoints - 1 : w2.globals.dataPoints);
          for (var I2 = n2, X2 = 0; X2 < a2; X2++) {
            var z2 = void 0 === i2[r2][X2 + 1] || null === i2[r2][X2 + 1];
            if (w2.globals.isXNumeric) {
              var E2 = w2.globals.seriesX[s2][X2 + 1];
              void 0 === w2.globals.seriesX[s2][X2 + 1] && (E2 = w2.globals.seriesX[s2][a2 - 1]), o2 = (E2 - w2.globals.minX) / this.xRatio;
            } else
              o2 += this.xDivision;
            if (w2.config.chart.stacked)
              if (r2 > 0 && w2.globals.collapsedSeries.length < w2.config.series.length - 1) {
                f2 = this.prevSeriesY[function(t4) {
                  for (var e3 = t4, i3 = 0; i3 < w2.globals.series.length; i3++)
                    if (w2.globals.collapsedSeriesIndices.indexOf(t4) > -1) {
                      e3--;
                      break;
                    }
                  return e3 >= 0 ? e3 : 0;
                }(r2 - 1)][X2 + 1];
              } else
                f2 = this.zeroY;
            else
              f2 = this.zeroY;
            z2 ? n2 = f2 - M2 / A2[this.yaxisIndex] + 2 * (this.isReversed ? M2 / A2[this.yaxisIndex] : 0) : (n2 = f2 - i2[r2][X2 + 1] / A2[this.yaxisIndex] + 2 * (this.isReversed ? i2[r2][X2 + 1] / A2[this.yaxisIndex] : 0), "rangeArea" === e2 && (I2 = f2 - y2[r2][X2 + 1] / A2[this.yaxisIndex] + 2 * (this.isReversed ? y2[r2][X2 + 1] / A2[this.yaxisIndex] : 0))), p2.push(o2), b2.push(n2);
            var Y2 = this.lineHelpers.calculatePoints({ series: i2, x: o2, y: n2, realIndex: s2, i: r2, j: X2, prevY: S2 }), F2 = this._createPaths({ type: e2, series: i2, i: r2, realIndex: s2, j: X2, x: o2, y: n2, y2: I2, pX: l2, pY: h2, linePath: C2, areaPath: L2, linePaths: d2, areaPaths: g2, seriesIndex: u2, isRangeStart: v2 });
            g2 = F2.areaPaths, d2 = F2.linePaths, l2 = F2.pX, h2 = F2.pY, L2 = F2.areaPath, C2 = F2.linePath, this.appendPathFrom && (P2 += k2.line(o2, this.zeroY), T2 += k2.line(o2, this.zeroY)), this.handleNullDataPoints(i2, Y2, r2, X2, s2), this._handleMarkersAndLabels({ type: e2, pointsPos: Y2, i: r2, j: X2, realIndex: s2, isRangeStart: v2 });
          }
          return { yArrj: b2, xArrj: p2, pathFromArea: T2, areaPaths: g2, pathFromLine: P2, linePaths: d2, linePath: C2, areaPath: L2 };
        } }, { key: "_handleMarkersAndLabels", value: function(t3) {
          var e2 = t3.type, i2 = t3.pointsPos, a2 = t3.isRangeStart, s2 = t3.i, r2 = t3.j, o2 = t3.realIndex, n2 = this.w, l2 = new H(this.ctx);
          if (this.pointsChart)
            this.scatter.draw(this.elSeries, r2, { realIndex: o2, pointsPos: i2, zRatio: this.zRatio, elParent: this.elPointsMain });
          else {
            n2.globals.series[s2].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
            var h2 = this.markers.plotChartMarkers(i2, o2, r2 + 1);
            null !== h2 && this.elPointsMain.add(h2);
          }
          var c2 = l2.drawDataLabel({ type: e2, isRangeStart: a2, pos: i2, i: o2, j: r2 + 1 });
          null !== c2 && this.elDataLabelsWrap.add(c2);
        } }, { key: "_createPaths", value: function(t3) {
          var e2 = t3.type, i2 = t3.series, a2 = t3.i, s2 = t3.realIndex, r2 = t3.j, o2 = t3.x, n2 = t3.y, l2 = t3.y2, h2 = t3.pX, c2 = t3.pY, d2 = t3.linePath, g2 = t3.areaPath, u2 = t3.linePaths, f2 = t3.areaPaths, p2 = t3.seriesIndex, x2 = t3.isRangeStart, b2 = this.w, v2 = new m(this.ctx), y2 = b2.config.stroke.curve, w2 = this.areaBottomY;
          if (Array.isArray(b2.config.stroke.curve) && (y2 = Array.isArray(p2) ? b2.config.stroke.curve[p2[a2]] : b2.config.stroke.curve[a2]), "smooth" === y2) {
            var k2 = 0.35 * (o2 - h2);
            b2.globals.hasNullValues ? (null !== i2[a2][r2] && (null !== i2[a2][r2 + 1] ? (d2 = v2.move(h2, c2) + v2.curve(h2 + k2, c2, o2 - k2, n2, o2 + 1, n2), g2 = v2.move(h2 + 1, c2) + v2.curve(h2 + k2, c2, o2 - k2, n2, o2 + 1, n2) + v2.line(o2, w2) + v2.line(h2, w2) + "z") : (d2 = v2.move(h2, c2), g2 = v2.move(h2, c2) + "z")), u2.push(d2), f2.push(g2)) : (d2 += v2.curve(h2 + k2, c2, o2 - k2, n2, o2, n2), g2 += v2.curve(h2 + k2, c2, o2 - k2, n2, o2, n2)), h2 = o2, c2 = n2, r2 === i2[a2].length - 2 && (g2 = g2 + v2.curve(h2, c2, o2, n2, o2, w2) + v2.move(o2, n2) + "z", "rangeArea" === e2 && x2 ? d2 = d2 + v2.curve(h2, c2, o2, n2, o2, l2) + v2.move(o2, l2) + "z" : b2.globals.hasNullValues || (u2.push(d2), f2.push(g2)));
          } else {
            if (null === i2[a2][r2 + 1]) {
              d2 += v2.move(o2, n2);
              var A2 = b2.globals.isXNumeric ? (b2.globals.seriesX[s2][r2] - b2.globals.minX) / this.xRatio : o2 - this.xDivision;
              g2 = g2 + v2.line(A2, w2) + v2.move(o2, n2) + "z";
            }
            null === i2[a2][r2] && (d2 += v2.move(o2, n2), g2 += v2.move(o2, w2)), "stepline" === y2 ? (d2 = d2 + v2.line(o2, null, "H") + v2.line(null, n2, "V"), g2 = g2 + v2.line(o2, null, "H") + v2.line(null, n2, "V")) : "straight" === y2 && (d2 += v2.line(o2, n2), g2 += v2.line(o2, n2)), r2 === i2[a2].length - 2 && (g2 = g2 + v2.line(o2, w2) + v2.move(o2, n2) + "z", "rangeArea" === e2 && x2 ? d2 = d2 + v2.line(o2, l2) + v2.move(o2, l2) + "z" : (u2.push(d2), f2.push(g2)));
          }
          return { linePaths: u2, areaPaths: f2, pX: h2, pY: c2, linePath: d2, areaPath: g2 };
        } }, { key: "handleNullDataPoints", value: function(t3, e2, i2, a2, s2) {
          var r2 = this.w;
          if (null === t3[i2][a2] && r2.config.markers.showNullDataPoints || 1 === t3[i2].length) {
            var o2 = this.markers.plotChartMarkers(e2, s2, a2 + 1, this.strokeWidth - r2.config.markers.strokeWidth / 2, true);
            null !== o2 && this.elPointsMain.add(o2);
          }
        } }]), t2;
      }();
      window.TreemapSquared = {}, window.TreemapSquared.generate = function() {
        function t2(e3, i3, a3, s3) {
          this.xoffset = e3, this.yoffset = i3, this.height = s3, this.width = a3, this.shortestEdge = function() {
            return Math.min(this.height, this.width);
          }, this.getCoordinates = function(t3) {
            var e4, i4 = [], a4 = this.xoffset, s4 = this.yoffset, o3 = r2(t3) / this.height, n2 = r2(t3) / this.width;
            if (this.width >= this.height)
              for (e4 = 0; e4 < t3.length; e4++)
                i4.push([a4, s4, a4 + o3, s4 + t3[e4] / o3]), s4 += t3[e4] / o3;
            else
              for (e4 = 0; e4 < t3.length; e4++)
                i4.push([a4, s4, a4 + t3[e4] / n2, s4 + n2]), a4 += t3[e4] / n2;
            return i4;
          }, this.cutArea = function(e4) {
            var i4;
            if (this.width >= this.height) {
              var a4 = e4 / this.height, s4 = this.width - a4;
              i4 = new t2(this.xoffset + a4, this.yoffset, s4, this.height);
            } else {
              var r3 = e4 / this.width, o3 = this.height - r3;
              i4 = new t2(this.xoffset, this.yoffset + r3, this.width, o3);
            }
            return i4;
          };
        }
        function e2(e3, a3, s3, o3, n2) {
          o3 = void 0 === o3 ? 0 : o3, n2 = void 0 === n2 ? 0 : n2;
          var l2 = i2(function(t3, e4) {
            var i3, a4 = [], s4 = e4 / r2(t3);
            for (i3 = 0; i3 < t3.length; i3++)
              a4[i3] = t3[i3] * s4;
            return a4;
          }(e3, a3 * s3), [], new t2(o3, n2, a3, s3), []);
          return function(t3) {
            var e4, i3, a4 = [];
            for (e4 = 0; e4 < t3.length; e4++)
              for (i3 = 0; i3 < t3[e4].length; i3++)
                a4.push(t3[e4][i3]);
            return a4;
          }(l2);
        }
        function i2(t3, e3, s3, o3) {
          var n2, l2, h2;
          if (0 !== t3.length)
            return n2 = s3.shortestEdge(), function(t4, e4, i3) {
              var s4;
              if (0 === t4.length)
                return true;
              (s4 = t4.slice()).push(e4);
              var r3 = a2(t4, i3), o4 = a2(s4, i3);
              return r3 >= o4;
            }(e3, l2 = t3[0], n2) ? (e3.push(l2), i2(t3.slice(1), e3, s3, o3)) : (h2 = s3.cutArea(r2(e3), o3), o3.push(s3.getCoordinates(e3)), i2(t3, [], h2, o3)), o3;
          o3.push(s3.getCoordinates(e3));
        }
        function a2(t3, e3) {
          var i3 = Math.min.apply(Math, t3), a3 = Math.max.apply(Math, t3), s3 = r2(t3);
          return Math.max(Math.pow(e3, 2) * a3 / Math.pow(s3, 2), Math.pow(s3, 2) / (Math.pow(e3, 2) * i3));
        }
        function s2(t3) {
          return t3 && t3.constructor === Array;
        }
        function r2(t3) {
          var e3, i3 = 0;
          for (e3 = 0; e3 < t3.length; e3++)
            i3 += t3[e3];
          return i3;
        }
        function o2(t3) {
          var e3, i3 = 0;
          if (s2(t3[0]))
            for (e3 = 0; e3 < t3.length; e3++)
              i3 += o2(t3[e3]);
          else
            i3 = r2(t3);
          return i3;
        }
        return function t3(i3, a3, r3, n2, l2) {
          n2 = void 0 === n2 ? 0 : n2, l2 = void 0 === l2 ? 0 : l2;
          var h2, c2, d2 = [], g2 = [];
          if (s2(i3[0])) {
            for (c2 = 0; c2 < i3.length; c2++)
              d2[c2] = o2(i3[c2]);
            for (h2 = e2(d2, a3, r3, n2, l2), c2 = 0; c2 < i3.length; c2++)
              g2.push(t3(i3[c2], h2[c2][2] - h2[c2][0], h2[c2][3] - h2[c2][1], h2[c2][0], h2[c2][1]));
          } else
            g2 = e2(i3, a3, r3, n2, l2);
          return g2;
        };
      }();
      var zt;
      var Et;
      var Yt = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new At(e2), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];
        }
        return r(t2, [{ key: "draw", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = new m(this.ctx), s2 = new F(this.ctx), r2 = a2.group({ class: "apexcharts-treemap" });
          if (i2.globals.noData)
            return r2;
          var o2 = [];
          return t3.forEach(function(t4) {
            var e3 = t4.map(function(t5) {
              return Math.abs(t5);
            });
            o2.push(e3);
          }), this.negRange = this.helpers.checkColorRange(), i2.config.series.forEach(function(t4, i3) {
            t4.data.forEach(function(t5) {
              Array.isArray(e2.labels[i3]) || (e2.labels[i3] = []), e2.labels[i3].push(t5.x);
            });
          }), window.TreemapSquared.generate(o2, i2.globals.gridWidth, i2.globals.gridHeight).forEach(function(o3, n2) {
            var l2 = a2.group({ class: "apexcharts-series apexcharts-treemap-series", seriesName: x.escapeString(i2.globals.seriesNames[n2]), rel: n2 + 1, "data:realIndex": n2 });
            if (i2.config.chart.dropShadow.enabled) {
              var h2 = i2.config.chart.dropShadow;
              new v(e2.ctx).dropShadow(r2, h2, n2);
            }
            var c2 = a2.group({ class: "apexcharts-data-labels" });
            o3.forEach(function(r3, o4) {
              var h3 = r3[0], c3 = r3[1], d2 = r3[2], g2 = r3[3], u2 = a2.drawRect(h3, c3, d2 - h3, g2 - c3, 0, "#fff", 1, e2.strokeWidth, i2.config.plotOptions.treemap.useFillColorAsStroke ? p2 : i2.globals.stroke.colors[n2]);
              u2.attr({ cx: h3, cy: c3, index: n2, i: n2, j: o4, width: d2 - h3, height: g2 - c3 });
              var f2 = e2.helpers.getShadeColor(i2.config.chart.type, n2, o4, e2.negRange), p2 = f2.color;
              void 0 !== i2.config.series[n2].data[o4] && i2.config.series[n2].data[o4].fillColor && (p2 = i2.config.series[n2].data[o4].fillColor);
              var x2 = s2.fillPath({ color: p2, seriesNumber: n2, dataPointIndex: o4 });
              u2.node.classList.add("apexcharts-treemap-rect"), u2.attr({ fill: x2 }), e2.helpers.addListeners(u2);
              var b2 = { x: h3 + (d2 - h3) / 2, y: c3 + (g2 - c3) / 2, width: 0, height: 0 }, v2 = { x: h3, y: c3, width: d2 - h3, height: g2 - c3 };
              if (i2.config.chart.animations.enabled && !i2.globals.dataChanged) {
                var m2 = 1;
                i2.globals.resized || (m2 = i2.config.chart.animations.speed), e2.animateTreemap(u2, b2, v2, m2);
              }
              if (i2.globals.dataChanged) {
                var y2 = 1;
                e2.dynamicAnim.enabled && i2.globals.shouldAnimate && (y2 = e2.dynamicAnim.speed, i2.globals.previousPaths[n2] && i2.globals.previousPaths[n2][o4] && i2.globals.previousPaths[n2][o4].rect && (b2 = i2.globals.previousPaths[n2][o4].rect), e2.animateTreemap(u2, b2, v2, y2));
              }
              var w2 = e2.getFontSize(r3), k2 = i2.config.dataLabels.formatter(e2.labels[n2][o4], { value: i2.globals.series[n2][o4], seriesIndex: n2, dataPointIndex: o4, w: i2 }), A2 = e2.helpers.calculateDataLabels({ text: k2, x: (h3 + d2) / 2, y: (c3 + g2) / 2 + e2.strokeWidth / 2 + w2 / 3, i: n2, j: o4, colorProps: f2, fontSize: w2, series: t3 });
              i2.config.dataLabels.enabled && A2 && e2.rotateToFitLabel(A2, w2, k2, h3, c3, d2, g2), l2.add(u2), null !== A2 && l2.add(A2);
            }), l2.add(c2), r2.add(l2);
          }), r2;
        } }, { key: "getFontSize", value: function(t3) {
          var e2 = this.w;
          var i2, a2, s2, r2, o2 = function t4(e3) {
            var i3, a3 = 0;
            if (Array.isArray(e3[0]))
              for (i3 = 0; i3 < e3.length; i3++)
                a3 += t4(e3[i3]);
            else
              for (i3 = 0; i3 < e3.length; i3++)
                a3 += e3[i3].length;
            return a3;
          }(this.labels) / function t4(e3) {
            var i3, a3 = 0;
            if (Array.isArray(e3[0]))
              for (i3 = 0; i3 < e3.length; i3++)
                a3 += t4(e3[i3]);
            else
              for (i3 = 0; i3 < e3.length; i3++)
                a3 += 1;
            return a3;
          }(this.labels);
          return i2 = t3[2] - t3[0], a2 = t3[3] - t3[1], s2 = i2 * a2, r2 = Math.pow(s2, 0.5), Math.min(r2 / o2, parseInt(e2.config.dataLabels.style.fontSize, 10));
        } }, { key: "rotateToFitLabel", value: function(t3, e2, i2, a2, s2, r2, o2) {
          var n2 = new m(this.ctx), l2 = n2.getTextRects(i2, e2);
          if (l2.width + this.w.config.stroke.width + 5 > r2 - a2 && l2.width <= o2 - s2) {
            var h2 = n2.rotateAroundCenter(t3.node);
            t3.node.setAttribute("transform", "rotate(-90 ".concat(h2.x, " ").concat(h2.y, ")"));
          }
        } }, { key: "animateTreemap", value: function(t3, e2, i2, a2) {
          var s2 = new b(this.ctx);
          s2.animateRect(t3, { x: e2.x, y: e2.y, width: e2.width, height: e2.height }, { x: i2.x, y: i2.y, width: i2.width, height: i2.height }, a2, function() {
            s2.animationCompleted(t3);
          });
        } }]), t2;
      }();
      var Ft = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;
        }
        return r(t2, [{ key: "calculateTimeScaleTicks", value: function(t3, i2) {
          var a2 = this, s2 = this.w;
          if (s2.globals.allSeriesCollapsed)
            return s2.globals.labels = [], s2.globals.timescaleLabels = [], [];
          var r2 = new T(this.ctx), o2 = (i2 - t3) / 864e5;
          this.determineInterval(o2), s2.globals.disableZoomIn = false, s2.globals.disableZoomOut = false, o2 < 11574074074074075e-20 ? s2.globals.disableZoomIn = true : o2 > 5e4 && (s2.globals.disableZoomOut = true);
          var n2 = r2.getTimeUnitsfromTimestamp(t3, i2, this.utc), l2 = s2.globals.gridWidth / o2, h2 = l2 / 24, c2 = h2 / 60, d2 = c2 / 60, g2 = Math.floor(24 * o2), u2 = Math.floor(1440 * o2), f2 = Math.floor(86400 * o2), p2 = Math.floor(o2), x2 = Math.floor(o2 / 30), b2 = Math.floor(o2 / 365), v2 = { minMillisecond: n2.minMillisecond, minSecond: n2.minSecond, minMinute: n2.minMinute, minHour: n2.minHour, minDate: n2.minDate, minMonth: n2.minMonth, minYear: n2.minYear }, m2 = { firstVal: v2, currentMillisecond: v2.minMillisecond, currentSecond: v2.minSecond, currentMinute: v2.minMinute, currentHour: v2.minHour, currentMonthDate: v2.minDate, currentDate: v2.minDate, currentMonth: v2.minMonth, currentYear: v2.minYear, daysWidthOnXAxis: l2, hoursWidthOnXAxis: h2, minutesWidthOnXAxis: c2, secondsWidthOnXAxis: d2, numberOfSeconds: f2, numberOfMinutes: u2, numberOfHours: g2, numberOfDays: p2, numberOfMonths: x2, numberOfYears: b2 };
          switch (this.tickInterval) {
            case "years":
              this.generateYearScale(m2);
              break;
            case "months":
            case "half_year":
              this.generateMonthScale(m2);
              break;
            case "months_days":
            case "months_fortnight":
            case "days":
            case "week_days":
              this.generateDayScale(m2);
              break;
            case "hours":
              this.generateHourScale(m2);
              break;
            case "minutes_fives":
            case "minutes":
              this.generateMinuteScale(m2);
              break;
            case "seconds_tens":
            case "seconds_fives":
            case "seconds":
              this.generateSecondScale(m2);
          }
          var y2 = this.timeScaleArray.map(function(t4) {
            var i3 = { position: t4.position, unit: t4.unit, year: t4.year, day: t4.day ? t4.day : 1, hour: t4.hour ? t4.hour : 0, month: t4.month + 1 };
            return "month" === t4.unit ? e(e({}, i3), {}, { day: 1, value: t4.value + 1 }) : "day" === t4.unit || "hour" === t4.unit ? e(e({}, i3), {}, { value: t4.value }) : "minute" === t4.unit ? e(e({}, i3), {}, { value: t4.value, minute: t4.value }) : "second" === t4.unit ? e(e({}, i3), {}, { value: t4.value, minute: t4.minute, second: t4.second }) : t4;
          });
          return y2.filter(function(t4) {
            var e2 = 1, i3 = Math.ceil(s2.globals.gridWidth / 120), r3 = t4.value;
            void 0 !== s2.config.xaxis.tickAmount && (i3 = s2.config.xaxis.tickAmount), y2.length > i3 && (e2 = Math.floor(y2.length / i3));
            var o3 = false, n3 = false;
            switch (a2.tickInterval) {
              case "years":
                "year" === t4.unit && (o3 = true);
                break;
              case "half_year":
                e2 = 7, "year" === t4.unit && (o3 = true);
                break;
              case "months":
                e2 = 1, "year" === t4.unit && (o3 = true);
                break;
              case "months_fortnight":
                e2 = 15, "year" !== t4.unit && "month" !== t4.unit || (o3 = true), 30 === r3 && (n3 = true);
                break;
              case "months_days":
                e2 = 10, "month" === t4.unit && (o3 = true), 30 === r3 && (n3 = true);
                break;
              case "week_days":
                e2 = 8, "month" === t4.unit && (o3 = true);
                break;
              case "days":
                e2 = 1, "month" === t4.unit && (o3 = true);
                break;
              case "hours":
                "day" === t4.unit && (o3 = true);
                break;
              case "minutes_fives":
              case "seconds_fives":
                r3 % 5 != 0 && (n3 = true);
                break;
              case "seconds_tens":
                r3 % 10 != 0 && (n3 = true);
            }
            if ("hours" === a2.tickInterval || "minutes_fives" === a2.tickInterval || "seconds_tens" === a2.tickInterval || "seconds_fives" === a2.tickInterval) {
              if (!n3)
                return true;
            } else if ((r3 % e2 == 0 || o3) && !n3)
              return true;
          });
        } }, { key: "recalcDimensionsBasedOnFormat", value: function(t3, e2) {
          var i2 = this.w, a2 = this.formatDates(t3), s2 = this.removeOverlappingTS(a2);
          i2.globals.timescaleLabels = s2.slice(), new ot(this.ctx).plotCoords();
        } }, { key: "determineInterval", value: function(t3) {
          var e2 = 24 * t3, i2 = 60 * e2;
          switch (true) {
            case t3 / 365 > 5:
              this.tickInterval = "years";
              break;
            case t3 > 800:
              this.tickInterval = "half_year";
              break;
            case t3 > 180:
              this.tickInterval = "months";
              break;
            case t3 > 90:
              this.tickInterval = "months_fortnight";
              break;
            case t3 > 60:
              this.tickInterval = "months_days";
              break;
            case t3 > 30:
              this.tickInterval = "week_days";
              break;
            case t3 > 2:
              this.tickInterval = "days";
              break;
            case e2 > 2.4:
              this.tickInterval = "hours";
              break;
            case i2 > 15:
              this.tickInterval = "minutes_fives";
              break;
            case i2 > 5:
              this.tickInterval = "minutes";
              break;
            case i2 > 1:
              this.tickInterval = "seconds_tens";
              break;
            case 60 * i2 > 20:
              this.tickInterval = "seconds_fives";
              break;
            default:
              this.tickInterval = "seconds";
          }
        } }, { key: "generateYearScale", value: function(t3) {
          var e2 = t3.firstVal, i2 = t3.currentMonth, a2 = t3.currentYear, s2 = t3.daysWidthOnXAxis, r2 = t3.numberOfYears, o2 = e2.minYear, n2 = 0, l2 = new T(this.ctx), h2 = "year";
          if (e2.minDate > 1 || e2.minMonth > 0) {
            var c2 = l2.determineRemainingDaysOfYear(e2.minYear, e2.minMonth, e2.minDate);
            n2 = (l2.determineDaysOfYear(e2.minYear) - c2 + 1) * s2, o2 = e2.minYear + 1, this.timeScaleArray.push({ position: n2, value: o2, unit: h2, year: o2, month: x.monthMod(i2 + 1) });
          } else
            1 === e2.minDate && 0 === e2.minMonth && this.timeScaleArray.push({ position: n2, value: o2, unit: h2, year: a2, month: x.monthMod(i2 + 1) });
          for (var d2 = o2, g2 = n2, u2 = 0; u2 < r2; u2++)
            d2++, g2 = l2.determineDaysOfYear(d2 - 1) * s2 + g2, this.timeScaleArray.push({ position: g2, value: d2, unit: h2, year: d2, month: 1 });
        } }, { key: "generateMonthScale", value: function(t3) {
          var e2 = t3.firstVal, i2 = t3.currentMonthDate, a2 = t3.currentMonth, s2 = t3.currentYear, r2 = t3.daysWidthOnXAxis, o2 = t3.numberOfMonths, n2 = a2, l2 = 0, h2 = new T(this.ctx), c2 = "month", d2 = 0;
          if (e2.minDate > 1) {
            l2 = (h2.determineDaysOfMonths(a2 + 1, e2.minYear) - i2 + 1) * r2, n2 = x.monthMod(a2 + 1);
            var g2 = s2 + d2, u2 = x.monthMod(n2), f2 = n2;
            0 === n2 && (c2 = "year", f2 = g2, u2 = 1, g2 += d2 += 1), this.timeScaleArray.push({ position: l2, value: f2, unit: c2, year: g2, month: u2 });
          } else
            this.timeScaleArray.push({ position: l2, value: n2, unit: c2, year: s2, month: x.monthMod(a2) });
          for (var p2 = n2 + 1, b2 = l2, v2 = 0, m2 = 1; v2 < o2; v2++, m2++) {
            0 === (p2 = x.monthMod(p2)) ? (c2 = "year", d2 += 1) : c2 = "month";
            var y2 = this._getYear(s2, p2, d2);
            b2 = h2.determineDaysOfMonths(p2, y2) * r2 + b2;
            var w2 = 0 === p2 ? y2 : p2;
            this.timeScaleArray.push({ position: b2, value: w2, unit: c2, year: y2, month: 0 === p2 ? 1 : p2 }), p2++;
          }
        } }, { key: "generateDayScale", value: function(t3) {
          var e2 = t3.firstVal, i2 = t3.currentMonth, a2 = t3.currentYear, s2 = t3.hoursWidthOnXAxis, r2 = t3.numberOfDays, o2 = new T(this.ctx), n2 = "day", l2 = e2.minDate + 1, h2 = l2, c2 = function(t4, e3, i3) {
            return t4 > o2.determineDaysOfMonths(e3 + 1, i3) ? (h2 = 1, n2 = "month", g2 = e3 += 1, e3) : e3;
          }, d2 = (24 - e2.minHour) * s2, g2 = l2, u2 = c2(h2, i2, a2);
          0 === e2.minHour && 1 === e2.minDate ? (d2 = 0, g2 = x.monthMod(e2.minMonth), n2 = "month", h2 = e2.minDate, r2++) : 1 !== e2.minDate && 0 === e2.minHour && 0 === e2.minMinute && (d2 = 0, l2 = e2.minDate, g2 = l2, u2 = c2(h2 = l2, i2, a2)), this.timeScaleArray.push({ position: d2, value: g2, unit: n2, year: this._getYear(a2, u2, 0), month: x.monthMod(u2), day: h2 });
          for (var f2 = d2, p2 = 0; p2 < r2; p2++) {
            n2 = "day", u2 = c2(h2 += 1, u2, this._getYear(a2, u2, 0));
            var b2 = this._getYear(a2, u2, 0);
            f2 = 24 * s2 + f2;
            var v2 = 1 === h2 ? x.monthMod(u2) : h2;
            this.timeScaleArray.push({ position: f2, value: v2, unit: n2, year: b2, month: x.monthMod(u2), day: v2 });
          }
        } }, { key: "generateHourScale", value: function(t3) {
          var e2 = t3.firstVal, i2 = t3.currentDate, a2 = t3.currentMonth, s2 = t3.currentYear, r2 = t3.minutesWidthOnXAxis, o2 = t3.numberOfHours, n2 = new T(this.ctx), l2 = "hour", h2 = function(t4, e3) {
            return t4 > n2.determineDaysOfMonths(e3 + 1, s2) && (p2 = 1, e3 += 1), { month: e3, date: p2 };
          }, c2 = function(t4, e3) {
            return t4 > n2.determineDaysOfMonths(e3 + 1, s2) ? e3 += 1 : e3;
          }, d2 = 60 - (e2.minMinute + e2.minSecond / 60), g2 = d2 * r2, u2 = e2.minHour + 1, f2 = u2 + 1;
          60 === d2 && (g2 = 0, f2 = (u2 = e2.minHour) + 1);
          var p2 = i2, b2 = c2(p2, a2);
          this.timeScaleArray.push({ position: g2, value: u2, unit: l2, day: p2, hour: f2, year: s2, month: x.monthMod(b2) });
          for (var v2 = g2, m2 = 0; m2 < o2; m2++) {
            if (l2 = "hour", f2 >= 24)
              f2 = 0, l2 = "day", b2 = h2(p2 += 1, b2).month, b2 = c2(p2, b2);
            var y2 = this._getYear(s2, b2, 0);
            v2 = 0 === f2 && 0 === m2 ? d2 * r2 : 60 * r2 + v2;
            var w2 = 0 === f2 ? p2 : f2;
            this.timeScaleArray.push({ position: v2, value: w2, unit: l2, hour: f2, day: p2, year: y2, month: x.monthMod(b2) }), f2++;
          }
        } }, { key: "generateMinuteScale", value: function(t3) {
          for (var e2 = t3.currentMillisecond, i2 = t3.currentSecond, a2 = t3.currentMinute, s2 = t3.currentHour, r2 = t3.currentDate, o2 = t3.currentMonth, n2 = t3.currentYear, l2 = t3.minutesWidthOnXAxis, h2 = t3.secondsWidthOnXAxis, c2 = t3.numberOfMinutes, d2 = a2 + 1, g2 = r2, u2 = o2, f2 = n2, p2 = s2, b2 = (60 - i2 - e2 / 1e3) * h2, v2 = 0; v2 < c2; v2++)
            d2 >= 60 && (d2 = 0, 24 === (p2 += 1) && (p2 = 0)), this.timeScaleArray.push({ position: b2, value: d2, unit: "minute", hour: p2, minute: d2, day: g2, year: this._getYear(f2, u2, 0), month: x.monthMod(u2) }), b2 += l2, d2++;
        } }, { key: "generateSecondScale", value: function(t3) {
          for (var e2 = t3.currentMillisecond, i2 = t3.currentSecond, a2 = t3.currentMinute, s2 = t3.currentHour, r2 = t3.currentDate, o2 = t3.currentMonth, n2 = t3.currentYear, l2 = t3.secondsWidthOnXAxis, h2 = t3.numberOfSeconds, c2 = i2 + 1, d2 = a2, g2 = r2, u2 = o2, f2 = n2, p2 = s2, b2 = (1e3 - e2) / 1e3 * l2, v2 = 0; v2 < h2; v2++)
            c2 >= 60 && (c2 = 0, ++d2 >= 60 && (d2 = 0, 24 === ++p2 && (p2 = 0))), this.timeScaleArray.push({ position: b2, value: c2, unit: "second", hour: p2, minute: d2, second: c2, day: g2, year: this._getYear(f2, u2, 0), month: x.monthMod(u2) }), b2 += l2, c2++;
        } }, { key: "createRawDateString", value: function(t3, e2) {
          var i2 = t3.year;
          return 0 === t3.month && (t3.month = 1), i2 += "-" + ("0" + t3.month.toString()).slice(-2), "day" === t3.unit ? i2 += "day" === t3.unit ? "-" + ("0" + e2).slice(-2) : "-01" : i2 += "-" + ("0" + (t3.day ? t3.day : "1")).slice(-2), "hour" === t3.unit ? i2 += "hour" === t3.unit ? "T" + ("0" + e2).slice(-2) : "T00" : i2 += "T" + ("0" + (t3.hour ? t3.hour : "0")).slice(-2), "minute" === t3.unit ? i2 += ":" + ("0" + e2).slice(-2) : i2 += ":" + (t3.minute ? ("0" + t3.minute).slice(-2) : "00"), "second" === t3.unit ? i2 += ":" + ("0" + e2).slice(-2) : i2 += ":00", this.utc && (i2 += ".000Z"), i2;
        } }, { key: "formatDates", value: function(t3) {
          var e2 = this, i2 = this.w;
          return t3.map(function(t4) {
            var a2 = t4.value.toString(), s2 = new T(e2.ctx), r2 = e2.createRawDateString(t4, a2), o2 = s2.getDate(s2.parseDate(r2));
            if (e2.utc || (o2 = s2.getDate(s2.parseDateWithTimezone(r2))), void 0 === i2.config.xaxis.labels.format) {
              var n2 = "dd MMM", l2 = i2.config.xaxis.labels.datetimeFormatter;
              "year" === t4.unit && (n2 = l2.year), "month" === t4.unit && (n2 = l2.month), "day" === t4.unit && (n2 = l2.day), "hour" === t4.unit && (n2 = l2.hour), "minute" === t4.unit && (n2 = l2.minute), "second" === t4.unit && (n2 = l2.second), a2 = s2.formatDate(o2, n2);
            } else
              a2 = s2.formatDate(o2, i2.config.xaxis.labels.format);
            return { dateString: r2, position: t4.position, value: a2, unit: t4.unit, year: t4.year, month: t4.month };
          });
        } }, { key: "removeOverlappingTS", value: function(t3) {
          var e2, i2 = this, a2 = new m(this.ctx), s2 = false;
          t3.length > 0 && t3[0].value && t3.every(function(e3) {
            return e3.value.length === t3[0].value.length;
          }) && (s2 = true, e2 = a2.getTextRects(t3[0].value).width);
          var r2 = 0, o2 = t3.map(function(o3, n2) {
            if (n2 > 0 && i2.w.config.xaxis.labels.hideOverlappingLabels) {
              var l2 = s2 ? e2 : a2.getTextRects(t3[r2].value).width, h2 = t3[r2].position;
              return o3.position > h2 + l2 + 10 ? (r2 = n2, o3) : null;
            }
            return o3;
          });
          return o2 = o2.filter(function(t4) {
            return null !== t4;
          });
        } }, { key: "_getYear", value: function(t3, e2, i2) {
          return t3 + Math.floor(e2 / 12) + i2;
        } }]), t2;
      }();
      var Rt = function() {
        function t2(e2, i2) {
          a(this, t2), this.ctx = i2, this.w = i2.w, this.el = e2;
        }
        return r(t2, [{ key: "setupElements", value: function() {
          var t3 = this.w.globals, e2 = this.w.config, i2 = e2.chart.type;
          t3.axisCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].indexOf(i2) > -1, t3.xyCharts = ["line", "area", "bar", "rangeBar", "rangeArea", "candlestick", "boxPlot", "scatter", "bubble"].indexOf(i2) > -1, t3.isBarHorizontal = ("bar" === e2.chart.type || "rangeBar" === e2.chart.type || "boxPlot" === e2.chart.type) && e2.plotOptions.bar.horizontal, t3.chartClass = ".apexcharts" + t3.chartID, t3.dom.baseEl = this.el, t3.dom.elWrap = document.createElement("div"), m.setAttrs(t3.dom.elWrap, { id: t3.chartClass.substring(1), class: "apexcharts-canvas " + t3.chartClass.substring(1) }), this.el.appendChild(t3.dom.elWrap), t3.dom.Paper = new window.SVG.Doc(t3.dom.elWrap), t3.dom.Paper.attr({ class: "apexcharts-svg", "xmlns:data": "ApexChartsNS", transform: "translate(".concat(e2.chart.offsetX, ", ").concat(e2.chart.offsetY, ")") }), t3.dom.Paper.node.style.background = e2.chart.background, this.setSVGDimensions(), t3.dom.elGraphical = t3.dom.Paper.group().attr({ class: "apexcharts-inner apexcharts-graphical" }), t3.dom.elAnnotations = t3.dom.Paper.group().attr({ class: "apexcharts-annotations" }), t3.dom.elDefs = t3.dom.Paper.defs(), t3.dom.elLegendWrap = document.createElement("div"), t3.dom.elLegendWrap.classList.add("apexcharts-legend"), t3.dom.elWrap.appendChild(t3.dom.elLegendWrap), t3.dom.Paper.add(t3.dom.elGraphical), t3.dom.elGraphical.add(t3.dom.elDefs);
        } }, { key: "plotChartType", value: function(t3, e2) {
          var i2 = this.w, a2 = i2.config, s2 = i2.globals, r2 = { series: [], i: [] }, o2 = { series: [], i: [] }, n2 = { series: [], i: [] }, l2 = { series: [], i: [] }, h2 = { series: [], i: [] }, c2 = { series: [], i: [] }, d2 = { series: [], i: [] }, g2 = { series: [], i: [] }, u2 = { series: [], seriesRangeEnd: [], i: [] };
          s2.series.map(function(e3, f3) {
            var p3 = 0;
            void 0 !== t3[f3].type ? ("column" === t3[f3].type || "bar" === t3[f3].type ? (s2.series.length > 1 && a2.plotOptions.bar.horizontal && console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"), h2.series.push(e3), h2.i.push(f3), p3++, i2.globals.columnSeries = h2.series) : "area" === t3[f3].type ? (o2.series.push(e3), o2.i.push(f3), p3++) : "line" === t3[f3].type ? (r2.series.push(e3), r2.i.push(f3), p3++) : "scatter" === t3[f3].type ? (n2.series.push(e3), n2.i.push(f3)) : "bubble" === t3[f3].type ? (l2.series.push(e3), l2.i.push(f3), p3++) : "candlestick" === t3[f3].type ? (c2.series.push(e3), c2.i.push(f3), p3++) : "boxPlot" === t3[f3].type ? (d2.series.push(e3), d2.i.push(f3), p3++) : "rangeBar" === t3[f3].type ? (g2.series.push(e3), g2.i.push(f3), p3++) : "rangeArea" === t3[f3].type ? (u2.series.push(s2.seriesRangeStart[f3]), u2.seriesRangeEnd.push(s2.seriesRangeEnd[f3]), u2.i.push(f3), p3++) : console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"), p3 > 1 && (s2.comboCharts = true)) : (r2.series.push(e3), r2.i.push(f3));
          });
          var f2 = new Xt(this.ctx, e2), p2 = new kt(this.ctx, e2);
          this.ctx.pie = new Lt(this.ctx);
          var x2 = new Tt(this.ctx);
          this.ctx.rangeBar = new Mt(this.ctx, e2);
          var b2 = new Pt(this.ctx), v2 = [];
          if (s2.comboCharts) {
            if (o2.series.length > 0 && v2.push(f2.draw(o2.series, "area", o2.i)), h2.series.length > 0)
              if (i2.config.chart.stacked) {
                var m2 = new wt(this.ctx, e2);
                v2.push(m2.draw(h2.series, h2.i));
              } else
                this.ctx.bar = new yt(this.ctx, e2), v2.push(this.ctx.bar.draw(h2.series, h2.i));
            if (u2.series.length > 0 && v2.push(f2.draw(u2.series, "rangeArea", u2.i, u2.seriesRangeEnd)), r2.series.length > 0 && v2.push(f2.draw(r2.series, "line", r2.i)), c2.series.length > 0 && v2.push(p2.draw(c2.series, c2.i)), d2.series.length > 0 && v2.push(p2.draw(d2.series, d2.i)), g2.series.length > 0 && v2.push(this.ctx.rangeBar.draw(g2.series, g2.i)), n2.series.length > 0) {
              var y2 = new Xt(this.ctx, e2, true);
              v2.push(y2.draw(n2.series, "scatter", n2.i));
            }
            if (l2.series.length > 0) {
              var w2 = new Xt(this.ctx, e2, true);
              v2.push(w2.draw(l2.series, "bubble", l2.i));
            }
          } else
            switch (a2.chart.type) {
              case "line":
                v2 = f2.draw(s2.series, "line");
                break;
              case "area":
                v2 = f2.draw(s2.series, "area");
                break;
              case "bar":
                if (a2.chart.stacked)
                  v2 = new wt(this.ctx, e2).draw(s2.series);
                else
                  this.ctx.bar = new yt(this.ctx, e2), v2 = this.ctx.bar.draw(s2.series);
                break;
              case "candlestick":
                v2 = new kt(this.ctx, e2).draw(s2.series);
                break;
              case "boxPlot":
                v2 = new kt(this.ctx, e2).draw(s2.series);
                break;
              case "rangeBar":
                v2 = this.ctx.rangeBar.draw(s2.series);
                break;
              case "rangeArea":
                v2 = f2.draw(s2.seriesRangeStart, "rangeArea", void 0, s2.seriesRangeEnd);
                break;
              case "heatmap":
                v2 = new St(this.ctx, e2).draw(s2.series);
                break;
              case "treemap":
                v2 = new Yt(this.ctx, e2).draw(s2.series);
                break;
              case "pie":
              case "donut":
              case "polarArea":
                v2 = this.ctx.pie.draw(s2.series);
                break;
              case "radialBar":
                v2 = x2.draw(s2.series);
                break;
              case "radar":
                v2 = b2.draw(s2.series);
                break;
              default:
                v2 = f2.draw(s2.series);
            }
          return v2;
        } }, { key: "setSVGDimensions", value: function() {
          var t3 = this.w.globals, e2 = this.w.config;
          t3.svgWidth = e2.chart.width, t3.svgHeight = e2.chart.height;
          var i2 = x.getDimensions(this.el), a2 = e2.chart.width.toString().split(/[0-9]+/g).pop();
          "%" === a2 ? x.isNumber(i2[0]) && (0 === i2[0].width && (i2 = x.getDimensions(this.el.parentNode)), t3.svgWidth = i2[0] * parseInt(e2.chart.width, 10) / 100) : "px" !== a2 && "" !== a2 || (t3.svgWidth = parseInt(e2.chart.width, 10));
          var s2 = e2.chart.height.toString().split(/[0-9]+/g).pop();
          if ("auto" !== t3.svgHeight && "" !== t3.svgHeight)
            if ("%" === s2) {
              var r2 = x.getDimensions(this.el.parentNode);
              t3.svgHeight = r2[1] * parseInt(e2.chart.height, 10) / 100;
            } else
              t3.svgHeight = parseInt(e2.chart.height, 10);
          else
            t3.axisCharts ? t3.svgHeight = t3.svgWidth / 1.61 : t3.svgHeight = t3.svgWidth / 1.2;
          if (t3.svgWidth < 0 && (t3.svgWidth = 0), t3.svgHeight < 0 && (t3.svgHeight = 0), m.setAttrs(t3.dom.Paper.node, { width: t3.svgWidth, height: t3.svgHeight }), "%" !== s2) {
            var o2 = e2.chart.sparkline.enabled ? 0 : t3.axisCharts ? e2.chart.parentHeightOffset : 0;
            t3.dom.Paper.node.parentNode.parentNode.style.minHeight = t3.svgHeight + o2 + "px";
          }
          t3.dom.elWrap.style.width = t3.svgWidth + "px", t3.dom.elWrap.style.height = t3.svgHeight + "px";
        } }, { key: "shiftGraphPosition", value: function() {
          var t3 = this.w.globals, e2 = t3.translateY, i2 = { transform: "translate(" + t3.translateX + ", " + e2 + ")" };
          m.setAttrs(t3.dom.elGraphical.node, i2);
        } }, { key: "resizeNonAxisCharts", value: function() {
          var t3 = this.w, e2 = t3.globals, i2 = 0, a2 = t3.config.chart.sparkline.enabled ? 1 : 15;
          a2 += t3.config.grid.padding.bottom, "top" !== t3.config.legend.position && "bottom" !== t3.config.legend.position || !t3.config.legend.show || t3.config.legend.floating || (i2 = new lt(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
          var s2 = t3.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"), r2 = 2.05 * t3.globals.radialSize;
          if (s2 && !t3.config.chart.sparkline.enabled && 0 !== t3.config.plotOptions.radialBar.startAngle) {
            var o2 = x.getBoundingClientRect(s2);
            r2 = o2.bottom;
            var n2 = o2.bottom - o2.top;
            r2 = Math.max(2.05 * t3.globals.radialSize, n2);
          }
          var l2 = r2 + e2.translateY + i2 + a2;
          e2.dom.elLegendForeign && e2.dom.elLegendForeign.setAttribute("height", l2), t3.config.chart.height && String(t3.config.chart.height).indexOf("%") > 0 || (e2.dom.elWrap.style.height = l2 + "px", m.setAttrs(e2.dom.Paper.node, { height: l2 }), e2.dom.Paper.node.parentNode.parentNode.style.minHeight = l2 + "px");
        } }, { key: "coreCalculations", value: function() {
          new U(this.ctx).init();
        } }, { key: "resetGlobals", value: function() {
          var t3 = this, e2 = function() {
            return t3.w.config.series.map(function(t4) {
              return [];
            });
          }, i2 = new E(), a2 = this.w.globals;
          i2.initGlobalVars(a2), a2.seriesXvalues = e2(), a2.seriesYvalues = e2();
        } }, { key: "isMultipleY", value: function() {
          if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1)
            return this.w.globals.isMultipleYAxis = true, true;
        } }, { key: "xySettings", value: function() {
          var t3 = null, e2 = this.w;
          if (e2.globals.axisCharts) {
            if ("back" === e2.config.xaxis.crosshairs.position)
              new Q(this.ctx).drawXCrosshairs();
            if ("back" === e2.config.yaxis[0].crosshairs.position)
              new Q(this.ctx).drawYCrosshairs();
            if ("datetime" === e2.config.xaxis.type && void 0 === e2.config.xaxis.labels.formatter) {
              this.ctx.timeScale = new Ft(this.ctx);
              var i2 = [];
              isFinite(e2.globals.minX) && isFinite(e2.globals.maxX) && !e2.globals.isBarHorizontal ? i2 = this.ctx.timeScale.calculateTimeScaleTicks(e2.globals.minX, e2.globals.maxX) : e2.globals.isBarHorizontal && (i2 = this.ctx.timeScale.calculateTimeScaleTicks(e2.globals.minY, e2.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i2);
            }
            t3 = new y(this.ctx).getCalculatedRatios();
          }
          return t3;
        } }, { key: "updateSourceChart", value: function(t3) {
          this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({ chart: { selection: { xaxis: { min: t3.w.globals.minX, max: t3.w.globals.maxX } } } }, false, false);
        } }, { key: "setupBrushHandler", value: function() {
          var t3 = this, i2 = this.w;
          if (i2.config.chart.brush.enabled && "function" != typeof i2.config.chart.events.selection) {
            var a2 = i2.config.chart.brush.targets || [i2.config.chart.brush.target];
            a2.forEach(function(e2) {
              var i3 = ApexCharts.getChartByID(e2);
              i3.w.globals.brushSource = t3.ctx, "function" != typeof i3.w.config.chart.events.zoomed && (i3.w.config.chart.events.zoomed = function() {
                t3.updateSourceChart(i3);
              }), "function" != typeof i3.w.config.chart.events.scrolled && (i3.w.config.chart.events.scrolled = function() {
                t3.updateSourceChart(i3);
              });
            }), i2.config.chart.events.selection = function(t4, s2) {
              a2.forEach(function(t5) {
                var a3 = ApexCharts.getChartByID(t5), r2 = x.clone(i2.config.yaxis);
                if (i2.config.chart.brush.autoScaleYaxis && 1 === a3.w.globals.series.length) {
                  var o2 = new _3(a3);
                  r2 = o2.autoScaleY(a3, r2, s2);
                }
                var n2 = a3.w.config.yaxis.reduce(function(t6, i3, s3) {
                  return [].concat(u(t6), [e(e({}, a3.w.config.yaxis[s3]), {}, { min: r2[0].min, max: r2[0].max })]);
                }, []);
                a3.ctx.updateHelpers._updateOptions({ xaxis: { min: s2.xaxis.min, max: s2.xaxis.max }, yaxis: n2 }, false, false, false, false);
              });
            };
          }
        } }]), t2;
      }();
      var Dt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "_updateOptions", value: function(t3) {
          var e2 = this, a2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], s2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], r2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], o2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
          return new Promise(function(n2) {
            var l2 = [e2.ctx];
            r2 && (l2 = e2.ctx.getSyncedCharts()), e2.ctx.w.globals.isExecCalled && (l2 = [e2.ctx], e2.ctx.w.globals.isExecCalled = false), l2.forEach(function(r3, h2) {
              var c2 = r3.w;
              if (c2.globals.shouldAnimate = s2, a2 || (c2.globals.resized = true, c2.globals.dataChanged = true, s2 && r3.series.getPreviousPaths()), t3 && "object" === i(t3) && (r3.config = new z(t3), t3 = y.extendArrayProps(r3.config, t3, c2), r3.w.globals.chartID !== e2.ctx.w.globals.chartID && delete t3.series, c2.config = x.extend(c2.config, t3), o2 && (c2.globals.lastXAxis = t3.xaxis ? x.clone(t3.xaxis) : [], c2.globals.lastYAxis = t3.yaxis ? x.clone(t3.yaxis) : [], c2.globals.initialConfig = x.extend({}, c2.config), c2.globals.initialSeries = x.clone(c2.config.series), t3.series))) {
                for (var d2 = 0; d2 < c2.globals.collapsedSeriesIndices.length; d2++) {
                  var g2 = c2.config.series[c2.globals.collapsedSeriesIndices[d2]];
                  c2.globals.collapsedSeries[d2].data = c2.globals.axisCharts ? g2.data.slice() : g2;
                }
                for (var u2 = 0; u2 < c2.globals.ancillaryCollapsedSeriesIndices.length; u2++) {
                  var f2 = c2.config.series[c2.globals.ancillaryCollapsedSeriesIndices[u2]];
                  c2.globals.ancillaryCollapsedSeries[u2].data = c2.globals.axisCharts ? f2.data.slice() : f2;
                }
                r3.series.emptyCollapsedSeries(c2.config.series);
              }
              return r3.update(t3).then(function() {
                h2 === l2.length - 1 && n2(r3);
              });
            });
          });
        } }, { key: "_updateSeries", value: function(t3, e2) {
          var i2 = this, a2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          return new Promise(function(s2) {
            var r2, o2 = i2.w;
            return o2.globals.shouldAnimate = e2, o2.globals.dataChanged = true, e2 && i2.ctx.series.getPreviousPaths(), o2.globals.axisCharts ? (0 === (r2 = t3.map(function(t4, e3) {
              return i2._extendSeries(t4, e3);
            })).length && (r2 = [{ data: [] }]), o2.config.series = r2) : o2.config.series = t3.slice(), a2 && (o2.globals.initialConfig.series = x.clone(o2.config.series), o2.globals.initialSeries = x.clone(o2.config.series)), i2.ctx.update().then(function() {
              s2(i2.ctx);
            });
          });
        } }, { key: "_extendSeries", value: function(t3, i2) {
          var a2 = this.w, s2 = a2.config.series[i2];
          return e(e({}, a2.config.series[i2]), {}, { name: t3.name ? t3.name : s2 && s2.name, color: t3.color ? t3.color : s2 && s2.color, type: t3.type ? t3.type : s2 && s2.type, data: t3.data ? t3.data : s2 && s2.data });
        } }, { key: "toggleDataPointSelection", value: function(t3, e2) {
          var i2 = this.w, a2 = null, s2 = ".apexcharts-series[data\\:realIndex='".concat(t3, "']");
          return i2.globals.axisCharts ? a2 = i2.globals.dom.Paper.select("".concat(s2, " path[j='").concat(e2, "'], ").concat(s2, " circle[j='").concat(e2, "'], ").concat(s2, " rect[j='").concat(e2, "']")).members[0] : void 0 === e2 && (a2 = i2.globals.dom.Paper.select("".concat(s2, " path[j='").concat(t3, "']")).members[0], "pie" !== i2.config.chart.type && "polarArea" !== i2.config.chart.type && "donut" !== i2.config.chart.type || this.ctx.pie.pieClicked(t3)), a2 ? (new m(this.ctx).pathMouseDown(a2, null), a2.node ? a2.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null);
        } }, { key: "forceXAxisUpdate", value: function(t3) {
          var e2 = this.w;
          if (["min", "max"].forEach(function(i3) {
            void 0 !== t3.xaxis[i3] && (e2.config.xaxis[i3] = t3.xaxis[i3], e2.globals.lastXAxis[i3] = t3.xaxis[i3]);
          }), t3.xaxis.categories && t3.xaxis.categories.length && (e2.config.xaxis.categories = t3.xaxis.categories), e2.config.xaxis.convertedCatToNumeric) {
            var i2 = new X(t3);
            t3 = i2.convertCatToNumericXaxis(t3, this.ctx);
          }
          return t3;
        } }, { key: "forceYAxisUpdate", value: function(t3) {
          return t3.chart && t3.chart.stacked && "100%" === t3.chart.stackType && (Array.isArray(t3.yaxis) ? t3.yaxis.forEach(function(e2, i2) {
            t3.yaxis[i2].min = 0, t3.yaxis[i2].max = 100;
          }) : (t3.yaxis.min = 0, t3.yaxis.max = 100)), t3;
        } }, { key: "revertDefaultAxisMinMax", value: function(t3) {
          var e2 = this, i2 = this.w, a2 = i2.globals.lastXAxis, s2 = i2.globals.lastYAxis;
          t3 && t3.xaxis && (a2 = t3.xaxis), t3 && t3.yaxis && (s2 = t3.yaxis), i2.config.xaxis.min = a2.min, i2.config.xaxis.max = a2.max;
          var r2 = function(t4) {
            void 0 !== s2[t4] && (i2.config.yaxis[t4].min = s2[t4].min, i2.config.yaxis[t4].max = s2[t4].max);
          };
          i2.config.yaxis.map(function(t4, a3) {
            i2.globals.zoomed || void 0 !== s2[a3] ? r2(a3) : void 0 !== e2.ctx.opts.yaxis[a3] && (t4.min = e2.ctx.opts.yaxis[a3].min, t4.max = e2.ctx.opts.yaxis[a3].max);
          });
        } }]), t2;
      }();
      zt = "undefined" != typeof window ? window : void 0, Et = function(t2, e2) {
        var a2 = (void 0 !== this ? this : t2).SVG = function(t3) {
          if (a2.supported)
            return t3 = new a2.Doc(t3), a2.parser.draw || a2.prepare(), t3;
        };
        if (a2.ns = "http://www.w3.org/2000/svg", a2.xmlns = "http://www.w3.org/2000/xmlns/", a2.xlink = "http://www.w3.org/1999/xlink", a2.svgjs = "http://svgjs.dev", a2.supported = true, !a2.supported)
          return false;
        a2.did = 1e3, a2.eid = function(t3) {
          return "Svgjs" + d2(t3) + a2.did++;
        }, a2.create = function(t3) {
          var i2 = e2.createElementNS(this.ns, t3);
          return i2.setAttribute("id", this.eid(t3)), i2;
        }, a2.extend = function() {
          var t3, e3;
          e3 = (t3 = [].slice.call(arguments)).pop();
          for (var i2 = t3.length - 1; i2 >= 0; i2--)
            if (t3[i2])
              for (var s3 in e3)
                t3[i2].prototype[s3] = e3[s3];
          a2.Set && a2.Set.inherit && a2.Set.inherit();
        }, a2.invent = function(t3) {
          var e3 = "function" == typeof t3.create ? t3.create : function() {
            this.constructor.call(this, a2.create(t3.create));
          };
          return t3.inherit && (e3.prototype = new t3.inherit()), t3.extend && a2.extend(e3, t3.extend), t3.construct && a2.extend(t3.parent || a2.Container, t3.construct), e3;
        }, a2.adopt = function(e3) {
          return e3 ? e3.instance ? e3.instance : ((i2 = "svg" == e3.nodeName ? e3.parentNode instanceof t2.SVGElement ? new a2.Nested() : new a2.Doc() : "linearGradient" == e3.nodeName ? new a2.Gradient("linear") : "radialGradient" == e3.nodeName ? new a2.Gradient("radial") : a2[d2(e3.nodeName)] ? new a2[d2(e3.nodeName)]() : new a2.Element(e3)).type = e3.nodeName, i2.node = e3, e3.instance = i2, i2 instanceof a2.Doc && i2.namespace().defs(), i2.setData(JSON.parse(e3.getAttribute("svgjs:data")) || {}), i2) : null;
          var i2;
        }, a2.prepare = function() {
          var t3 = e2.getElementsByTagName("body")[0], i2 = (t3 ? new a2.Doc(t3) : a2.adopt(e2.documentElement).nested()).size(2, 0);
          a2.parser = { body: t3 || e2.documentElement, draw: i2.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node, poly: i2.polyline().node, path: i2.path().node, native: a2.create("svg") };
        }, a2.parser = { native: a2.create("svg") }, e2.addEventListener("DOMContentLoaded", function() {
          a2.parser.draw || a2.prepare();
        }, false), a2.regex = { numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i, hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i, rgb: /rgb\((\d+),(\d+),(\d+)\)/, reference: /#([a-z0-9\-_]+)/i, transforms: /\)\s*,?\s*/, whitespace: /\s/g, isHex: /^#[a-f0-9]{3,6}$/i, isRgb: /^rgb\(/, isCss: /[^:]+:[^;]+;?/, isBlank: /^(\s+)?$/, isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, isPercent: /^-?[\d\.]+%$/, isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i, delimiter: /[\s,]+/, hyphen: /([^e])\-/gi, pathLetters: /[MLHVCSQTAZ]/gi, isPathLetter: /[MLHVCSQTAZ]/i, numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi, dots: /\./g }, a2.utils = { map: function(t3, e3) {
          for (var i2 = t3.length, a3 = [], s3 = 0; s3 < i2; s3++)
            a3.push(e3(t3[s3]));
          return a3;
        }, filter: function(t3, e3) {
          for (var i2 = t3.length, a3 = [], s3 = 0; s3 < i2; s3++)
            e3(t3[s3]) && a3.push(t3[s3]);
          return a3;
        }, filterSVGElements: function(e3) {
          return this.filter(e3, function(e4) {
            return e4 instanceof t2.SVGElement;
          });
        } }, a2.defaults = { attrs: { "fill-opacity": 1, "stroke-opacity": 1, "stroke-width": 0, "stroke-linejoin": "miter", "stroke-linecap": "butt", fill: "#000000", stroke: "#000000", opacity: 1, x: 0, y: 0, cx: 0, cy: 0, width: 0, height: 0, r: 0, rx: 0, ry: 0, offset: 0, "stop-opacity": 1, "stop-color": "#000000", "font-size": 16, "font-family": "Helvetica, Arial, sans-serif", "text-anchor": "start" } }, a2.Color = function(t3) {
          var e3, s3;
          this.r = 0, this.g = 0, this.b = 0, t3 && ("string" == typeof t3 ? a2.regex.isRgb.test(t3) ? (e3 = a2.regex.rgb.exec(t3.replace(a2.regex.whitespace, "")), this.r = parseInt(e3[1]), this.g = parseInt(e3[2]), this.b = parseInt(e3[3])) : a2.regex.isHex.test(t3) && (e3 = a2.regex.hex.exec(4 == (s3 = t3).length ? ["#", s3.substring(1, 2), s3.substring(1, 2), s3.substring(2, 3), s3.substring(2, 3), s3.substring(3, 4), s3.substring(3, 4)].join("") : s3), this.r = parseInt(e3[1], 16), this.g = parseInt(e3[2], 16), this.b = parseInt(e3[3], 16)) : "object" === i(t3) && (this.r = t3.r, this.g = t3.g, this.b = t3.b));
        }, a2.extend(a2.Color, { toString: function() {
          return this.toHex();
        }, toHex: function() {
          return "#" + g2(this.r) + g2(this.g) + g2(this.b);
        }, toRgb: function() {
          return "rgb(" + [this.r, this.g, this.b].join() + ")";
        }, brightness: function() {
          return this.r / 255 * 0.3 + this.g / 255 * 0.59 + this.b / 255 * 0.11;
        }, morph: function(t3) {
          return this.destination = new a2.Color(t3), this;
        }, at: function(t3) {
          return this.destination ? (t3 = t3 < 0 ? 0 : t3 > 1 ? 1 : t3, new a2.Color({ r: ~~(this.r + (this.destination.r - this.r) * t3), g: ~~(this.g + (this.destination.g - this.g) * t3), b: ~~(this.b + (this.destination.b - this.b) * t3) })) : this;
        } }), a2.Color.test = function(t3) {
          return t3 += "", a2.regex.isHex.test(t3) || a2.regex.isRgb.test(t3);
        }, a2.Color.isRgb = function(t3) {
          return t3 && "number" == typeof t3.r && "number" == typeof t3.g && "number" == typeof t3.b;
        }, a2.Color.isColor = function(t3) {
          return a2.Color.isRgb(t3) || a2.Color.test(t3);
        }, a2.Array = function(t3, e3) {
          0 == (t3 = (t3 || []).valueOf()).length && e3 && (t3 = e3.valueOf()), this.value = this.parse(t3);
        }, a2.extend(a2.Array, { toString: function() {
          return this.value.join(" ");
        }, valueOf: function() {
          return this.value;
        }, parse: function(t3) {
          return t3 = t3.valueOf(), Array.isArray(t3) ? t3 : this.split(t3);
        } }), a2.PointArray = function(t3, e3) {
          a2.Array.call(this, t3, e3 || [[0, 0]]);
        }, a2.PointArray.prototype = new a2.Array(), a2.PointArray.prototype.constructor = a2.PointArray;
        for (var s2 = { M: function(t3, e3, i2) {
          return e3.x = i2.x = t3[0], e3.y = i2.y = t3[1], ["M", e3.x, e3.y];
        }, L: function(t3, e3) {
          return e3.x = t3[0], e3.y = t3[1], ["L", t3[0], t3[1]];
        }, H: function(t3, e3) {
          return e3.x = t3[0], ["H", t3[0]];
        }, V: function(t3, e3) {
          return e3.y = t3[0], ["V", t3[0]];
        }, C: function(t3, e3) {
          return e3.x = t3[4], e3.y = t3[5], ["C", t3[0], t3[1], t3[2], t3[3], t3[4], t3[5]];
        }, Q: function(t3, e3) {
          return e3.x = t3[2], e3.y = t3[3], ["Q", t3[0], t3[1], t3[2], t3[3]];
        }, Z: function(t3, e3, i2) {
          return e3.x = i2.x, e3.y = i2.y, ["Z"];
        } }, r2 = "mlhvqtcsaz".split(""), o2 = 0, n2 = r2.length; o2 < n2; ++o2)
          s2[r2[o2]] = function(t3) {
            return function(e3, i2, a3) {
              if ("H" == t3)
                e3[0] = e3[0] + i2.x;
              else if ("V" == t3)
                e3[0] = e3[0] + i2.y;
              else if ("A" == t3)
                e3[5] = e3[5] + i2.x, e3[6] = e3[6] + i2.y;
              else
                for (var r3 = 0, o3 = e3.length; r3 < o3; ++r3)
                  e3[r3] = e3[r3] + (r3 % 2 ? i2.y : i2.x);
              if (s2 && "function" == typeof s2[t3])
                return s2[t3](e3, i2, a3);
            };
          }(r2[o2].toUpperCase());
        a2.PathArray = function(t3, e3) {
          a2.Array.call(this, t3, e3 || [["M", 0, 0]]);
        }, a2.PathArray.prototype = new a2.Array(), a2.PathArray.prototype.constructor = a2.PathArray, a2.extend(a2.PathArray, { toString: function() {
          return function(t3) {
            for (var e3 = 0, i2 = t3.length, a3 = ""; e3 < i2; e3++)
              a3 += t3[e3][0], null != t3[e3][1] && (a3 += t3[e3][1], null != t3[e3][2] && (a3 += " ", a3 += t3[e3][2], null != t3[e3][3] && (a3 += " ", a3 += t3[e3][3], a3 += " ", a3 += t3[e3][4], null != t3[e3][5] && (a3 += " ", a3 += t3[e3][5], a3 += " ", a3 += t3[e3][6], null != t3[e3][7] && (a3 += " ", a3 += t3[e3][7])))));
            return a3 + " ";
          }(this.value);
        }, move: function(t3, e3) {
          var i2 = this.bbox();
          return i2.x, i2.y, this;
        }, at: function(t3) {
          if (!this.destination)
            return this;
          for (var e3 = this.value, i2 = this.destination.value, s3 = [], r3 = new a2.PathArray(), o3 = 0, n3 = e3.length; o3 < n3; o3++) {
            s3[o3] = [e3[o3][0]];
            for (var l3 = 1, h3 = e3[o3].length; l3 < h3; l3++)
              s3[o3][l3] = e3[o3][l3] + (i2[o3][l3] - e3[o3][l3]) * t3;
            "A" === s3[o3][0] && (s3[o3][4] = +(0 != s3[o3][4]), s3[o3][5] = +(0 != s3[o3][5]));
          }
          return r3.value = s3, r3;
        }, parse: function(t3) {
          if (t3 instanceof a2.PathArray)
            return t3.valueOf();
          var e3, i2 = { M: 2, L: 2, H: 1, V: 1, C: 6, S: 4, Q: 4, T: 2, A: 7, Z: 0 };
          t3 = "string" == typeof t3 ? t3.replace(a2.regex.numbersWithDots, h2).replace(a2.regex.pathLetters, " $& ").replace(a2.regex.hyphen, "$1 -").trim().split(a2.regex.delimiter) : t3.reduce(function(t4, e4) {
            return [].concat.call(t4, e4);
          }, []);
          var r3 = [], o3 = new a2.Point(), n3 = new a2.Point(), l3 = 0, c3 = t3.length;
          do {
            a2.regex.isPathLetter.test(t3[l3]) ? (e3 = t3[l3], ++l3) : "M" == e3 ? e3 = "L" : "m" == e3 && (e3 = "l"), r3.push(s2[e3].call(null, t3.slice(l3, l3 += i2[e3.toUpperCase()]).map(parseFloat), o3, n3));
          } while (c3 > l3);
          return r3;
        }, bbox: function() {
          return a2.parser.draw || a2.prepare(), a2.parser.path.setAttribute("d", this.toString()), a2.parser.path.getBBox();
        } }), a2.Number = a2.invent({ create: function(t3, e3) {
          this.value = 0, this.unit = e3 || "", "number" == typeof t3 ? this.value = isNaN(t3) ? 0 : isFinite(t3) ? t3 : t3 < 0 ? -34e37 : 34e37 : "string" == typeof t3 ? (e3 = t3.match(a2.regex.numberAndUnit)) && (this.value = parseFloat(e3[1]), "%" == e3[5] ? this.value /= 100 : "s" == e3[5] && (this.value *= 1e3), this.unit = e3[5]) : t3 instanceof a2.Number && (this.value = t3.valueOf(), this.unit = t3.unit);
        }, extend: { toString: function() {
          return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
        }, toJSON: function() {
          return this.toString();
        }, valueOf: function() {
          return this.value;
        }, plus: function(t3) {
          return t3 = new a2.Number(t3), new a2.Number(this + t3, this.unit || t3.unit);
        }, minus: function(t3) {
          return t3 = new a2.Number(t3), new a2.Number(this - t3, this.unit || t3.unit);
        }, times: function(t3) {
          return t3 = new a2.Number(t3), new a2.Number(this * t3, this.unit || t3.unit);
        }, divide: function(t3) {
          return t3 = new a2.Number(t3), new a2.Number(this / t3, this.unit || t3.unit);
        }, to: function(t3) {
          var e3 = new a2.Number(this);
          return "string" == typeof t3 && (e3.unit = t3), e3;
        }, morph: function(t3) {
          return this.destination = new a2.Number(t3), t3.relative && (this.destination.value += this.value), this;
        }, at: function(t3) {
          return this.destination ? new a2.Number(this.destination).minus(this).times(t3).plus(this) : this;
        } } }), a2.Element = a2.invent({ create: function(t3) {
          this._stroke = a2.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t3) && (this.type = t3.nodeName, this.node.instance = this, this._stroke = t3.getAttribute("stroke") || this._stroke);
        }, extend: { x: function(t3) {
          return this.attr("x", t3);
        }, y: function(t3) {
          return this.attr("y", t3);
        }, cx: function(t3) {
          return null == t3 ? this.x() + this.width() / 2 : this.x(t3 - this.width() / 2);
        }, cy: function(t3) {
          return null == t3 ? this.y() + this.height() / 2 : this.y(t3 - this.height() / 2);
        }, move: function(t3, e3) {
          return this.x(t3).y(e3);
        }, center: function(t3, e3) {
          return this.cx(t3).cy(e3);
        }, width: function(t3) {
          return this.attr("width", t3);
        }, height: function(t3) {
          return this.attr("height", t3);
        }, size: function(t3, e3) {
          var i2 = u2(this, t3, e3);
          return this.width(new a2.Number(i2.width)).height(new a2.Number(i2.height));
        }, clone: function(t3) {
          this.writeDataToDom();
          var e3 = x2(this.node.cloneNode(true));
          return t3 ? t3.add(e3) : this.after(e3), e3;
        }, remove: function() {
          return this.parent() && this.parent().removeElement(this), this;
        }, replace: function(t3) {
          return this.after(t3).remove(), t3;
        }, addTo: function(t3) {
          return t3.put(this);
        }, putIn: function(t3) {
          return t3.add(this);
        }, id: function(t3) {
          return this.attr("id", t3);
        }, show: function() {
          return this.style("display", "");
        }, hide: function() {
          return this.style("display", "none");
        }, visible: function() {
          return "none" != this.style("display");
        }, toString: function() {
          return this.attr("id");
        }, classes: function() {
          var t3 = this.attr("class");
          return null == t3 ? [] : t3.trim().split(a2.regex.delimiter);
        }, hasClass: function(t3) {
          return -1 != this.classes().indexOf(t3);
        }, addClass: function(t3) {
          if (!this.hasClass(t3)) {
            var e3 = this.classes();
            e3.push(t3), this.attr("class", e3.join(" "));
          }
          return this;
        }, removeClass: function(t3) {
          return this.hasClass(t3) && this.attr("class", this.classes().filter(function(e3) {
            return e3 != t3;
          }).join(" ")), this;
        }, toggleClass: function(t3) {
          return this.hasClass(t3) ? this.removeClass(t3) : this.addClass(t3);
        }, reference: function(t3) {
          return a2.get(this.attr(t3));
        }, parent: function(e3) {
          var i2 = this;
          if (!i2.node.parentNode)
            return null;
          if (i2 = a2.adopt(i2.node.parentNode), !e3)
            return i2;
          for (; i2 && i2.node instanceof t2.SVGElement; ) {
            if ("string" == typeof e3 ? i2.matches(e3) : i2 instanceof e3)
              return i2;
            if (!i2.node.parentNode || "#document" == i2.node.parentNode.nodeName)
              return null;
            i2 = a2.adopt(i2.node.parentNode);
          }
        }, doc: function() {
          return this instanceof a2.Doc ? this : this.parent(a2.Doc);
        }, parents: function(t3) {
          var e3 = [], i2 = this;
          do {
            if (!(i2 = i2.parent(t3)) || !i2.node)
              break;
            e3.push(i2);
          } while (i2.parent);
          return e3;
        }, matches: function(t3) {
          return function(t4, e3) {
            return (t4.matches || t4.matchesSelector || t4.msMatchesSelector || t4.mozMatchesSelector || t4.webkitMatchesSelector || t4.oMatchesSelector).call(t4, e3);
          }(this.node, t3);
        }, native: function() {
          return this.node;
        }, svg: function(t3) {
          var i2 = e2.createElement("svg");
          if (!(t3 && this instanceof a2.Parent))
            return i2.appendChild(t3 = e2.createElement("svg")), this.writeDataToDom(), t3.appendChild(this.node.cloneNode(true)), i2.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
          i2.innerHTML = "<svg>" + t3.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
          for (var s3 = 0, r3 = i2.firstChild.childNodes.length; s3 < r3; s3++)
            this.node.appendChild(i2.firstChild.firstChild);
          return this;
        }, writeDataToDom: function() {
          return (this.each || this.lines) && (this.each ? this : this.lines()).each(function() {
            this.writeDataToDom();
          }), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
        }, setData: function(t3) {
          return this.dom = t3, this;
        }, is: function(t3) {
          return function(t4, e3) {
            return t4 instanceof e3;
          }(this, t3);
        } } }), a2.easing = { "-": function(t3) {
          return t3;
        }, "<>": function(t3) {
          return -Math.cos(t3 * Math.PI) / 2 + 0.5;
        }, ">": function(t3) {
          return Math.sin(t3 * Math.PI / 2);
        }, "<": function(t3) {
          return 1 - Math.cos(t3 * Math.PI / 2);
        } }, a2.morph = function(t3) {
          return function(e3, i2) {
            return new a2.MorphObj(e3, i2).at(t3);
          };
        }, a2.Situation = a2.invent({ create: function(t3) {
          this.init = false, this.reversed = false, this.reversing = false, this.duration = new a2.Number(t3.duration).valueOf(), this.delay = new a2.Number(t3.delay).valueOf(), this.start = +new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t3.ease, this.loop = 0, this.loops = false, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
        } }), a2.FX = a2.invent({ create: function(t3) {
          this._target = t3, this.situations = [], this.active = false, this.situation = null, this.paused = false, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
        }, extend: { animate: function(t3, e3, s3) {
          "object" === i(t3) && (e3 = t3.ease, s3 = t3.delay, t3 = t3.duration);
          var r3 = new a2.Situation({ duration: t3 || 1e3, delay: s3 || 0, ease: a2.easing[e3 || "-"] || e3 });
          return this.queue(r3), this;
        }, target: function(t3) {
          return t3 && t3 instanceof a2.Element ? (this._target = t3, this) : this._target;
        }, timeToAbsPos: function(t3) {
          return (t3 - this.situation.start) / (this.situation.duration / this._speed);
        }, absPosToTime: function(t3) {
          return this.situation.duration / this._speed * t3 + this.situation.start;
        }, startAnimFrame: function() {
          this.stopAnimFrame(), this.animationFrame = t2.requestAnimationFrame(function() {
            this.step();
          }.bind(this));
        }, stopAnimFrame: function() {
          t2.cancelAnimationFrame(this.animationFrame);
        }, start: function() {
          return !this.active && this.situation && (this.active = true, this.startCurrent()), this;
        }, startCurrent: function() {
          return this.situation.start = +new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
        }, queue: function(t3) {
          return ("function" == typeof t3 || t3 instanceof a2.Situation) && this.situations.push(t3), this.situation || (this.situation = this.situations.shift()), this;
        }, dequeue: function() {
          return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a2.Situation ? this.start() : this.situation.call(this)), this;
        }, initAnimations: function() {
          var t3, e3 = this.situation;
          if (e3.init)
            return this;
          for (var i2 in e3.animations) {
            t3 = this.target()[i2](), Array.isArray(t3) || (t3 = [t3]), Array.isArray(e3.animations[i2]) || (e3.animations[i2] = [e3.animations[i2]]);
            for (var s3 = t3.length; s3--; )
              e3.animations[i2][s3] instanceof a2.Number && (t3[s3] = new a2.Number(t3[s3])), e3.animations[i2][s3] = t3[s3].morph(e3.animations[i2][s3]);
          }
          for (var i2 in e3.attrs)
            e3.attrs[i2] = new a2.MorphObj(this.target().attr(i2), e3.attrs[i2]);
          for (var i2 in e3.styles)
            e3.styles[i2] = new a2.MorphObj(this.target().style(i2), e3.styles[i2]);
          return e3.initialTransformation = this.target().matrixify(), e3.init = true, this;
        }, clearQueue: function() {
          return this.situations = [], this;
        }, clearCurrent: function() {
          return this.situation = null, this;
        }, stop: function(t3, e3) {
          var i2 = this.active;
          return this.active = false, e3 && this.clearQueue(), t3 && this.situation && (!i2 && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
        }, after: function(t3) {
          var e3 = this.last();
          return this.target().on("finished.fx", function i2(a3) {
            a3.detail.situation == e3 && (t3.call(this, e3), this.off("finished.fx", i2));
          }), this._callStart();
        }, during: function(t3) {
          var e3 = this.last(), i2 = function(i3) {
            i3.detail.situation == e3 && t3.call(this, i3.detail.pos, a2.morph(i3.detail.pos), i3.detail.eased, e3);
          };
          return this.target().off("during.fx", i2).on("during.fx", i2), this.after(function() {
            this.off("during.fx", i2);
          }), this._callStart();
        }, afterAll: function(t3) {
          var e3 = function e4(i2) {
            t3.call(this), this.off("allfinished.fx", e4);
          };
          return this.target().off("allfinished.fx", e3).on("allfinished.fx", e3), this._callStart();
        }, last: function() {
          return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
        }, add: function(t3, e3, i2) {
          return this.last()[i2 || "animations"][t3] = e3, this._callStart();
        }, step: function(t3) {
          var e3, i2, a3;
          t3 || (this.absPos = this.timeToAbsPos(+new Date())), false !== this.situation.loops ? (e3 = Math.max(this.absPos, 0), i2 = Math.floor(e3), true === this.situation.loops || i2 < this.situation.loops ? (this.pos = e3 - i2, a3 = this.situation.loop, this.situation.loop = i2) : (this.absPos = this.situation.loops, this.pos = 1, a3 = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a3) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
          var s3 = this.situation.ease(this.pos);
          for (var r3 in this.situation.once)
            r3 > this.lastPos && r3 <= s3 && (this.situation.once[r3].call(this.target(), this.pos, s3), delete this.situation.once[r3]);
          return this.active && this.target().fire("during", { pos: this.pos, eased: s3, fx: this, situation: this.situation }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", { fx: this, situation: this.situation }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = false)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s3, this) : this;
        }, eachAt: function() {
          var t3, e3 = this, i2 = this.target(), s3 = this.situation;
          for (var r3 in s3.animations)
            t3 = [].concat(s3.animations[r3]).map(function(t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), i2[r3].apply(i2, t3);
          for (var r3 in s3.attrs)
            t3 = [r3].concat(s3.attrs[r3]).map(function(t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), i2.attr.apply(i2, t3);
          for (var r3 in s3.styles)
            t3 = [r3].concat(s3.styles[r3]).map(function(t4) {
              return "string" != typeof t4 && t4.at ? t4.at(s3.ease(e3.pos), e3.pos) : t4;
            }), i2.style.apply(i2, t3);
          if (s3.transforms.length) {
            t3 = s3.initialTransformation, r3 = 0;
            for (var o3 = s3.transforms.length; r3 < o3; r3++) {
              var n3 = s3.transforms[r3];
              n3 instanceof a2.Matrix ? t3 = n3.relative ? t3.multiply(new a2.Matrix().morph(n3).at(s3.ease(this.pos))) : t3.morph(n3).at(s3.ease(this.pos)) : (n3.relative || n3.undo(t3.extract()), t3 = t3.multiply(n3.at(s3.ease(this.pos))));
            }
            i2.matrix(t3);
          }
          return this;
        }, once: function(t3, e3, i2) {
          var a3 = this.last();
          return i2 || (t3 = a3.ease(t3)), a3.once[t3] = e3, this;
        }, _callStart: function() {
          return setTimeout(function() {
            this.start();
          }.bind(this), 0), this;
        } }, parent: a2.Element, construct: { animate: function(t3, e3, i2) {
          return (this.fx || (this.fx = new a2.FX(this))).animate(t3, e3, i2);
        }, delay: function(t3) {
          return (this.fx || (this.fx = new a2.FX(this))).delay(t3);
        }, stop: function(t3, e3) {
          return this.fx && this.fx.stop(t3, e3), this;
        }, finish: function() {
          return this.fx && this.fx.finish(), this;
        } } }), a2.MorphObj = a2.invent({ create: function(t3, e3) {
          return a2.Color.isColor(e3) ? new a2.Color(t3).morph(e3) : a2.regex.delimiter.test(t3) ? a2.regex.pathLetters.test(t3) ? new a2.PathArray(t3).morph(e3) : new a2.Array(t3).morph(e3) : a2.regex.numberAndUnit.test(e3) ? new a2.Number(t3).morph(e3) : (this.value = t3, void (this.destination = e3));
        }, extend: { at: function(t3, e3) {
          return e3 < 1 ? this.value : this.destination;
        }, valueOf: function() {
          return this.value;
        } } }), a2.extend(a2.FX, { attr: function(t3, e3, a3) {
          if ("object" === i(t3))
            for (var s3 in t3)
              this.attr(s3, t3[s3]);
          else
            this.add(t3, e3, "attrs");
          return this;
        }, plot: function(t3, e3, i2, a3) {
          return 4 == arguments.length ? this.plot([t3, e3, i2, a3]) : this.add("plot", new (this.target()).morphArray(t3));
        } }), a2.Box = a2.invent({ create: function(t3, e3, s3, r3) {
          if (!("object" !== i(t3) || t3 instanceof a2.Element))
            return a2.Box.call(this, null != t3.left ? t3.left : t3.x, null != t3.top ? t3.top : t3.y, t3.width, t3.height);
          4 == arguments.length && (this.x = t3, this.y = e3, this.width = s3, this.height = r3), b2(this);
        } }), a2.BBox = a2.invent({ create: function(t3) {
          if (a2.Box.apply(this, [].slice.call(arguments)), t3 instanceof a2.Element) {
            var i2;
            try {
              if (!e2.documentElement.contains) {
                for (var s3 = t3.node; s3.parentNode; )
                  s3 = s3.parentNode;
                if (s3 != e2)
                  throw new Error("Element not in the dom");
              }
              i2 = t3.node.getBBox();
            } catch (e3) {
              if (t3 instanceof a2.Shape) {
                a2.parser.draw || a2.prepare();
                var r3 = t3.clone(a2.parser.draw.instance).show();
                r3 && r3.node && "function" == typeof r3.node.getBBox && (i2 = r3.node.getBBox()), r3 && "function" == typeof r3.remove && r3.remove();
              } else
                i2 = { x: t3.node.clientLeft, y: t3.node.clientTop, width: t3.node.clientWidth, height: t3.node.clientHeight };
            }
            a2.Box.call(this, i2);
          }
        }, inherit: a2.Box, parent: a2.Element, construct: { bbox: function() {
          return new a2.BBox(this);
        } } }), a2.BBox.prototype.constructor = a2.BBox, a2.Matrix = a2.invent({ create: function(t3) {
          var e3 = p2([1, 0, 0, 1, 0, 0]);
          t3 = null === t3 ? e3 : t3 instanceof a2.Element ? t3.matrixify() : "string" == typeof t3 ? p2(t3.split(a2.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? p2([].slice.call(arguments)) : Array.isArray(t3) ? p2(t3) : t3 && "object" === i(t3) ? t3 : e3;
          for (var s3 = m2.length - 1; s3 >= 0; --s3)
            this[m2[s3]] = null != t3[m2[s3]] ? t3[m2[s3]] : e3[m2[s3]];
        }, extend: { extract: function() {
          var t3 = f2(this, 0, 1);
          f2(this, 1, 0);
          var e3 = 180 / Math.PI * Math.atan2(t3.y, t3.x) - 90;
          return { x: this.e, y: this.f, transformedX: (this.e * Math.cos(e3 * Math.PI / 180) + this.f * Math.sin(e3 * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b), transformedY: (this.f * Math.cos(e3 * Math.PI / 180) + this.e * Math.sin(-e3 * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d), rotation: e3, a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f, matrix: new a2.Matrix(this) };
        }, clone: function() {
          return new a2.Matrix(this);
        }, morph: function(t3) {
          return this.destination = new a2.Matrix(t3), this;
        }, multiply: function(t3) {
          return new a2.Matrix(this.native().multiply(function(t4) {
            return t4 instanceof a2.Matrix || (t4 = new a2.Matrix(t4)), t4;
          }(t3).native()));
        }, inverse: function() {
          return new a2.Matrix(this.native().inverse());
        }, translate: function(t3, e3) {
          return new a2.Matrix(this.native().translate(t3 || 0, e3 || 0));
        }, native: function() {
          for (var t3 = a2.parser.native.createSVGMatrix(), e3 = m2.length - 1; e3 >= 0; e3--)
            t3[m2[e3]] = this[m2[e3]];
          return t3;
        }, toString: function() {
          return "matrix(" + v2(this.a) + "," + v2(this.b) + "," + v2(this.c) + "," + v2(this.d) + "," + v2(this.e) + "," + v2(this.f) + ")";
        } }, parent: a2.Element, construct: { ctm: function() {
          return new a2.Matrix(this.node.getCTM());
        }, screenCTM: function() {
          if (this instanceof a2.Nested) {
            var t3 = this.rect(1, 1), e3 = t3.node.getScreenCTM();
            return t3.remove(), new a2.Matrix(e3);
          }
          return new a2.Matrix(this.node.getScreenCTM());
        } } }), a2.Point = a2.invent({ create: function(t3, e3) {
          var a3;
          a3 = Array.isArray(t3) ? { x: t3[0], y: t3[1] } : "object" === i(t3) ? { x: t3.x, y: t3.y } : null != t3 ? { x: t3, y: null != e3 ? e3 : t3 } : { x: 0, y: 0 }, this.x = a3.x, this.y = a3.y;
        }, extend: { clone: function() {
          return new a2.Point(this);
        }, morph: function(t3, e3) {
          return this.destination = new a2.Point(t3, e3), this;
        } } }), a2.extend(a2.Element, { point: function(t3, e3) {
          return new a2.Point(t3, e3).transform(this.screenCTM().inverse());
        } }), a2.extend(a2.Element, { attr: function(t3, e3, s3) {
          if (null == t3) {
            for (t3 = {}, s3 = (e3 = this.node.attributes).length - 1; s3 >= 0; s3--)
              t3[e3[s3].nodeName] = a2.regex.isNumber.test(e3[s3].nodeValue) ? parseFloat(e3[s3].nodeValue) : e3[s3].nodeValue;
            return t3;
          }
          if ("object" === i(t3))
            for (var r3 in t3)
              this.attr(r3, t3[r3]);
          else if (null === e3)
            this.node.removeAttribute(t3);
          else {
            if (null == e3)
              return null == (e3 = this.node.getAttribute(t3)) ? a2.defaults.attrs[t3] : a2.regex.isNumber.test(e3) ? parseFloat(e3) : e3;
            "stroke-width" == t3 ? this.attr("stroke", parseFloat(e3) > 0 ? this._stroke : null) : "stroke" == t3 && (this._stroke = e3), "fill" != t3 && "stroke" != t3 || (a2.regex.isImage.test(e3) && (e3 = this.doc().defs().image(e3, 0, 0)), e3 instanceof a2.Image && (e3 = this.doc().defs().pattern(0, 0, function() {
              this.add(e3);
            }))), "number" == typeof e3 ? e3 = new a2.Number(e3) : a2.Color.isColor(e3) ? e3 = new a2.Color(e3) : Array.isArray(e3) && (e3 = new a2.Array(e3)), "leading" == t3 ? this.leading && this.leading(e3) : "string" == typeof s3 ? this.node.setAttributeNS(s3, t3, e3.toString()) : this.node.setAttribute(t3, e3.toString()), !this.rebuild || "font-size" != t3 && "x" != t3 || this.rebuild(t3, e3);
          }
          return this;
        } }), a2.extend(a2.Element, { transform: function(t3, e3) {
          var s3;
          return "object" !== i(t3) ? (s3 = new a2.Matrix(this).extract(), "string" == typeof t3 ? s3[t3] : s3) : (s3 = new a2.Matrix(this), e3 = !!e3 || !!t3.relative, null != t3.a && (s3 = e3 ? s3.multiply(new a2.Matrix(t3)) : new a2.Matrix(t3)), this.attr("transform", s3));
        } }), a2.extend(a2.Element, { untransform: function() {
          return this.attr("transform", null);
        }, matrixify: function() {
          return (this.attr("transform") || "").split(a2.regex.transforms).slice(0, -1).map(function(t3) {
            var e3 = t3.trim().split("(");
            return [e3[0], e3[1].split(a2.regex.delimiter).map(function(t4) {
              return parseFloat(t4);
            })];
          }).reduce(function(t3, e3) {
            return "matrix" == e3[0] ? t3.multiply(p2(e3[1])) : t3[e3[0]].apply(t3, e3[1]);
          }, new a2.Matrix());
        }, toParent: function(t3) {
          if (this == t3)
            return this;
          var e3 = this.screenCTM(), i2 = t3.screenCTM().inverse();
          return this.addTo(t3).untransform().transform(i2.multiply(e3)), this;
        }, toDoc: function() {
          return this.toParent(this.doc());
        } }), a2.Transformation = a2.invent({ create: function(t3, e3) {
          if (arguments.length > 1 && "boolean" != typeof e3)
            return this.constructor.call(this, [].slice.call(arguments));
          if (Array.isArray(t3))
            for (var a3 = 0, s3 = this.arguments.length; a3 < s3; ++a3)
              this[this.arguments[a3]] = t3[a3];
          else if (t3 && "object" === i(t3))
            for (a3 = 0, s3 = this.arguments.length; a3 < s3; ++a3)
              this[this.arguments[a3]] = t3[this.arguments[a3]];
          this.inversed = false, true === e3 && (this.inversed = true);
        } }), a2.Translate = a2.invent({ parent: a2.Matrix, inherit: a2.Transformation, create: function(t3, e3) {
          this.constructor.apply(this, [].slice.call(arguments));
        }, extend: { arguments: ["transformedX", "transformedY"], method: "translate" } }), a2.extend(a2.Element, { style: function(t3, e3) {
          if (0 == arguments.length)
            return this.node.style.cssText || "";
          if (arguments.length < 2)
            if ("object" === i(t3))
              for (var s3 in t3)
                this.style(s3, t3[s3]);
            else {
              if (!a2.regex.isCss.test(t3))
                return this.node.style[c2(t3)];
              for (t3 = t3.split(/\s*;\s*/).filter(function(t4) {
                return !!t4;
              }).map(function(t4) {
                return t4.split(/\s*:\s*/);
              }); e3 = t3.pop(); )
                this.style(e3[0], e3[1]);
            }
          else
            this.node.style[c2(t3)] = null === e3 || a2.regex.isBlank.test(e3) ? "" : e3;
          return this;
        } }), a2.Parent = a2.invent({ create: function(t3) {
          this.constructor.call(this, t3);
        }, inherit: a2.Element, extend: { children: function() {
          return a2.utils.map(a2.utils.filterSVGElements(this.node.childNodes), function(t3) {
            return a2.adopt(t3);
          });
        }, add: function(t3, e3) {
          return null == e3 ? this.node.appendChild(t3.node) : t3.node != this.node.childNodes[e3] && this.node.insertBefore(t3.node, this.node.childNodes[e3]), this;
        }, put: function(t3, e3) {
          return this.add(t3, e3), t3;
        }, has: function(t3) {
          return this.index(t3) >= 0;
        }, index: function(t3) {
          return [].slice.call(this.node.childNodes).indexOf(t3.node);
        }, get: function(t3) {
          return a2.adopt(this.node.childNodes[t3]);
        }, first: function() {
          return this.get(0);
        }, last: function() {
          return this.get(this.node.childNodes.length - 1);
        }, each: function(t3, e3) {
          for (var i2 = this.children(), s3 = 0, r3 = i2.length; s3 < r3; s3++)
            i2[s3] instanceof a2.Element && t3.apply(i2[s3], [s3, i2]), e3 && i2[s3] instanceof a2.Container && i2[s3].each(t3, e3);
          return this;
        }, removeElement: function(t3) {
          return this.node.removeChild(t3.node), this;
        }, clear: function() {
          for (; this.node.hasChildNodes(); )
            this.node.removeChild(this.node.lastChild);
          return delete this._defs, this;
        }, defs: function() {
          return this.doc().defs();
        } } }), a2.extend(a2.Parent, { ungroup: function(t3, e3) {
          return 0 === e3 || this instanceof a2.Defs || this.node == a2.parser.draw || (t3 = t3 || (this instanceof a2.Doc ? this : this.parent(a2.Parent)), e3 = e3 || 1 / 0, this.each(function() {
            return this instanceof a2.Defs ? this : this instanceof a2.Parent ? this.ungroup(t3, e3 - 1) : this.toParent(t3);
          }), this.node.firstChild || this.remove()), this;
        }, flatten: function(t3, e3) {
          return this.ungroup(t3, e3);
        } }), a2.Container = a2.invent({ create: function(t3) {
          this.constructor.call(this, t3);
        }, inherit: a2.Parent }), a2.ViewBox = a2.invent({ parent: a2.Container, construct: {} }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function(t3) {
          a2.Element.prototype[t3] = function(e3) {
            return a2.on(this.node, t3, e3), this;
          };
        }), a2.listeners = [], a2.handlerMap = [], a2.listenerId = 0, a2.on = function(t3, e3, i2, s3, r3) {
          var o3 = i2.bind(s3 || t3.instance || t3), n3 = (a2.handlerMap.indexOf(t3) + 1 || a2.handlerMap.push(t3)) - 1, l3 = e3.split(".")[0], h3 = e3.split(".")[1] || "*";
          a2.listeners[n3] = a2.listeners[n3] || {}, a2.listeners[n3][l3] = a2.listeners[n3][l3] || {}, a2.listeners[n3][l3][h3] = a2.listeners[n3][l3][h3] || {}, i2._svgjsListenerId || (i2._svgjsListenerId = ++a2.listenerId), a2.listeners[n3][l3][h3][i2._svgjsListenerId] = o3, t3.addEventListener(l3, o3, r3 || { passive: true });
        }, a2.off = function(t3, e3, i2) {
          var s3 = a2.handlerMap.indexOf(t3), r3 = e3 && e3.split(".")[0], o3 = e3 && e3.split(".")[1], n3 = "";
          if (-1 != s3)
            if (i2) {
              if ("function" == typeof i2 && (i2 = i2._svgjsListenerId), !i2)
                return;
              a2.listeners[s3][r3] && a2.listeners[s3][r3][o3 || "*"] && (t3.removeEventListener(r3, a2.listeners[s3][r3][o3 || "*"][i2], false), delete a2.listeners[s3][r3][o3 || "*"][i2]);
            } else if (o3 && r3) {
              if (a2.listeners[s3][r3] && a2.listeners[s3][r3][o3]) {
                for (var l3 in a2.listeners[s3][r3][o3])
                  a2.off(t3, [r3, o3].join("."), l3);
                delete a2.listeners[s3][r3][o3];
              }
            } else if (o3)
              for (var h3 in a2.listeners[s3])
                for (var n3 in a2.listeners[s3][h3])
                  o3 === n3 && a2.off(t3, [h3, o3].join("."));
            else if (r3) {
              if (a2.listeners[s3][r3]) {
                for (var n3 in a2.listeners[s3][r3])
                  a2.off(t3, [r3, n3].join("."));
                delete a2.listeners[s3][r3];
              }
            } else {
              for (var h3 in a2.listeners[s3])
                a2.off(t3, h3);
              delete a2.listeners[s3], delete a2.handlerMap[s3];
            }
        }, a2.extend(a2.Element, { on: function(t3, e3, i2, s3) {
          return a2.on(this.node, t3, e3, i2, s3), this;
        }, off: function(t3, e3) {
          return a2.off(this.node, t3, e3), this;
        }, fire: function(e3, i2) {
          return e3 instanceof t2.Event ? this.node.dispatchEvent(e3) : this.node.dispatchEvent(e3 = new a2.CustomEvent(e3, { detail: i2, cancelable: true })), this._event = e3, this;
        }, event: function() {
          return this._event;
        } }), a2.Defs = a2.invent({ create: "defs", inherit: a2.Container }), a2.G = a2.invent({ create: "g", inherit: a2.Container, extend: { x: function(t3) {
          return null == t3 ? this.transform("x") : this.transform({ x: t3 - this.x() }, true);
        } }, construct: { group: function() {
          return this.put(new a2.G());
        } } }), a2.Doc = a2.invent({ create: function(t3) {
          t3 && ("svg" == (t3 = "string" == typeof t3 ? e2.getElementById(t3) : t3).nodeName ? this.constructor.call(this, t3) : (this.constructor.call(this, a2.create("svg")), t3.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
        }, inherit: a2.Container, extend: { namespace: function() {
          return this.attr({ xmlns: a2.ns, version: "1.1" }).attr("xmlns:xlink", a2.xlink, a2.xmlns).attr("xmlns:svgjs", a2.svgjs, a2.xmlns);
        }, defs: function() {
          var t3;
          return this._defs || ((t3 = this.node.getElementsByTagName("defs")[0]) ? this._defs = a2.adopt(t3) : this._defs = new a2.Defs(), this.node.appendChild(this._defs.node)), this._defs;
        }, parent: function() {
          return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
        }, remove: function() {
          return this.parent() && this.parent().removeChild(this.node), this;
        }, clear: function() {
          for (; this.node.hasChildNodes(); )
            this.node.removeChild(this.node.lastChild);
          return delete this._defs, a2.parser.draw && !a2.parser.draw.parentNode && this.node.appendChild(a2.parser.draw), this;
        }, clone: function(t3) {
          this.writeDataToDom();
          var e3 = this.node, i2 = x2(e3.cloneNode(true));
          return t3 ? (t3.node || t3).appendChild(i2.node) : e3.parentNode.insertBefore(i2.node, e3.nextSibling), i2;
        } } }), a2.extend(a2.Element, {}), a2.Gradient = a2.invent({ create: function(t3) {
          this.constructor.call(this, a2.create(t3 + "Gradient")), this.type = t3;
        }, inherit: a2.Container, extend: { at: function(t3, e3, i2) {
          return this.put(new a2.Stop()).update(t3, e3, i2);
        }, update: function(t3) {
          return this.clear(), "function" == typeof t3 && t3.call(this, this), this;
        }, fill: function() {
          return "url(#" + this.id() + ")";
        }, toString: function() {
          return this.fill();
        }, attr: function(t3, e3, i2) {
          return "transform" == t3 && (t3 = "gradientTransform"), a2.Container.prototype.attr.call(this, t3, e3, i2);
        } }, construct: { gradient: function(t3, e3) {
          return this.defs().gradient(t3, e3);
        } } }), a2.extend(a2.Gradient, a2.FX, { from: function(t3, e3) {
          return "radial" == (this._target || this).type ? this.attr({ fx: new a2.Number(t3), fy: new a2.Number(e3) }) : this.attr({ x1: new a2.Number(t3), y1: new a2.Number(e3) });
        }, to: function(t3, e3) {
          return "radial" == (this._target || this).type ? this.attr({ cx: new a2.Number(t3), cy: new a2.Number(e3) }) : this.attr({ x2: new a2.Number(t3), y2: new a2.Number(e3) });
        } }), a2.extend(a2.Defs, { gradient: function(t3, e3) {
          return this.put(new a2.Gradient(t3)).update(e3);
        } }), a2.Stop = a2.invent({ create: "stop", inherit: a2.Element, extend: { update: function(t3) {
          return ("number" == typeof t3 || t3 instanceof a2.Number) && (t3 = { offset: arguments[0], color: arguments[1], opacity: arguments[2] }), null != t3.opacity && this.attr("stop-opacity", t3.opacity), null != t3.color && this.attr("stop-color", t3.color), null != t3.offset && this.attr("offset", new a2.Number(t3.offset)), this;
        } } }), a2.Pattern = a2.invent({ create: "pattern", inherit: a2.Container, extend: { fill: function() {
          return "url(#" + this.id() + ")";
        }, update: function(t3) {
          return this.clear(), "function" == typeof t3 && t3.call(this, this), this;
        }, toString: function() {
          return this.fill();
        }, attr: function(t3, e3, i2) {
          return "transform" == t3 && (t3 = "patternTransform"), a2.Container.prototype.attr.call(this, t3, e3, i2);
        } }, construct: { pattern: function(t3, e3, i2) {
          return this.defs().pattern(t3, e3, i2);
        } } }), a2.extend(a2.Defs, { pattern: function(t3, e3, i2) {
          return this.put(new a2.Pattern()).update(i2).attr({ x: 0, y: 0, width: t3, height: e3, patternUnits: "userSpaceOnUse" });
        } }), a2.Shape = a2.invent({ create: function(t3) {
          this.constructor.call(this, t3);
        }, inherit: a2.Element }), a2.Symbol = a2.invent({ create: "symbol", inherit: a2.Container, construct: { symbol: function() {
          return this.put(new a2.Symbol());
        } } }), a2.Use = a2.invent({ create: "use", inherit: a2.Shape, extend: { element: function(t3, e3) {
          return this.attr("href", (e3 || "") + "#" + t3, a2.xlink);
        } }, construct: { use: function(t3, e3) {
          return this.put(new a2.Use()).element(t3, e3);
        } } }), a2.Rect = a2.invent({ create: "rect", inherit: a2.Shape, construct: { rect: function(t3, e3) {
          return this.put(new a2.Rect()).size(t3, e3);
        } } }), a2.Circle = a2.invent({ create: "circle", inherit: a2.Shape, construct: { circle: function(t3) {
          return this.put(new a2.Circle()).rx(new a2.Number(t3).divide(2)).move(0, 0);
        } } }), a2.extend(a2.Circle, a2.FX, { rx: function(t3) {
          return this.attr("r", t3);
        }, ry: function(t3) {
          return this.rx(t3);
        } }), a2.Ellipse = a2.invent({ create: "ellipse", inherit: a2.Shape, construct: { ellipse: function(t3, e3) {
          return this.put(new a2.Ellipse()).size(t3, e3).move(0, 0);
        } } }), a2.extend(a2.Ellipse, a2.Rect, a2.FX, { rx: function(t3) {
          return this.attr("rx", t3);
        }, ry: function(t3) {
          return this.attr("ry", t3);
        } }), a2.extend(a2.Circle, a2.Ellipse, { x: function(t3) {
          return null == t3 ? this.cx() - this.rx() : this.cx(t3 + this.rx());
        }, y: function(t3) {
          return null == t3 ? this.cy() - this.ry() : this.cy(t3 + this.ry());
        }, cx: function(t3) {
          return null == t3 ? this.attr("cx") : this.attr("cx", t3);
        }, cy: function(t3) {
          return null == t3 ? this.attr("cy") : this.attr("cy", t3);
        }, width: function(t3) {
          return null == t3 ? 2 * this.rx() : this.rx(new a2.Number(t3).divide(2));
        }, height: function(t3) {
          return null == t3 ? 2 * this.ry() : this.ry(new a2.Number(t3).divide(2));
        }, size: function(t3, e3) {
          var i2 = u2(this, t3, e3);
          return this.rx(new a2.Number(i2.width).divide(2)).ry(new a2.Number(i2.height).divide(2));
        } }), a2.Line = a2.invent({ create: "line", inherit: a2.Shape, extend: { array: function() {
          return new a2.PointArray([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
        }, plot: function(t3, e3, i2, s3) {
          return null == t3 ? this.array() : (t3 = void 0 !== e3 ? { x1: t3, y1: e3, x2: i2, y2: s3 } : new a2.PointArray(t3).toLine(), this.attr(t3));
        }, move: function(t3, e3) {
          return this.attr(this.array().move(t3, e3).toLine());
        }, size: function(t3, e3) {
          var i2 = u2(this, t3, e3);
          return this.attr(this.array().size(i2.width, i2.height).toLine());
        } }, construct: { line: function(t3, e3, i2, s3) {
          return a2.Line.prototype.plot.apply(this.put(new a2.Line()), null != t3 ? [t3, e3, i2, s3] : [0, 0, 0, 0]);
        } } }), a2.Polyline = a2.invent({ create: "polyline", inherit: a2.Shape, construct: { polyline: function(t3) {
          return this.put(new a2.Polyline()).plot(t3 || new a2.PointArray());
        } } }), a2.Polygon = a2.invent({ create: "polygon", inherit: a2.Shape, construct: { polygon: function(t3) {
          return this.put(new a2.Polygon()).plot(t3 || new a2.PointArray());
        } } }), a2.extend(a2.Polyline, a2.Polygon, { array: function() {
          return this._array || (this._array = new a2.PointArray(this.attr("points")));
        }, plot: function(t3) {
          return null == t3 ? this.array() : this.clear().attr("points", "string" == typeof t3 ? t3 : this._array = new a2.PointArray(t3));
        }, clear: function() {
          return delete this._array, this;
        }, move: function(t3, e3) {
          return this.attr("points", this.array().move(t3, e3));
        }, size: function(t3, e3) {
          var i2 = u2(this, t3, e3);
          return this.attr("points", this.array().size(i2.width, i2.height));
        } }), a2.extend(a2.Line, a2.Polyline, a2.Polygon, { morphArray: a2.PointArray, x: function(t3) {
          return null == t3 ? this.bbox().x : this.move(t3, this.bbox().y);
        }, y: function(t3) {
          return null == t3 ? this.bbox().y : this.move(this.bbox().x, t3);
        }, width: function(t3) {
          var e3 = this.bbox();
          return null == t3 ? e3.width : this.size(t3, e3.height);
        }, height: function(t3) {
          var e3 = this.bbox();
          return null == t3 ? e3.height : this.size(e3.width, t3);
        } }), a2.Path = a2.invent({ create: "path", inherit: a2.Shape, extend: { morphArray: a2.PathArray, array: function() {
          return this._array || (this._array = new a2.PathArray(this.attr("d")));
        }, plot: function(t3) {
          return null == t3 ? this.array() : this.clear().attr("d", "string" == typeof t3 ? t3 : this._array = new a2.PathArray(t3));
        }, clear: function() {
          return delete this._array, this;
        } }, construct: { path: function(t3) {
          return this.put(new a2.Path()).plot(t3 || new a2.PathArray());
        } } }), a2.Image = a2.invent({ create: "image", inherit: a2.Shape, extend: { load: function(e3) {
          if (!e3)
            return this;
          var i2 = this, s3 = new t2.Image();
          return a2.on(s3, "load", function() {
            a2.off(s3);
            var t3 = i2.parent(a2.Pattern);
            null !== t3 && (0 == i2.width() && 0 == i2.height() && i2.size(s3.width, s3.height), t3 && 0 == t3.width() && 0 == t3.height() && t3.size(i2.width(), i2.height()), "function" == typeof i2._loaded && i2._loaded.call(i2, { width: s3.width, height: s3.height, ratio: s3.width / s3.height, url: e3 }));
          }), a2.on(s3, "error", function(t3) {
            a2.off(s3), "function" == typeof i2._error && i2._error.call(i2, t3);
          }), this.attr("href", s3.src = this.src = e3, a2.xlink);
        }, loaded: function(t3) {
          return this._loaded = t3, this;
        }, error: function(t3) {
          return this._error = t3, this;
        } }, construct: { image: function(t3, e3, i2) {
          return this.put(new a2.Image()).load(t3).size(e3 || 0, i2 || e3 || 0);
        } } }), a2.Text = a2.invent({ create: function() {
          this.constructor.call(this, a2.create("text")), this.dom.leading = new a2.Number(1.3), this._rebuild = true, this._build = false, this.attr("font-family", a2.defaults.attrs["font-family"]);
        }, inherit: a2.Shape, extend: { x: function(t3) {
          return null == t3 ? this.attr("x") : this.attr("x", t3);
        }, text: function(t3) {
          if (void 0 === t3) {
            t3 = "";
            for (var e3 = this.node.childNodes, i2 = 0, s3 = e3.length; i2 < s3; ++i2)
              0 != i2 && 3 != e3[i2].nodeType && 1 == a2.adopt(e3[i2]).dom.newLined && (t3 += "\n"), t3 += e3[i2].textContent;
            return t3;
          }
          if (this.clear().build(true), "function" == typeof t3)
            t3.call(this, this);
          else {
            i2 = 0;
            for (var r3 = (t3 = t3.split("\n")).length; i2 < r3; i2++)
              this.tspan(t3[i2]).newLine();
          }
          return this.build(false).rebuild();
        }, size: function(t3) {
          return this.attr("font-size", t3).rebuild();
        }, leading: function(t3) {
          return null == t3 ? this.dom.leading : (this.dom.leading = new a2.Number(t3), this.rebuild());
        }, lines: function() {
          var t3 = (this.textPath && this.textPath() || this).node, e3 = a2.utils.map(a2.utils.filterSVGElements(t3.childNodes), function(t4) {
            return a2.adopt(t4);
          });
          return new a2.Set(e3);
        }, rebuild: function(t3) {
          if ("boolean" == typeof t3 && (this._rebuild = t3), this._rebuild) {
            var e3 = this, i2 = 0, s3 = this.dom.leading * new a2.Number(this.attr("font-size"));
            this.lines().each(function() {
              this.dom.newLined && (e3.textPath() || this.attr("x", e3.attr("x")), "\n" == this.text() ? i2 += s3 : (this.attr("dy", s3 + i2), i2 = 0));
            }), this.fire("rebuild");
          }
          return this;
        }, build: function(t3) {
          return this._build = !!t3, this;
        }, setData: function(t3) {
          return this.dom = t3, this.dom.leading = new a2.Number(t3.leading || 1.3), this;
        } }, construct: { text: function(t3) {
          return this.put(new a2.Text()).text(t3);
        }, plain: function(t3) {
          return this.put(new a2.Text()).plain(t3);
        } } }), a2.Tspan = a2.invent({ create: "tspan", inherit: a2.Shape, extend: { text: function(t3) {
          return null == t3 ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t3 ? t3.call(this, this) : this.plain(t3), this);
        }, dx: function(t3) {
          return this.attr("dx", t3);
        }, dy: function(t3) {
          return this.attr("dy", t3);
        }, newLine: function() {
          var t3 = this.parent(a2.Text);
          return this.dom.newLined = true, this.dy(t3.dom.leading * t3.attr("font-size")).attr("x", t3.x());
        } } }), a2.extend(a2.Text, a2.Tspan, { plain: function(t3) {
          return false === this._build && this.clear(), this.node.appendChild(e2.createTextNode(t3)), this;
        }, tspan: function(t3) {
          var e3 = (this.textPath && this.textPath() || this).node, i2 = new a2.Tspan();
          return false === this._build && this.clear(), e3.appendChild(i2.node), i2.text(t3);
        }, clear: function() {
          for (var t3 = (this.textPath && this.textPath() || this).node; t3.hasChildNodes(); )
            t3.removeChild(t3.lastChild);
          return this;
        }, length: function() {
          return this.node.getComputedTextLength();
        } }), a2.TextPath = a2.invent({ create: "textPath", inherit: a2.Parent, parent: a2.Text, construct: { morphArray: a2.PathArray, array: function() {
          var t3 = this.track();
          return t3 ? t3.array() : null;
        }, plot: function(t3) {
          var e3 = this.track(), i2 = null;
          return e3 && (i2 = e3.plot(t3)), null == t3 ? i2 : this;
        }, track: function() {
          var t3 = this.textPath();
          if (t3)
            return t3.reference("href");
        }, textPath: function() {
          if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName)
            return a2.adopt(this.node.firstChild);
        } } }), a2.Nested = a2.invent({ create: function() {
          this.constructor.call(this, a2.create("svg")), this.style("overflow", "visible");
        }, inherit: a2.Container, construct: { nested: function() {
          return this.put(new a2.Nested());
        } } });
        var l2 = { stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"], fill: ["color", "opacity", "rule"], prefix: function(t3, e3) {
          return "color" == e3 ? t3 : t3 + "-" + e3;
        } };
        function h2(t3, e3, i2, s3) {
          return i2 + s3.replace(a2.regex.dots, " .");
        }
        function c2(t3) {
          return t3.toLowerCase().replace(/-(.)/g, function(t4, e3) {
            return e3.toUpperCase();
          });
        }
        function d2(t3) {
          return t3.charAt(0).toUpperCase() + t3.slice(1);
        }
        function g2(t3) {
          var e3 = t3.toString(16);
          return 1 == e3.length ? "0" + e3 : e3;
        }
        function u2(t3, e3, i2) {
          if (null == e3 || null == i2) {
            var a3 = t3.bbox();
            null == e3 ? e3 = a3.width / a3.height * i2 : null == i2 && (i2 = a3.height / a3.width * e3);
          }
          return { width: e3, height: i2 };
        }
        function f2(t3, e3, i2) {
          return { x: e3 * t3.a + i2 * t3.c + 0, y: e3 * t3.b + i2 * t3.d + 0 };
        }
        function p2(t3) {
          return { a: t3[0], b: t3[1], c: t3[2], d: t3[3], e: t3[4], f: t3[5] };
        }
        function x2(e3) {
          for (var i2 = e3.childNodes.length - 1; i2 >= 0; i2--)
            e3.childNodes[i2] instanceof t2.SVGElement && x2(e3.childNodes[i2]);
          return a2.adopt(e3).id(a2.eid(e3.nodeName));
        }
        function b2(t3) {
          return null == t3.x && (t3.x = 0, t3.y = 0, t3.width = 0, t3.height = 0), t3.w = t3.width, t3.h = t3.height, t3.x2 = t3.x + t3.width, t3.y2 = t3.y + t3.height, t3.cx = t3.x + t3.width / 2, t3.cy = t3.y + t3.height / 2, t3;
        }
        function v2(t3) {
          return Math.abs(t3) > 1e-37 ? t3 : 0;
        }
        ["fill", "stroke"].forEach(function(t3) {
          var e3 = {};
          e3[t3] = function(e4) {
            if (void 0 === e4)
              return this;
            if ("string" == typeof e4 || a2.Color.isRgb(e4) || e4 && "function" == typeof e4.fill)
              this.attr(t3, e4);
            else
              for (var i2 = l2[t3].length - 1; i2 >= 0; i2--)
                null != e4[l2[t3][i2]] && this.attr(l2.prefix(t3, l2[t3][i2]), e4[l2[t3][i2]]);
            return this;
          }, a2.extend(a2.Element, a2.FX, e3);
        }), a2.extend(a2.Element, a2.FX, { translate: function(t3, e3) {
          return this.transform({ x: t3, y: e3 });
        }, matrix: function(t3) {
          return this.attr("transform", new a2.Matrix(6 == arguments.length ? [].slice.call(arguments) : t3));
        }, opacity: function(t3) {
          return this.attr("opacity", t3);
        }, dx: function(t3) {
          return this.x(new a2.Number(t3).plus(this instanceof a2.FX ? 0 : this.x()), true);
        }, dy: function(t3) {
          return this.y(new a2.Number(t3).plus(this instanceof a2.FX ? 0 : this.y()), true);
        } }), a2.extend(a2.Path, { length: function() {
          return this.node.getTotalLength();
        }, pointAt: function(t3) {
          return this.node.getPointAtLength(t3);
        } }), a2.Set = a2.invent({ create: function(t3) {
          Array.isArray(t3) ? this.members = t3 : this.clear();
        }, extend: { add: function() {
          for (var t3 = [].slice.call(arguments), e3 = 0, i2 = t3.length; e3 < i2; e3++)
            this.members.push(t3[e3]);
          return this;
        }, remove: function(t3) {
          var e3 = this.index(t3);
          return e3 > -1 && this.members.splice(e3, 1), this;
        }, each: function(t3) {
          for (var e3 = 0, i2 = this.members.length; e3 < i2; e3++)
            t3.apply(this.members[e3], [e3, this.members]);
          return this;
        }, clear: function() {
          return this.members = [], this;
        }, length: function() {
          return this.members.length;
        }, has: function(t3) {
          return this.index(t3) >= 0;
        }, index: function(t3) {
          return this.members.indexOf(t3);
        }, get: function(t3) {
          return this.members[t3];
        }, first: function() {
          return this.get(0);
        }, last: function() {
          return this.get(this.members.length - 1);
        }, valueOf: function() {
          return this.members;
        } }, construct: { set: function(t3) {
          return new a2.Set(t3);
        } } }), a2.FX.Set = a2.invent({ create: function(t3) {
          this.set = t3;
        } }), a2.Set.inherit = function() {
          var t3 = [];
          for (var e3 in a2.Shape.prototype)
            "function" == typeof a2.Shape.prototype[e3] && "function" != typeof a2.Set.prototype[e3] && t3.push(e3);
          for (var e3 in t3.forEach(function(t4) {
            a2.Set.prototype[t4] = function() {
              for (var e4 = 0, i2 = this.members.length; e4 < i2; e4++)
                this.members[e4] && "function" == typeof this.members[e4][t4] && this.members[e4][t4].apply(this.members[e4], arguments);
              return "animate" == t4 ? this.fx || (this.fx = new a2.FX.Set(this)) : this;
            };
          }), t3 = [], a2.FX.prototype)
            "function" == typeof a2.FX.prototype[e3] && "function" != typeof a2.FX.Set.prototype[e3] && t3.push(e3);
          t3.forEach(function(t4) {
            a2.FX.Set.prototype[t4] = function() {
              for (var e4 = 0, i2 = this.set.members.length; e4 < i2; e4++)
                this.set.members[e4].fx[t4].apply(this.set.members[e4].fx, arguments);
              return this;
            };
          });
        }, a2.extend(a2.Element, {}), a2.extend(a2.Element, { remember: function(t3, e3) {
          if ("object" === i(arguments[0]))
            for (var a3 in t3)
              this.remember(a3, t3[a3]);
          else {
            if (1 == arguments.length)
              return this.memory()[t3];
            this.memory()[t3] = e3;
          }
          return this;
        }, forget: function() {
          if (0 == arguments.length)
            this._memory = {};
          else
            for (var t3 = arguments.length - 1; t3 >= 0; t3--)
              delete this.memory()[arguments[t3]];
          return this;
        }, memory: function() {
          return this._memory || (this._memory = {});
        } }), a2.get = function(t3) {
          var i2 = e2.getElementById(function(t4) {
            var e3 = (t4 || "").toString().match(a2.regex.reference);
            if (e3)
              return e3[1];
          }(t3) || t3);
          return a2.adopt(i2);
        }, a2.select = function(t3, i2) {
          return new a2.Set(a2.utils.map((i2 || e2).querySelectorAll(t3), function(t4) {
            return a2.adopt(t4);
          }));
        }, a2.extend(a2.Parent, { select: function(t3) {
          return a2.select(t3, this.node);
        } });
        var m2 = "abcdef".split("");
        if ("function" != typeof t2.CustomEvent) {
          var y2 = function(t3, i2) {
            i2 = i2 || { bubbles: false, cancelable: false, detail: void 0 };
            var a3 = e2.createEvent("CustomEvent");
            return a3.initCustomEvent(t3, i2.bubbles, i2.cancelable, i2.detail), a3;
          };
          y2.prototype = t2.Event.prototype, a2.CustomEvent = y2;
        } else
          a2.CustomEvent = t2.CustomEvent;
        return a2;
      }, "function" == typeof define && define.amd ? define(function() {
        return Et(zt, zt.document);
      }) : "object" === ("undefined" == typeof exports ? "undefined" : i(exports)) && "undefined" != typeof module ? module.exports = zt.document ? Et(zt, zt.document) : function(t2) {
        return Et(t2, t2.document);
      } : zt.SVG = Et(zt, zt.document), function() {
        SVG.Filter = SVG.invent({ create: "filter", inherit: SVG.Parent, extend: { source: "SourceGraphic", sourceAlpha: "SourceAlpha", background: "BackgroundImage", backgroundAlpha: "BackgroundAlpha", fill: "FillPaint", stroke: "StrokePaint", autoSetIn: true, put: function(t3, e3) {
          return this.add(t3, e3), !t3.attr("in") && this.autoSetIn && t3.attr("in", this.source), t3.attr("result") || t3.attr("result", t3), t3;
        }, blend: function(t3, e3, i3) {
          return this.put(new SVG.BlendEffect(t3, e3, i3));
        }, colorMatrix: function(t3, e3) {
          return this.put(new SVG.ColorMatrixEffect(t3, e3));
        }, convolveMatrix: function(t3) {
          return this.put(new SVG.ConvolveMatrixEffect(t3));
        }, componentTransfer: function(t3) {
          return this.put(new SVG.ComponentTransferEffect(t3));
        }, composite: function(t3, e3, i3) {
          return this.put(new SVG.CompositeEffect(t3, e3, i3));
        }, flood: function(t3, e3) {
          return this.put(new SVG.FloodEffect(t3, e3));
        }, offset: function(t3, e3) {
          return this.put(new SVG.OffsetEffect(t3, e3));
        }, image: function(t3) {
          return this.put(new SVG.ImageEffect(t3));
        }, merge: function() {
          var t3 = [void 0];
          for (var e3 in arguments)
            t3.push(arguments[e3]);
          return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t3))());
        }, gaussianBlur: function(t3, e3) {
          return this.put(new SVG.GaussianBlurEffect(t3, e3));
        }, morphology: function(t3, e3) {
          return this.put(new SVG.MorphologyEffect(t3, e3));
        }, diffuseLighting: function(t3, e3, i3) {
          return this.put(new SVG.DiffuseLightingEffect(t3, e3, i3));
        }, displacementMap: function(t3, e3, i3, a3, s3) {
          return this.put(new SVG.DisplacementMapEffect(t3, e3, i3, a3, s3));
        }, specularLighting: function(t3, e3, i3, a3) {
          return this.put(new SVG.SpecularLightingEffect(t3, e3, i3, a3));
        }, tile: function() {
          return this.put(new SVG.TileEffect());
        }, turbulence: function(t3, e3, i3, a3, s3) {
          return this.put(new SVG.TurbulenceEffect(t3, e3, i3, a3, s3));
        }, toString: function() {
          return "url(#" + this.attr("id") + ")";
        } } }), SVG.extend(SVG.Defs, { filter: function(t3) {
          var e3 = this.put(new SVG.Filter());
          return "function" == typeof t3 && t3.call(e3, e3), e3;
        } }), SVG.extend(SVG.Container, { filter: function(t3) {
          return this.defs().filter(t3);
        } }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, { filter: function(t3) {
          return this.filterer = t3 instanceof SVG.Element ? t3 : this.doc().filter(t3), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
        }, unfilter: function(t3) {
          return this.filterer && true === t3 && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
        } }), SVG.Effect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Element, extend: { in: function(t3) {
          return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t3);
        }, result: function(t3) {
          return null == t3 ? this.attr("result") : this.attr("result", t3);
        }, toString: function() {
          return this.result();
        } } }), SVG.ParentEffect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Parent, extend: { in: function(t3) {
          return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t3);
        }, result: function(t3) {
          return null == t3 ? this.attr("result") : this.attr("result", t3);
        }, toString: function() {
          return this.result();
        } } });
        var t2 = { blend: function(t3, e3) {
          return this.parent() && this.parent().blend(this, t3, e3);
        }, colorMatrix: function(t3, e3) {
          return this.parent() && this.parent().colorMatrix(t3, e3).in(this);
        }, convolveMatrix: function(t3) {
          return this.parent() && this.parent().convolveMatrix(t3).in(this);
        }, componentTransfer: function(t3) {
          return this.parent() && this.parent().componentTransfer(t3).in(this);
        }, composite: function(t3, e3) {
          return this.parent() && this.parent().composite(this, t3, e3);
        }, flood: function(t3, e3) {
          return this.parent() && this.parent().flood(t3, e3);
        }, offset: function(t3, e3) {
          return this.parent() && this.parent().offset(t3, e3).in(this);
        }, image: function(t3) {
          return this.parent() && this.parent().image(t3);
        }, merge: function() {
          return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
        }, gaussianBlur: function(t3, e3) {
          return this.parent() && this.parent().gaussianBlur(t3, e3).in(this);
        }, morphology: function(t3, e3) {
          return this.parent() && this.parent().morphology(t3, e3).in(this);
        }, diffuseLighting: function(t3, e3, i3) {
          return this.parent() && this.parent().diffuseLighting(t3, e3, i3).in(this);
        }, displacementMap: function(t3, e3, i3, a3) {
          return this.parent() && this.parent().displacementMap(this, t3, e3, i3, a3);
        }, specularLighting: function(t3, e3, i3, a3) {
          return this.parent() && this.parent().specularLighting(t3, e3, i3, a3).in(this);
        }, tile: function() {
          return this.parent() && this.parent().tile().in(this);
        }, turbulence: function(t3, e3, i3, a3, s3) {
          return this.parent() && this.parent().turbulence(t3, e3, i3, a3, s3).in(this);
        } };
        SVG.extend(SVG.Effect, t2), SVG.extend(SVG.ParentEffect, t2), SVG.ChildEffect = SVG.invent({ create: function() {
          this.constructor.call(this);
        }, inherit: SVG.Element, extend: { in: function(t3) {
          this.attr("in", t3);
        } } });
        var e2 = { blend: function(t3, e3, i3) {
          this.attr({ in: t3, in2: e3, mode: i3 || "normal" });
        }, colorMatrix: function(t3, e3) {
          "matrix" == t3 && (e3 = s2(e3)), this.attr({ type: t3, values: void 0 === e3 ? null : e3 });
        }, convolveMatrix: function(t3) {
          t3 = s2(t3), this.attr({ order: Math.sqrt(t3.split(" ").length), kernelMatrix: t3 });
        }, composite: function(t3, e3, i3) {
          this.attr({ in: t3, in2: e3, operator: i3 });
        }, flood: function(t3, e3) {
          this.attr("flood-color", t3), null != e3 && this.attr("flood-opacity", e3);
        }, offset: function(t3, e3) {
          this.attr({ dx: t3, dy: e3 });
        }, image: function(t3) {
          this.attr("href", t3, SVG.xlink);
        }, displacementMap: function(t3, e3, i3, a3, s3) {
          this.attr({ in: t3, in2: e3, scale: i3, xChannelSelector: a3, yChannelSelector: s3 });
        }, gaussianBlur: function(t3, e3) {
          null != t3 || null != e3 ? this.attr("stdDeviation", r2(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
        }, morphology: function(t3, e3) {
          this.attr({ operator: t3, radius: e3 });
        }, tile: function() {
        }, turbulence: function(t3, e3, i3, a3, s3) {
          this.attr({ numOctaves: e3, seed: i3, stitchTiles: a3, baseFrequency: t3, type: s3 });
        } }, i2 = { merge: function() {
          var t3;
          if (arguments[0] instanceof SVG.Set) {
            var e3 = this;
            arguments[0].each(function(t4) {
              this instanceof SVG.MergeNode ? e3.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e3.put(new SVG.MergeNode(this));
            });
          } else {
            t3 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
            for (var i3 = 0; i3 < t3.length; i3++)
              t3[i3] instanceof SVG.MergeNode ? this.put(t3[i3]) : this.put(new SVG.MergeNode(t3[i3]));
          }
        }, componentTransfer: function(t3) {
          if (this.rgb = new SVG.Set(), ["r", "g", "b", "a"].forEach(function(t4) {
            this[t4] = new SVG["Func" + t4.toUpperCase()]("identity"), this.rgb.add(this[t4]), this.node.appendChild(this[t4].node);
          }.bind(this)), t3)
            for (var e3 in t3.rgb && (["r", "g", "b"].forEach(function(e4) {
              this[e4].attr(t3.rgb);
            }.bind(this)), delete t3.rgb), t3)
              this[e3].attr(t3[e3]);
        }, diffuseLighting: function(t3, e3, i3) {
          this.attr({ surfaceScale: t3, diffuseConstant: e3, kernelUnitLength: i3 });
        }, specularLighting: function(t3, e3, i3, a3) {
          this.attr({ surfaceScale: t3, diffuseConstant: e3, specularExponent: i3, kernelUnitLength: a3 });
        } }, a2 = { distantLight: function(t3, e3) {
          this.attr({ azimuth: t3, elevation: e3 });
        }, pointLight: function(t3, e3, i3) {
          this.attr({ x: t3, y: e3, z: i3 });
        }, spotLight: function(t3, e3, i3, a3, s3, r3) {
          this.attr({ x: t3, y: e3, z: i3, pointsAtX: a3, pointsAtY: s3, pointsAtZ: r3 });
        }, mergeNode: function(t3) {
          this.attr("in", t3);
        } };
        function s2(t3) {
          return Array.isArray(t3) && (t3 = new SVG.Array(t3)), t3.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
        }
        function r2(t3) {
          if (!Array.isArray(t3))
            return t3;
          for (var e3 = 0, i3 = t3.length, a3 = []; e3 < i3; e3++)
            a3.push(t3[e3]);
          return a3.join(" ");
        }
        function o2() {
          var t3 = function() {
          };
          for (var e3 in "function" == typeof arguments[arguments.length - 1] && (t3 = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments)
            for (var i3 in arguments[e3])
              t3(arguments[e3][i3], i3, arguments[e3]);
        }
        ["r", "g", "b", "a"].forEach(function(t3) {
          a2["Func" + t3.toUpperCase()] = function(t4) {
            switch (this.attr("type", t4), t4) {
              case "table":
                this.attr("tableValues", arguments[1]);
                break;
              case "linear":
                this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
                break;
              case "gamma":
                this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
            }
          };
        }), o2(e2, function(t3, e3) {
          var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
          SVG[i3 + "Effect"] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments), this.result(this.attr("id") + "Out");
          }, inherit: SVG.Effect, extend: {} });
        }), o2(i2, function(t3, e3) {
          var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
          SVG[i3 + "Effect"] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments), this.result(this.attr("id") + "Out");
          }, inherit: SVG.ParentEffect, extend: {} });
        }), o2(a2, function(t3, e3) {
          var i3 = e3.charAt(0).toUpperCase() + e3.slice(1);
          SVG[i3] = SVG.invent({ create: function() {
            this.constructor.call(this, SVG.create("fe" + i3)), t3.apply(this, arguments);
          }, inherit: SVG.ChildEffect, extend: {} });
        }), SVG.extend(SVG.MergeEffect, { in: function(t3) {
          return t3 instanceof SVG.MergeNode ? this.add(t3, 0) : this.add(new SVG.MergeNode(t3), 0), this;
        } }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, { in2: function(t3) {
          return null == t3 ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t3);
        } }), SVG.filter = { sepiatone: [0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334, 0.111, 0, 0, 0, 0, 0, 1, 0] };
      }.call(void 0), function() {
        function t2(t3, s3, r2, o2, n2, l2, h2) {
          for (var c2 = t3.slice(s3, r2 || h2), d2 = o2.slice(n2, l2 || h2), g2 = 0, u2 = { pos: [0, 0], start: [0, 0] }, f2 = { pos: [0, 0], start: [0, 0] }; ; ) {
            if (c2[g2] = e2.call(u2, c2[g2]), d2[g2] = e2.call(f2, d2[g2]), c2[g2][0] != d2[g2][0] || "M" == c2[g2][0] || "A" == c2[g2][0] && (c2[g2][4] != d2[g2][4] || c2[g2][5] != d2[g2][5]) ? (Array.prototype.splice.apply(c2, [g2, 1].concat(a2.call(u2, c2[g2]))), Array.prototype.splice.apply(d2, [g2, 1].concat(a2.call(f2, d2[g2])))) : (c2[g2] = i2.call(u2, c2[g2]), d2[g2] = i2.call(f2, d2[g2])), ++g2 == c2.length && g2 == d2.length)
              break;
            g2 == c2.length && c2.push(["C", u2.pos[0], u2.pos[1], u2.pos[0], u2.pos[1], u2.pos[0], u2.pos[1]]), g2 == d2.length && d2.push(["C", f2.pos[0], f2.pos[1], f2.pos[0], f2.pos[1], f2.pos[0], f2.pos[1]]);
          }
          return { start: c2, dest: d2 };
        }
        function e2(t3) {
          switch (t3[0]) {
            case "z":
            case "Z":
              t3[0] = "L", t3[1] = this.start[0], t3[2] = this.start[1];
              break;
            case "H":
              t3[0] = "L", t3[2] = this.pos[1];
              break;
            case "V":
              t3[0] = "L", t3[2] = t3[1], t3[1] = this.pos[0];
              break;
            case "T":
              t3[0] = "Q", t3[3] = t3[1], t3[4] = t3[2], t3[1] = this.reflection[1], t3[2] = this.reflection[0];
              break;
            case "S":
              t3[0] = "C", t3[6] = t3[4], t3[5] = t3[3], t3[4] = t3[2], t3[3] = t3[1], t3[2] = this.reflection[1], t3[1] = this.reflection[0];
          }
          return t3;
        }
        function i2(t3) {
          var e3 = t3.length;
          return this.pos = [t3[e3 - 2], t3[e3 - 1]], -1 != "SCQT".indexOf(t3[0]) && (this.reflection = [2 * this.pos[0] - t3[e3 - 4], 2 * this.pos[1] - t3[e3 - 3]]), t3;
        }
        function a2(t3) {
          var e3 = [t3];
          switch (t3[0]) {
            case "M":
              return this.pos = this.start = [t3[1], t3[2]], e3;
            case "L":
              t3[5] = t3[3] = t3[1], t3[6] = t3[4] = t3[2], t3[1] = this.pos[0], t3[2] = this.pos[1];
              break;
            case "Q":
              t3[6] = t3[4], t3[5] = t3[3], t3[4] = 1 * t3[4] / 3 + 2 * t3[2] / 3, t3[3] = 1 * t3[3] / 3 + 2 * t3[1] / 3, t3[2] = 1 * this.pos[1] / 3 + 2 * t3[2] / 3, t3[1] = 1 * this.pos[0] / 3 + 2 * t3[1] / 3;
              break;
            case "A":
              e3 = function(t4, e4) {
                var i3, a3, s3, r2, o2, n2, l2, h2, c2, d2, g2, u2, f2, p2, x2, b2, v2, m2, y2, w2, k2, A2, S2, C2, L2, P2, T2 = Math.abs(e4[1]), M2 = Math.abs(e4[2]), I2 = e4[3] % 360, X2 = e4[4], z2 = e4[5], E2 = e4[6], Y2 = e4[7], F2 = new SVG.Point(t4), R2 = new SVG.Point(E2, Y2), D2 = [];
                if (0 === T2 || 0 === M2 || F2.x === R2.x && F2.y === R2.y)
                  return [["C", F2.x, F2.y, R2.x, R2.y, R2.x, R2.y]];
                i3 = new SVG.Point((F2.x - R2.x) / 2, (F2.y - R2.y) / 2).transform(new SVG.Matrix().rotate(I2)), (a3 = i3.x * i3.x / (T2 * T2) + i3.y * i3.y / (M2 * M2)) > 1 && (T2 *= a3 = Math.sqrt(a3), M2 *= a3);
                s3 = new SVG.Matrix().rotate(I2).scale(1 / T2, 1 / M2).rotate(-I2), F2 = F2.transform(s3), R2 = R2.transform(s3), r2 = [R2.x - F2.x, R2.y - F2.y], n2 = r2[0] * r2[0] + r2[1] * r2[1], o2 = Math.sqrt(n2), r2[0] /= o2, r2[1] /= o2, l2 = n2 < 4 ? Math.sqrt(1 - n2 / 4) : 0, X2 === z2 && (l2 *= -1);
                h2 = new SVG.Point((R2.x + F2.x) / 2 + l2 * -r2[1], (R2.y + F2.y) / 2 + l2 * r2[0]), c2 = new SVG.Point(F2.x - h2.x, F2.y - h2.y), d2 = new SVG.Point(R2.x - h2.x, R2.y - h2.y), g2 = Math.acos(c2.x / Math.sqrt(c2.x * c2.x + c2.y * c2.y)), c2.y < 0 && (g2 *= -1);
                u2 = Math.acos(d2.x / Math.sqrt(d2.x * d2.x + d2.y * d2.y)), d2.y < 0 && (u2 *= -1);
                z2 && g2 > u2 && (u2 += 2 * Math.PI);
                !z2 && g2 < u2 && (u2 -= 2 * Math.PI);
                for (p2 = Math.ceil(2 * Math.abs(g2 - u2) / Math.PI), b2 = [], v2 = g2, f2 = (u2 - g2) / p2, x2 = 4 * Math.tan(f2 / 4) / 3, k2 = 0; k2 <= p2; k2++)
                  y2 = Math.cos(v2), m2 = Math.sin(v2), w2 = new SVG.Point(h2.x + y2, h2.y + m2), b2[k2] = [new SVG.Point(w2.x + x2 * m2, w2.y - x2 * y2), w2, new SVG.Point(w2.x - x2 * m2, w2.y + x2 * y2)], v2 += f2;
                for (b2[0][0] = b2[0][1].clone(), b2[b2.length - 1][2] = b2[b2.length - 1][1].clone(), s3 = new SVG.Matrix().rotate(I2).scale(T2, M2).rotate(-I2), k2 = 0, A2 = b2.length; k2 < A2; k2++)
                  b2[k2][0] = b2[k2][0].transform(s3), b2[k2][1] = b2[k2][1].transform(s3), b2[k2][2] = b2[k2][2].transform(s3);
                for (k2 = 1, A2 = b2.length; k2 < A2; k2++)
                  S2 = (w2 = b2[k2 - 1][2]).x, C2 = w2.y, L2 = (w2 = b2[k2][0]).x, P2 = w2.y, E2 = (w2 = b2[k2][1]).x, Y2 = w2.y, D2.push(["C", S2, C2, L2, P2, E2, Y2]);
                return D2;
              }(this.pos, t3), t3 = e3[0];
          }
          return t3[0] = "C", this.pos = [t3[5], t3[6]], this.reflection = [2 * t3[5] - t3[3], 2 * t3[6] - t3[4]], e3;
        }
        function s2(t3, e3) {
          if (false === e3)
            return false;
          for (var i3 = e3, a3 = t3.length; i3 < a3; ++i3)
            if ("M" == t3[i3][0])
              return i3;
          return false;
        }
        SVG.extend(SVG.PathArray, { morph: function(e3) {
          for (var i3 = this.value, a3 = this.parse(e3), r2 = 0, o2 = 0, n2 = false, l2 = false; false !== r2 || false !== o2; ) {
            var h2;
            n2 = s2(i3, false !== r2 && r2 + 1), l2 = s2(a3, false !== o2 && o2 + 1), false === r2 && (r2 = 0 == (h2 = new SVG.PathArray(c2.start).bbox()).height || 0 == h2.width ? i3.push(i3[0]) - 1 : i3.push(["M", h2.x + h2.width / 2, h2.y + h2.height / 2]) - 1), false === o2 && (o2 = 0 == (h2 = new SVG.PathArray(c2.dest).bbox()).height || 0 == h2.width ? a3.push(a3[0]) - 1 : a3.push(["M", h2.x + h2.width / 2, h2.y + h2.height / 2]) - 1);
            var c2 = t2(i3, r2, n2, a3, o2, l2);
            i3 = i3.slice(0, r2).concat(c2.start, false === n2 ? [] : i3.slice(n2)), a3 = a3.slice(0, o2).concat(c2.dest, false === l2 ? [] : a3.slice(l2)), r2 = false !== n2 && r2 + c2.start.length, o2 = false !== l2 && o2 + c2.dest.length;
          }
          return this.value = i3, this.destination = new SVG.PathArray(), this.destination.value = a3, this;
        } });
      }(), function() {
        function t2(t3) {
          t3.remember("_draggable", this), this.el = t3;
        }
        t2.prototype.init = function(t3, e2) {
          var i2 = this;
          this.constraint = t3, this.value = e2, this.el.on("mousedown.drag", function(t4) {
            i2.start(t4);
          }), this.el.on("touchstart.drag", function(t4) {
            i2.start(t4);
          });
        }, t2.prototype.transformPoint = function(t3, e2) {
          var i2 = (t3 = t3 || window.event).changedTouches && t3.changedTouches[0] || t3;
          return this.p.x = i2.clientX - (e2 || 0), this.p.y = i2.clientY, this.p.matrixTransform(this.m);
        }, t2.prototype.getBBox = function() {
          var t3 = this.el.bbox();
          return this.el instanceof SVG.Nested && (t3 = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t3.x = this.el.x(), t3.y = this.el.y()), t3;
        }, t2.prototype.start = function(t3) {
          if ("click" != t3.type && "mousedown" != t3.type && "mousemove" != t3.type || 1 == (t3.which || t3.buttons)) {
            var e2 = this;
            if (this.el.fire("beforedrag", { event: t3, handler: this }), !this.el.event().defaultPrevented) {
              t3.preventDefault(), t3.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
              var i2, a2 = this.getBBox();
              if (this.el instanceof SVG.Text)
                switch (i2 = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
                  case "middle":
                    i2 /= 2;
                    break;
                  case "start":
                    i2 = 0;
                }
              this.startPoints = { point: this.transformPoint(t3, i2), box: a2, transform: this.el.transform() }, SVG.on(window, "mousemove.drag", function(t4) {
                e2.drag(t4);
              }), SVG.on(window, "touchmove.drag", function(t4) {
                e2.drag(t4);
              }), SVG.on(window, "mouseup.drag", function(t4) {
                e2.end(t4);
              }), SVG.on(window, "touchend.drag", function(t4) {
                e2.end(t4);
              }), this.el.fire("dragstart", { event: t3, p: this.startPoints.point, m: this.m, handler: this });
            }
          }
        }, t2.prototype.drag = function(t3) {
          var e2 = this.getBBox(), i2 = this.transformPoint(t3), a2 = this.startPoints.box.x + i2.x - this.startPoints.point.x, s2 = this.startPoints.box.y + i2.y - this.startPoints.point.y, r2 = this.constraint, o2 = i2.x - this.startPoints.point.x, n2 = i2.y - this.startPoints.point.y;
          if (this.el.fire("dragmove", { event: t3, p: i2, m: this.m, handler: this }), this.el.event().defaultPrevented)
            return i2;
          if ("function" == typeof r2) {
            var l2 = r2.call(this.el, a2, s2, this.m);
            "boolean" == typeof l2 && (l2 = { x: l2, y: l2 }), true === l2.x ? this.el.x(a2) : false !== l2.x && this.el.x(l2.x), true === l2.y ? this.el.y(s2) : false !== l2.y && this.el.y(l2.y);
          } else
            "object" == typeof r2 && (null != r2.minX && a2 < r2.minX ? o2 = (a2 = r2.minX) - this.startPoints.box.x : null != r2.maxX && a2 > r2.maxX - e2.width && (o2 = (a2 = r2.maxX - e2.width) - this.startPoints.box.x), null != r2.minY && s2 < r2.minY ? n2 = (s2 = r2.minY) - this.startPoints.box.y : null != r2.maxY && s2 > r2.maxY - e2.height && (n2 = (s2 = r2.maxY - e2.height) - this.startPoints.box.y), null != r2.snapToGrid && (a2 -= a2 % r2.snapToGrid, s2 -= s2 % r2.snapToGrid, o2 -= o2 % r2.snapToGrid, n2 -= n2 % r2.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({ x: o2, y: n2 }, true) : this.el.move(a2, s2));
          return i2;
        }, t2.prototype.end = function(t3) {
          var e2 = this.drag(t3);
          this.el.fire("dragend", { event: t3, p: e2, m: this.m, handler: this }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
        }, SVG.extend(SVG.Element, { draggable: function(e2, i2) {
          "function" != typeof e2 && "object" != typeof e2 || (i2 = e2, e2 = true);
          var a2 = this.remember("_draggable") || new t2(this);
          return (e2 = void 0 === e2 || e2) ? a2.init(i2 || {}, e2) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
        } });
      }.call(void 0), function() {
        function t2(t3) {
          this.el = t3, t3.remember("_selectHandler", this), this.pointSelection = { isSelected: false }, this.rectSelection = { isSelected: false }, this.pointsList = { lt: [0, 0], rt: ["width", 0], rb: ["width", "height"], lb: [0, "height"], t: ["width", 0], r: ["width", "height"], b: ["width", "height"], l: [0, "height"] }, this.pointCoord = function(t4, e2, i2) {
            var a2 = "string" != typeof t4 ? t4 : e2[t4];
            return i2 ? a2 / 2 : a2;
          }, this.pointCoords = function(t4, e2) {
            var i2 = this.pointsList[t4];
            return { x: this.pointCoord(i2[0], e2, "t" === t4 || "b" === t4), y: this.pointCoord(i2[1], e2, "r" === t4 || "l" === t4) };
          };
        }
        t2.prototype.init = function(t3, e2) {
          var i2 = this.el.bbox();
          this.options = {};
          var a2 = this.el.selectize.defaults.points;
          for (var s2 in this.el.selectize.defaults)
            this.options[s2] = this.el.selectize.defaults[s2], void 0 !== e2[s2] && (this.options[s2] = e2[s2]);
          var r2 = ["points", "pointsExclude"];
          for (var s2 in r2) {
            var o2 = this.options[r2[s2]];
            "string" == typeof o2 ? o2 = o2.length > 0 ? o2.split(/\s*,\s*/i) : [] : "boolean" == typeof o2 && "points" === r2[s2] && (o2 = o2 ? a2 : []), this.options[r2[s2]] = o2;
          }
          this.options.points = [a2, this.options.points].reduce(function(t4, e3) {
            return t4.filter(function(t5) {
              return e3.indexOf(t5) > -1;
            });
          }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function(t4, e3) {
            return t4.filter(function(t5) {
              return e3.indexOf(t5) < 0;
            });
          }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i2.x, i2.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t3) : this.selectRect(t3), this.observe(), this.cleanup();
        }, t2.prototype.selectPoints = function(t3) {
          return this.pointSelection.isSelected = t3, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;
        }, t2.prototype.getPointArray = function() {
          var t3 = this.el.bbox();
          return this.el.array().valueOf().map(function(e2) {
            return [e2[0] - t3.x, e2[1] - t3.y];
          });
        }, t2.prototype.drawPoints = function() {
          for (var t3 = this, e2 = this.getPointArray(), i2 = 0, a2 = e2.length; i2 < a2; ++i2) {
            var s2 = function(e3) {
              return function(i3) {
                (i3 = i3 || window.event).preventDefault ? i3.preventDefault() : i3.returnValue = false, i3.stopPropagation();
                var a3 = i3.pageX || i3.touches[0].pageX, s3 = i3.pageY || i3.touches[0].pageY;
                t3.el.fire("point", { x: a3, y: s3, i: e3, event: i3 });
              };
            }(i2), r2 = this.drawPoint(e2[i2][0], e2[i2][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", s2).on("mousedown", s2);
            this.pointSelection.set.add(r2);
          }
        }, t2.prototype.drawPoint = function(t3, e2) {
          var i2 = this.options.pointType;
          switch (i2) {
            case "circle":
              return this.drawCircle(t3, e2);
            case "rect":
              return this.drawRect(t3, e2);
            default:
              if ("function" == typeof i2)
                return i2.call(this, t3, e2);
              throw new Error("Unknown " + i2 + " point type!");
          }
        }, t2.prototype.drawCircle = function(t3, e2) {
          return this.nested.circle(this.options.pointSize).center(t3, e2);
        }, t2.prototype.drawRect = function(t3, e2) {
          return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t3, e2);
        }, t2.prototype.updatePointSelection = function() {
          var t3 = this.getPointArray();
          this.pointSelection.set.each(function(e2) {
            this.cx() === t3[e2][0] && this.cy() === t3[e2][1] || this.center(t3[e2][0], t3[e2][1]);
          });
        }, t2.prototype.updateRectSelection = function() {
          var t3 = this, e2 = this.el.bbox();
          if (this.rectSelection.set.get(0).attr({ width: e2.width, height: e2.height }), this.options.points.length && this.options.points.map(function(i3, a2) {
            var s2 = t3.pointCoords(i3, e2);
            t3.rectSelection.set.get(a2 + 1).center(s2.x, s2.y);
          }), this.options.rotationPoint) {
            var i2 = this.rectSelection.set.length();
            this.rectSelection.set.get(i2 - 1).center(e2.width / 2, 20);
          }
        }, t2.prototype.selectRect = function(t3) {
          var e2 = this, i2 = this.el.bbox();
          function a2(t4) {
            return function(i3) {
              (i3 = i3 || window.event).preventDefault ? i3.preventDefault() : i3.returnValue = false, i3.stopPropagation();
              var a3 = i3.pageX || i3.touches[0].pageX, s3 = i3.pageY || i3.touches[0].pageY;
              e2.el.fire(t4, { x: a3, y: s3, event: i3 });
            };
          }
          if (this.rectSelection.isSelected = t3, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i2.width, i2.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {
            this.options.points.map(function(t4, s3) {
              var r3 = e2.pointCoords(t4, i2), o2 = e2.drawPoint(r3.x, r3.y).attr("class", e2.options.classPoints + "_" + t4).on("mousedown", a2(t4)).on("touchstart", a2(t4));
              e2.rectSelection.set.add(o2);
            }), this.rectSelection.set.each(function() {
              this.addClass(e2.options.classPoints);
            });
          }
          if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
            var s2 = function(t4) {
              (t4 = t4 || window.event).preventDefault ? t4.preventDefault() : t4.returnValue = false, t4.stopPropagation();
              var i3 = t4.pageX || t4.touches[0].pageX, a3 = t4.pageY || t4.touches[0].pageY;
              e2.el.fire("rot", { x: i3, y: a3, event: t4 });
            }, r2 = this.drawPoint(i2.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", s2).on("mousedown", s2);
            this.rectSelection.set.add(r2);
          }
        }, t2.prototype.handler = function() {
          var t3 = this.el.bbox();
          this.nested.matrix(new SVG.Matrix(this.el).translate(t3.x, t3.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
        }, t2.prototype.observe = function() {
          var t3 = this;
          if (MutationObserver)
            if (this.rectSelection.isSelected || this.pointSelection.isSelected)
              this.observerInst = this.observerInst || new MutationObserver(function() {
                t3.handler();
              }), this.observerInst.observe(this.el.node, { attributes: true });
            else
              try {
                this.observerInst.disconnect(), delete this.observerInst;
              } catch (t4) {
              }
          else
            this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function() {
              t3.handler();
            });
        }, t2.prototype.cleanup = function() {
          !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function() {
            this.remove();
          }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function() {
            this.remove();
          }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
        }, SVG.extend(SVG.Element, { selectize: function(e2, i2) {
          return "object" == typeof e2 && (i2 = e2, e2 = true), (this.remember("_selectHandler") || new t2(this)).init(void 0 === e2 || e2, i2 || {}), this;
        } }), SVG.Element.prototype.selectize.defaults = { points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"], pointsExclude: [], classRect: "svg_select_boundingRect", classPoints: "svg_select_points", pointSize: 7, rotationPoint: true, deepSelect: false, pointType: "circle" };
      }(), function() {
        (function() {
          function t2(t3) {
            t3.remember("_resizeHandler", this), this.el = t3, this.parameters = {}, this.lastUpdateCall = null, this.p = t3.doc().node.createSVGPoint();
          }
          t2.prototype.transformPoint = function(t3, e2, i2) {
            return this.p.x = t3 - (this.offset.x - window.pageXOffset), this.p.y = e2 - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i2 || this.m);
          }, t2.prototype._extractPosition = function(t3) {
            return { x: null != t3.clientX ? t3.clientX : t3.touches[0].clientX, y: null != t3.clientY ? t3.clientY : t3.touches[0].clientY };
          }, t2.prototype.init = function(t3) {
            var e2 = this;
            if (this.stop(), "stop" !== t3) {
              for (var i2 in this.options = {}, this.el.resize.defaults)
                this.options[i2] = this.el.resize.defaults[i2], void 0 !== t3[i2] && (this.options[i2] = t3[i2]);
              this.el.on("lt.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("rt.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("rb.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("lb.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("t.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("r.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("b.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("l.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("rot.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.el.on("point.resize", function(t4) {
                e2.resize(t4 || window.event);
              }), this.update();
            }
          }, t2.prototype.stop = function() {
            return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
          }, t2.prototype.resize = function(t3) {
            var e2 = this;
            this.m = this.el.node.getScreenCTM().inverse(), this.offset = { x: window.pageXOffset, y: window.pageYOffset };
            var i2 = this._extractPosition(t3.detail.event);
            if (this.parameters = { type: this.el.type, p: this.transformPoint(i2.x, i2.y), x: t3.detail.x, y: t3.detail.y, box: this.el.bbox(), rotation: this.el.transform().rotation }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t3.detail.i) {
              var a2 = this.el.array().valueOf();
              this.parameters.i = t3.detail.i, this.parameters.pointCoords = [a2[t3.detail.i][0], a2[t3.detail.i][1]];
            }
            switch (t3.type) {
              case "lt":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3);
                  if (this.parameters.box.width - i3[0] > 0 && this.parameters.box.height - i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i3[0]);
                    i3 = this.checkAspectRatio(i3), this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y + i3[1]).size(this.parameters.box.width - i3[0], this.parameters.box.height - i3[1]);
                  }
                };
                break;
              case "rt":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 2);
                  if (this.parameters.box.width + i3[0] > 0 && this.parameters.box.height - i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x - i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i3[0]);
                    i3 = this.checkAspectRatio(i3, true), this.el.move(this.parameters.box.x, this.parameters.box.y + i3[1]).size(this.parameters.box.width + i3[0], this.parameters.box.height - i3[1]);
                  }
                };
                break;
              case "rb":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 0);
                  if (this.parameters.box.width + i3[0] > 0 && this.parameters.box.height + i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x - i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i3[0]);
                    i3 = this.checkAspectRatio(i3), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i3[0], this.parameters.box.height + i3[1]);
                  }
                };
                break;
              case "lb":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 1);
                  if (this.parameters.box.width - i3[0] > 0 && this.parameters.box.height + i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i3[0]);
                    i3 = this.checkAspectRatio(i3, true), this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y).size(this.parameters.box.width - i3[0], this.parameters.box.height + i3[1]);
                  }
                };
                break;
              case "t":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 2);
                  if (this.parameters.box.height - i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y + i3[1]).height(this.parameters.box.height - i3[1]);
                  }
                };
                break;
              case "r":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 0);
                  if (this.parameters.box.width + i3[0] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i3[0]);
                  }
                };
                break;
              case "b":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 0);
                  if (this.parameters.box.height + i3[1] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i3[1]);
                  }
                };
                break;
              case "l":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, 1);
                  if (this.parameters.box.width - i3[0] > 0) {
                    if ("text" === this.parameters.type)
                      return;
                    this.el.move(this.parameters.box.x + i3[0], this.parameters.box.y).width(this.parameters.box.width - i3[0]);
                  }
                };
                break;
              case "rot":
                this.calc = function(t4, e3) {
                  var i3 = t4 + this.parameters.p.x, a3 = e3 + this.parameters.p.y, s2 = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2), r2 = Math.atan2(a3 - this.parameters.box.y - this.parameters.box.height / 2, i3 - this.parameters.box.x - this.parameters.box.width / 2), o2 = this.parameters.rotation + 180 * (r2 - s2) / Math.PI + this.options.snapToAngle / 2;
                  this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o2 - o2 % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
                };
                break;
              case "point":
                this.calc = function(t4, e3) {
                  var i3 = this.snapToGrid(t4, e3, this.parameters.pointCoords[0], this.parameters.pointCoords[1]), a3 = this.el.array().valueOf();
                  a3[this.parameters.i][0] = this.parameters.pointCoords[0] + i3[0], a3[this.parameters.i][1] = this.parameters.pointCoords[1] + i3[1], this.el.plot(a3);
                };
            }
            this.el.fire("resizestart", { dx: this.parameters.x, dy: this.parameters.y, event: t3 }), SVG.on(window, "touchmove.resize", function(t4) {
              e2.update(t4 || window.event);
            }), SVG.on(window, "touchend.resize", function() {
              e2.done();
            }), SVG.on(window, "mousemove.resize", function(t4) {
              e2.update(t4 || window.event);
            }), SVG.on(window, "mouseup.resize", function() {
              e2.done();
            });
          }, t2.prototype.update = function(t3) {
            if (t3) {
              var e2 = this._extractPosition(t3), i2 = this.transformPoint(e2.x, e2.y), a2 = i2.x - this.parameters.p.x, s2 = i2.y - this.parameters.p.y;
              this.lastUpdateCall = [a2, s2], this.calc(a2, s2), this.el.fire("resizing", { dx: a2, dy: s2, event: t3 });
            } else
              this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
          }, t2.prototype.done = function() {
            this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
          }, t2.prototype.snapToGrid = function(t3, e2, i2, a2) {
            var s2;
            return void 0 !== a2 ? s2 = [(i2 + t3) % this.options.snapToGrid, (a2 + e2) % this.options.snapToGrid] : (i2 = null == i2 ? 3 : i2, s2 = [(this.parameters.box.x + t3 + (1 & i2 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e2 + (2 & i2 ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t3 < 0 && (s2[0] -= this.options.snapToGrid), e2 < 0 && (s2[1] -= this.options.snapToGrid), t3 -= Math.abs(s2[0]) < this.options.snapToGrid / 2 ? s2[0] : s2[0] - (t3 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e2 -= Math.abs(s2[1]) < this.options.snapToGrid / 2 ? s2[1] : s2[1] - (e2 < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t3, e2, i2, a2);
          }, t2.prototype.constraintToBox = function(t3, e2, i2, a2) {
            var s2, r2, o2 = this.options.constraint || {};
            return void 0 !== a2 ? (s2 = i2, r2 = a2) : (s2 = this.parameters.box.x + (1 & i2 ? 0 : this.parameters.box.width), r2 = this.parameters.box.y + (2 & i2 ? 0 : this.parameters.box.height)), void 0 !== o2.minX && s2 + t3 < o2.minX && (t3 = o2.minX - s2), void 0 !== o2.maxX && s2 + t3 > o2.maxX && (t3 = o2.maxX - s2), void 0 !== o2.minY && r2 + e2 < o2.minY && (e2 = o2.minY - r2), void 0 !== o2.maxY && r2 + e2 > o2.maxY && (e2 = o2.maxY - r2), [t3, e2];
          }, t2.prototype.checkAspectRatio = function(t3, e2) {
            if (!this.options.saveAspectRatio)
              return t3;
            var i2 = t3.slice(), a2 = this.parameters.box.width / this.parameters.box.height, s2 = this.parameters.box.width + t3[0], r2 = this.parameters.box.height - t3[1], o2 = s2 / r2;
            return o2 < a2 ? (i2[1] = s2 / a2 - this.parameters.box.height, e2 && (i2[1] = -i2[1])) : o2 > a2 && (i2[0] = this.parameters.box.width - r2 * a2, e2 && (i2[0] = -i2[0])), i2;
          }, SVG.extend(SVG.Element, { resize: function(e2) {
            return (this.remember("_resizeHandler") || new t2(this)).init(e2 || {}), this;
          } }), SVG.Element.prototype.resize.defaults = { snapToAngle: 0.1, snapToGrid: 1, constraint: {}, saveAspectRatio: false };
        }).call(this);
      }(), void 0 === window.Apex && (window.Apex = {});
      var Ht = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "initModules", value: function() {
          this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "zoomX", "toggleDataPointSelection", "dataURI", "exportToCSV", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"], this.ctx.animations = new b(this.ctx), this.ctx.axes = new J(this.ctx), this.ctx.core = new Rt(this.ctx.el, this.ctx), this.ctx.config = new z({}), this.ctx.data = new O(this.ctx), this.ctx.grid = new j(this.ctx), this.ctx.graphics = new m(this.ctx), this.ctx.coreUtils = new y(this.ctx), this.ctx.crosshairs = new Q(this.ctx), this.ctx.events = new Z(this.ctx), this.ctx.exports = new V(this.ctx), this.ctx.localization = new $(this.ctx), this.ctx.options = new L(), this.ctx.responsive = new K(this.ctx), this.ctx.series = new N(this.ctx), this.ctx.theme = new tt(this.ctx), this.ctx.formatters = new W(this.ctx), this.ctx.titleSubtitle = new et(this.ctx), this.ctx.legend = new lt(this.ctx), this.ctx.toolbar = new ht(this.ctx), this.ctx.tooltip = new bt(this.ctx), this.ctx.dimensions = new ot(this.ctx), this.ctx.updateHelpers = new Dt(this.ctx), this.ctx.zoomPanSelection = new ct(this.ctx), this.ctx.w.globals.tooltip = new bt(this.ctx);
        } }]), t2;
      }();
      var Nt = function() {
        function t2(e2) {
          a(this, t2), this.ctx = e2, this.w = e2.w;
        }
        return r(t2, [{ key: "clear", value: function(t3) {
          var e2 = t3.isUpdating;
          this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({ isUpdating: e2 });
        } }, { key: "killSVG", value: function(t3) {
          t3.each(function(t4, e2) {
            this.removeClass("*"), this.off(), this.stop();
          }, true), t3.ungroup(), t3.clear();
        } }, { key: "clearDomElements", value: function(t3) {
          var e2 = this, i2 = t3.isUpdating, a2 = this.w.globals.dom.Paper.node;
          a2.parentNode && a2.parentNode.parentNode && !i2 && (a2.parentNode.parentNode.style.minHeight = "unset");
          var s2 = this.w.globals.dom.baseEl;
          s2 && this.ctx.eventList.forEach(function(t4) {
            s2.removeEventListener(t4, e2.ctx.events.documentEvent);
          });
          var r2 = this.w.globals.dom;
          if (null !== this.ctx.el)
            for (; this.ctx.el.firstChild; )
              this.ctx.el.removeChild(this.ctx.el.firstChild);
          this.killSVG(r2.Paper), r2.Paper.remove(), r2.elWrap = null, r2.elGraphical = null, r2.elAnnotations = null, r2.elLegendWrap = null, r2.baseEl = null, r2.elGridRect = null, r2.elGridRectMask = null, r2.elGridRectMarkerMask = null, r2.elForecastMask = null, r2.elNonForecastMask = null, r2.elDefs = null;
        } }]), t2;
      }();
      var Ot = /* @__PURE__ */ new WeakMap();
      var Wt = function() {
        function t2(e2, i2) {
          a(this, t2), this.opts = i2, this.ctx = this, this.w = new Y(i2).init(), this.el = e2, this.w.globals.cuid = x.randomId(), this.w.globals.chartID = this.w.config.chart.id ? x.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Ht(this).initModules(), this.create = x.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);
        }
        return r(t2, [{ key: "render", value: function() {
          var t3 = this;
          return new Promise(function(e2, i2) {
            if (null !== t3.el) {
              void 0 === Apex._chartInstances && (Apex._chartInstances = []), t3.w.config.chart.id && Apex._chartInstances.push({ id: t3.w.globals.chartID, group: t3.w.config.chart.group, chart: t3 }), t3.setLocale(t3.w.config.chart.defaultLocale);
              var a2 = t3.w.config.chart.events.beforeMount;
              if ("function" == typeof a2 && a2(t3, t3.w), t3.events.fireEvent("beforeMount", [t3, t3.w]), window.addEventListener("resize", t3.windowResizeHandler), function(t4, e3) {
                var i3 = false;
                if (t4.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                  var a3 = t4.getBoundingClientRect();
                  "none" !== t4.style.display && 0 !== a3.width || (i3 = true);
                }
                var s3 = new ResizeObserver(function(a4) {
                  i3 && e3.call(t4, a4), i3 = true;
                });
                t4.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t4.children).forEach(function(t5) {
                  return s3.observe(t5);
                }) : s3.observe(t4), Ot.set(e3, s3);
              }(t3.el.parentNode, t3.parentResizeHandler), !t3.css) {
                var s2 = t3.el.getRootNode && t3.el.getRootNode(), r2 = x.is("ShadowRoot", s2), o2 = t3.el.ownerDocument, n2 = o2.getElementById("apexcharts-css");
                !r2 && n2 || (t3.css = document.createElement("style"), t3.css.id = "apexcharts-css", t3.css.textContent = '@keyframes opaque {\n  0% {\n      opacity: 0\n  }\n\n  to {\n      opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n  0%,to {\n      opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\n.legend-mouseover-inactive {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255,255,255,.96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30,30,30,.8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0,0,0,.7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,.apexcharts-tooltip-text-y-value,.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,.apexcharts-tooltip-text-goals-value:empty,.apexcharts-tooltip-text-y-label:empty,.apexcharts-tooltip-text-y-value:empty,.apexcharts-tooltip-text-z-value:empty,.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0!important\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,.apexcharts-pan-icon,.apexcharts-reset-icon,.apexcharts-selection-icon,.apexcharts-toolbar-custom-icon,.apexcharts-zoom-icon,.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,.apexcharts-reset-icon svg,.apexcharts-zoom-icon svg,.apexcharts-zoomin-icon svg,.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,.apexcharts-theme-dark .apexcharts-pan-icon svg,.apexcharts-theme-dark .apexcharts-reset-icon svg,.apexcharts-theme-dark .apexcharts-selection-icon svg,.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,.apexcharts-theme-dark .apexcharts-zoom-icon svg,.apexcharts-theme-dark .apexcharts-zoomin-icon svg,.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,.apexcharts-theme-light .apexcharts-reset-icon:hover svg,.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,.apexcharts-reset-icon,.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0,0,0,.7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n      opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,.apexcharts-datalabel.apexcharts-element-hidden,.apexcharts-hide .apexcharts-series-points {\n  opacity: 0\n}\n\n.apexcharts-datalabel,.apexcharts-datalabel-label,.apexcharts-datalabel-value,.apexcharts-datalabels,.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-annotation-rect,.apexcharts-area-series .apexcharts-area,.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-gridline,.apexcharts-line,.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-point-annotation-label,.apexcharts-radar-series path,.apexcharts-radar-series polygon,.apexcharts-toolbar svg,.apexcharts-tooltip .apexcharts-marker,.apexcharts-xaxis-annotation-label,.apexcharts-yaxis-annotation-label,.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,.resize-triggers,.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}', r2 ? s2.prepend(t3.css) : o2.head.appendChild(t3.css));
              }
              var l2 = t3.create(t3.w.config.series, {});
              if (!l2)
                return e2(t3);
              t3.mount(l2).then(function() {
                "function" == typeof t3.w.config.chart.events.mounted && t3.w.config.chart.events.mounted(t3, t3.w), t3.events.fireEvent("mounted", [t3, t3.w]), e2(l2);
              }).catch(function(t4) {
                i2(t4);
              });
            } else
              i2(new Error("Element not found"));
          });
        } }, { key: "create", value: function(t3, e2) {
          var i2 = this.w;
          new Ht(this).initModules();
          var a2 = this.w.globals;
          (a2.noData = false, a2.animationEnded = false, this.responsive.checkResponsiveConfig(e2), i2.config.xaxis.convertedCatToNumeric) && new X(i2.config).convertCatToNumericXaxis(i2.config, this.ctx);
          if (null === this.el)
            return a2.animationEnded = true, null;
          if (this.core.setupElements(), "treemap" === i2.config.chart.type && (i2.config.grid.show = false, i2.config.yaxis[0].show = false), 0 === a2.svgWidth)
            return a2.animationEnded = true, null;
          var s2 = y.checkComboSeries(t3);
          a2.comboCharts = s2.comboCharts, a2.comboBarCount = s2.comboBarCount;
          var r2 = t3.every(function(t4) {
            return t4.data && 0 === t4.data.length;
          });
          (0 === t3.length || r2) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t3), this.theme.init(), new R(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a2.noData && a2.collapsedSeries.length !== a2.series.length && !i2.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), a2.axisCharts && (this.core.coreCalculations(), "category" !== i2.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = i2.globals.minX, this.ctx.toolbar.maxX = i2.globals.maxX), this.formatters.heatmapLabelFormatters(), new y(this).getLargestMarkerSize(), this.dimensions.plotCoords();
          var o2 = this.core.xySettings();
          this.grid.createGridMask();
          var n2 = this.core.plotChartType(t3, o2), l2 = new H(this);
          l2.bringForward(), i2.config.dataLabels.background.enabled && l2.dataLabelsBackground(), this.core.shiftGraphPosition();
          var h2 = { plot: { left: i2.globals.translateX, top: i2.globals.translateY, width: i2.globals.gridWidth, height: i2.globals.gridHeight } };
          return { elGraph: n2, xyRatios: o2, elInner: i2.globals.dom.elGraphical, dimensions: h2 };
        } }, { key: "mount", value: function() {
          var t3 = this, e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i2 = this, a2 = i2.w;
          return new Promise(function(s2, r2) {
            if (null === i2.el)
              return r2(new Error("Not enough data to display or target element not found"));
            (null === e2 || a2.globals.allSeriesCollapsed) && i2.series.handleNoData(), "treemap" !== a2.config.chart.type && i2.axes.drawAxis(a2.config.chart.type, e2.xyRatios), i2.grid = new j(i2);
            var o2 = i2.grid.drawGrid();
            i2.annotations = new P(i2), i2.annotations.drawImageAnnos(), i2.annotations.drawTextAnnos(), "back" === a2.config.grid.position && o2 && a2.globals.dom.elGraphical.add(o2.el);
            var n2 = new G(t3.ctx), l2 = new q(t3.ctx);
            if (null !== o2 && (n2.xAxisLabelCorrections(o2.xAxisTickWidth), l2.setYAxisTextAlignments(), a2.config.yaxis.map(function(t4, e3) {
              -1 === a2.globals.ignoreYAxisIndexes.indexOf(e3) && l2.yAxisTitleRotate(e3, t4.opposite);
            })), "back" === a2.config.annotations.position && (a2.globals.dom.Paper.add(a2.globals.dom.elAnnotations), i2.annotations.drawAxesAnnotations()), Array.isArray(e2.elGraph))
              for (var h2 = 0; h2 < e2.elGraph.length; h2++)
                a2.globals.dom.elGraphical.add(e2.elGraph[h2]);
            else
              a2.globals.dom.elGraphical.add(e2.elGraph);
            if ("front" === a2.config.grid.position && o2 && a2.globals.dom.elGraphical.add(o2.el), "front" === a2.config.xaxis.crosshairs.position && i2.crosshairs.drawXCrosshairs(), "front" === a2.config.yaxis[0].crosshairs.position && i2.crosshairs.drawYCrosshairs(), "front" === a2.config.annotations.position && (a2.globals.dom.Paper.add(a2.globals.dom.elAnnotations), i2.annotations.drawAxesAnnotations()), !a2.globals.noData) {
              if (a2.config.tooltip.enabled && !a2.globals.noData && i2.w.globals.tooltip.drawTooltip(e2.xyRatios), a2.globals.axisCharts && (a2.globals.isXNumeric || a2.config.xaxis.convertedCatToNumeric || a2.globals.isRangeBar))
                (a2.config.chart.zoom.enabled || a2.config.chart.selection && a2.config.chart.selection.enabled || a2.config.chart.pan && a2.config.chart.pan.enabled) && i2.zoomPanSelection.init({ xyRatios: e2.xyRatios });
              else {
                var c2 = a2.config.chart.toolbar.tools;
                ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach(function(t4) {
                  c2[t4] = false;
                });
              }
              a2.config.chart.toolbar.show && !a2.globals.allSeriesCollapsed && i2.toolbar.createToolbar();
            }
            a2.globals.memory.methodsToExec.length > 0 && a2.globals.memory.methodsToExec.forEach(function(t4) {
              t4.method(t4.params, false, t4.context);
            }), a2.globals.axisCharts || a2.globals.noData || i2.core.resizeNonAxisCharts(), s2(i2);
          });
        } }, { key: "destroy", value: function() {
          var t3, e2;
          window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t3 = this.parentResizeHandler, (e2 = Ot.get(t3)) && (e2.disconnect(), Ot.delete(t3));
          var i2 = this.w.config.chart.id;
          i2 && Apex._chartInstances.forEach(function(t4, e3) {
            t4.id === x.escapeString(i2) && Apex._chartInstances.splice(e3, 1);
          }), new Nt(this.ctx).clear({ isUpdating: false });
        } }, { key: "updateOptions", value: function(t3) {
          var e2 = this, i2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], a2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], r2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4], o2 = this.w;
          return o2.globals.selection = void 0, t3.series && (this.series.resetSeries(false, true, false), t3.series.length && t3.series[0].data && (t3.series = t3.series.map(function(t4, i3) {
            return e2.updateHelpers._extendSeries(t4, i3);
          })), this.updateHelpers.revertDefaultAxisMinMax()), t3.xaxis && (t3 = this.updateHelpers.forceXAxisUpdate(t3)), t3.yaxis && (t3 = this.updateHelpers.forceYAxisUpdate(t3)), o2.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t3.theme && (t3 = this.theme.updateThemeOptions(t3)), this.updateHelpers._updateOptions(t3, i2, a2, s2, r2);
        } }, { key: "updateSeries", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
          return this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t3, e2, i2);
        } }, { key: "appendSeries", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a2 = this.w.config.series.slice();
          return a2.push(t3), this.series.resetSeries(false), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a2, e2, i2);
        } }, { key: "appendData", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = this;
          i2.w.globals.dataChanged = true, i2.series.getPreviousPaths();
          for (var a2 = i2.w.config.series.slice(), s2 = 0; s2 < a2.length; s2++)
            if (null !== t3[s2] && void 0 !== t3[s2])
              for (var r2 = 0; r2 < t3[s2].data.length; r2++)
                a2[s2].data.push(t3[s2].data[r2]);
          return i2.w.config.series = a2, e2 && (i2.w.globals.initialSeries = x.clone(i2.w.config.series)), this.update();
        } }, { key: "update", value: function(t3) {
          var e2 = this;
          return new Promise(function(i2, a2) {
            new Nt(e2.ctx).clear({ isUpdating: true });
            var s2 = e2.create(e2.w.config.series, t3);
            if (!s2)
              return i2(e2);
            e2.mount(s2).then(function() {
              "function" == typeof e2.w.config.chart.events.updated && e2.w.config.chart.events.updated(e2, e2.w), e2.events.fireEvent("updated", [e2, e2.w]), e2.w.globals.isDirty = true, i2(e2);
            }).catch(function(t4) {
              a2(t4);
            });
          });
        } }, { key: "getSyncedCharts", value: function() {
          var t3 = this.getGroupedCharts(), e2 = [this];
          return t3.length && (e2 = [], t3.forEach(function(t4) {
            e2.push(t4);
          })), e2;
        } }, { key: "getGroupedCharts", value: function() {
          var t3 = this;
          return Apex._chartInstances.filter(function(t4) {
            if (t4.group)
              return true;
          }).map(function(e2) {
            return t3.w.config.chart.group === e2.group ? e2.chart : t3;
          });
        } }, { key: "toggleSeries", value: function(t3) {
          return this.series.toggleSeries(t3);
        } }, { key: "highlightSeriesOnLegendHover", value: function(t3, e2) {
          return this.series.toggleSeriesOnHover(t3, e2);
        } }, { key: "showSeries", value: function(t3) {
          this.series.showSeries(t3);
        } }, { key: "hideSeries", value: function(t3) {
          this.series.hideSeries(t3);
        } }, { key: "resetSeries", value: function() {
          var t3 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          this.series.resetSeries(t3, e2);
        } }, { key: "addEventListener", value: function(t3, e2) {
          this.events.addEventListener(t3, e2);
        } }, { key: "removeEventListener", value: function(t3, e2) {
          this.events.removeEventListener(t3, e2);
        } }, { key: "addXaxisAnnotation", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a2 = this;
          i2 && (a2 = i2), a2.annotations.addXaxisAnnotationExternal(t3, e2, a2);
        } }, { key: "addYaxisAnnotation", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a2 = this;
          i2 && (a2 = i2), a2.annotations.addYaxisAnnotationExternal(t3, e2, a2);
        } }, { key: "addPointAnnotation", value: function(t3) {
          var e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, a2 = this;
          i2 && (a2 = i2), a2.annotations.addPointAnnotationExternal(t3, e2, a2);
        } }, { key: "clearAnnotations", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, e2 = this;
          t3 && (e2 = t3), e2.annotations.clearAnnotations(e2);
        } }, { key: "removeAnnotation", value: function(t3) {
          var e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i2 = this;
          e2 && (i2 = e2), i2.annotations.removeAnnotation(i2, t3);
        } }, { key: "getChartArea", value: function() {
          return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
        } }, { key: "getSeriesTotalXRange", value: function(t3, e2) {
          return this.coreUtils.getSeriesTotalsXRange(t3, e2);
        } }, { key: "getHighestValueInSeries", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e2 = new U(this.ctx);
          return e2.getMinYMaxY(t3).highestY;
        } }, { key: "getLowestValueInSeries", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e2 = new U(this.ctx);
          return e2.getMinYMaxY(t3).lowestY;
        } }, { key: "getSeriesTotal", value: function() {
          return this.w.globals.seriesTotals;
        } }, { key: "toggleDataPointSelection", value: function(t3, e2) {
          return this.updateHelpers.toggleDataPointSelection(t3, e2);
        } }, { key: "zoomX", value: function(t3, e2) {
          this.ctx.toolbar.zoomUpdateOptions(t3, e2);
        } }, { key: "setLocale", value: function(t3) {
          this.localization.setCurrentLocaleValues(t3);
        } }, { key: "dataURI", value: function(t3) {
          return new V(this.ctx).dataURI(t3);
        } }, { key: "exportToCSV", value: function() {
          var t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e2 = new V(this.ctx);
          return e2.exportToCSV(t3);
        } }, { key: "paper", value: function() {
          return this.w.globals.dom.Paper;
        } }, { key: "_parentResizeCallback", value: function() {
          this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();
        } }, { key: "_windowResize", value: function() {
          var t3 = this;
          clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function() {
            t3.w.globals.resized = true, t3.w.globals.dataChanged = false, t3.ctx.update();
          }, 150);
        } }, { key: "_windowResizeHandler", value: function() {
          var t3 = this.w.config.chart.redrawOnWindowResize;
          "function" == typeof t3 && (t3 = t3()), t3 && this._windowResize();
        } }], [{ key: "getChartByID", value: function(t3) {
          var e2 = x.escapeString(t3), i2 = Apex._chartInstances.filter(function(t4) {
            return t4.id === e2;
          })[0];
          return i2 && i2.chart;
        } }, { key: "initOnLoad", value: function() {
          for (var e2 = document.querySelectorAll("[data-apexcharts]"), i2 = 0; i2 < e2.length; i2++) {
            new t2(e2[i2], JSON.parse(e2[i2].getAttribute("data-options"))).render();
          }
        } }, { key: "exec", value: function(t3, e2) {
          var i2 = this.getChartByID(t3);
          if (i2) {
            i2.w.globals.isExecCalled = true;
            var a2 = null;
            if (-1 !== i2.publicMethods.indexOf(e2)) {
              for (var s2 = arguments.length, r2 = new Array(s2 > 2 ? s2 - 2 : 0), o2 = 2; o2 < s2; o2++)
                r2[o2 - 2] = arguments[o2];
              a2 = i2[e2].apply(i2, r2);
            }
            return a2;
          }
        } }, { key: "merge", value: function(t3, e2) {
          return x.extend(t3, e2);
        } }]), t2;
      }();
      module.exports = Wt;
    }
  });

  // node_modules/react-apexcharts/dist/react-apexcharts.min.js
  var require_react_apexcharts_min = __commonJS({
    "node_modules/react-apexcharts/dist/react-apexcharts.min.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e;
      } : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      };
      var _extends2 = Object.assign || function(e) {
        for (var t = 1; t < arguments.length; t++) {
          var r = arguments[t];
          for (var n in r)
            Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
        }
        return e;
      };
      var _createClass = function() {
        function n(e, t) {
          for (var r = 0; r < t.length; r++) {
            var n2 = t[r];
            n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e, n2.key, n2);
          }
        }
        return function(e, t, r) {
          return t && n(e.prototype, t), r && n(e, r), e;
        };
      }();
      var _apexcharts = require_apexcharts_common();
      var _apexcharts2 = _interopRequireDefault(_apexcharts);
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      var _propTypes = require_prop_types();
      var _propTypes2 = _interopRequireDefault(_propTypes);
      function _interopRequireDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      function _defineProperty(e, t, r) {
        return t in e ? Object.defineProperty(e, t, { value: r, enumerable: true, configurable: true, writable: true }) : e[t] = r, e;
      }
      function _objectWithoutProperties(e, t) {
        var r = {};
        for (var n in e)
          0 <= t.indexOf(n) || Object.prototype.hasOwnProperty.call(e, n) && (r[n] = e[n]);
        return r;
      }
      function _classCallCheck(e, t) {
        if (!(e instanceof t))
          throw new TypeError("Cannot call a class as a function");
      }
      function _possibleConstructorReturn(e, t) {
        if (!e)
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" != typeof t && "function" != typeof t ? e : t;
      }
      function _inherits(e, t) {
        if ("function" != typeof t && null !== t)
          throw new TypeError("Super expression must either be null or a function, not " + typeof t);
        e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: false, writable: true, configurable: true } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
      }
      window.ApexCharts = _apexcharts2.default;
      var Charts = function() {
        function r(e) {
          _classCallCheck(this, r);
          var t = _possibleConstructorReturn(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this, e));
          return _react2.default.createRef ? t.chartRef = _react2.default.createRef() : t.setRef = function(e2) {
            return t.chartRef = e2;
          }, t.chart = null, t;
        }
        return _inherits(r, _react.Component), _createClass(r, [{ key: "render", value: function() {
          var e = this.props, t = (e.type, e.height, e.width, e.series, e.options, _objectWithoutProperties(e, ["type", "height", "width", "series", "options"]));
          return _react2.default.createElement("div", _extends2({ ref: _react2.default.createRef ? this.chartRef : this.setRef }, t));
        } }, { key: "componentDidMount", value: function() {
          var e = _react2.default.createRef ? this.chartRef.current : this.chartRef;
          this.chart = new _apexcharts2.default(e, this.getConfig()), this.chart.render();
        } }, { key: "getConfig", value: function() {
          var e = this.props, t = e.type, r2 = e.height, n = e.width, o = e.series, i = e.options, a = { chart: { type: t, height: r2, width: n }, series: o };
          return this.extend(i, a);
        } }, { key: "isObject", value: function(e) {
          return e && "object" === (void 0 === e ? "undefined" : _typeof(e)) && !Array.isArray(e) && null != e;
        } }, { key: "extend", value: function(t, r2) {
          var n = this;
          "function" != typeof Object.assign && (Object.assign = function(e) {
            if (null == e)
              throw new TypeError("Cannot convert undefined or null to object");
            for (var t2 = Object(e), r3 = 1; r3 < arguments.length; r3++) {
              var n2 = arguments[r3];
              if (null != n2)
                for (var o2 in n2)
                  n2.hasOwnProperty(o2) && (t2[o2] = n2[o2]);
            }
            return t2;
          });
          var o = Object.assign({}, t);
          return this.isObject(t) && this.isObject(r2) && Object.keys(r2).forEach(function(e) {
            n.isObject(r2[e]) && e in t ? o[e] = n.extend(t[e], r2[e]) : Object.assign(o, _defineProperty({}, e, r2[e]));
          }), o;
        } }, { key: "componentDidUpdate", value: function(e) {
          if (!this.chart)
            return null;
          var t = this.props, r2 = t.options, n = t.series, o = t.height, i = t.width, a = JSON.stringify(e.options), s = JSON.stringify(e.series), c = JSON.stringify(r2), u = JSON.stringify(n);
          a === c && s === u && o === e.height && i === e.width || (s === u ? this.chart.updateOptions(this.getConfig()) : a === c && o === e.height && i === e.width ? this.chart.updateSeries(n) : this.chart.updateOptions(this.getConfig()));
        } }, { key: "componentWillUnmount", value: function() {
          this.chart && "function" == typeof this.chart.destroy && this.chart.destroy();
        } }]), r;
      }();
      (exports.default = Charts).propTypes = { type: _propTypes2.default.string.isRequired, width: _propTypes2.default.any, height: _propTypes2.default.any, series: _propTypes2.default.array.isRequired, options: _propTypes2.default.object.isRequired }, Charts.defaultProps = { type: "line", width: "100%", height: "auto" };
    }
  });

  // node_modules/dexie/dist/modern/dexie.mjs
  var dexie_exports = {};
  __export(dexie_exports, {
    Dexie: () => Dexie$1,
    RangeSet: () => RangeSet,
    default: () => Dexie$1,
    liveQuery: () => liveQuery,
    mergeRanges: () => mergeRanges,
    rangesOverlap: () => rangesOverlap
  });
  function extend(obj, extension) {
    if (typeof extension !== "object")
      return obj;
    keys(extension).forEach(function(key) {
      obj[key] = extension[key];
    });
    return obj;
  }
  function hasOwn(obj, prop) {
    return _hasOwn.call(obj, prop);
  }
  function props(proto, extension) {
    if (typeof extension === "function")
      extension = extension(getProto(proto));
    (typeof Reflect === "undefined" ? keys : Reflect.ownKeys)(extension).forEach((key) => {
      setProp(proto, key, extension[key]);
    });
  }
  function setProp(obj, prop, functionOrGetSet, options) {
    defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === "function" ? { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } : { value: functionOrGetSet, configurable: true, writable: true }, options));
  }
  function derive(Child) {
    return {
      from: function(Parent) {
        Child.prototype = Object.create(Parent.prototype);
        setProp(Child.prototype, "constructor", Child);
        return {
          extend: props.bind(null, Child.prototype)
        };
      }
    };
  }
  function getPropertyDescriptor(obj, prop) {
    const pd = getOwnPropertyDescriptor(obj, prop);
    let proto;
    return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
  }
  function slice(args, start, end) {
    return _slice.call(args, start, end);
  }
  function override(origFunc, overridedFactory) {
    return overridedFactory(origFunc);
  }
  function assert(b) {
    if (!b)
      throw new Error("Assertion Failed");
  }
  function asap$1(fn) {
    if (_global.setImmediate)
      setImmediate(fn);
    else
      setTimeout(fn, 0);
  }
  function arrayToObject(array, extractor) {
    return array.reduce((result, item, i) => {
      var nameAndValue = extractor(item, i);
      if (nameAndValue)
        result[nameAndValue[0]] = nameAndValue[1];
      return result;
    }, {});
  }
  function tryCatch(fn, onerror, args) {
    try {
      fn.apply(null, args);
    } catch (ex) {
      onerror && onerror(ex);
    }
  }
  function getByKeyPath(obj, keyPath) {
    if (hasOwn(obj, keyPath))
      return obj[keyPath];
    if (!keyPath)
      return obj;
    if (typeof keyPath !== "string") {
      var rv = [];
      for (var i = 0, l = keyPath.length; i < l; ++i) {
        var val = getByKeyPath(obj, keyPath[i]);
        rv.push(val);
      }
      return rv;
    }
    var period = keyPath.indexOf(".");
    if (period !== -1) {
      var innerObj = obj[keyPath.substr(0, period)];
      return innerObj === void 0 ? void 0 : getByKeyPath(innerObj, keyPath.substr(period + 1));
    }
    return void 0;
  }
  function setByKeyPath(obj, keyPath, value) {
    if (!obj || keyPath === void 0)
      return;
    if ("isFrozen" in Object && Object.isFrozen(obj))
      return;
    if (typeof keyPath !== "string" && "length" in keyPath) {
      assert(typeof value !== "string" && "length" in value);
      for (var i = 0, l = keyPath.length; i < l; ++i) {
        setByKeyPath(obj, keyPath[i], value[i]);
      }
    } else {
      var period = keyPath.indexOf(".");
      if (period !== -1) {
        var currentKeyPath = keyPath.substr(0, period);
        var remainingKeyPath = keyPath.substr(period + 1);
        if (remainingKeyPath === "")
          if (value === void 0) {
            if (isArray(obj) && !isNaN(parseInt(currentKeyPath)))
              obj.splice(currentKeyPath, 1);
            else
              delete obj[currentKeyPath];
          } else
            obj[currentKeyPath] = value;
        else {
          var innerObj = obj[currentKeyPath];
          if (!innerObj || !hasOwn(obj, currentKeyPath))
            innerObj = obj[currentKeyPath] = {};
          setByKeyPath(innerObj, remainingKeyPath, value);
        }
      } else {
        if (value === void 0) {
          if (isArray(obj) && !isNaN(parseInt(keyPath)))
            obj.splice(keyPath, 1);
          else
            delete obj[keyPath];
        } else
          obj[keyPath] = value;
      }
    }
  }
  function delByKeyPath(obj, keyPath) {
    if (typeof keyPath === "string")
      setByKeyPath(obj, keyPath, void 0);
    else if ("length" in keyPath)
      [].map.call(keyPath, function(kp) {
        setByKeyPath(obj, kp, void 0);
      });
  }
  function shallowClone(obj) {
    var rv = {};
    for (var m in obj) {
      if (hasOwn(obj, m))
        rv[m] = obj[m];
    }
    return rv;
  }
  function flatten(a) {
    return concat.apply([], a);
  }
  function deepClone(any) {
    circularRefs = typeof WeakMap !== "undefined" && /* @__PURE__ */ new WeakMap();
    const rv = innerDeepClone(any);
    circularRefs = null;
    return rv;
  }
  function innerDeepClone(any) {
    if (!any || typeof any !== "object")
      return any;
    let rv = circularRefs && circularRefs.get(any);
    if (rv)
      return rv;
    if (isArray(any)) {
      rv = [];
      circularRefs && circularRefs.set(any, rv);
      for (var i = 0, l = any.length; i < l; ++i) {
        rv.push(innerDeepClone(any[i]));
      }
    } else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
      rv = any;
    } else {
      const proto = getProto(any);
      rv = proto === Object.prototype ? {} : Object.create(proto);
      circularRefs && circularRefs.set(any, rv);
      for (var prop in any) {
        if (hasOwn(any, prop)) {
          rv[prop] = innerDeepClone(any[prop]);
        }
      }
    }
    return rv;
  }
  function toStringTag(o) {
    return toString.call(o).slice(8, -1);
  }
  function getArrayOf(arrayLike) {
    var i, a, x, it;
    if (arguments.length === 1) {
      if (isArray(arrayLike))
        return arrayLike.slice();
      if (this === NO_CHAR_ARRAY && typeof arrayLike === "string")
        return [arrayLike];
      if (it = getIteratorOf(arrayLike)) {
        a = [];
        while (x = it.next(), !x.done)
          a.push(x.value);
        return a;
      }
      if (arrayLike == null)
        return [arrayLike];
      i = arrayLike.length;
      if (typeof i === "number") {
        a = new Array(i);
        while (i--)
          a[i] = arrayLike[i];
        return a;
      }
      return [arrayLike];
    }
    i = arguments.length;
    a = new Array(i);
    while (i--)
      a[i] = arguments[i];
    return a;
  }
  function setDebug(value, filter) {
    debug = value;
    libraryFilter = filter;
  }
  function getErrorWithStack() {
    if (NEEDS_THROW_FOR_STACK)
      try {
        getErrorWithStack.arguments;
        throw new Error();
      } catch (e) {
        return e;
      }
    return new Error();
  }
  function prettyStack(exception, numIgnoredFrames) {
    var stack = exception.stack;
    if (!stack)
      return "";
    numIgnoredFrames = numIgnoredFrames || 0;
    if (stack.indexOf(exception.name) === 0)
      numIgnoredFrames += (exception.name + exception.message).split("\n").length;
    return stack.split("\n").slice(numIgnoredFrames).filter(libraryFilter).map((frame) => "\n" + frame).join("");
  }
  function DexieError(name, msg) {
    this._e = getErrorWithStack();
    this.name = name;
    this.message = msg;
  }
  function getMultiErrorMessage(msg, failures) {
    return msg + ". Errors: " + Object.keys(failures).map((key) => failures[key].toString()).filter((v, i, s) => s.indexOf(v) === i).join("\n");
  }
  function ModifyError(msg, failures, successCount, failedKeys) {
    this._e = getErrorWithStack();
    this.failures = failures;
    this.failedKeys = failedKeys;
    this.successCount = successCount;
    this.message = getMultiErrorMessage(msg, failures);
  }
  function BulkError(msg, failures) {
    this._e = getErrorWithStack();
    this.name = "BulkError";
    this.failures = Object.keys(failures).map((pos) => failures[pos]);
    this.failuresByPos = failures;
    this.message = getMultiErrorMessage(msg, failures);
  }
  function mapError(domError, message) {
    if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
      return domError;
    var rv = new exceptionMap[domError.name](message || domError.message, domError);
    if ("stack" in domError) {
      setProp(rv, "stack", { get: function() {
        return this.inner.stack;
      } });
    }
    return rv;
  }
  function nop() {
  }
  function mirror(val) {
    return val;
  }
  function pureFunctionChain(f1, f2) {
    if (f1 == null || f1 === mirror)
      return f2;
    return function(val) {
      return f2(f1(val));
    };
  }
  function callBoth(on1, on2) {
    return function() {
      on1.apply(this, arguments);
      on2.apply(this, arguments);
    };
  }
  function hookCreatingChain(f1, f2) {
    if (f1 === nop)
      return f2;
    return function() {
      var res = f1.apply(this, arguments);
      if (res !== void 0)
        arguments[0] = res;
      var onsuccess = this.onsuccess, onerror = this.onerror;
      this.onsuccess = null;
      this.onerror = null;
      var res2 = f2.apply(this, arguments);
      if (onsuccess)
        this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
      if (onerror)
        this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
      return res2 !== void 0 ? res2 : res;
    };
  }
  function hookDeletingChain(f1, f2) {
    if (f1 === nop)
      return f2;
    return function() {
      f1.apply(this, arguments);
      var onsuccess = this.onsuccess, onerror = this.onerror;
      this.onsuccess = this.onerror = null;
      f2.apply(this, arguments);
      if (onsuccess)
        this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
      if (onerror)
        this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
    };
  }
  function hookUpdatingChain(f1, f2) {
    if (f1 === nop)
      return f2;
    return function(modifications) {
      var res = f1.apply(this, arguments);
      extend(modifications, res);
      var onsuccess = this.onsuccess, onerror = this.onerror;
      this.onsuccess = null;
      this.onerror = null;
      var res2 = f2.apply(this, arguments);
      if (onsuccess)
        this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
      if (onerror)
        this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
      return res === void 0 ? res2 === void 0 ? void 0 : res2 : extend(res, res2);
    };
  }
  function reverseStoppableEventChain(f1, f2) {
    if (f1 === nop)
      return f2;
    return function() {
      if (f2.apply(this, arguments) === false)
        return false;
      return f1.apply(this, arguments);
    };
  }
  function promisableChain(f1, f2) {
    if (f1 === nop)
      return f2;
    return function() {
      var res = f1.apply(this, arguments);
      if (res && typeof res.then === "function") {
        var thiz = this, i = arguments.length, args = new Array(i);
        while (i--)
          args[i] = arguments[i];
        return res.then(function() {
          return f2.apply(thiz, args);
        });
      }
      return f2.apply(this, arguments);
    };
  }
  function DexiePromise(fn) {
    if (typeof this !== "object")
      throw new TypeError("Promises must be constructed via new");
    this._listeners = [];
    this.onuncatched = nop;
    this._lib = false;
    var psd = this._PSD = PSD;
    if (debug) {
      this._stackHolder = getErrorWithStack();
      this._prev = null;
      this._numPrev = 0;
    }
    if (typeof fn !== "function") {
      if (fn !== INTERNAL)
        throw new TypeError("Not a function");
      this._state = arguments[1];
      this._value = arguments[2];
      if (this._state === false)
        handleRejection(this, this._value);
      return;
    }
    this._state = null;
    this._value = null;
    ++psd.ref;
    executePromiseTask(this, fn);
  }
  function Listener(onFulfilled, onRejected, resolve, reject, zone) {
    this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
    this.onRejected = typeof onRejected === "function" ? onRejected : null;
    this.resolve = resolve;
    this.reject = reject;
    this.psd = zone;
  }
  function executePromiseTask(promise, fn) {
    try {
      fn((value) => {
        if (promise._state !== null)
          return;
        if (value === promise)
          throw new TypeError("A promise cannot be resolved with itself.");
        var shouldExecuteTick = promise._lib && beginMicroTickScope();
        if (value && typeof value.then === "function") {
          executePromiseTask(promise, (resolve, reject) => {
            value instanceof DexiePromise ? value._then(resolve, reject) : value.then(resolve, reject);
          });
        } else {
          promise._state = true;
          promise._value = value;
          propagateAllListeners(promise);
        }
        if (shouldExecuteTick)
          endMicroTickScope();
      }, handleRejection.bind(null, promise));
    } catch (ex) {
      handleRejection(promise, ex);
    }
  }
  function handleRejection(promise, reason) {
    rejectingErrors.push(reason);
    if (promise._state !== null)
      return;
    var shouldExecuteTick = promise._lib && beginMicroTickScope();
    reason = rejectionMapper(reason);
    promise._state = false;
    promise._value = reason;
    debug && reason !== null && typeof reason === "object" && !reason._promise && tryCatch(() => {
      var origProp = getPropertyDescriptor(reason, "stack");
      reason._promise = promise;
      setProp(reason, "stack", {
        get: () => stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack
      });
    });
    addPossiblyUnhandledError(promise);
    propagateAllListeners(promise);
    if (shouldExecuteTick)
      endMicroTickScope();
  }
  function propagateAllListeners(promise) {
    var listeners = promise._listeners;
    promise._listeners = [];
    for (var i = 0, len = listeners.length; i < len; ++i) {
      propagateToListener(promise, listeners[i]);
    }
    var psd = promise._PSD;
    --psd.ref || psd.finalize();
    if (numScheduledCalls === 0) {
      ++numScheduledCalls;
      asap(() => {
        if (--numScheduledCalls === 0)
          finalizePhysicalTick();
      }, []);
    }
  }
  function propagateToListener(promise, listener) {
    if (promise._state === null) {
      promise._listeners.push(listener);
      return;
    }
    var cb = promise._state ? listener.onFulfilled : listener.onRejected;
    if (cb === null) {
      return (promise._state ? listener.resolve : listener.reject)(promise._value);
    }
    ++listener.psd.ref;
    ++numScheduledCalls;
    asap(callListener, [cb, promise, listener]);
  }
  function callListener(cb, promise, listener) {
    try {
      currentFulfiller = promise;
      var ret, value = promise._value;
      if (promise._state) {
        ret = cb(value);
      } else {
        if (rejectingErrors.length)
          rejectingErrors = [];
        ret = cb(value);
        if (rejectingErrors.indexOf(value) === -1)
          markErrorAsHandled(promise);
      }
      listener.resolve(ret);
    } catch (e) {
      listener.reject(e);
    } finally {
      currentFulfiller = null;
      if (--numScheduledCalls === 0)
        finalizePhysicalTick();
      --listener.psd.ref || listener.psd.finalize();
    }
  }
  function getStack(promise, stacks, limit) {
    if (stacks.length === limit)
      return stacks;
    var stack = "";
    if (promise._state === false) {
      var failure = promise._value, errorName, message;
      if (failure != null) {
        errorName = failure.name || "Error";
        message = failure.message || failure;
        stack = prettyStack(failure, 0);
      } else {
        errorName = failure;
        message = "";
      }
      stacks.push(errorName + (message ? ": " + message : "") + stack);
    }
    if (debug) {
      stack = prettyStack(promise._stackHolder, 2);
      if (stack && stacks.indexOf(stack) === -1)
        stacks.push(stack);
      if (promise._prev)
        getStack(promise._prev, stacks, limit);
    }
    return stacks;
  }
  function linkToPreviousPromise(promise, prev) {
    var numPrev = prev ? prev._numPrev + 1 : 0;
    if (numPrev < LONG_STACKS_CLIP_LIMIT) {
      promise._prev = prev;
      promise._numPrev = numPrev;
    }
  }
  function physicalTick() {
    beginMicroTickScope() && endMicroTickScope();
  }
  function beginMicroTickScope() {
    var wasRootExec = isOutsideMicroTick;
    isOutsideMicroTick = false;
    needsNewPhysicalTick = false;
    return wasRootExec;
  }
  function endMicroTickScope() {
    var callbacks, i, l;
    do {
      while (microtickQueue.length > 0) {
        callbacks = microtickQueue;
        microtickQueue = [];
        l = callbacks.length;
        for (i = 0; i < l; ++i) {
          var item = callbacks[i];
          item[0].apply(null, item[1]);
        }
      }
    } while (microtickQueue.length > 0);
    isOutsideMicroTick = true;
    needsNewPhysicalTick = true;
  }
  function finalizePhysicalTick() {
    var unhandledErrs = unhandledErrors;
    unhandledErrors = [];
    unhandledErrs.forEach((p) => {
      p._PSD.onunhandled.call(null, p._value, p);
    });
    var finalizers = tickFinalizers.slice(0);
    var i = finalizers.length;
    while (i)
      finalizers[--i]();
  }
  function run_at_end_of_this_or_next_physical_tick(fn) {
    function finalizer() {
      fn();
      tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
    }
    tickFinalizers.push(finalizer);
    ++numScheduledCalls;
    asap(() => {
      if (--numScheduledCalls === 0)
        finalizePhysicalTick();
    }, []);
  }
  function addPossiblyUnhandledError(promise) {
    if (!unhandledErrors.some((p) => p._value === promise._value))
      unhandledErrors.push(promise);
  }
  function markErrorAsHandled(promise) {
    var i = unhandledErrors.length;
    while (i)
      if (unhandledErrors[--i]._value === promise._value) {
        unhandledErrors.splice(i, 1);
        return;
      }
  }
  function PromiseReject(reason) {
    return new DexiePromise(INTERNAL, false, reason);
  }
  function wrap(fn, errorCatcher) {
    var psd = PSD;
    return function() {
      var wasRootExec = beginMicroTickScope(), outerScope = PSD;
      try {
        switchToZone(psd, true);
        return fn.apply(this, arguments);
      } catch (e) {
        errorCatcher && errorCatcher(e);
      } finally {
        switchToZone(outerScope, false);
        if (wasRootExec)
          endMicroTickScope();
      }
    };
  }
  function newScope(fn, props2, a1, a2) {
    var parent = PSD, psd = Object.create(parent);
    psd.parent = parent;
    psd.ref = 0;
    psd.global = false;
    psd.id = ++zone_id_counter;
    var globalEnv = globalPSD.env;
    psd.env = patchGlobalPromise ? {
      Promise: DexiePromise,
      PromiseProp: { value: DexiePromise, configurable: true, writable: true },
      all: DexiePromise.all,
      race: DexiePromise.race,
      allSettled: DexiePromise.allSettled,
      any: DexiePromise.any,
      resolve: DexiePromise.resolve,
      reject: DexiePromise.reject,
      nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
      gthen: getPatchedPromiseThen(globalEnv.gthen, psd)
    } : {};
    if (props2)
      extend(psd, props2);
    ++parent.ref;
    psd.finalize = function() {
      --this.parent.ref || this.parent.finalize();
    };
    var rv = usePSD(psd, fn, a1, a2);
    if (psd.ref === 0)
      psd.finalize();
    return rv;
  }
  function incrementExpectedAwaits() {
    if (!task.id)
      task.id = ++taskCounter;
    ++task.awaits;
    task.echoes += ZONE_ECHO_LIMIT;
    return task.id;
  }
  function decrementExpectedAwaits() {
    if (!task.awaits)
      return false;
    if (--task.awaits === 0)
      task.id = 0;
    task.echoes = task.awaits * ZONE_ECHO_LIMIT;
    return true;
  }
  function onPossibleParallellAsync(possiblePromise) {
    if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
      incrementExpectedAwaits();
      return possiblePromise.then((x) => {
        decrementExpectedAwaits();
        return x;
      }, (e) => {
        decrementExpectedAwaits();
        return rejection(e);
      });
    }
    return possiblePromise;
  }
  function zoneEnterEcho(targetZone) {
    ++totalEchoes;
    if (!task.echoes || --task.echoes === 0) {
      task.echoes = task.id = 0;
    }
    zoneStack.push(PSD);
    switchToZone(targetZone, true);
  }
  function zoneLeaveEcho() {
    var zone = zoneStack[zoneStack.length - 1];
    zoneStack.pop();
    switchToZone(zone, false);
  }
  function switchToZone(targetZone, bEnteringZone) {
    var currentZone = PSD;
    if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
      enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
    }
    if (targetZone === PSD)
      return;
    PSD = targetZone;
    if (currentZone === globalPSD)
      globalPSD.env = snapShot();
    if (patchGlobalPromise) {
      var GlobalPromise = globalPSD.env.Promise;
      var targetEnv = targetZone.env;
      nativePromiseProto.then = targetEnv.nthen;
      GlobalPromise.prototype.then = targetEnv.gthen;
      if (currentZone.global || targetZone.global) {
        Object.defineProperty(_global, "Promise", targetEnv.PromiseProp);
        GlobalPromise.all = targetEnv.all;
        GlobalPromise.race = targetEnv.race;
        GlobalPromise.resolve = targetEnv.resolve;
        GlobalPromise.reject = targetEnv.reject;
        if (targetEnv.allSettled)
          GlobalPromise.allSettled = targetEnv.allSettled;
        if (targetEnv.any)
          GlobalPromise.any = targetEnv.any;
      }
    }
  }
  function snapShot() {
    var GlobalPromise = _global.Promise;
    return patchGlobalPromise ? {
      Promise: GlobalPromise,
      PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
      all: GlobalPromise.all,
      race: GlobalPromise.race,
      allSettled: GlobalPromise.allSettled,
      any: GlobalPromise.any,
      resolve: GlobalPromise.resolve,
      reject: GlobalPromise.reject,
      nthen: nativePromiseProto.then,
      gthen: GlobalPromise.prototype.then
    } : {};
  }
  function usePSD(psd, fn, a1, a2, a3) {
    var outerScope = PSD;
    try {
      switchToZone(psd, true);
      return fn(a1, a2, a3);
    } finally {
      switchToZone(outerScope, false);
    }
  }
  function enqueueNativeMicroTask(job) {
    nativePromiseThen.call(resolvedNativePromise, job);
  }
  function nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {
    return typeof fn !== "function" ? fn : function() {
      var outerZone = PSD;
      if (possibleAwait)
        incrementExpectedAwaits();
      switchToZone(zone, true);
      try {
        return fn.apply(this, arguments);
      } finally {
        switchToZone(outerZone, false);
        if (cleanup)
          enqueueNativeMicroTask(decrementExpectedAwaits);
      }
    };
  }
  function getPatchedPromiseThen(origThen, zone) {
    return function(onResolved, onRejected) {
      return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone), nativeAwaitCompatibleWrap(onRejected, zone));
    };
  }
  function globalError(err, promise) {
    var rv;
    try {
      rv = promise.onuncatched(err);
    } catch (e) {
    }
    if (rv !== false)
      try {
        var event, eventData = { promise, reason: err };
        if (_global.document && document.createEvent) {
          event = document.createEvent("Event");
          event.initEvent(UNHANDLEDREJECTION, true, true);
          extend(event, eventData);
        } else if (_global.CustomEvent) {
          event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });
          extend(event, eventData);
        }
        if (event && _global.dispatchEvent) {
          dispatchEvent(event);
          if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)
            try {
              _global.onunhandledrejection(event);
            } catch (_3) {
            }
        }
        if (debug && event && !event.defaultPrevented) {
          console.warn(`Unhandled rejection: ${err.stack || err}`);
        }
      } catch (e) {
      }
  }
  function tempTransaction(db2, mode, storeNames, fn) {
    if (!db2.idbdb || !db2._state.openComplete && (!PSD.letThrough && !db2._vip)) {
      if (db2._state.openComplete) {
        return rejection(new exceptions.DatabaseClosed(db2._state.dbOpenError));
      }
      if (!db2._state.isBeingOpened) {
        if (!db2._options.autoOpen)
          return rejection(new exceptions.DatabaseClosed());
        db2.open().catch(nop);
      }
      return db2._state.dbReadyPromise.then(() => tempTransaction(db2, mode, storeNames, fn));
    } else {
      var trans = db2._createTransaction(mode, storeNames, db2._dbSchema);
      try {
        trans.create();
        db2._state.PR1398_maxLoop = 3;
      } catch (ex) {
        if (ex.name === errnames.InvalidState && db2.isOpen() && --db2._state.PR1398_maxLoop > 0) {
          console.warn("Dexie: Need to reopen db");
          db2._close();
          return db2.open().then(() => tempTransaction(db2, mode, storeNames, fn));
        }
        return rejection(ex);
      }
      return trans._promise(mode, (resolve, reject) => {
        return newScope(() => {
          PSD.trans = trans;
          return fn(resolve, reject, trans);
        });
      }).then((result) => {
        return trans._completion.then(() => result);
      });
    }
  }
  function combine(filter1, filter2) {
    return filter1 ? filter2 ? function() {
      return filter1.apply(this, arguments) && filter2.apply(this, arguments);
    } : filter1 : filter2;
  }
  function workaroundForUndefinedPrimKey(keyPath) {
    return typeof keyPath === "string" && !/\./.test(keyPath) ? (obj) => {
      if (obj[keyPath] === void 0 && keyPath in obj) {
        obj = deepClone(obj);
        delete obj[keyPath];
      }
      return obj;
    } : (obj) => obj;
  }
  function Events(ctx) {
    var evs = {};
    var rv = function(eventName, subscriber) {
      if (subscriber) {
        var i2 = arguments.length, args = new Array(i2 - 1);
        while (--i2)
          args[i2 - 1] = arguments[i2];
        evs[eventName].subscribe.apply(null, args);
        return ctx;
      } else if (typeof eventName === "string") {
        return evs[eventName];
      }
    };
    rv.addEventType = add;
    for (var i = 1, l = arguments.length; i < l; ++i) {
      add(arguments[i]);
    }
    return rv;
    function add(eventName, chainFunction, defaultFunction) {
      if (typeof eventName === "object")
        return addConfiguredEvents(eventName);
      if (!chainFunction)
        chainFunction = reverseStoppableEventChain;
      if (!defaultFunction)
        defaultFunction = nop;
      var context = {
        subscribers: [],
        fire: defaultFunction,
        subscribe: function(cb) {
          if (context.subscribers.indexOf(cb) === -1) {
            context.subscribers.push(cb);
            context.fire = chainFunction(context.fire, cb);
          }
        },
        unsubscribe: function(cb) {
          context.subscribers = context.subscribers.filter(function(fn) {
            return fn !== cb;
          });
          context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
        }
      };
      evs[eventName] = rv[eventName] = context;
      return context;
    }
    function addConfiguredEvents(cfg) {
      keys(cfg).forEach(function(eventName) {
        var args = cfg[eventName];
        if (isArray(args)) {
          add(eventName, cfg[eventName][0], cfg[eventName][1]);
        } else if (args === "asap") {
          var context = add(eventName, mirror, function fire() {
            var i2 = arguments.length, args2 = new Array(i2);
            while (i2--)
              args2[i2] = arguments[i2];
            context.subscribers.forEach(function(fn) {
              asap$1(function fireEvent() {
                fn.apply(null, args2);
              });
            });
          });
        } else
          throw new exceptions.InvalidArgument("Invalid event config");
      });
    }
  }
  function makeClassConstructor(prototype, constructor) {
    derive(constructor).from({ prototype });
    return constructor;
  }
  function createTableConstructor(db2) {
    return makeClassConstructor(Table.prototype, function Table2(name, tableSchema, trans) {
      this.db = db2;
      this._tx = trans;
      this.name = name;
      this.schema = tableSchema;
      this.hook = db2._allTables[name] ? db2._allTables[name].hook : Events(null, {
        "creating": [hookCreatingChain, nop],
        "reading": [pureFunctionChain, mirror],
        "updating": [hookUpdatingChain, nop],
        "deleting": [hookDeletingChain, nop]
      });
    });
  }
  function isPlainKeyRange(ctx, ignoreLimitFilter) {
    return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
  }
  function addFilter(ctx, fn) {
    ctx.filter = combine(ctx.filter, fn);
  }
  function addReplayFilter(ctx, factory, isLimitFilter) {
    var curr = ctx.replayFilter;
    ctx.replayFilter = curr ? () => combine(curr(), factory()) : factory;
    ctx.justLimit = isLimitFilter && !curr;
  }
  function addMatchFilter(ctx, fn) {
    ctx.isMatch = combine(ctx.isMatch, fn);
  }
  function getIndexOrStore(ctx, coreSchema) {
    if (ctx.isPrimKey)
      return coreSchema.primaryKey;
    const index = coreSchema.getIndexByKeyPath(ctx.index);
    if (!index)
      throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
    return index;
  }
  function openCursor(ctx, coreTable, trans) {
    const index = getIndexOrStore(ctx, coreTable.schema);
    return coreTable.openCursor({
      trans,
      values: !ctx.keysOnly,
      reverse: ctx.dir === "prev",
      unique: !!ctx.unique,
      query: {
        index,
        range: ctx.range
      }
    });
  }
  function iter(ctx, fn, coreTrans, coreTable) {
    const filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
    if (!ctx.or) {
      return iterate(openCursor(ctx, coreTable, coreTrans), combine(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);
    } else {
      const set = {};
      const union = (item, cursor, advance) => {
        if (!filter || filter(cursor, advance, (result) => cursor.stop(result), (err) => cursor.fail(err))) {
          var primaryKey = cursor.primaryKey;
          var key = "" + primaryKey;
          if (key === "[object ArrayBuffer]")
            key = "" + new Uint8Array(primaryKey);
          if (!hasOwn(set, key)) {
            set[key] = true;
            fn(item, cursor, advance);
          }
        }
      };
      return Promise.all([
        ctx.or._iterate(union, coreTrans),
        iterate(openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
      ]);
    }
  }
  function iterate(cursorPromise, filter, fn, valueMapper) {
    var mappedFn = valueMapper ? (x, c, a) => fn(valueMapper(x), c, a) : fn;
    var wrappedFn = wrap(mappedFn);
    return cursorPromise.then((cursor) => {
      if (cursor) {
        return cursor.start(() => {
          var c = () => cursor.continue();
          if (!filter || filter(cursor, (advancer) => c = advancer, (val) => {
            cursor.stop(val);
            c = nop;
          }, (e) => {
            cursor.fail(e);
            c = nop;
          }))
            wrappedFn(cursor.value, cursor, (advancer) => c = advancer);
          c();
        });
      }
    });
  }
  function cmp(a, b) {
    try {
      const ta = type(a);
      const tb = type(b);
      if (ta !== tb) {
        if (ta === "Array")
          return 1;
        if (tb === "Array")
          return -1;
        if (ta === "binary")
          return 1;
        if (tb === "binary")
          return -1;
        if (ta === "string")
          return 1;
        if (tb === "string")
          return -1;
        if (ta === "Date")
          return 1;
        if (tb !== "Date")
          return NaN;
        return -1;
      }
      switch (ta) {
        case "number":
        case "Date":
        case "string":
          return a > b ? 1 : a < b ? -1 : 0;
        case "binary": {
          return compareUint8Arrays(getUint8Array(a), getUint8Array(b));
        }
        case "Array":
          return compareArrays(a, b);
      }
    } catch (_a) {
    }
    return NaN;
  }
  function compareArrays(a, b) {
    const al = a.length;
    const bl = b.length;
    const l = al < bl ? al : bl;
    for (let i = 0; i < l; ++i) {
      const res = cmp(a[i], b[i]);
      if (res !== 0)
        return res;
    }
    return al === bl ? 0 : al < bl ? -1 : 1;
  }
  function compareUint8Arrays(a, b) {
    const al = a.length;
    const bl = b.length;
    const l = al < bl ? al : bl;
    for (let i = 0; i < l; ++i) {
      if (a[i] !== b[i])
        return a[i] < b[i] ? -1 : 1;
    }
    return al === bl ? 0 : al < bl ? -1 : 1;
  }
  function type(x) {
    const t = typeof x;
    if (t !== "object")
      return t;
    if (ArrayBuffer.isView(x))
      return "binary";
    const tsTag = toStringTag(x);
    return tsTag === "ArrayBuffer" ? "binary" : tsTag;
  }
  function getUint8Array(a) {
    if (a instanceof Uint8Array)
      return a;
    if (ArrayBuffer.isView(a))
      return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
    return new Uint8Array(a);
  }
  function createCollectionConstructor(db2) {
    return makeClassConstructor(Collection.prototype, function Collection2(whereClause, keyRangeGenerator) {
      this.db = db2;
      let keyRange = AnyRange, error = null;
      if (keyRangeGenerator)
        try {
          keyRange = keyRangeGenerator();
        } catch (ex) {
          error = ex;
        }
      const whereCtx = whereClause._ctx;
      const table = whereCtx.table;
      const readingHook = table.hook.reading.fire;
      this._ctx = {
        table,
        index: whereCtx.index,
        isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
        range: keyRange,
        keysOnly: false,
        dir: "next",
        unique: "",
        algorithm: null,
        filter: null,
        replayFilter: null,
        justLimit: true,
        isMatch: null,
        offset: 0,
        limit: Infinity,
        error,
        or: whereCtx.or,
        valueMapper: readingHook !== mirror ? readingHook : null
      };
    });
  }
  function simpleCompare(a, b) {
    return a < b ? -1 : a === b ? 0 : 1;
  }
  function simpleCompareReverse(a, b) {
    return a > b ? -1 : a === b ? 0 : 1;
  }
  function fail(collectionOrWhereClause, err, T) {
    var collection = collectionOrWhereClause instanceof WhereClause ? new collectionOrWhereClause.Collection(collectionOrWhereClause) : collectionOrWhereClause;
    collection._ctx.error = T ? new T(err) : new TypeError(err);
    return collection;
  }
  function emptyCollection(whereClause) {
    return new whereClause.Collection(whereClause, () => rangeEqual("")).limit(0);
  }
  function upperFactory(dir) {
    return dir === "next" ? (s) => s.toUpperCase() : (s) => s.toLowerCase();
  }
  function lowerFactory(dir) {
    return dir === "next" ? (s) => s.toLowerCase() : (s) => s.toUpperCase();
  }
  function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp2, dir) {
    var length = Math.min(key.length, lowerNeedle.length);
    var llp = -1;
    for (var i = 0; i < length; ++i) {
      var lwrKeyChar = lowerKey[i];
      if (lwrKeyChar !== lowerNeedle[i]) {
        if (cmp2(key[i], upperNeedle[i]) < 0)
          return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
        if (cmp2(key[i], lowerNeedle[i]) < 0)
          return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
        if (llp >= 0)
          return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
        return null;
      }
      if (cmp2(key[i], lwrKeyChar) < 0)
        llp = i;
    }
    if (length < lowerNeedle.length && dir === "next")
      return key + upperNeedle.substr(key.length);
    if (length < key.length && dir === "prev")
      return key.substr(0, upperNeedle.length);
    return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
  }
  function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
    var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
    if (!needles.every((s) => typeof s === "string")) {
      return fail(whereClause, STRING_EXPECTED);
    }
    function initDirection(dir) {
      upper = upperFactory(dir);
      lower = lowerFactory(dir);
      compare = dir === "next" ? simpleCompare : simpleCompareReverse;
      var needleBounds = needles.map(function(needle) {
        return { lower: lower(needle), upper: upper(needle) };
      }).sort(function(a, b) {
        return compare(a.lower, b.lower);
      });
      upperNeedles = needleBounds.map(function(nb) {
        return nb.upper;
      });
      lowerNeedles = needleBounds.map(function(nb) {
        return nb.lower;
      });
      direction = dir;
      nextKeySuffix = dir === "next" ? "" : suffix;
    }
    initDirection("next");
    var c = new whereClause.Collection(whereClause, () => createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix));
    c._ondirectionchange = function(direction2) {
      initDirection(direction2);
    };
    var firstPossibleNeedle = 0;
    c._addAlgorithm(function(cursor, advance, resolve) {
      var key = cursor.key;
      if (typeof key !== "string")
        return false;
      var lowerKey = lower(key);
      if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
        return true;
      } else {
        var lowestPossibleCasing = null;
        for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
          var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
          if (casing === null && lowestPossibleCasing === null)
            firstPossibleNeedle = i + 1;
          else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
            lowestPossibleCasing = casing;
          }
        }
        if (lowestPossibleCasing !== null) {
          advance(function() {
            cursor.continue(lowestPossibleCasing + nextKeySuffix);
          });
        } else {
          advance(resolve);
        }
        return false;
      }
    });
    return c;
  }
  function createRange(lower, upper, lowerOpen, upperOpen) {
    return {
      type: 2,
      lower,
      upper,
      lowerOpen,
      upperOpen
    };
  }
  function rangeEqual(value) {
    return {
      type: 1,
      lower: value,
      upper: value
    };
  }
  function createWhereClauseConstructor(db2) {
    return makeClassConstructor(WhereClause.prototype, function WhereClause2(table, index, orCollection) {
      this.db = db2;
      this._ctx = {
        table,
        index: index === ":id" ? null : index,
        or: orCollection
      };
      const indexedDB2 = db2._deps.indexedDB;
      if (!indexedDB2)
        throw new exceptions.MissingAPI();
      this._cmp = this._ascending = indexedDB2.cmp.bind(indexedDB2);
      this._descending = (a, b) => indexedDB2.cmp(b, a);
      this._max = (a, b) => indexedDB2.cmp(a, b) > 0 ? a : b;
      this._min = (a, b) => indexedDB2.cmp(a, b) < 0 ? a : b;
      this._IDBKeyRange = db2._deps.IDBKeyRange;
    });
  }
  function eventRejectHandler(reject) {
    return wrap(function(event) {
      preventDefault(event);
      reject(event.target.error);
      return false;
    });
  }
  function preventDefault(event) {
    if (event.stopPropagation)
      event.stopPropagation();
    if (event.preventDefault)
      event.preventDefault();
  }
  function createTransactionConstructor(db2) {
    return makeClassConstructor(Transaction.prototype, function Transaction2(mode, storeNames, dbschema, chromeTransactionDurability, parent) {
      this.db = db2;
      this.mode = mode;
      this.storeNames = storeNames;
      this.schema = dbschema;
      this.chromeTransactionDurability = chromeTransactionDurability;
      this.idbtrans = null;
      this.on = Events(this, "complete", "error", "abort");
      this.parent = parent || null;
      this.active = true;
      this._reculock = 0;
      this._blockedFuncs = [];
      this._resolve = null;
      this._reject = null;
      this._waitingFor = null;
      this._waitingQueue = null;
      this._spinCount = 0;
      this._completion = new DexiePromise((resolve, reject) => {
        this._resolve = resolve;
        this._reject = reject;
      });
      this._completion.then(() => {
        this.active = false;
        this.on.complete.fire();
      }, (e) => {
        var wasActive = this.active;
        this.active = false;
        this.on.error.fire(e);
        this.parent ? this.parent._reject(e) : wasActive && this.idbtrans && this.idbtrans.abort();
        return rejection(e);
      });
    });
  }
  function createIndexSpec(name, keyPath, unique, multi, auto, compound, isPrimKey) {
    return {
      name,
      keyPath,
      unique,
      multi,
      auto,
      compound,
      src: (unique && !isPrimKey ? "&" : "") + (multi ? "*" : "") + (auto ? "++" : "") + nameFromKeyPath(keyPath)
    };
  }
  function nameFromKeyPath(keyPath) {
    return typeof keyPath === "string" ? keyPath : keyPath ? "[" + [].join.call(keyPath, "+") + "]" : "";
  }
  function createTableSchema(name, primKey, indexes) {
    return {
      name,
      primKey,
      indexes,
      mappedClass: null,
      idxByName: arrayToObject(indexes, (index) => [index.name, index])
    };
  }
  function safariMultiStoreFix(storeNames) {
    return storeNames.length === 1 ? storeNames[0] : storeNames;
  }
  function getKeyExtractor(keyPath) {
    if (keyPath == null) {
      return () => void 0;
    } else if (typeof keyPath === "string") {
      return getSinglePathKeyExtractor(keyPath);
    } else {
      return (obj) => getByKeyPath(obj, keyPath);
    }
  }
  function getSinglePathKeyExtractor(keyPath) {
    const split = keyPath.split(".");
    if (split.length === 1) {
      return (obj) => obj[keyPath];
    } else {
      return (obj) => getByKeyPath(obj, keyPath);
    }
  }
  function arrayify(arrayLike) {
    return [].slice.call(arrayLike);
  }
  function getKeyPathAlias(keyPath) {
    return keyPath == null ? ":id" : typeof keyPath === "string" ? keyPath : `[${keyPath.join("+")}]`;
  }
  function createDBCore(db2, IdbKeyRange, tmpTrans) {
    function extractSchema(db3, trans) {
      const tables2 = arrayify(db3.objectStoreNames);
      return {
        schema: {
          name: db3.name,
          tables: tables2.map((table) => trans.objectStore(table)).map((store) => {
            const { keyPath, autoIncrement } = store;
            const compound = isArray(keyPath);
            const outbound = keyPath == null;
            const indexByKeyPath = {};
            const result = {
              name: store.name,
              primaryKey: {
                name: null,
                isPrimaryKey: true,
                outbound,
                compound,
                keyPath,
                autoIncrement,
                unique: true,
                extractKey: getKeyExtractor(keyPath)
              },
              indexes: arrayify(store.indexNames).map((indexName) => store.index(indexName)).map((index) => {
                const { name, unique, multiEntry, keyPath: keyPath2 } = index;
                const compound2 = isArray(keyPath2);
                const result2 = {
                  name,
                  compound: compound2,
                  keyPath: keyPath2,
                  unique,
                  multiEntry,
                  extractKey: getKeyExtractor(keyPath2)
                };
                indexByKeyPath[getKeyPathAlias(keyPath2)] = result2;
                return result2;
              }),
              getIndexByKeyPath: (keyPath2) => indexByKeyPath[getKeyPathAlias(keyPath2)]
            };
            indexByKeyPath[":id"] = result.primaryKey;
            if (keyPath != null) {
              indexByKeyPath[getKeyPathAlias(keyPath)] = result.primaryKey;
            }
            return result;
          })
        },
        hasGetAll: tables2.length > 0 && "getAll" in trans.objectStore(tables2[0]) && !(typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
      };
    }
    function makeIDBKeyRange(range) {
      if (range.type === 3)
        return null;
      if (range.type === 4)
        throw new Error("Cannot convert never type to IDBKeyRange");
      const { lower, upper, lowerOpen, upperOpen } = range;
      const idbRange = lower === void 0 ? upper === void 0 ? null : IdbKeyRange.upperBound(upper, !!upperOpen) : upper === void 0 ? IdbKeyRange.lowerBound(lower, !!lowerOpen) : IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
      return idbRange;
    }
    function createDbCoreTable(tableSchema) {
      const tableName = tableSchema.name;
      function mutate({ trans, type: type2, keys: keys2, values: values2, range }) {
        return new Promise((resolve, reject) => {
          resolve = wrap(resolve);
          const store = trans.objectStore(tableName);
          const outbound = store.keyPath == null;
          const isAddOrPut = type2 === "put" || type2 === "add";
          if (!isAddOrPut && type2 !== "delete" && type2 !== "deleteRange")
            throw new Error("Invalid operation type: " + type2);
          const { length } = keys2 || values2 || { length: 1 };
          if (keys2 && values2 && keys2.length !== values2.length) {
            throw new Error("Given keys array must have same length as given values array.");
          }
          if (length === 0)
            return resolve({ numFailures: 0, failures: {}, results: [], lastResult: void 0 });
          let req;
          const reqs = [];
          const failures = [];
          let numFailures = 0;
          const errorHandler = (event) => {
            ++numFailures;
            preventDefault(event);
          };
          if (type2 === "deleteRange") {
            if (range.type === 4)
              return resolve({ numFailures, failures, results: [], lastResult: void 0 });
            if (range.type === 3)
              reqs.push(req = store.clear());
            else
              reqs.push(req = store.delete(makeIDBKeyRange(range)));
          } else {
            const [args1, args2] = isAddOrPut ? outbound ? [values2, keys2] : [values2, null] : [keys2, null];
            if (isAddOrPut) {
              for (let i = 0; i < length; ++i) {
                reqs.push(req = args2 && args2[i] !== void 0 ? store[type2](args1[i], args2[i]) : store[type2](args1[i]));
                req.onerror = errorHandler;
              }
            } else {
              for (let i = 0; i < length; ++i) {
                reqs.push(req = store[type2](args1[i]));
                req.onerror = errorHandler;
              }
            }
          }
          const done = (event) => {
            const lastResult = event.target.result;
            reqs.forEach((req2, i) => req2.error != null && (failures[i] = req2.error));
            resolve({
              numFailures,
              failures,
              results: type2 === "delete" ? keys2 : reqs.map((req2) => req2.result),
              lastResult
            });
          };
          req.onerror = (event) => {
            errorHandler(event);
            done(event);
          };
          req.onsuccess = done;
        });
      }
      function openCursor2({ trans, values: values2, query: query2, reverse, unique }) {
        return new Promise((resolve, reject) => {
          resolve = wrap(resolve);
          const { index, range } = query2;
          const store = trans.objectStore(tableName);
          const source = index.isPrimaryKey ? store : store.index(index.name);
          const direction = reverse ? unique ? "prevunique" : "prev" : unique ? "nextunique" : "next";
          const req = values2 || !("openKeyCursor" in source) ? source.openCursor(makeIDBKeyRange(range), direction) : source.openKeyCursor(makeIDBKeyRange(range), direction);
          req.onerror = eventRejectHandler(reject);
          req.onsuccess = wrap((ev) => {
            const cursor = req.result;
            if (!cursor) {
              resolve(null);
              return;
            }
            cursor.___id = ++_id_counter;
            cursor.done = false;
            const _cursorContinue = cursor.continue.bind(cursor);
            let _cursorContinuePrimaryKey = cursor.continuePrimaryKey;
            if (_cursorContinuePrimaryKey)
              _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);
            const _cursorAdvance = cursor.advance.bind(cursor);
            const doThrowCursorIsNotStarted = () => {
              throw new Error("Cursor not started");
            };
            const doThrowCursorIsStopped = () => {
              throw new Error("Cursor not stopped");
            };
            cursor.trans = trans;
            cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;
            cursor.fail = wrap(reject);
            cursor.next = function() {
              let gotOne = 1;
              return this.start(() => gotOne-- ? this.continue() : this.stop()).then(() => this);
            };
            cursor.start = (callback) => {
              const iterationPromise = new Promise((resolveIteration, rejectIteration) => {
                resolveIteration = wrap(resolveIteration);
                req.onerror = eventRejectHandler(rejectIteration);
                cursor.fail = rejectIteration;
                cursor.stop = (value) => {
                  cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;
                  resolveIteration(value);
                };
              });
              const guardedCallback = () => {
                if (req.result) {
                  try {
                    callback();
                  } catch (err) {
                    cursor.fail(err);
                  }
                } else {
                  cursor.done = true;
                  cursor.start = () => {
                    throw new Error("Cursor behind last entry");
                  };
                  cursor.stop();
                }
              };
              req.onsuccess = wrap((ev2) => {
                req.onsuccess = guardedCallback;
                guardedCallback();
              });
              cursor.continue = _cursorContinue;
              cursor.continuePrimaryKey = _cursorContinuePrimaryKey;
              cursor.advance = _cursorAdvance;
              guardedCallback();
              return iterationPromise;
            };
            resolve(cursor);
          }, reject);
        });
      }
      function query(hasGetAll2) {
        return (request) => {
          return new Promise((resolve, reject) => {
            resolve = wrap(resolve);
            const { trans, values: values2, limit, query: query2 } = request;
            const nonInfinitLimit = limit === Infinity ? void 0 : limit;
            const { index, range } = query2;
            const store = trans.objectStore(tableName);
            const source = index.isPrimaryKey ? store : store.index(index.name);
            const idbKeyRange = makeIDBKeyRange(range);
            if (limit === 0)
              return resolve({ result: [] });
            if (hasGetAll2) {
              const req = values2 ? source.getAll(idbKeyRange, nonInfinitLimit) : source.getAllKeys(idbKeyRange, nonInfinitLimit);
              req.onsuccess = (event) => resolve({ result: event.target.result });
              req.onerror = eventRejectHandler(reject);
            } else {
              let count = 0;
              const req = values2 || !("openKeyCursor" in source) ? source.openCursor(idbKeyRange) : source.openKeyCursor(idbKeyRange);
              const result = [];
              req.onsuccess = (event) => {
                const cursor = req.result;
                if (!cursor)
                  return resolve({ result });
                result.push(values2 ? cursor.value : cursor.primaryKey);
                if (++count === limit)
                  return resolve({ result });
                cursor.continue();
              };
              req.onerror = eventRejectHandler(reject);
            }
          });
        };
      }
      return {
        name: tableName,
        schema: tableSchema,
        mutate,
        getMany({ trans, keys: keys2 }) {
          return new Promise((resolve, reject) => {
            resolve = wrap(resolve);
            const store = trans.objectStore(tableName);
            const length = keys2.length;
            const result = new Array(length);
            let keyCount = 0;
            let callbackCount = 0;
            let req;
            const successHandler = (event) => {
              const req2 = event.target;
              if ((result[req2._pos] = req2.result) != null)
                ;
              if (++callbackCount === keyCount)
                resolve(result);
            };
            const errorHandler = eventRejectHandler(reject);
            for (let i = 0; i < length; ++i) {
              const key = keys2[i];
              if (key != null) {
                req = store.get(keys2[i]);
                req._pos = i;
                req.onsuccess = successHandler;
                req.onerror = errorHandler;
                ++keyCount;
              }
            }
            if (keyCount === 0)
              resolve(result);
          });
        },
        get({ trans, key }) {
          return new Promise((resolve, reject) => {
            resolve = wrap(resolve);
            const store = trans.objectStore(tableName);
            const req = store.get(key);
            req.onsuccess = (event) => resolve(event.target.result);
            req.onerror = eventRejectHandler(reject);
          });
        },
        query: query(hasGetAll),
        openCursor: openCursor2,
        count({ query: query2, trans }) {
          const { index, range } = query2;
          return new Promise((resolve, reject) => {
            const store = trans.objectStore(tableName);
            const source = index.isPrimaryKey ? store : store.index(index.name);
            const idbKeyRange = makeIDBKeyRange(range);
            const req = idbKeyRange ? source.count(idbKeyRange) : source.count();
            req.onsuccess = wrap((ev) => resolve(ev.target.result));
            req.onerror = eventRejectHandler(reject);
          });
        }
      };
    }
    const { schema, hasGetAll } = extractSchema(db2, tmpTrans);
    const tables = schema.tables.map((tableSchema) => createDbCoreTable(tableSchema));
    const tableMap = {};
    tables.forEach((table) => tableMap[table.name] = table);
    return {
      stack: "dbcore",
      transaction: db2.transaction.bind(db2),
      table(name) {
        const result = tableMap[name];
        if (!result)
          throw new Error(`Table '${name}' not found`);
        return tableMap[name];
      },
      MIN_KEY: -Infinity,
      MAX_KEY: getMaxKey(IdbKeyRange),
      schema
    };
  }
  function createMiddlewareStack(stackImpl, middlewares) {
    return middlewares.reduce((down, { create }) => ({ ...down, ...create(down) }), stackImpl);
  }
  function createMiddlewareStacks(middlewares, idbdb, { IDBKeyRange, indexedDB: indexedDB2 }, tmpTrans) {
    const dbcore = createMiddlewareStack(createDBCore(idbdb, IDBKeyRange, tmpTrans), middlewares.dbcore);
    return {
      dbcore
    };
  }
  function generateMiddlewareStacks({ _novip: db2 }, tmpTrans) {
    const idbdb = tmpTrans.db;
    const stacks = createMiddlewareStacks(db2._middlewares, idbdb, db2._deps, tmpTrans);
    db2.core = stacks.dbcore;
    db2.tables.forEach((table) => {
      const tableName = table.name;
      if (db2.core.schema.tables.some((tbl) => tbl.name === tableName)) {
        table.core = db2.core.table(tableName);
        if (db2[tableName] instanceof db2.Table) {
          db2[tableName].core = table.core;
        }
      }
    });
  }
  function setApiOnPlace({ _novip: db2 }, objs, tableNames, dbschema) {
    tableNames.forEach((tableName) => {
      const schema = dbschema[tableName];
      objs.forEach((obj) => {
        const propDesc = getPropertyDescriptor(obj, tableName);
        if (!propDesc || "value" in propDesc && propDesc.value === void 0) {
          if (obj === db2.Transaction.prototype || obj instanceof db2.Transaction) {
            setProp(obj, tableName, {
              get() {
                return this.table(tableName);
              },
              set(value) {
                defineProperty(this, tableName, { value, writable: true, configurable: true, enumerable: true });
              }
            });
          } else {
            obj[tableName] = new db2.Table(tableName, schema);
          }
        }
      });
    });
  }
  function removeTablesApi({ _novip: db2 }, objs) {
    objs.forEach((obj) => {
      for (let key in obj) {
        if (obj[key] instanceof db2.Table)
          delete obj[key];
      }
    });
  }
  function lowerVersionFirst(a, b) {
    return a._cfg.version - b._cfg.version;
  }
  function runUpgraders(db2, oldVersion, idbUpgradeTrans, reject) {
    const globalSchema = db2._dbSchema;
    const trans = db2._createTransaction("readwrite", db2._storeNames, globalSchema);
    trans.create(idbUpgradeTrans);
    trans._completion.catch(reject);
    const rejectTransaction = trans._reject.bind(trans);
    const transless = PSD.transless || PSD;
    newScope(() => {
      PSD.trans = trans;
      PSD.transless = transless;
      if (oldVersion === 0) {
        keys(globalSchema).forEach((tableName) => {
          createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
        });
        generateMiddlewareStacks(db2, idbUpgradeTrans);
        DexiePromise.follow(() => db2.on.populate.fire(trans)).catch(rejectTransaction);
      } else
        updateTablesAndIndexes(db2, oldVersion, trans, idbUpgradeTrans).catch(rejectTransaction);
    });
  }
  function updateTablesAndIndexes({ _novip: db2 }, oldVersion, trans, idbUpgradeTrans) {
    const queue = [];
    const versions = db2._versions;
    let globalSchema = db2._dbSchema = buildGlobalSchema(db2, db2.idbdb, idbUpgradeTrans);
    let anyContentUpgraderHasRun = false;
    const versToRun = versions.filter((v) => v._cfg.version >= oldVersion);
    versToRun.forEach((version) => {
      queue.push(() => {
        const oldSchema = globalSchema;
        const newSchema = version._cfg.dbschema;
        adjustToExistingIndexNames(db2, oldSchema, idbUpgradeTrans);
        adjustToExistingIndexNames(db2, newSchema, idbUpgradeTrans);
        globalSchema = db2._dbSchema = newSchema;
        const diff = getSchemaDiff(oldSchema, newSchema);
        diff.add.forEach((tuple) => {
          createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
        });
        diff.change.forEach((change) => {
          if (change.recreate) {
            throw new exceptions.Upgrade("Not yet support for changing primary key");
          } else {
            const store = idbUpgradeTrans.objectStore(change.name);
            change.add.forEach((idx) => addIndex(store, idx));
            change.change.forEach((idx) => {
              store.deleteIndex(idx.name);
              addIndex(store, idx);
            });
            change.del.forEach((idxName) => store.deleteIndex(idxName));
          }
        });
        const contentUpgrade = version._cfg.contentUpgrade;
        if (contentUpgrade && version._cfg.version > oldVersion) {
          generateMiddlewareStacks(db2, idbUpgradeTrans);
          trans._memoizedTables = {};
          anyContentUpgraderHasRun = true;
          let upgradeSchema = shallowClone(newSchema);
          diff.del.forEach((table) => {
            upgradeSchema[table] = oldSchema[table];
          });
          removeTablesApi(db2, [db2.Transaction.prototype]);
          setApiOnPlace(db2, [db2.Transaction.prototype], keys(upgradeSchema), upgradeSchema);
          trans.schema = upgradeSchema;
          const contentUpgradeIsAsync = isAsyncFunction(contentUpgrade);
          if (contentUpgradeIsAsync) {
            incrementExpectedAwaits();
          }
          let returnValue;
          const promiseFollowed = DexiePromise.follow(() => {
            returnValue = contentUpgrade(trans);
            if (returnValue) {
              if (contentUpgradeIsAsync) {
                var decrementor = decrementExpectedAwaits.bind(null, null);
                returnValue.then(decrementor, decrementor);
              }
            }
          });
          return returnValue && typeof returnValue.then === "function" ? DexiePromise.resolve(returnValue) : promiseFollowed.then(() => returnValue);
        }
      });
      queue.push((idbtrans) => {
        if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
          const newSchema = version._cfg.dbschema;
          deleteRemovedTables(newSchema, idbtrans);
        }
        removeTablesApi(db2, [db2.Transaction.prototype]);
        setApiOnPlace(db2, [db2.Transaction.prototype], db2._storeNames, db2._dbSchema);
        trans.schema = db2._dbSchema;
      });
    });
    function runQueue() {
      return queue.length ? DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : DexiePromise.resolve();
    }
    return runQueue().then(() => {
      createMissingTables(globalSchema, idbUpgradeTrans);
    });
  }
  function getSchemaDiff(oldSchema, newSchema) {
    const diff = {
      del: [],
      add: [],
      change: []
    };
    let table;
    for (table in oldSchema) {
      if (!newSchema[table])
        diff.del.push(table);
    }
    for (table in newSchema) {
      const oldDef = oldSchema[table], newDef = newSchema[table];
      if (!oldDef) {
        diff.add.push([table, newDef]);
      } else {
        const change = {
          name: table,
          def: newDef,
          recreate: false,
          del: [],
          add: [],
          change: []
        };
        if ("" + (oldDef.primKey.keyPath || "") !== "" + (newDef.primKey.keyPath || "") || oldDef.primKey.auto !== newDef.primKey.auto && !isIEOrEdge) {
          change.recreate = true;
          diff.change.push(change);
        } else {
          const oldIndexes = oldDef.idxByName;
          const newIndexes = newDef.idxByName;
          let idxName;
          for (idxName in oldIndexes) {
            if (!newIndexes[idxName])
              change.del.push(idxName);
          }
          for (idxName in newIndexes) {
            const oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
            if (!oldIdx)
              change.add.push(newIdx);
            else if (oldIdx.src !== newIdx.src)
              change.change.push(newIdx);
          }
          if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
            diff.change.push(change);
          }
        }
      }
    }
    return diff;
  }
  function createTable(idbtrans, tableName, primKey, indexes) {
    const store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? { keyPath: primKey.keyPath, autoIncrement: primKey.auto } : { autoIncrement: primKey.auto });
    indexes.forEach((idx) => addIndex(store, idx));
    return store;
  }
  function createMissingTables(newSchema, idbtrans) {
    keys(newSchema).forEach((tableName) => {
      if (!idbtrans.db.objectStoreNames.contains(tableName)) {
        createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
      }
    });
  }
  function deleteRemovedTables(newSchema, idbtrans) {
    [].slice.call(idbtrans.db.objectStoreNames).forEach((storeName) => newSchema[storeName] == null && idbtrans.db.deleteObjectStore(storeName));
  }
  function addIndex(store, idx) {
    store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
  }
  function buildGlobalSchema(db2, idbdb, tmpTrans) {
    const globalSchema = {};
    const dbStoreNames = slice(idbdb.objectStoreNames, 0);
    dbStoreNames.forEach((storeName) => {
      const store = tmpTrans.objectStore(storeName);
      let keyPath = store.keyPath;
      const primKey = createIndexSpec(nameFromKeyPath(keyPath), keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== "string", true);
      const indexes = [];
      for (let j = 0; j < store.indexNames.length; ++j) {
        const idbindex = store.index(store.indexNames[j]);
        keyPath = idbindex.keyPath;
        var index = createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
        indexes.push(index);
      }
      globalSchema[storeName] = createTableSchema(storeName, primKey, indexes);
    });
    return globalSchema;
  }
  function readGlobalSchema({ _novip: db2 }, idbdb, tmpTrans) {
    db2.verno = idbdb.version / 10;
    const globalSchema = db2._dbSchema = buildGlobalSchema(db2, idbdb, tmpTrans);
    db2._storeNames = slice(idbdb.objectStoreNames, 0);
    setApiOnPlace(db2, [db2._allTables], keys(globalSchema), globalSchema);
  }
  function verifyInstalledSchema(db2, tmpTrans) {
    const installedSchema = buildGlobalSchema(db2, db2.idbdb, tmpTrans);
    const diff = getSchemaDiff(installedSchema, db2._dbSchema);
    return !(diff.add.length || diff.change.some((ch) => ch.add.length || ch.change.length));
  }
  function adjustToExistingIndexNames({ _novip: db2 }, schema, idbtrans) {
    const storeNames = idbtrans.db.objectStoreNames;
    for (let i = 0; i < storeNames.length; ++i) {
      const storeName = storeNames[i];
      const store = idbtrans.objectStore(storeName);
      db2._hasGetAll = "getAll" in store;
      for (let j = 0; j < store.indexNames.length; ++j) {
        const indexName = store.indexNames[j];
        const keyPath = store.index(indexName).keyPath;
        const dexieName = typeof keyPath === "string" ? keyPath : "[" + slice(keyPath).join("+") + "]";
        if (schema[storeName]) {
          const indexSpec = schema[storeName].idxByName[dexieName];
          if (indexSpec) {
            indexSpec.name = indexName;
            delete schema[storeName].idxByName[dexieName];
            schema[storeName].idxByName[indexName] = indexSpec;
          }
        }
      }
    }
    if (typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
      db2._hasGetAll = false;
    }
  }
  function parseIndexSyntax(primKeyAndIndexes) {
    return primKeyAndIndexes.split(",").map((index, indexNum) => {
      index = index.trim();
      const name = index.replace(/([&*]|\+\+)/g, "");
      const keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split("+") : name;
      return createIndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray(keyPath), indexNum === 0);
    });
  }
  function createVersionConstructor(db2) {
    return makeClassConstructor(Version.prototype, function Version2(versionNumber) {
      this.db = db2;
      this._cfg = {
        version: versionNumber,
        storesSource: null,
        dbschema: {},
        tables: {},
        contentUpgrade: null
      };
    });
  }
  function getDbNamesTable(indexedDB2, IDBKeyRange) {
    let dbNamesDB = indexedDB2["_dbNamesDB"];
    if (!dbNamesDB) {
      dbNamesDB = indexedDB2["_dbNamesDB"] = new Dexie$1(DBNAMES_DB, {
        addons: [],
        indexedDB: indexedDB2,
        IDBKeyRange
      });
      dbNamesDB.version(1).stores({ dbnames: "name" });
    }
    return dbNamesDB.table("dbnames");
  }
  function hasDatabasesNative(indexedDB2) {
    return indexedDB2 && typeof indexedDB2.databases === "function";
  }
  function getDatabaseNames({ indexedDB: indexedDB2, IDBKeyRange }) {
    return hasDatabasesNative(indexedDB2) ? Promise.resolve(indexedDB2.databases()).then((infos) => infos.map((info) => info.name).filter((name) => name !== DBNAMES_DB)) : getDbNamesTable(indexedDB2, IDBKeyRange).toCollection().primaryKeys();
  }
  function _onDatabaseCreated({ indexedDB: indexedDB2, IDBKeyRange }, name) {
    !hasDatabasesNative(indexedDB2) && name !== DBNAMES_DB && getDbNamesTable(indexedDB2, IDBKeyRange).put({ name }).catch(nop);
  }
  function _onDatabaseDeleted({ indexedDB: indexedDB2, IDBKeyRange }, name) {
    !hasDatabasesNative(indexedDB2) && name !== DBNAMES_DB && getDbNamesTable(indexedDB2, IDBKeyRange).delete(name).catch(nop);
  }
  function vip(fn) {
    return newScope(function() {
      PSD.letThrough = true;
      return fn();
    });
  }
  function idbReady() {
    var isSafari = !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent);
    if (!isSafari || !indexedDB.databases)
      return Promise.resolve();
    var intervalId;
    return new Promise(function(resolve) {
      var tryIdb = function() {
        return indexedDB.databases().finally(resolve);
      };
      intervalId = setInterval(tryIdb, 100);
      tryIdb();
    }).finally(function() {
      return clearInterval(intervalId);
    });
  }
  function dexieOpen(db2) {
    const state = db2._state;
    const { indexedDB: indexedDB2 } = db2._deps;
    if (state.isBeingOpened || db2.idbdb)
      return state.dbReadyPromise.then(() => state.dbOpenError ? rejection(state.dbOpenError) : db2);
    debug && (state.openCanceller._stackHolder = getErrorWithStack());
    state.isBeingOpened = true;
    state.dbOpenError = null;
    state.openComplete = false;
    const openCanceller = state.openCanceller;
    function throwIfCancelled() {
      if (state.openCanceller !== openCanceller)
        throw new exceptions.DatabaseClosed("db.open() was cancelled");
    }
    let resolveDbReady = state.dbReadyResolve, upgradeTransaction = null, wasCreated = false;
    return DexiePromise.race([openCanceller, (typeof navigator === "undefined" ? DexiePromise.resolve() : idbReady()).then(() => new DexiePromise((resolve, reject) => {
      throwIfCancelled();
      if (!indexedDB2)
        throw new exceptions.MissingAPI();
      const dbName = db2.name;
      const req = state.autoSchema ? indexedDB2.open(dbName) : indexedDB2.open(dbName, Math.round(db2.verno * 10));
      if (!req)
        throw new exceptions.MissingAPI();
      req.onerror = eventRejectHandler(reject);
      req.onblocked = wrap(db2._fireOnBlocked);
      req.onupgradeneeded = wrap((e) => {
        upgradeTransaction = req.transaction;
        if (state.autoSchema && !db2._options.allowEmptyDB) {
          req.onerror = preventDefault;
          upgradeTransaction.abort();
          req.result.close();
          const delreq = indexedDB2.deleteDatabase(dbName);
          delreq.onsuccess = delreq.onerror = wrap(() => {
            reject(new exceptions.NoSuchDatabase(`Database ${dbName} doesnt exist`));
          });
        } else {
          upgradeTransaction.onerror = eventRejectHandler(reject);
          var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
          wasCreated = oldVer < 1;
          db2._novip.idbdb = req.result;
          runUpgraders(db2, oldVer / 10, upgradeTransaction, reject);
        }
      }, reject);
      req.onsuccess = wrap(() => {
        upgradeTransaction = null;
        const idbdb = db2._novip.idbdb = req.result;
        const objectStoreNames = slice(idbdb.objectStoreNames);
        if (objectStoreNames.length > 0)
          try {
            const tmpTrans = idbdb.transaction(safariMultiStoreFix(objectStoreNames), "readonly");
            if (state.autoSchema)
              readGlobalSchema(db2, idbdb, tmpTrans);
            else {
              adjustToExistingIndexNames(db2, db2._dbSchema, tmpTrans);
              if (!verifyInstalledSchema(db2, tmpTrans)) {
                console.warn(`Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.`);
              }
            }
            generateMiddlewareStacks(db2, tmpTrans);
          } catch (e) {
          }
        connections.push(db2);
        idbdb.onversionchange = wrap((ev) => {
          state.vcFired = true;
          db2.on("versionchange").fire(ev);
        });
        idbdb.onclose = wrap((ev) => {
          db2.on("close").fire(ev);
        });
        if (wasCreated)
          _onDatabaseCreated(db2._deps, dbName);
        resolve();
      }, reject);
    }))]).then(() => {
      throwIfCancelled();
      state.onReadyBeingFired = [];
      return DexiePromise.resolve(vip(() => db2.on.ready.fire(db2.vip))).then(function fireRemainders() {
        if (state.onReadyBeingFired.length > 0) {
          let remainders = state.onReadyBeingFired.reduce(promisableChain, nop);
          state.onReadyBeingFired = [];
          return DexiePromise.resolve(vip(() => remainders(db2.vip))).then(fireRemainders);
        }
      });
    }).finally(() => {
      state.onReadyBeingFired = null;
      state.isBeingOpened = false;
    }).then(() => {
      return db2;
    }).catch((err) => {
      state.dbOpenError = err;
      try {
        upgradeTransaction && upgradeTransaction.abort();
      } catch (_a) {
      }
      if (openCanceller === state.openCanceller) {
        db2._close();
      }
      return rejection(err);
    }).finally(() => {
      state.openComplete = true;
      resolveDbReady();
    });
  }
  function awaitIterator(iterator) {
    var callNext = (result) => iterator.next(result), doThrow = (error) => iterator.throw(error), onSuccess = step(callNext), onError = step(doThrow);
    function step(getNext) {
      return (val) => {
        var next = getNext(val), value = next.value;
        return next.done ? value : !value || typeof value.then !== "function" ? isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
      };
    }
    return step(callNext)();
  }
  function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
    var i = arguments.length;
    if (i < 2)
      throw new exceptions.InvalidArgument("Too few arguments");
    var args = new Array(i - 1);
    while (--i)
      args[i - 1] = arguments[i];
    scopeFunc = args.pop();
    var tables = flatten(args);
    return [mode, tables, scopeFunc];
  }
  function enterTransactionScope(db2, mode, storeNames, parentTransaction, scopeFunc) {
    return DexiePromise.resolve().then(() => {
      const transless = PSD.transless || PSD;
      const trans = db2._createTransaction(mode, storeNames, db2._dbSchema, parentTransaction);
      const zoneProps = {
        trans,
        transless
      };
      if (parentTransaction) {
        trans.idbtrans = parentTransaction.idbtrans;
      } else {
        try {
          trans.create();
          db2._state.PR1398_maxLoop = 3;
        } catch (ex) {
          if (ex.name === errnames.InvalidState && db2.isOpen() && --db2._state.PR1398_maxLoop > 0) {
            console.warn("Dexie: Need to reopen db");
            db2._close();
            return db2.open().then(() => enterTransactionScope(db2, mode, storeNames, null, scopeFunc));
          }
          return rejection(ex);
        }
      }
      const scopeFuncIsAsync = isAsyncFunction(scopeFunc);
      if (scopeFuncIsAsync) {
        incrementExpectedAwaits();
      }
      let returnValue;
      const promiseFollowed = DexiePromise.follow(() => {
        returnValue = scopeFunc.call(trans, trans);
        if (returnValue) {
          if (scopeFuncIsAsync) {
            var decrementor = decrementExpectedAwaits.bind(null, null);
            returnValue.then(decrementor, decrementor);
          } else if (typeof returnValue.next === "function" && typeof returnValue.throw === "function") {
            returnValue = awaitIterator(returnValue);
          }
        }
      }, zoneProps);
      return (returnValue && typeof returnValue.then === "function" ? DexiePromise.resolve(returnValue).then((x) => trans.active ? x : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"))) : promiseFollowed.then(() => returnValue)).then((x) => {
        if (parentTransaction)
          trans._resolve();
        return trans._completion.then(() => x);
      }).catch((e) => {
        trans._reject(e);
        return rejection(e);
      });
    });
  }
  function pad(a, value, count) {
    const result = isArray(a) ? a.slice() : [a];
    for (let i = 0; i < count; ++i)
      result.push(value);
    return result;
  }
  function createVirtualIndexMiddleware(down) {
    return {
      ...down,
      table(tableName) {
        const table = down.table(tableName);
        const { schema } = table;
        const indexLookup = {};
        const allVirtualIndexes = [];
        function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
          const keyPathAlias = getKeyPathAlias(keyPath);
          const indexList = indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || [];
          const keyLength = keyPath == null ? 0 : typeof keyPath === "string" ? 1 : keyPath.length;
          const isVirtual = keyTail > 0;
          const virtualIndex = {
            ...lowLevelIndex,
            isVirtual,
            keyTail,
            keyLength,
            extractKey: getKeyExtractor(keyPath),
            unique: !isVirtual && lowLevelIndex.unique
          };
          indexList.push(virtualIndex);
          if (!virtualIndex.isPrimaryKey) {
            allVirtualIndexes.push(virtualIndex);
          }
          if (keyLength > 1) {
            const virtualKeyPath = keyLength === 2 ? keyPath[0] : keyPath.slice(0, keyLength - 1);
            addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
          }
          indexList.sort((a, b) => a.keyTail - b.keyTail);
          return virtualIndex;
        }
        const primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
        indexLookup[":id"] = [primaryKey];
        for (const index of schema.indexes) {
          addVirtualIndexes(index.keyPath, 0, index);
        }
        function findBestIndex(keyPath) {
          const result2 = indexLookup[getKeyPathAlias(keyPath)];
          return result2 && result2[0];
        }
        function translateRange(range, keyTail) {
          return {
            type: range.type === 1 ? 2 : range.type,
            lower: pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
            lowerOpen: true,
            upper: pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
            upperOpen: true
          };
        }
        function translateRequest(req) {
          const index = req.query.index;
          return index.isVirtual ? {
            ...req,
            query: {
              index,
              range: translateRange(req.query.range, index.keyTail)
            }
          } : req;
        }
        const result = {
          ...table,
          schema: {
            ...schema,
            primaryKey,
            indexes: allVirtualIndexes,
            getIndexByKeyPath: findBestIndex
          },
          count(req) {
            return table.count(translateRequest(req));
          },
          query(req) {
            return table.query(translateRequest(req));
          },
          openCursor(req) {
            const { keyTail, isVirtual, keyLength } = req.query.index;
            if (!isVirtual)
              return table.openCursor(req);
            function createVirtualCursor(cursor) {
              function _continue(key) {
                key != null ? cursor.continue(pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) : req.unique ? cursor.continue(cursor.key.slice(0, keyLength).concat(req.reverse ? down.MIN_KEY : down.MAX_KEY, keyTail)) : cursor.continue();
              }
              const virtualCursor = Object.create(cursor, {
                continue: { value: _continue },
                continuePrimaryKey: {
                  value(key, primaryKey2) {
                    cursor.continuePrimaryKey(pad(key, down.MAX_KEY, keyTail), primaryKey2);
                  }
                },
                primaryKey: {
                  get() {
                    return cursor.primaryKey;
                  }
                },
                key: {
                  get() {
                    const key = cursor.key;
                    return keyLength === 1 ? key[0] : key.slice(0, keyLength);
                  }
                },
                value: {
                  get() {
                    return cursor.value;
                  }
                }
              });
              return virtualCursor;
            }
            return table.openCursor(translateRequest(req)).then((cursor) => cursor && createVirtualCursor(cursor));
          }
        };
        return result;
      }
    };
  }
  function getObjectDiff(a, b, rv, prfx) {
    rv = rv || {};
    prfx = prfx || "";
    keys(a).forEach((prop) => {
      if (!hasOwn(b, prop)) {
        rv[prfx + prop] = void 0;
      } else {
        var ap = a[prop], bp = b[prop];
        if (typeof ap === "object" && typeof bp === "object" && ap && bp) {
          const apTypeName = toStringTag(ap);
          const bpTypeName = toStringTag(bp);
          if (apTypeName !== bpTypeName) {
            rv[prfx + prop] = b[prop];
          } else if (apTypeName === "Object") {
            getObjectDiff(ap, bp, rv, prfx + prop + ".");
          } else if (ap !== bp) {
            rv[prfx + prop] = b[prop];
          }
        } else if (ap !== bp)
          rv[prfx + prop] = b[prop];
      }
    });
    keys(b).forEach((prop) => {
      if (!hasOwn(a, prop)) {
        rv[prfx + prop] = b[prop];
      }
    });
    return rv;
  }
  function getEffectiveKeys(primaryKey, req) {
    if (req.type === "delete")
      return req.keys;
    return req.keys || req.values.map(primaryKey.extractKey);
  }
  function getExistingValues(table, req, effectiveKeys) {
    return req.type === "add" ? Promise.resolve([]) : table.getMany({ trans: req.trans, keys: effectiveKeys, cache: "immutable" });
  }
  function getFromTransactionCache(keys2, cache, clone) {
    try {
      if (!cache)
        return null;
      if (cache.keys.length < keys2.length)
        return null;
      const result = [];
      for (let i = 0, j = 0; i < cache.keys.length && j < keys2.length; ++i) {
        if (cmp(cache.keys[i], keys2[j]) !== 0)
          continue;
        result.push(clone ? deepClone(cache.values[i]) : cache.values[i]);
        ++j;
      }
      return result.length === keys2.length ? result : null;
    } catch (_a) {
      return null;
    }
  }
  function isEmptyRange(node) {
    return !("from" in node);
  }
  function addRange(target, from, to) {
    const diff = cmp(from, to);
    if (isNaN(diff))
      return;
    if (diff > 0)
      throw RangeError();
    if (isEmptyRange(target))
      return extend(target, { from, to, d: 1 });
    const left = target.l;
    const right = target.r;
    if (cmp(to, target.from) < 0) {
      left ? addRange(left, from, to) : target.l = { from, to, d: 1, l: null, r: null };
      return rebalance(target);
    }
    if (cmp(from, target.to) > 0) {
      right ? addRange(right, from, to) : target.r = { from, to, d: 1, l: null, r: null };
      return rebalance(target);
    }
    if (cmp(from, target.from) < 0) {
      target.from = from;
      target.l = null;
      target.d = right ? right.d + 1 : 1;
    }
    if (cmp(to, target.to) > 0) {
      target.to = to;
      target.r = null;
      target.d = target.l ? target.l.d + 1 : 1;
    }
    const rightWasCutOff = !target.r;
    if (left && !target.l) {
      mergeRanges(target, left);
    }
    if (right && rightWasCutOff) {
      mergeRanges(target, right);
    }
  }
  function mergeRanges(target, newSet) {
    function _addRangeSet(target2, { from, to, l, r }) {
      addRange(target2, from, to);
      if (l)
        _addRangeSet(target2, l);
      if (r)
        _addRangeSet(target2, r);
    }
    if (!isEmptyRange(newSet))
      _addRangeSet(target, newSet);
  }
  function rangesOverlap(rangeSet1, rangeSet2) {
    const i1 = getRangeSetIterator(rangeSet2);
    let nextResult1 = i1.next();
    if (nextResult1.done)
      return false;
    let a = nextResult1.value;
    const i2 = getRangeSetIterator(rangeSet1);
    let nextResult2 = i2.next(a.from);
    let b = nextResult2.value;
    while (!nextResult1.done && !nextResult2.done) {
      if (cmp(b.from, a.to) <= 0 && cmp(b.to, a.from) >= 0)
        return true;
      cmp(a.from, b.from) < 0 ? a = (nextResult1 = i1.next(b.from)).value : b = (nextResult2 = i2.next(a.from)).value;
    }
    return false;
  }
  function getRangeSetIterator(node) {
    let state = isEmptyRange(node) ? null : { s: 0, n: node };
    return {
      next(key) {
        const keyProvided = arguments.length > 0;
        while (state) {
          switch (state.s) {
            case 0:
              state.s = 1;
              if (keyProvided) {
                while (state.n.l && cmp(key, state.n.from) < 0)
                  state = { up: state, n: state.n.l, s: 1 };
              } else {
                while (state.n.l)
                  state = { up: state, n: state.n.l, s: 1 };
              }
            case 1:
              state.s = 2;
              if (!keyProvided || cmp(key, state.n.to) <= 0)
                return { value: state.n, done: false };
            case 2:
              if (state.n.r) {
                state.s = 3;
                state = { up: state, n: state.n.r, s: 0 };
                continue;
              }
            case 3:
              state = state.up;
          }
        }
        return { done: true };
      }
    };
  }
  function rebalance(target) {
    var _a, _b;
    const diff = (((_a = target.r) === null || _a === void 0 ? void 0 : _a.d) || 0) - (((_b = target.l) === null || _b === void 0 ? void 0 : _b.d) || 0);
    const r = diff > 1 ? "r" : diff < -1 ? "l" : "";
    if (r) {
      const l = r === "r" ? "l" : "r";
      const rootClone = { ...target };
      const oldRootRight = target[r];
      target.from = oldRootRight.from;
      target.to = oldRootRight.to;
      target[r] = oldRootRight[r];
      rootClone[r] = oldRootRight[l];
      target[l] = rootClone;
      rootClone.d = computeDepth(rootClone);
    }
    target.d = computeDepth(target);
  }
  function computeDepth({ r, l }) {
    return (r ? l ? Math.max(r.d, l.d) : r.d : l ? l.d : 0) + 1;
  }
  function trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs) {
    function addAffectedIndex(ix) {
      const rangeSet = getRangeSet(ix.name || "");
      function extractKey(obj) {
        return obj != null ? ix.extractKey(obj) : null;
      }
      const addKeyOrKeys = (key) => ix.multiEntry && isArray(key) ? key.forEach((key2) => rangeSet.addKey(key2)) : rangeSet.addKey(key);
      (oldObjs || newObjs).forEach((_3, i) => {
        const oldKey = oldObjs && extractKey(oldObjs[i]);
        const newKey = newObjs && extractKey(newObjs[i]);
        if (cmp(oldKey, newKey) !== 0) {
          if (oldKey != null)
            addKeyOrKeys(oldKey);
          if (newKey != null)
            addKeyOrKeys(newKey);
        }
      });
    }
    schema.indexes.forEach(addAffectedIndex);
  }
  function extendObservabilitySet(target, newSet) {
    keys(newSet).forEach((part) => {
      const rangeSet = target[part] || (target[part] = new RangeSet());
      mergeRanges(rangeSet, newSet[part]);
    });
    return target;
  }
  function liveQuery(querier) {
    return new Observable((observer) => {
      const scopeFuncIsAsync = isAsyncFunction(querier);
      function execute(subscr) {
        if (scopeFuncIsAsync) {
          incrementExpectedAwaits();
        }
        const exec = () => newScope(querier, { subscr, trans: null });
        const rv = PSD.trans ? usePSD(PSD.transless, exec) : exec();
        if (scopeFuncIsAsync) {
          rv.then(decrementExpectedAwaits, decrementExpectedAwaits);
        }
        return rv;
      }
      let closed = false;
      let accumMuts = {};
      let currentObs = {};
      const subscription = {
        get closed() {
          return closed;
        },
        unsubscribe: () => {
          closed = true;
          globalEvents.storagemutated.unsubscribe(mutationListener);
        }
      };
      observer.start && observer.start(subscription);
      let querying = false, startedListening = false;
      function shouldNotify() {
        return keys(currentObs).some((key) => accumMuts[key] && rangesOverlap(accumMuts[key], currentObs[key]));
      }
      const mutationListener = (parts) => {
        extendObservabilitySet(accumMuts, parts);
        if (shouldNotify()) {
          doQuery();
        }
      };
      const doQuery = () => {
        if (querying || closed)
          return;
        accumMuts = {};
        const subscr = {};
        const ret = execute(subscr);
        if (!startedListening) {
          globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, mutationListener);
          startedListening = true;
        }
        querying = true;
        Promise.resolve(ret).then((result) => {
          querying = false;
          if (closed)
            return;
          if (shouldNotify()) {
            doQuery();
          } else {
            accumMuts = {};
            currentObs = subscr;
            observer.next && observer.next(result);
          }
        }, (err) => {
          querying = false;
          observer.error && observer.error(err);
          subscription.unsubscribe();
        });
      };
      doQuery();
      return subscription;
    });
  }
  function propagateLocally(updateParts) {
    let wasMe = propagatingLocally;
    try {
      propagatingLocally = true;
      globalEvents.storagemutated.fire(updateParts);
    } finally {
      propagatingLocally = wasMe;
    }
  }
  function propagateMessageLocally({ data }) {
    if (data && data.type === STORAGE_MUTATED_DOM_EVENT_NAME) {
      propagateLocally(data.changedParts);
    }
  }
  var _global, keys, isArray, getProto, _hasOwn, defineProperty, getOwnPropertyDescriptor, _slice, concat, intrinsicTypeNames, intrinsicTypes, circularRefs, toString, iteratorSymbol, getIteratorOf, NO_CHAR_ARRAY, isAsyncFunction, debug, libraryFilter, NEEDS_THROW_FOR_STACK, dexieErrorNames, idbDomErrorNames, errorList, defaultTexts, errnames, BaseException, exceptions, exceptionMap, fullNameExceptions, INTERNAL, LONG_STACKS_CLIP_LIMIT, MAX_LONG_STACKS, ZONE_ECHO_LIMIT, resolvedNativePromise, nativePromiseProto, resolvedGlobalPromise, nativePromiseThen, NativePromise, patchGlobalPromise, stack_being_generated, schedulePhysicalTick, asap, isOutsideMicroTick, needsNewPhysicalTick, unhandledErrors, rejectingErrors, currentFulfiller, rejectionMapper, globalPSD, PSD, microtickQueue, numScheduledCalls, tickFinalizers, thenProp, task, taskCounter, zoneStack, zoneEchoes, totalEchoes, zone_id_counter, UNHANDLEDREJECTION, rejection, DEXIE_VERSION, maxString, minKey, INVALID_KEY_ARGUMENT, STRING_EXPECTED, connections, isIEOrEdge, hasIEDeleteObjectStoreBug, hangsOnDeleteLargeKeyRange, dexieStackFrameFilter, DBNAMES_DB, READONLY, READWRITE, AnyRange, Table, Collection, deleteCallback, WhereClause, DEXIE_STORAGE_MUTATED_EVENT_NAME, STORAGE_MUTATED_DOM_EVENT_NAME, globalEvents, Transaction, getMaxKey, _id_counter, Version, virtualIndexMiddleware, hooksMiddleware, cacheExistingValuesMiddleware, RangeSet, observabilityMiddleware, Dexie$1, symbolObservable, Observable, domDeps, Dexie, propagatingLocally;
  var init_dexie = __esm({
    "node_modules/dexie/dist/modern/dexie.mjs"() {
      _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
      keys = Object.keys;
      isArray = Array.isArray;
      if (typeof Promise !== "undefined" && !_global.Promise) {
        _global.Promise = Promise;
      }
      getProto = Object.getPrototypeOf;
      _hasOwn = {}.hasOwnProperty;
      defineProperty = Object.defineProperty;
      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      _slice = [].slice;
      concat = [].concat;
      intrinsicTypeNames = "Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(flatten([8, 16, 32, 64].map((num) => ["Int", "Uint", "Float"].map((t) => t + num + "Array")))).filter((t) => _global[t]);
      intrinsicTypes = intrinsicTypeNames.map((t) => _global[t]);
      arrayToObject(intrinsicTypeNames, (x) => [x, true]);
      circularRefs = null;
      ({ toString } = {});
      iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
      getIteratorOf = typeof iteratorSymbol === "symbol" ? function(x) {
        var i;
        return x != null && (i = x[iteratorSymbol]) && i.apply(x);
      } : function() {
        return null;
      };
      NO_CHAR_ARRAY = {};
      isAsyncFunction = typeof Symbol !== "undefined" ? (fn) => fn[Symbol.toStringTag] === "AsyncFunction" : () => false;
      debug = typeof location !== "undefined" && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
      libraryFilter = () => true;
      NEEDS_THROW_FOR_STACK = !new Error("").stack;
      dexieErrorNames = [
        "Modify",
        "Bulk",
        "OpenFailed",
        "VersionChange",
        "Schema",
        "Upgrade",
        "InvalidTable",
        "MissingAPI",
        "NoSuchDatabase",
        "InvalidArgument",
        "SubTransaction",
        "Unsupported",
        "Internal",
        "DatabaseClosed",
        "PrematureCommit",
        "ForeignAwait"
      ];
      idbDomErrorNames = [
        "Unknown",
        "Constraint",
        "Data",
        "TransactionInactive",
        "ReadOnly",
        "Version",
        "NotFound",
        "InvalidState",
        "InvalidAccess",
        "Abort",
        "Timeout",
        "QuotaExceeded",
        "Syntax",
        "DataClone"
      ];
      errorList = dexieErrorNames.concat(idbDomErrorNames);
      defaultTexts = {
        VersionChanged: "Database version changed by other database connection",
        DatabaseClosed: "Database has been closed",
        Abort: "Transaction aborted",
        TransactionInactive: "Transaction has already completed or failed",
        MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
      };
      derive(DexieError).from(Error).extend({
        stack: {
          get: function() {
            return this._stack || (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
          }
        },
        toString: function() {
          return this.name + ": " + this.message;
        }
      });
      derive(ModifyError).from(DexieError);
      derive(BulkError).from(DexieError);
      errnames = errorList.reduce((obj, name) => (obj[name] = name + "Error", obj), {});
      BaseException = DexieError;
      exceptions = errorList.reduce((obj, name) => {
        var fullName = name + "Error";
        function DexieError2(msgOrInner, inner) {
          this._e = getErrorWithStack();
          this.name = fullName;
          if (!msgOrInner) {
            this.message = defaultTexts[name] || fullName;
            this.inner = null;
          } else if (typeof msgOrInner === "string") {
            this.message = `${msgOrInner}${!inner ? "" : "\n " + inner}`;
            this.inner = inner || null;
          } else if (typeof msgOrInner === "object") {
            this.message = `${msgOrInner.name} ${msgOrInner.message}`;
            this.inner = msgOrInner;
          }
        }
        derive(DexieError2).from(BaseException);
        obj[name] = DexieError2;
        return obj;
      }, {});
      exceptions.Syntax = SyntaxError;
      exceptions.Type = TypeError;
      exceptions.Range = RangeError;
      exceptionMap = idbDomErrorNames.reduce((obj, name) => {
        obj[name + "Error"] = exceptions[name];
        return obj;
      }, {});
      fullNameExceptions = errorList.reduce((obj, name) => {
        if (["Syntax", "Type", "Range"].indexOf(name) === -1)
          obj[name + "Error"] = exceptions[name];
        return obj;
      }, {});
      fullNameExceptions.ModifyError = ModifyError;
      fullNameExceptions.DexieError = DexieError;
      fullNameExceptions.BulkError = BulkError;
      INTERNAL = {};
      LONG_STACKS_CLIP_LIMIT = 100;
      MAX_LONG_STACKS = 20;
      ZONE_ECHO_LIMIT = 100;
      [resolvedNativePromise, nativePromiseProto, resolvedGlobalPromise] = typeof Promise === "undefined" ? [] : (() => {
        let globalP = Promise.resolve();
        if (typeof crypto === "undefined" || !crypto.subtle)
          return [globalP, getProto(globalP), globalP];
        const nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
        return [
          nativeP,
          getProto(nativeP),
          globalP
        ];
      })();
      nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
      NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
      patchGlobalPromise = !!resolvedGlobalPromise;
      stack_being_generated = false;
      schedulePhysicalTick = resolvedGlobalPromise ? () => {
        resolvedGlobalPromise.then(physicalTick);
      } : _global.setImmediate ? setImmediate.bind(null, physicalTick) : _global.MutationObserver ? () => {
        var hiddenDiv = document.createElement("div");
        new MutationObserver(() => {
          physicalTick();
          hiddenDiv = null;
        }).observe(hiddenDiv, { attributes: true });
        hiddenDiv.setAttribute("i", "1");
      } : () => {
        setTimeout(physicalTick, 0);
      };
      asap = function(callback, args) {
        microtickQueue.push([callback, args]);
        if (needsNewPhysicalTick) {
          schedulePhysicalTick();
          needsNewPhysicalTick = false;
        }
      };
      isOutsideMicroTick = true;
      needsNewPhysicalTick = true;
      unhandledErrors = [];
      rejectingErrors = [];
      currentFulfiller = null;
      rejectionMapper = mirror;
      globalPSD = {
        id: "global",
        global: true,
        ref: 0,
        unhandleds: [],
        onunhandled: globalError,
        pgp: false,
        env: {},
        finalize: function() {
          this.unhandleds.forEach((uh) => {
            try {
              globalError(uh[0], uh[1]);
            } catch (e) {
            }
          });
        }
      };
      PSD = globalPSD;
      microtickQueue = [];
      numScheduledCalls = 0;
      tickFinalizers = [];
      thenProp = {
        get: function() {
          var psd = PSD, microTaskId = totalEchoes;
          function then(onFulfilled, onRejected) {
            var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
            const cleanup = possibleAwait && !decrementExpectedAwaits();
            var rv = new DexiePromise((resolve, reject) => {
              propagateToListener(this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));
            });
            debug && linkToPreviousPromise(rv, this);
            return rv;
          }
          then.prototype = INTERNAL;
          return then;
        },
        set: function(value) {
          setProp(this, "then", value && value.prototype === INTERNAL ? thenProp : {
            get: function() {
              return value;
            },
            set: thenProp.set
          });
        }
      };
      props(DexiePromise.prototype, {
        then: thenProp,
        _then: function(onFulfilled, onRejected) {
          propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
        },
        catch: function(onRejected) {
          if (arguments.length === 1)
            return this.then(null, onRejected);
          var type2 = arguments[0], handler = arguments[1];
          return typeof type2 === "function" ? this.then(null, (err) => err instanceof type2 ? handler(err) : PromiseReject(err)) : this.then(null, (err) => err && err.name === type2 ? handler(err) : PromiseReject(err));
        },
        finally: function(onFinally) {
          return this.then((value) => {
            onFinally();
            return value;
          }, (err) => {
            onFinally();
            return PromiseReject(err);
          });
        },
        stack: {
          get: function() {
            if (this._stack)
              return this._stack;
            try {
              stack_being_generated = true;
              var stacks = getStack(this, [], MAX_LONG_STACKS);
              var stack = stacks.join("\nFrom previous: ");
              if (this._state !== null)
                this._stack = stack;
              return stack;
            } finally {
              stack_being_generated = false;
            }
          }
        },
        timeout: function(ms, msg) {
          return ms < Infinity ? new DexiePromise((resolve, reject) => {
            var handle = setTimeout(() => reject(new exceptions.Timeout(msg)), ms);
            this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
          }) : this;
        }
      });
      if (typeof Symbol !== "undefined" && Symbol.toStringTag)
        setProp(DexiePromise.prototype, Symbol.toStringTag, "Dexie.Promise");
      globalPSD.env = snapShot();
      props(DexiePromise, {
        all: function() {
          var values2 = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
          return new DexiePromise(function(resolve, reject) {
            if (values2.length === 0)
              resolve([]);
            var remaining = values2.length;
            values2.forEach((a, i) => DexiePromise.resolve(a).then((x) => {
              values2[i] = x;
              if (!--remaining)
                resolve(values2);
            }, reject));
          });
        },
        resolve: (value) => {
          if (value instanceof DexiePromise)
            return value;
          if (value && typeof value.then === "function")
            return new DexiePromise((resolve, reject) => {
              value.then(resolve, reject);
            });
          var rv = new DexiePromise(INTERNAL, true, value);
          linkToPreviousPromise(rv, currentFulfiller);
          return rv;
        },
        reject: PromiseReject,
        race: function() {
          var values2 = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
          return new DexiePromise((resolve, reject) => {
            values2.map((value) => DexiePromise.resolve(value).then(resolve, reject));
          });
        },
        PSD: {
          get: () => PSD,
          set: (value) => PSD = value
        },
        totalEchoes: { get: () => totalEchoes },
        newPSD: newScope,
        usePSD,
        scheduler: {
          get: () => asap,
          set: (value) => {
            asap = value;
          }
        },
        rejectionMapper: {
          get: () => rejectionMapper,
          set: (value) => {
            rejectionMapper = value;
          }
        },
        follow: (fn, zoneProps) => {
          return new DexiePromise((resolve, reject) => {
            return newScope((resolve2, reject2) => {
              var psd = PSD;
              psd.unhandleds = [];
              psd.onunhandled = reject2;
              psd.finalize = callBoth(function() {
                run_at_end_of_this_or_next_physical_tick(() => {
                  this.unhandleds.length === 0 ? resolve2() : reject2(this.unhandleds[0]);
                });
              }, psd.finalize);
              fn();
            }, zoneProps, resolve, reject);
          });
        }
      });
      if (NativePromise) {
        if (NativePromise.allSettled)
          setProp(DexiePromise, "allSettled", function() {
            const possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new DexiePromise((resolve) => {
              if (possiblePromises.length === 0)
                resolve([]);
              let remaining = possiblePromises.length;
              const results = new Array(remaining);
              possiblePromises.forEach((p, i) => DexiePromise.resolve(p).then((value) => results[i] = { status: "fulfilled", value }, (reason) => results[i] = { status: "rejected", reason }).then(() => --remaining || resolve(results)));
            });
          });
        if (NativePromise.any && typeof AggregateError !== "undefined")
          setProp(DexiePromise, "any", function() {
            const possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new DexiePromise((resolve, reject) => {
              if (possiblePromises.length === 0)
                reject(new AggregateError([]));
              let remaining = possiblePromises.length;
              const failures = new Array(remaining);
              possiblePromises.forEach((p, i) => DexiePromise.resolve(p).then((value) => resolve(value), (failure) => {
                failures[i] = failure;
                if (!--remaining)
                  reject(new AggregateError(failures));
              }));
            });
          });
      }
      task = { awaits: 0, echoes: 0, id: 0 };
      taskCounter = 0;
      zoneStack = [];
      zoneEchoes = 0;
      totalEchoes = 0;
      zone_id_counter = 0;
      if (("" + nativePromiseThen).indexOf("[native code]") === -1) {
        incrementExpectedAwaits = decrementExpectedAwaits = nop;
      }
      UNHANDLEDREJECTION = "unhandledrejection";
      rejection = DexiePromise.reject;
      DEXIE_VERSION = "3.2.2";
      maxString = String.fromCharCode(65535);
      minKey = -Infinity;
      INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
      STRING_EXPECTED = "String expected.";
      connections = [];
      isIEOrEdge = typeof navigator !== "undefined" && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
      hasIEDeleteObjectStoreBug = isIEOrEdge;
      hangsOnDeleteLargeKeyRange = isIEOrEdge;
      dexieStackFrameFilter = (frame) => !/(dexie\.js|dexie\.min\.js)/.test(frame);
      DBNAMES_DB = "__dbnames";
      READONLY = "readonly";
      READWRITE = "readwrite";
      AnyRange = {
        type: 3,
        lower: -Infinity,
        lowerOpen: false,
        upper: [[]],
        upperOpen: false
      };
      Table = class {
        _trans(mode, fn, writeLocked) {
          const trans = this._tx || PSD.trans;
          const tableName = this.name;
          function checkTableInTransaction(resolve, reject, trans2) {
            if (!trans2.schema[tableName])
              throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
            return fn(trans2.idbtrans, trans2);
          }
          const wasRootExec = beginMicroTickScope();
          try {
            return trans && trans.db === this.db ? trans === PSD.trans ? trans._promise(mode, checkTableInTransaction, writeLocked) : newScope(() => trans._promise(mode, checkTableInTransaction, writeLocked), { trans, transless: PSD.transless || PSD }) : tempTransaction(this.db, mode, [this.name], checkTableInTransaction);
          } finally {
            if (wasRootExec)
              endMicroTickScope();
          }
        }
        get(keyOrCrit, cb) {
          if (keyOrCrit && keyOrCrit.constructor === Object)
            return this.where(keyOrCrit).first(cb);
          return this._trans("readonly", (trans) => {
            return this.core.get({ trans, key: keyOrCrit }).then((res) => this.hook.reading.fire(res));
          }).then(cb);
        }
        where(indexOrCrit) {
          if (typeof indexOrCrit === "string")
            return new this.db.WhereClause(this, indexOrCrit);
          if (isArray(indexOrCrit))
            return new this.db.WhereClause(this, `[${indexOrCrit.join("+")}]`);
          const keyPaths = keys(indexOrCrit);
          if (keyPaths.length === 1)
            return this.where(keyPaths[0]).equals(indexOrCrit[keyPaths[0]]);
          const compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter((ix) => ix.compound && keyPaths.every((keyPath) => ix.keyPath.indexOf(keyPath) >= 0) && ix.keyPath.every((keyPath) => keyPaths.indexOf(keyPath) >= 0))[0];
          if (compoundIndex && this.db._maxKey !== maxString)
            return this.where(compoundIndex.name).equals(compoundIndex.keyPath.map((kp) => indexOrCrit[kp]));
          if (!compoundIndex && debug)
            console.warn(`The query ${JSON.stringify(indexOrCrit)} on ${this.name} would benefit of a compound index [${keyPaths.join("+")}]`);
          const { idxByName } = this.schema;
          const idb = this.db._deps.indexedDB;
          function equals(a, b) {
            try {
              return idb.cmp(a, b) === 0;
            } catch (e) {
              return false;
            }
          }
          const [idx, filterFunction] = keyPaths.reduce(([prevIndex, prevFilterFn], keyPath) => {
            const index = idxByName[keyPath];
            const value = indexOrCrit[keyPath];
            return [
              prevIndex || index,
              prevIndex || !index ? combine(prevFilterFn, index && index.multi ? (x) => {
                const prop = getByKeyPath(x, keyPath);
                return isArray(prop) && prop.some((item) => equals(value, item));
              } : (x) => equals(value, getByKeyPath(x, keyPath))) : prevFilterFn
            ];
          }, [null, null]);
          return idx ? this.where(idx.name).equals(indexOrCrit[idx.keyPath]).filter(filterFunction) : compoundIndex ? this.filter(filterFunction) : this.where(keyPaths).equals("");
        }
        filter(filterFunction) {
          return this.toCollection().and(filterFunction);
        }
        count(thenShortcut) {
          return this.toCollection().count(thenShortcut);
        }
        offset(offset) {
          return this.toCollection().offset(offset);
        }
        limit(numRows) {
          return this.toCollection().limit(numRows);
        }
        each(callback) {
          return this.toCollection().each(callback);
        }
        toArray(thenShortcut) {
          return this.toCollection().toArray(thenShortcut);
        }
        toCollection() {
          return new this.db.Collection(new this.db.WhereClause(this));
        }
        orderBy(index) {
          return new this.db.Collection(new this.db.WhereClause(this, isArray(index) ? `[${index.join("+")}]` : index));
        }
        reverse() {
          return this.toCollection().reverse();
        }
        mapToClass(constructor) {
          this.schema.mappedClass = constructor;
          const readHook = (obj) => {
            if (!obj)
              return obj;
            const res = Object.create(constructor.prototype);
            for (var m in obj)
              if (hasOwn(obj, m))
                try {
                  res[m] = obj[m];
                } catch (_3) {
                }
            return res;
          };
          if (this.schema.readHook) {
            this.hook.reading.unsubscribe(this.schema.readHook);
          }
          this.schema.readHook = readHook;
          this.hook("reading", readHook);
          return constructor;
        }
        defineClass() {
          function Class(content) {
            extend(this, content);
          }
          return this.mapToClass(Class);
        }
        add(obj, key) {
          const { auto, keyPath } = this.schema.primKey;
          let objToAdd = obj;
          if (keyPath && auto) {
            objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
          }
          return this._trans("readwrite", (trans) => {
            return this.core.mutate({ trans, type: "add", keys: key != null ? [key] : null, values: [objToAdd] });
          }).then((res) => res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult).then((lastResult) => {
            if (keyPath) {
              try {
                setByKeyPath(obj, keyPath, lastResult);
              } catch (_3) {
              }
            }
            return lastResult;
          });
        }
        update(keyOrObject, modifications) {
          if (typeof keyOrObject === "object" && !isArray(keyOrObject)) {
            const key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
            if (key === void 0)
              return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
            try {
              if (typeof modifications !== "function") {
                keys(modifications).forEach((keyPath) => {
                  setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                });
              } else {
                modifications(keyOrObject, { value: keyOrObject, primKey: key });
              }
            } catch (_a) {
            }
            return this.where(":id").equals(key).modify(modifications);
          } else {
            return this.where(":id").equals(keyOrObject).modify(modifications);
          }
        }
        put(obj, key) {
          const { auto, keyPath } = this.schema.primKey;
          let objToAdd = obj;
          if (keyPath && auto) {
            objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
          }
          return this._trans("readwrite", (trans) => this.core.mutate({ trans, type: "put", values: [objToAdd], keys: key != null ? [key] : null })).then((res) => res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult).then((lastResult) => {
            if (keyPath) {
              try {
                setByKeyPath(obj, keyPath, lastResult);
              } catch (_3) {
              }
            }
            return lastResult;
          });
        }
        delete(key) {
          return this._trans("readwrite", (trans) => this.core.mutate({ trans, type: "delete", keys: [key] })).then((res) => res.numFailures ? DexiePromise.reject(res.failures[0]) : void 0);
        }
        clear() {
          return this._trans("readwrite", (trans) => this.core.mutate({ trans, type: "deleteRange", range: AnyRange })).then((res) => res.numFailures ? DexiePromise.reject(res.failures[0]) : void 0);
        }
        bulkGet(keys2) {
          return this._trans("readonly", (trans) => {
            return this.core.getMany({
              keys: keys2,
              trans
            }).then((result) => result.map((res) => this.hook.reading.fire(res)));
          });
        }
        bulkAdd(objects, keysOrOptions, options) {
          const keys2 = Array.isArray(keysOrOptions) ? keysOrOptions : void 0;
          options = options || (keys2 ? void 0 : keysOrOptions);
          const wantResults = options ? options.allKeys : void 0;
          return this._trans("readwrite", (trans) => {
            const { auto, keyPath } = this.schema.primKey;
            if (keyPath && keys2)
              throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
            if (keys2 && keys2.length !== objects.length)
              throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
            const numObjects = objects.length;
            let objectsToAdd = keyPath && auto ? objects.map(workaroundForUndefinedPrimKey(keyPath)) : objects;
            return this.core.mutate({ trans, type: "add", keys: keys2, values: objectsToAdd, wantResults }).then(({ numFailures, results, lastResult, failures }) => {
              const result = wantResults ? results : lastResult;
              if (numFailures === 0)
                return result;
              throw new BulkError(`${this.name}.bulkAdd(): ${numFailures} of ${numObjects} operations failed`, failures);
            });
          });
        }
        bulkPut(objects, keysOrOptions, options) {
          const keys2 = Array.isArray(keysOrOptions) ? keysOrOptions : void 0;
          options = options || (keys2 ? void 0 : keysOrOptions);
          const wantResults = options ? options.allKeys : void 0;
          return this._trans("readwrite", (trans) => {
            const { auto, keyPath } = this.schema.primKey;
            if (keyPath && keys2)
              throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
            if (keys2 && keys2.length !== objects.length)
              throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
            const numObjects = objects.length;
            let objectsToPut = keyPath && auto ? objects.map(workaroundForUndefinedPrimKey(keyPath)) : objects;
            return this.core.mutate({ trans, type: "put", keys: keys2, values: objectsToPut, wantResults }).then(({ numFailures, results, lastResult, failures }) => {
              const result = wantResults ? results : lastResult;
              if (numFailures === 0)
                return result;
              throw new BulkError(`${this.name}.bulkPut(): ${numFailures} of ${numObjects} operations failed`, failures);
            });
          });
        }
        bulkDelete(keys2) {
          const numKeys = keys2.length;
          return this._trans("readwrite", (trans) => {
            return this.core.mutate({ trans, type: "delete", keys: keys2 });
          }).then(({ numFailures, lastResult, failures }) => {
            if (numFailures === 0)
              return lastResult;
            throw new BulkError(`${this.name}.bulkDelete(): ${numFailures} of ${numKeys} operations failed`, failures);
          });
        }
      };
      Collection = class {
        _read(fn, cb) {
          var ctx = this._ctx;
          return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._trans("readonly", fn).then(cb);
        }
        _write(fn) {
          var ctx = this._ctx;
          return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._trans("readwrite", fn, "locked");
        }
        _addAlgorithm(fn) {
          var ctx = this._ctx;
          ctx.algorithm = combine(ctx.algorithm, fn);
        }
        _iterate(fn, coreTrans) {
          return iter(this._ctx, fn, coreTrans, this._ctx.table.core);
        }
        clone(props2) {
          var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
          if (props2)
            extend(ctx, props2);
          rv._ctx = ctx;
          return rv;
        }
        raw() {
          this._ctx.valueMapper = null;
          return this;
        }
        each(fn) {
          var ctx = this._ctx;
          return this._read((trans) => iter(ctx, fn, trans, ctx.table.core));
        }
        count(cb) {
          return this._read((trans) => {
            const ctx = this._ctx;
            const coreTable = ctx.table.core;
            if (isPlainKeyRange(ctx, true)) {
              return coreTable.count({
                trans,
                query: {
                  index: getIndexOrStore(ctx, coreTable.schema),
                  range: ctx.range
                }
              }).then((count2) => Math.min(count2, ctx.limit));
            } else {
              var count = 0;
              return iter(ctx, () => {
                ++count;
                return false;
              }, trans, coreTable).then(() => count);
            }
          }).then(cb);
        }
        sortBy(keyPath, cb) {
          const parts = keyPath.split(".").reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
          function getval(obj, i) {
            if (i)
              return getval(obj[parts[i]], i - 1);
            return obj[lastPart];
          }
          var order = this._ctx.dir === "next" ? 1 : -1;
          function sorter(a, b) {
            var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
            return aVal < bVal ? -order : aVal > bVal ? order : 0;
          }
          return this.toArray(function(a) {
            return a.sort(sorter);
          }).then(cb);
        }
        toArray(cb) {
          return this._read((trans) => {
            var ctx = this._ctx;
            if (ctx.dir === "next" && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
              const { valueMapper } = ctx;
              const index = getIndexOrStore(ctx, ctx.table.core.schema);
              return ctx.table.core.query({
                trans,
                limit: ctx.limit,
                values: true,
                query: {
                  index,
                  range: ctx.range
                }
              }).then(({ result }) => valueMapper ? result.map(valueMapper) : result);
            } else {
              const a = [];
              return iter(ctx, (item) => a.push(item), trans, ctx.table.core).then(() => a);
            }
          }, cb);
        }
        offset(offset) {
          var ctx = this._ctx;
          if (offset <= 0)
            return this;
          ctx.offset += offset;
          if (isPlainKeyRange(ctx)) {
            addReplayFilter(ctx, () => {
              var offsetLeft = offset;
              return (cursor, advance) => {
                if (offsetLeft === 0)
                  return true;
                if (offsetLeft === 1) {
                  --offsetLeft;
                  return false;
                }
                advance(() => {
                  cursor.advance(offsetLeft);
                  offsetLeft = 0;
                });
                return false;
              };
            });
          } else {
            addReplayFilter(ctx, () => {
              var offsetLeft = offset;
              return () => --offsetLeft < 0;
            });
          }
          return this;
        }
        limit(numRows) {
          this._ctx.limit = Math.min(this._ctx.limit, numRows);
          addReplayFilter(this._ctx, () => {
            var rowsLeft = numRows;
            return function(cursor, advance, resolve) {
              if (--rowsLeft <= 0)
                advance(resolve);
              return rowsLeft >= 0;
            };
          }, true);
          return this;
        }
        until(filterFunction, bIncludeStopEntry) {
          addFilter(this._ctx, function(cursor, advance, resolve) {
            if (filterFunction(cursor.value)) {
              advance(resolve);
              return bIncludeStopEntry;
            } else {
              return true;
            }
          });
          return this;
        }
        first(cb) {
          return this.limit(1).toArray(function(a) {
            return a[0];
          }).then(cb);
        }
        last(cb) {
          return this.reverse().first(cb);
        }
        filter(filterFunction) {
          addFilter(this._ctx, function(cursor) {
            return filterFunction(cursor.value);
          });
          addMatchFilter(this._ctx, filterFunction);
          return this;
        }
        and(filter) {
          return this.filter(filter);
        }
        or(indexName) {
          return new this.db.WhereClause(this._ctx.table, indexName, this);
        }
        reverse() {
          this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
          if (this._ondirectionchange)
            this._ondirectionchange(this._ctx.dir);
          return this;
        }
        desc() {
          return this.reverse();
        }
        eachKey(cb) {
          var ctx = this._ctx;
          ctx.keysOnly = !ctx.isMatch;
          return this.each(function(val, cursor) {
            cb(cursor.key, cursor);
          });
        }
        eachUniqueKey(cb) {
          this._ctx.unique = "unique";
          return this.eachKey(cb);
        }
        eachPrimaryKey(cb) {
          var ctx = this._ctx;
          ctx.keysOnly = !ctx.isMatch;
          return this.each(function(val, cursor) {
            cb(cursor.primaryKey, cursor);
          });
        }
        keys(cb) {
          var ctx = this._ctx;
          ctx.keysOnly = !ctx.isMatch;
          var a = [];
          return this.each(function(item, cursor) {
            a.push(cursor.key);
          }).then(function() {
            return a;
          }).then(cb);
        }
        primaryKeys(cb) {
          var ctx = this._ctx;
          if (ctx.dir === "next" && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
            return this._read((trans) => {
              var index = getIndexOrStore(ctx, ctx.table.core.schema);
              return ctx.table.core.query({
                trans,
                values: false,
                limit: ctx.limit,
                query: {
                  index,
                  range: ctx.range
                }
              });
            }).then(({ result }) => result).then(cb);
          }
          ctx.keysOnly = !ctx.isMatch;
          var a = [];
          return this.each(function(item, cursor) {
            a.push(cursor.primaryKey);
          }).then(function() {
            return a;
          }).then(cb);
        }
        uniqueKeys(cb) {
          this._ctx.unique = "unique";
          return this.keys(cb);
        }
        firstKey(cb) {
          return this.limit(1).keys(function(a) {
            return a[0];
          }).then(cb);
        }
        lastKey(cb) {
          return this.reverse().firstKey(cb);
        }
        distinct() {
          var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
          if (!idx || !idx.multi)
            return this;
          var set = {};
          addFilter(this._ctx, function(cursor) {
            var strKey = cursor.primaryKey.toString();
            var found = hasOwn(set, strKey);
            set[strKey] = true;
            return !found;
          });
          return this;
        }
        modify(changes) {
          var ctx = this._ctx;
          return this._write((trans) => {
            var modifyer;
            if (typeof changes === "function") {
              modifyer = changes;
            } else {
              var keyPaths = keys(changes);
              var numKeys = keyPaths.length;
              modifyer = function(item) {
                var anythingModified = false;
                for (var i = 0; i < numKeys; ++i) {
                  var keyPath = keyPaths[i], val = changes[keyPath];
                  if (getByKeyPath(item, keyPath) !== val) {
                    setByKeyPath(item, keyPath, val);
                    anythingModified = true;
                  }
                }
                return anythingModified;
              };
            }
            const coreTable = ctx.table.core;
            const { outbound, extractKey } = coreTable.schema.primaryKey;
            const limit = this.db._options.modifyChunkSize || 200;
            const totalFailures = [];
            let successCount = 0;
            const failedKeys = [];
            const applyMutateResult = (expectedCount, res) => {
              const { failures, numFailures } = res;
              successCount += expectedCount - numFailures;
              for (let pos of keys(failures)) {
                totalFailures.push(failures[pos]);
              }
            };
            return this.clone().primaryKeys().then((keys2) => {
              const nextChunk = (offset) => {
                const count = Math.min(limit, keys2.length - offset);
                return coreTable.getMany({
                  trans,
                  keys: keys2.slice(offset, offset + count),
                  cache: "immutable"
                }).then((values2) => {
                  const addValues = [];
                  const putValues = [];
                  const putKeys = outbound ? [] : null;
                  const deleteKeys = [];
                  for (let i = 0; i < count; ++i) {
                    const origValue = values2[i];
                    const ctx2 = {
                      value: deepClone(origValue),
                      primKey: keys2[offset + i]
                    };
                    if (modifyer.call(ctx2, ctx2.value, ctx2) !== false) {
                      if (ctx2.value == null) {
                        deleteKeys.push(keys2[offset + i]);
                      } else if (!outbound && cmp(extractKey(origValue), extractKey(ctx2.value)) !== 0) {
                        deleteKeys.push(keys2[offset + i]);
                        addValues.push(ctx2.value);
                      } else {
                        putValues.push(ctx2.value);
                        if (outbound)
                          putKeys.push(keys2[offset + i]);
                      }
                    }
                  }
                  const criteria = isPlainKeyRange(ctx) && ctx.limit === Infinity && (typeof changes !== "function" || changes === deleteCallback) && {
                    index: ctx.index,
                    range: ctx.range
                  };
                  return Promise.resolve(addValues.length > 0 && coreTable.mutate({ trans, type: "add", values: addValues }).then((res) => {
                    for (let pos in res.failures) {
                      deleteKeys.splice(parseInt(pos), 1);
                    }
                    applyMutateResult(addValues.length, res);
                  })).then(() => (putValues.length > 0 || criteria && typeof changes === "object") && coreTable.mutate({
                    trans,
                    type: "put",
                    keys: putKeys,
                    values: putValues,
                    criteria,
                    changeSpec: typeof changes !== "function" && changes
                  }).then((res) => applyMutateResult(putValues.length, res))).then(() => (deleteKeys.length > 0 || criteria && changes === deleteCallback) && coreTable.mutate({
                    trans,
                    type: "delete",
                    keys: deleteKeys,
                    criteria
                  }).then((res) => applyMutateResult(deleteKeys.length, res))).then(() => {
                    return keys2.length > offset + count && nextChunk(offset + limit);
                  });
                });
              };
              return nextChunk(0).then(() => {
                if (totalFailures.length > 0)
                  throw new ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
                return keys2.length;
              });
            });
          });
        }
        delete() {
          var ctx = this._ctx, range = ctx.range;
          if (isPlainKeyRange(ctx) && (ctx.isPrimKey && !hangsOnDeleteLargeKeyRange || range.type === 3)) {
            return this._write((trans) => {
              const { primaryKey } = ctx.table.core.schema;
              const coreRange = range;
              return ctx.table.core.count({ trans, query: { index: primaryKey, range: coreRange } }).then((count) => {
                return ctx.table.core.mutate({ trans, type: "deleteRange", range: coreRange }).then(({ failures, lastResult, results, numFailures }) => {
                  if (numFailures)
                    throw new ModifyError("Could not delete some values", Object.keys(failures).map((pos) => failures[pos]), count - numFailures);
                  return count - numFailures;
                });
              });
            });
          }
          return this.modify(deleteCallback);
        }
      };
      deleteCallback = (value, ctx) => ctx.value = null;
      WhereClause = class {
        get Collection() {
          return this._ctx.table.db.Collection;
        }
        between(lower, upper, includeLower, includeUpper) {
          includeLower = includeLower !== false;
          includeUpper = includeUpper === true;
          try {
            if (this._cmp(lower, upper) > 0 || this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper))
              return emptyCollection(this);
            return new this.Collection(this, () => createRange(lower, upper, !includeLower, !includeUpper));
          } catch (e) {
            return fail(this, INVALID_KEY_ARGUMENT);
          }
        }
        equals(value) {
          if (value == null)
            return fail(this, INVALID_KEY_ARGUMENT);
          return new this.Collection(this, () => rangeEqual(value));
        }
        above(value) {
          if (value == null)
            return fail(this, INVALID_KEY_ARGUMENT);
          return new this.Collection(this, () => createRange(value, void 0, true));
        }
        aboveOrEqual(value) {
          if (value == null)
            return fail(this, INVALID_KEY_ARGUMENT);
          return new this.Collection(this, () => createRange(value, void 0, false));
        }
        below(value) {
          if (value == null)
            return fail(this, INVALID_KEY_ARGUMENT);
          return new this.Collection(this, () => createRange(void 0, value, false, true));
        }
        belowOrEqual(value) {
          if (value == null)
            return fail(this, INVALID_KEY_ARGUMENT);
          return new this.Collection(this, () => createRange(void 0, value));
        }
        startsWith(str) {
          if (typeof str !== "string")
            return fail(this, STRING_EXPECTED);
          return this.between(str, str + maxString, true, true);
        }
        startsWithIgnoreCase(str) {
          if (str === "")
            return this.startsWith(str);
          return addIgnoreCaseAlgorithm(this, (x, a) => x.indexOf(a[0]) === 0, [str], maxString);
        }
        equalsIgnoreCase(str) {
          return addIgnoreCaseAlgorithm(this, (x, a) => x === a[0], [str], "");
        }
        anyOfIgnoreCase() {
          var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          if (set.length === 0)
            return emptyCollection(this);
          return addIgnoreCaseAlgorithm(this, (x, a) => a.indexOf(x) !== -1, set, "");
        }
        startsWithAnyOfIgnoreCase() {
          var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          if (set.length === 0)
            return emptyCollection(this);
          return addIgnoreCaseAlgorithm(this, (x, a) => a.some((n) => x.indexOf(n) === 0), set, maxString);
        }
        anyOf() {
          const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          let compare = this._cmp;
          try {
            set.sort(compare);
          } catch (e) {
            return fail(this, INVALID_KEY_ARGUMENT);
          }
          if (set.length === 0)
            return emptyCollection(this);
          const c = new this.Collection(this, () => createRange(set[0], set[set.length - 1]));
          c._ondirectionchange = (direction) => {
            compare = direction === "next" ? this._ascending : this._descending;
            set.sort(compare);
          };
          let i = 0;
          c._addAlgorithm((cursor, advance, resolve) => {
            const key = cursor.key;
            while (compare(key, set[i]) > 0) {
              ++i;
              if (i === set.length) {
                advance(resolve);
                return false;
              }
            }
            if (compare(key, set[i]) === 0) {
              return true;
            } else {
              advance(() => {
                cursor.continue(set[i]);
              });
              return false;
            }
          });
          return c;
        }
        notEqual(value) {
          return this.inAnyRange([[minKey, value], [value, this.db._maxKey]], { includeLowers: false, includeUppers: false });
        }
        noneOf() {
          const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          if (set.length === 0)
            return new this.Collection(this);
          try {
            set.sort(this._ascending);
          } catch (e) {
            return fail(this, INVALID_KEY_ARGUMENT);
          }
          const ranges = set.reduce((res, val) => res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]], null);
          ranges.push([set[set.length - 1], this.db._maxKey]);
          return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
        }
        inAnyRange(ranges, options) {
          const cmp2 = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;
          if (ranges.length === 0)
            return emptyCollection(this);
          if (!ranges.every((range) => range[0] !== void 0 && range[1] !== void 0 && ascending(range[0], range[1]) <= 0)) {
            return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
          }
          const includeLowers = !options || options.includeLowers !== false;
          const includeUppers = options && options.includeUppers === true;
          function addRange2(ranges2, newRange) {
            let i = 0, l = ranges2.length;
            for (; i < l; ++i) {
              const range = ranges2[i];
              if (cmp2(newRange[0], range[1]) < 0 && cmp2(newRange[1], range[0]) > 0) {
                range[0] = min(range[0], newRange[0]);
                range[1] = max(range[1], newRange[1]);
                break;
              }
            }
            if (i === l)
              ranges2.push(newRange);
            return ranges2;
          }
          let sortDirection = ascending;
          function rangeSorter(a, b) {
            return sortDirection(a[0], b[0]);
          }
          let set;
          try {
            set = ranges.reduce(addRange2, []);
            set.sort(rangeSorter);
          } catch (ex) {
            return fail(this, INVALID_KEY_ARGUMENT);
          }
          let rangePos = 0;
          const keyIsBeyondCurrentEntry = includeUppers ? (key) => ascending(key, set[rangePos][1]) > 0 : (key) => ascending(key, set[rangePos][1]) >= 0;
          const keyIsBeforeCurrentEntry = includeLowers ? (key) => descending(key, set[rangePos][0]) > 0 : (key) => descending(key, set[rangePos][0]) >= 0;
          function keyWithinCurrentRange(key) {
            return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
          }
          let checkKey = keyIsBeyondCurrentEntry;
          const c = new this.Collection(this, () => createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers));
          c._ondirectionchange = (direction) => {
            if (direction === "next") {
              checkKey = keyIsBeyondCurrentEntry;
              sortDirection = ascending;
            } else {
              checkKey = keyIsBeforeCurrentEntry;
              sortDirection = descending;
            }
            set.sort(rangeSorter);
          };
          c._addAlgorithm((cursor, advance, resolve) => {
            var key = cursor.key;
            while (checkKey(key)) {
              ++rangePos;
              if (rangePos === set.length) {
                advance(resolve);
                return false;
              }
            }
            if (keyWithinCurrentRange(key)) {
              return true;
            } else if (this._cmp(key, set[rangePos][1]) === 0 || this._cmp(key, set[rangePos][0]) === 0) {
              return false;
            } else {
              advance(() => {
                if (sortDirection === ascending)
                  cursor.continue(set[rangePos][0]);
                else
                  cursor.continue(set[rangePos][1]);
              });
              return false;
            }
          });
          return c;
        }
        startsWithAnyOf() {
          const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
          if (!set.every((s) => typeof s === "string")) {
            return fail(this, "startsWithAnyOf() only works with strings");
          }
          if (set.length === 0)
            return emptyCollection(this);
          return this.inAnyRange(set.map((str) => [str, str + maxString]));
        }
      };
      DEXIE_STORAGE_MUTATED_EVENT_NAME = "storagemutated";
      STORAGE_MUTATED_DOM_EVENT_NAME = "x-storagemutated-1";
      globalEvents = Events(null, DEXIE_STORAGE_MUTATED_EVENT_NAME);
      Transaction = class {
        _lock() {
          assert(!PSD.global);
          ++this._reculock;
          if (this._reculock === 1 && !PSD.global)
            PSD.lockOwnerFor = this;
          return this;
        }
        _unlock() {
          assert(!PSD.global);
          if (--this._reculock === 0) {
            if (!PSD.global)
              PSD.lockOwnerFor = null;
            while (this._blockedFuncs.length > 0 && !this._locked()) {
              var fnAndPSD = this._blockedFuncs.shift();
              try {
                usePSD(fnAndPSD[1], fnAndPSD[0]);
              } catch (e) {
              }
            }
          }
          return this;
        }
        _locked() {
          return this._reculock && PSD.lockOwnerFor !== this;
        }
        create(idbtrans) {
          if (!this.mode)
            return this;
          const idbdb = this.db.idbdb;
          const dbOpenError = this.db._state.dbOpenError;
          assert(!this.idbtrans);
          if (!idbtrans && !idbdb) {
            switch (dbOpenError && dbOpenError.name) {
              case "DatabaseClosedError":
                throw new exceptions.DatabaseClosed(dbOpenError);
              case "MissingAPIError":
                throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
              default:
                throw new exceptions.OpenFailed(dbOpenError);
            }
          }
          if (!this.active)
            throw new exceptions.TransactionInactive();
          assert(this._completion._state === null);
          idbtrans = this.idbtrans = idbtrans || (this.db.core ? this.db.core.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }) : idbdb.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }));
          idbtrans.onerror = wrap((ev) => {
            preventDefault(ev);
            this._reject(idbtrans.error);
          });
          idbtrans.onabort = wrap((ev) => {
            preventDefault(ev);
            this.active && this._reject(new exceptions.Abort(idbtrans.error));
            this.active = false;
            this.on("abort").fire(ev);
          });
          idbtrans.oncomplete = wrap(() => {
            this.active = false;
            this._resolve();
            if ("mutatedParts" in idbtrans) {
              globalEvents.storagemutated.fire(idbtrans["mutatedParts"]);
            }
          });
          return this;
        }
        _promise(mode, fn, bWriteLock) {
          if (mode === "readwrite" && this.mode !== "readwrite")
            return rejection(new exceptions.ReadOnly("Transaction is readonly"));
          if (!this.active)
            return rejection(new exceptions.TransactionInactive());
          if (this._locked()) {
            return new DexiePromise((resolve, reject) => {
              this._blockedFuncs.push([() => {
                this._promise(mode, fn, bWriteLock).then(resolve, reject);
              }, PSD]);
            });
          } else if (bWriteLock) {
            return newScope(() => {
              var p2 = new DexiePromise((resolve, reject) => {
                this._lock();
                const rv = fn(resolve, reject, this);
                if (rv && rv.then)
                  rv.then(resolve, reject);
              });
              p2.finally(() => this._unlock());
              p2._lib = true;
              return p2;
            });
          } else {
            var p = new DexiePromise((resolve, reject) => {
              var rv = fn(resolve, reject, this);
              if (rv && rv.then)
                rv.then(resolve, reject);
            });
            p._lib = true;
            return p;
          }
        }
        _root() {
          return this.parent ? this.parent._root() : this;
        }
        waitFor(promiseLike) {
          var root2 = this._root();
          const promise = DexiePromise.resolve(promiseLike);
          if (root2._waitingFor) {
            root2._waitingFor = root2._waitingFor.then(() => promise);
          } else {
            root2._waitingFor = promise;
            root2._waitingQueue = [];
            var store = root2.idbtrans.objectStore(root2.storeNames[0]);
            (function spin() {
              ++root2._spinCount;
              while (root2._waitingQueue.length)
                root2._waitingQueue.shift()();
              if (root2._waitingFor)
                store.get(-Infinity).onsuccess = spin;
            })();
          }
          var currentWaitPromise = root2._waitingFor;
          return new DexiePromise((resolve, reject) => {
            promise.then((res) => root2._waitingQueue.push(wrap(resolve.bind(null, res))), (err) => root2._waitingQueue.push(wrap(reject.bind(null, err)))).finally(() => {
              if (root2._waitingFor === currentWaitPromise) {
                root2._waitingFor = null;
              }
            });
          });
        }
        abort() {
          if (this.active) {
            this.active = false;
            if (this.idbtrans)
              this.idbtrans.abort();
            this._reject(new exceptions.Abort());
          }
        }
        table(tableName) {
          const memoizedTables = this._memoizedTables || (this._memoizedTables = {});
          if (hasOwn(memoizedTables, tableName))
            return memoizedTables[tableName];
          const tableSchema = this.schema[tableName];
          if (!tableSchema) {
            throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
          }
          const transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
          transactionBoundTable.core = this.db.core.table(tableName);
          memoizedTables[tableName] = transactionBoundTable;
          return transactionBoundTable;
        }
      };
      getMaxKey = (IdbKeyRange) => {
        try {
          IdbKeyRange.only([[]]);
          getMaxKey = () => [[]];
          return [[]];
        } catch (e) {
          getMaxKey = () => maxString;
          return maxString;
        }
      };
      _id_counter = 0;
      Version = class {
        _parseStoresSpec(stores, outSchema) {
          keys(stores).forEach((tableName) => {
            if (stores[tableName] !== null) {
              var indexes = parseIndexSyntax(stores[tableName]);
              var primKey = indexes.shift();
              if (primKey.multi)
                throw new exceptions.Schema("Primary key cannot be multi-valued");
              indexes.forEach((idx) => {
                if (idx.auto)
                  throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                if (!idx.keyPath)
                  throw new exceptions.Schema("Index must have a name and cannot be an empty string");
              });
              outSchema[tableName] = createTableSchema(tableName, primKey, indexes);
            }
          });
        }
        stores(stores) {
          const db2 = this.db;
          this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;
          const versions = db2._versions;
          const storesSpec = {};
          let dbschema = {};
          versions.forEach((version) => {
            extend(storesSpec, version._cfg.storesSource);
            dbschema = version._cfg.dbschema = {};
            version._parseStoresSpec(storesSpec, dbschema);
          });
          db2._dbSchema = dbschema;
          removeTablesApi(db2, [db2._allTables, db2, db2.Transaction.prototype]);
          setApiOnPlace(db2, [db2._allTables, db2, db2.Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
          db2._storeNames = keys(dbschema);
          return this;
        }
        upgrade(upgradeFunction) {
          this._cfg.contentUpgrade = promisableChain(this._cfg.contentUpgrade || nop, upgradeFunction);
          return this;
        }
      };
      virtualIndexMiddleware = {
        stack: "dbcore",
        name: "VirtualIndexMiddleware",
        level: 1,
        create: createVirtualIndexMiddleware
      };
      hooksMiddleware = {
        stack: "dbcore",
        name: "HooksMiddleware",
        level: 2,
        create: (downCore) => ({
          ...downCore,
          table(tableName) {
            const downTable = downCore.table(tableName);
            const { primaryKey } = downTable.schema;
            const tableMiddleware = {
              ...downTable,
              mutate(req) {
                const dxTrans = PSD.trans;
                const { deleting, creating, updating } = dxTrans.table(tableName).hook;
                switch (req.type) {
                  case "add":
                    if (creating.fire === nop)
                      break;
                    return dxTrans._promise("readwrite", () => addPutOrDelete(req), true);
                  case "put":
                    if (creating.fire === nop && updating.fire === nop)
                      break;
                    return dxTrans._promise("readwrite", () => addPutOrDelete(req), true);
                  case "delete":
                    if (deleting.fire === nop)
                      break;
                    return dxTrans._promise("readwrite", () => addPutOrDelete(req), true);
                  case "deleteRange":
                    if (deleting.fire === nop)
                      break;
                    return dxTrans._promise("readwrite", () => deleteRange(req), true);
                }
                return downTable.mutate(req);
                function addPutOrDelete(req2) {
                  const dxTrans2 = PSD.trans;
                  const keys2 = req2.keys || getEffectiveKeys(primaryKey, req2);
                  if (!keys2)
                    throw new Error("Keys missing");
                  req2 = req2.type === "add" || req2.type === "put" ? { ...req2, keys: keys2 } : { ...req2 };
                  if (req2.type !== "delete")
                    req2.values = [...req2.values];
                  if (req2.keys)
                    req2.keys = [...req2.keys];
                  return getExistingValues(downTable, req2, keys2).then((existingValues) => {
                    const contexts = keys2.map((key, i) => {
                      const existingValue = existingValues[i];
                      const ctx = { onerror: null, onsuccess: null };
                      if (req2.type === "delete") {
                        deleting.fire.call(ctx, key, existingValue, dxTrans2);
                      } else if (req2.type === "add" || existingValue === void 0) {
                        const generatedPrimaryKey = creating.fire.call(ctx, key, req2.values[i], dxTrans2);
                        if (key == null && generatedPrimaryKey != null) {
                          key = generatedPrimaryKey;
                          req2.keys[i] = key;
                          if (!primaryKey.outbound) {
                            setByKeyPath(req2.values[i], primaryKey.keyPath, key);
                          }
                        }
                      } else {
                        const objectDiff = getObjectDiff(existingValue, req2.values[i]);
                        const additionalChanges = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans2);
                        if (additionalChanges) {
                          const requestedValue = req2.values[i];
                          Object.keys(additionalChanges).forEach((keyPath) => {
                            if (hasOwn(requestedValue, keyPath)) {
                              requestedValue[keyPath] = additionalChanges[keyPath];
                            } else {
                              setByKeyPath(requestedValue, keyPath, additionalChanges[keyPath]);
                            }
                          });
                        }
                      }
                      return ctx;
                    });
                    return downTable.mutate(req2).then(({ failures, results, numFailures, lastResult }) => {
                      for (let i = 0; i < keys2.length; ++i) {
                        const primKey = results ? results[i] : keys2[i];
                        const ctx = contexts[i];
                        if (primKey == null) {
                          ctx.onerror && ctx.onerror(failures[i]);
                        } else {
                          ctx.onsuccess && ctx.onsuccess(
                            req2.type === "put" && existingValues[i] ? req2.values[i] : primKey
                          );
                        }
                      }
                      return { failures, results, numFailures, lastResult };
                    }).catch((error) => {
                      contexts.forEach((ctx) => ctx.onerror && ctx.onerror(error));
                      return Promise.reject(error);
                    });
                  });
                }
                function deleteRange(req2) {
                  return deleteNextChunk(req2.trans, req2.range, 1e4);
                }
                function deleteNextChunk(trans, range, limit) {
                  return downTable.query({ trans, values: false, query: { index: primaryKey, range }, limit }).then(({ result }) => {
                    return addPutOrDelete({ type: "delete", keys: result, trans }).then((res) => {
                      if (res.numFailures > 0)
                        return Promise.reject(res.failures[0]);
                      if (result.length < limit) {
                        return { failures: [], numFailures: 0, lastResult: void 0 };
                      } else {
                        return deleteNextChunk(trans, { ...range, lower: result[result.length - 1], lowerOpen: true }, limit);
                      }
                    });
                  });
                }
              }
            };
            return tableMiddleware;
          }
        })
      };
      cacheExistingValuesMiddleware = {
        stack: "dbcore",
        level: -1,
        create: (core) => {
          return {
            table: (tableName) => {
              const table = core.table(tableName);
              return {
                ...table,
                getMany: (req) => {
                  if (!req.cache) {
                    return table.getMany(req);
                  }
                  const cachedResult = getFromTransactionCache(req.keys, req.trans["_cache"], req.cache === "clone");
                  if (cachedResult) {
                    return DexiePromise.resolve(cachedResult);
                  }
                  return table.getMany(req).then((res) => {
                    req.trans["_cache"] = {
                      keys: req.keys,
                      values: req.cache === "clone" ? deepClone(res) : res
                    };
                    return res;
                  });
                },
                mutate: (req) => {
                  if (req.type !== "add")
                    req.trans["_cache"] = null;
                  return table.mutate(req);
                }
              };
            }
          };
        }
      };
      RangeSet = function(fromOrTree, to) {
        if (this) {
          extend(this, arguments.length ? { d: 1, from: fromOrTree, to: arguments.length > 1 ? to : fromOrTree } : { d: 0 });
        } else {
          const rv = new RangeSet();
          if (fromOrTree && "d" in fromOrTree) {
            extend(rv, fromOrTree);
          }
          return rv;
        }
      };
      props(RangeSet.prototype, {
        add(rangeSet) {
          mergeRanges(this, rangeSet);
          return this;
        },
        addKey(key) {
          addRange(this, key, key);
          return this;
        },
        addKeys(keys2) {
          keys2.forEach((key) => addRange(this, key, key));
          return this;
        },
        [iteratorSymbol]() {
          return getRangeSetIterator(this);
        }
      });
      observabilityMiddleware = {
        stack: "dbcore",
        level: 0,
        create: (core) => {
          const dbName = core.schema.name;
          const FULL_RANGE = new RangeSet(core.MIN_KEY, core.MAX_KEY);
          return {
            ...core,
            table: (tableName) => {
              const table = core.table(tableName);
              const { schema } = table;
              const { primaryKey } = schema;
              const { extractKey, outbound } = primaryKey;
              const tableClone = {
                ...table,
                mutate: (req) => {
                  const trans = req.trans;
                  const mutatedParts = trans.mutatedParts || (trans.mutatedParts = {});
                  const getRangeSet = (indexName) => {
                    const part = `idb://${dbName}/${tableName}/${indexName}`;
                    return mutatedParts[part] || (mutatedParts[part] = new RangeSet());
                  };
                  const pkRangeSet = getRangeSet("");
                  const delsRangeSet = getRangeSet(":dels");
                  const { type: type2 } = req;
                  let [keys2, newObjs] = req.type === "deleteRange" ? [req.range] : req.type === "delete" ? [req.keys] : req.values.length < 50 ? [[], req.values] : [];
                  const oldCache = req.trans["_cache"];
                  return table.mutate(req).then((res) => {
                    if (isArray(keys2)) {
                      if (type2 !== "delete")
                        keys2 = res.results;
                      pkRangeSet.addKeys(keys2);
                      const oldObjs = getFromTransactionCache(keys2, oldCache);
                      if (!oldObjs && type2 !== "add") {
                        delsRangeSet.addKeys(keys2);
                      }
                      if (oldObjs || newObjs) {
                        trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs);
                      }
                    } else if (keys2) {
                      const range = { from: keys2.lower, to: keys2.upper };
                      delsRangeSet.add(range);
                      pkRangeSet.add(range);
                    } else {
                      pkRangeSet.add(FULL_RANGE);
                      delsRangeSet.add(FULL_RANGE);
                      schema.indexes.forEach((idx) => getRangeSet(idx.name).add(FULL_RANGE));
                    }
                    return res;
                  });
                }
              };
              const getRange = ({ query: { index, range } }) => {
                var _a, _b;
                return [
                  index,
                  new RangeSet((_a = range.lower) !== null && _a !== void 0 ? _a : core.MIN_KEY, (_b = range.upper) !== null && _b !== void 0 ? _b : core.MAX_KEY)
                ];
              };
              const readSubscribers = {
                get: (req) => [primaryKey, new RangeSet(req.key)],
                getMany: (req) => [primaryKey, new RangeSet().addKeys(req.keys)],
                count: getRange,
                query: getRange,
                openCursor: getRange
              };
              keys(readSubscribers).forEach((method) => {
                tableClone[method] = function(req) {
                  const { subscr } = PSD;
                  if (subscr) {
                    const getRangeSet = (indexName) => {
                      const part = `idb://${dbName}/${tableName}/${indexName}`;
                      return subscr[part] || (subscr[part] = new RangeSet());
                    };
                    const pkRangeSet = getRangeSet("");
                    const delsRangeSet = getRangeSet(":dels");
                    const [queriedIndex, queriedRanges] = readSubscribers[method](req);
                    getRangeSet(queriedIndex.name || "").add(queriedRanges);
                    if (!queriedIndex.isPrimaryKey) {
                      if (method === "count") {
                        delsRangeSet.add(FULL_RANGE);
                      } else {
                        const keysPromise = method === "query" && outbound && req.values && table.query({
                          ...req,
                          values: false
                        });
                        return table[method].apply(this, arguments).then((res) => {
                          if (method === "query") {
                            if (outbound && req.values) {
                              return keysPromise.then(({ result: resultingKeys }) => {
                                pkRangeSet.addKeys(resultingKeys);
                                return res;
                              });
                            }
                            const pKeys = req.values ? res.result.map(extractKey) : res.result;
                            if (req.values) {
                              pkRangeSet.addKeys(pKeys);
                            } else {
                              delsRangeSet.addKeys(pKeys);
                            }
                          } else if (method === "openCursor") {
                            const cursor = res;
                            const wantValues = req.values;
                            return cursor && Object.create(cursor, {
                              key: {
                                get() {
                                  delsRangeSet.addKey(cursor.primaryKey);
                                  return cursor.key;
                                }
                              },
                              primaryKey: {
                                get() {
                                  const pkey = cursor.primaryKey;
                                  delsRangeSet.addKey(pkey);
                                  return pkey;
                                }
                              },
                              value: {
                                get() {
                                  wantValues && pkRangeSet.addKey(cursor.primaryKey);
                                  return cursor.value;
                                }
                              }
                            });
                          }
                          return res;
                        });
                      }
                    }
                  }
                  return table[method].apply(this, arguments);
                };
              });
              return tableClone;
            }
          };
        }
      };
      Dexie$1 = class {
        constructor(name, options) {
          this._middlewares = {};
          this.verno = 0;
          const deps = Dexie$1.dependencies;
          this._options = options = {
            addons: Dexie$1.addons,
            autoOpen: true,
            indexedDB: deps.indexedDB,
            IDBKeyRange: deps.IDBKeyRange,
            ...options
          };
          this._deps = {
            indexedDB: options.indexedDB,
            IDBKeyRange: options.IDBKeyRange
          };
          const { addons } = options;
          this._dbSchema = {};
          this._versions = [];
          this._storeNames = [];
          this._allTables = {};
          this.idbdb = null;
          this._novip = this;
          const state = {
            dbOpenError: null,
            isBeingOpened: false,
            onReadyBeingFired: null,
            openComplete: false,
            dbReadyResolve: nop,
            dbReadyPromise: null,
            cancelOpen: nop,
            openCanceller: null,
            autoSchema: true,
            PR1398_maxLoop: 3
          };
          state.dbReadyPromise = new DexiePromise((resolve) => {
            state.dbReadyResolve = resolve;
          });
          state.openCanceller = new DexiePromise((_3, reject) => {
            state.cancelOpen = reject;
          });
          this._state = state;
          this.name = name;
          this.on = Events(this, "populate", "blocked", "versionchange", "close", { ready: [promisableChain, nop] });
          this.on.ready.subscribe = override(this.on.ready.subscribe, (subscribe) => {
            return (subscriber, bSticky) => {
              Dexie$1.vip(() => {
                const state2 = this._state;
                if (state2.openComplete) {
                  if (!state2.dbOpenError)
                    DexiePromise.resolve().then(subscriber);
                  if (bSticky)
                    subscribe(subscriber);
                } else if (state2.onReadyBeingFired) {
                  state2.onReadyBeingFired.push(subscriber);
                  if (bSticky)
                    subscribe(subscriber);
                } else {
                  subscribe(subscriber);
                  const db2 = this;
                  if (!bSticky)
                    subscribe(function unsubscribe() {
                      db2.on.ready.unsubscribe(subscriber);
                      db2.on.ready.unsubscribe(unsubscribe);
                    });
                }
              });
            };
          });
          this.Collection = createCollectionConstructor(this);
          this.Table = createTableConstructor(this);
          this.Transaction = createTransactionConstructor(this);
          this.Version = createVersionConstructor(this);
          this.WhereClause = createWhereClauseConstructor(this);
          this.on("versionchange", (ev) => {
            if (ev.newVersion > 0)
              console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`);
            else
              console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`);
            this.close();
          });
          this.on("blocked", (ev) => {
            if (!ev.newVersion || ev.newVersion < ev.oldVersion)
              console.warn(`Dexie.delete('${this.name}') was blocked`);
            else
              console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${ev.oldVersion / 10}`);
          });
          this._maxKey = getMaxKey(options.IDBKeyRange);
          this._createTransaction = (mode, storeNames, dbschema, parentTransaction) => new this.Transaction(mode, storeNames, dbschema, this._options.chromeTransactionDurability, parentTransaction);
          this._fireOnBlocked = (ev) => {
            this.on("blocked").fire(ev);
            connections.filter((c) => c.name === this.name && c !== this && !c._state.vcFired).map((c) => c.on("versionchange").fire(ev));
          };
          this.use(virtualIndexMiddleware);
          this.use(hooksMiddleware);
          this.use(observabilityMiddleware);
          this.use(cacheExistingValuesMiddleware);
          this.vip = Object.create(this, { _vip: { value: true } });
          addons.forEach((addon) => addon(this));
        }
        version(versionNumber) {
          if (isNaN(versionNumber) || versionNumber < 0.1)
            throw new exceptions.Type(`Given version is not a positive number`);
          versionNumber = Math.round(versionNumber * 10) / 10;
          if (this.idbdb || this._state.isBeingOpened)
            throw new exceptions.Schema("Cannot add version when database is open");
          this.verno = Math.max(this.verno, versionNumber);
          const versions = this._versions;
          var versionInstance = versions.filter((v) => v._cfg.version === versionNumber)[0];
          if (versionInstance)
            return versionInstance;
          versionInstance = new this.Version(versionNumber);
          versions.push(versionInstance);
          versions.sort(lowerVersionFirst);
          versionInstance.stores({});
          this._state.autoSchema = false;
          return versionInstance;
        }
        _whenReady(fn) {
          return this.idbdb && (this._state.openComplete || PSD.letThrough || this._vip) ? fn() : new DexiePromise((resolve, reject) => {
            if (this._state.openComplete) {
              return reject(new exceptions.DatabaseClosed(this._state.dbOpenError));
            }
            if (!this._state.isBeingOpened) {
              if (!this._options.autoOpen) {
                reject(new exceptions.DatabaseClosed());
                return;
              }
              this.open().catch(nop);
            }
            this._state.dbReadyPromise.then(resolve, reject);
          }).then(fn);
        }
        use({ stack, create, level, name }) {
          if (name)
            this.unuse({ stack, name });
          const middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
          middlewares.push({ stack, create, level: level == null ? 10 : level, name });
          middlewares.sort((a, b) => a.level - b.level);
          return this;
        }
        unuse({ stack, name, create }) {
          if (stack && this._middlewares[stack]) {
            this._middlewares[stack] = this._middlewares[stack].filter((mw) => create ? mw.create !== create : name ? mw.name !== name : false);
          }
          return this;
        }
        open() {
          return dexieOpen(this);
        }
        _close() {
          const state = this._state;
          const idx = connections.indexOf(this);
          if (idx >= 0)
            connections.splice(idx, 1);
          if (this.idbdb) {
            try {
              this.idbdb.close();
            } catch (e) {
            }
            this._novip.idbdb = null;
          }
          state.dbReadyPromise = new DexiePromise((resolve) => {
            state.dbReadyResolve = resolve;
          });
          state.openCanceller = new DexiePromise((_3, reject) => {
            state.cancelOpen = reject;
          });
        }
        close() {
          this._close();
          const state = this._state;
          this._options.autoOpen = false;
          state.dbOpenError = new exceptions.DatabaseClosed();
          if (state.isBeingOpened)
            state.cancelOpen(state.dbOpenError);
        }
        delete() {
          const hasArguments = arguments.length > 0;
          const state = this._state;
          return new DexiePromise((resolve, reject) => {
            const doDelete = () => {
              this.close();
              var req = this._deps.indexedDB.deleteDatabase(this.name);
              req.onsuccess = wrap(() => {
                _onDatabaseDeleted(this._deps, this.name);
                resolve();
              });
              req.onerror = eventRejectHandler(reject);
              req.onblocked = this._fireOnBlocked;
            };
            if (hasArguments)
              throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
            if (state.isBeingOpened) {
              state.dbReadyPromise.then(doDelete);
            } else {
              doDelete();
            }
          });
        }
        backendDB() {
          return this.idbdb;
        }
        isOpen() {
          return this.idbdb !== null;
        }
        hasBeenClosed() {
          const dbOpenError = this._state.dbOpenError;
          return dbOpenError && dbOpenError.name === "DatabaseClosed";
        }
        hasFailed() {
          return this._state.dbOpenError !== null;
        }
        dynamicallyOpened() {
          return this._state.autoSchema;
        }
        get tables() {
          return keys(this._allTables).map((name) => this._allTables[name]);
        }
        transaction() {
          const args = extractTransactionArgs.apply(this, arguments);
          return this._transaction.apply(this, args);
        }
        _transaction(mode, tables, scopeFunc) {
          let parentTransaction = PSD.trans;
          if (!parentTransaction || parentTransaction.db !== this || mode.indexOf("!") !== -1)
            parentTransaction = null;
          const onlyIfCompatible = mode.indexOf("?") !== -1;
          mode = mode.replace("!", "").replace("?", "");
          let idbMode, storeNames;
          try {
            storeNames = tables.map((table) => {
              var storeName = table instanceof this.Table ? table.name : table;
              if (typeof storeName !== "string")
                throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
              return storeName;
            });
            if (mode == "r" || mode === READONLY)
              idbMode = READONLY;
            else if (mode == "rw" || mode == READWRITE)
              idbMode = READWRITE;
            else
              throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
            if (parentTransaction) {
              if (parentTransaction.mode === READONLY && idbMode === READWRITE) {
                if (onlyIfCompatible) {
                  parentTransaction = null;
                } else
                  throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
              }
              if (parentTransaction) {
                storeNames.forEach((storeName) => {
                  if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                    if (onlyIfCompatible) {
                      parentTransaction = null;
                    } else
                      throw new exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
                  }
                });
              }
              if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
                parentTransaction = null;
              }
            }
          } catch (e) {
            return parentTransaction ? parentTransaction._promise(null, (_3, reject) => {
              reject(e);
            }) : rejection(e);
          }
          const enterTransaction = enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
          return parentTransaction ? parentTransaction._promise(idbMode, enterTransaction, "lock") : PSD.trans ? usePSD(PSD.transless, () => this._whenReady(enterTransaction)) : this._whenReady(enterTransaction);
        }
        table(tableName) {
          if (!hasOwn(this._allTables, tableName)) {
            throw new exceptions.InvalidTable(`Table ${tableName} does not exist`);
          }
          return this._allTables[tableName];
        }
      };
      symbolObservable = typeof Symbol !== "undefined" && "observable" in Symbol ? Symbol.observable : "@@observable";
      Observable = class {
        constructor(subscribe) {
          this._subscribe = subscribe;
        }
        subscribe(x, error, complete) {
          return this._subscribe(!x || typeof x === "function" ? { next: x, error, complete } : x);
        }
        [symbolObservable]() {
          return this;
        }
      };
      try {
        domDeps = {
          indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
          IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
        };
      } catch (e) {
        domDeps = { indexedDB: null, IDBKeyRange: null };
      }
      Dexie = Dexie$1;
      props(Dexie, {
        ...fullNameExceptions,
        delete(databaseName) {
          const db2 = new Dexie(databaseName, { addons: [] });
          return db2.delete();
        },
        exists(name) {
          return new Dexie(name, { addons: [] }).open().then((db2) => {
            db2.close();
            return true;
          }).catch("NoSuchDatabaseError", () => false);
        },
        getDatabaseNames(cb) {
          try {
            return getDatabaseNames(Dexie.dependencies).then(cb);
          } catch (_a) {
            return rejection(new exceptions.MissingAPI());
          }
        },
        defineClass() {
          function Class(content) {
            extend(this, content);
          }
          return Class;
        },
        ignoreTransaction(scopeFunc) {
          return PSD.trans ? usePSD(PSD.transless, scopeFunc) : scopeFunc();
        },
        vip,
        async: function(generatorFn) {
          return function() {
            try {
              var rv = awaitIterator(generatorFn.apply(this, arguments));
              if (!rv || typeof rv.then !== "function")
                return DexiePromise.resolve(rv);
              return rv;
            } catch (e) {
              return rejection(e);
            }
          };
        },
        spawn: function(generatorFn, args, thiz) {
          try {
            var rv = awaitIterator(generatorFn.apply(thiz, args || []));
            if (!rv || typeof rv.then !== "function")
              return DexiePromise.resolve(rv);
            return rv;
          } catch (e) {
            return rejection(e);
          }
        },
        currentTransaction: {
          get: () => PSD.trans || null
        },
        waitFor: function(promiseOrFunction, optionalTimeout) {
          const promise = DexiePromise.resolve(typeof promiseOrFunction === "function" ? Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction).timeout(optionalTimeout || 6e4);
          return PSD.trans ? PSD.trans.waitFor(promise) : promise;
        },
        Promise: DexiePromise,
        debug: {
          get: () => debug,
          set: (value) => {
            setDebug(value, value === "dexie" ? () => true : dexieStackFrameFilter);
          }
        },
        derive,
        extend,
        props,
        override,
        Events,
        on: globalEvents,
        liveQuery,
        extendObservabilitySet,
        getByKeyPath,
        setByKeyPath,
        delByKeyPath,
        shallowClone,
        deepClone,
        getObjectDiff,
        cmp,
        asap: asap$1,
        minKey,
        addons: [],
        connections,
        errnames,
        dependencies: domDeps,
        semVer: DEXIE_VERSION,
        version: DEXIE_VERSION.split(".").map((n) => parseInt(n)).reduce((p, c, i) => p + c / Math.pow(10, i * 2))
      });
      Dexie.maxKey = getMaxKey(Dexie.dependencies.IDBKeyRange);
      if (typeof dispatchEvent !== "undefined" && typeof addEventListener !== "undefined") {
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, (updatedParts) => {
          if (!propagatingLocally) {
            let event;
            if (isIEOrEdge) {
              event = document.createEvent("CustomEvent");
              event.initCustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, true, true, updatedParts);
            } else {
              event = new CustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, {
                detail: updatedParts
              });
            }
            propagatingLocally = true;
            dispatchEvent(event);
            propagatingLocally = false;
          }
        });
        addEventListener(STORAGE_MUTATED_DOM_EVENT_NAME, ({ detail }) => {
          if (!propagatingLocally) {
            propagateLocally(detail);
          }
        });
      }
      propagatingLocally = false;
      if (typeof BroadcastChannel !== "undefined") {
        const bc = new BroadcastChannel(STORAGE_MUTATED_DOM_EVENT_NAME);
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, (changedParts) => {
          if (!propagatingLocally) {
            bc.postMessage(changedParts);
          }
        });
        bc.onmessage = (ev) => {
          if (ev.data)
            propagateLocally(ev.data);
        };
      } else if (typeof self !== "undefined" && typeof navigator !== "undefined") {
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, (changedParts) => {
          try {
            if (!propagatingLocally) {
              if (typeof localStorage !== "undefined") {
                localStorage.setItem(STORAGE_MUTATED_DOM_EVENT_NAME, JSON.stringify({
                  trig: Math.random(),
                  changedParts
                }));
              }
              if (typeof self["clients"] === "object") {
                [...self["clients"].matchAll({ includeUncontrolled: true })].forEach((client) => client.postMessage({
                  type: STORAGE_MUTATED_DOM_EVENT_NAME,
                  changedParts
                }));
              }
            }
          } catch (_a) {
          }
        });
        if (typeof addEventListener !== "undefined") {
          addEventListener("storage", (ev) => {
            if (ev.key === STORAGE_MUTATED_DOM_EVENT_NAME) {
              const data = JSON.parse(ev.newValue);
              if (data)
                propagateLocally(data.changedParts);
            }
          });
        }
        const swContainer = self.document && navigator.serviceWorker;
        if (swContainer) {
          swContainer.addEventListener("message", propagateMessageLocally);
        }
      }
      DexiePromise.rejectionMapper = mapError;
      setDebug(debug, dexieStackFrameFilter);
    }
  });

  // node_modules/dexie-react-hooks/dist/dexie-react-hooks.js
  var require_dexie_react_hooks = __commonJS({
    "node_modules/dexie-react-hooks/dist/dexie-react-hooks.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, (init_dexie(), __toCommonJS(dexie_exports)), require_react()) : typeof define === "function" && define.amd ? define(["exports", "dexie", "react"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.DexieReactHooks = {}, global2.Dexie, global2.React));
      })(exports, function(exports2, dexie, React59) {
        "use strict";
        function _interopDefaultLegacy(e) {
          return e && typeof e === "object" && "default" in e ? e : { "default": e };
        }
        var React__default = /* @__PURE__ */ _interopDefaultLegacy(React59);
        function useObservable(observableFactory, arg2, arg3) {
          var deps;
          var defaultResult;
          if (typeof observableFactory === "function") {
            deps = arg2 || [];
            defaultResult = arg3;
          } else {
            deps = [];
            defaultResult = arg2;
          }
          var monitor = React__default["default"].useRef({
            hasResult: false,
            result: defaultResult,
            error: null
          });
          var _a = React__default["default"].useReducer(function(x) {
            return x + 1;
          }, 0);
          _a[0];
          var triggerUpdate = _a[1];
          var observable = React__default["default"].useMemo(function() {
            var observable2 = typeof observableFactory === "function" ? observableFactory() : observableFactory;
            if (!observable2 || typeof observable2.subscribe !== "function") {
              if (observableFactory === observable2) {
                throw new TypeError("Given argument to useObservable() was neither a valid observable nor a function.");
              } else {
                throw new TypeError("Observable factory given to useObservable() did not return a valid observable.");
              }
            }
            if (!monitor.current.hasResult) {
              if (typeof observable2.getValue === "function") {
                monitor.current.result = observable2.getValue();
                monitor.current.hasResult = true;
              } else {
                var subscription = observable2.subscribe(function(val) {
                  monitor.current.result = val;
                  monitor.current.hasResult = true;
                });
                if (typeof subscription === "function") {
                  subscription();
                } else {
                  subscription.unsubscribe();
                }
              }
            }
            return observable2;
          }, deps);
          React__default["default"].useDebugValue(monitor.current.result);
          React__default["default"].useEffect(function() {
            var subscription = observable.subscribe(function(val) {
              var current = monitor.current;
              if (current.error !== null || current.result !== val) {
                current.error = null;
                current.result = val;
                current.hasResult = true;
                triggerUpdate();
              }
            }, function(err) {
              var current = monitor.current;
              if (current.error !== err) {
                current.error = err;
                triggerUpdate();
              }
            });
            return typeof subscription === "function" ? subscription : subscription.unsubscribe.bind(subscription);
          }, deps);
          if (monitor.current.error)
            throw monitor.current.error;
          return monitor.current.result;
        }
        function useLiveQuery3(querier, deps, defaultResult) {
          return useObservable(function() {
            return dexie.liveQuery(querier);
          }, deps || [], defaultResult);
        }
        function usePermissions(firstArg, table, obj) {
          if (!firstArg)
            throw new TypeError("Invalid arguments to usePermissions(): undefined or null");
          var db2;
          if (arguments.length >= 3) {
            if (!("transaction" in firstArg)) {
              throw new TypeError("Invalid arguments to usePermission(db, table, obj): 1st arg must be a Dexie instance");
            }
            if (typeof table !== "string")
              throw new TypeError("Invalid arguments to usePermission(db, table, obj): 2nd arg must be string");
            if (!obj || typeof obj !== "object")
              throw new TypeError("Invalid arguments to usePermission(db, table, obj): 3rd arg must be an object");
            db2 = firstArg;
          } else {
            if (firstArg instanceof dexie.Dexie)
              throw new TypeError("Invalid arguments to usePermission(db, table, obj): Missing table and obj arguments.");
            if (typeof firstArg.table === "function" && typeof firstArg.db === "object") {
              db2 = firstArg.db;
              obj = firstArg;
              table = firstArg.table();
            } else {
              throw new TypeError("Invalid arguments to usePermissions(). Expected usePermissions(entity: DexieCloudEntity) or usePermissions(db: Dexie, table: string, obj: DexieCloudObject)");
            }
          }
          if (!("cloud" in db2))
            throw new Error("usePermissions() is only for Dexie Cloud but there's no dexie-cloud-addon active in given db.");
          if (!("permissions" in db2["cloud"]))
            throw new Error("usePermissions() requires a newer version of dexie-cloud-addon. Please upgrade it.");
          return useObservable(
            function() {
              return db2.cloud.permissions(obj, table);
            },
            [obj.realmId, obj.owner, table]
          );
        }
        exports2.useLiveQuery = useLiveQuery3;
        exports2.useObservable = useObservable;
        exports2.usePermissions = usePermissions;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/react-calendar/dist/Calendar.css
  var require_ = __commonJS({
    "node_modules/react-calendar/dist/Calendar.css"(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/react-clock/dist/Clock.css
  var require_2 = __commonJS({
    "node_modules/react-clock/dist/Clock.css"(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/make-event-props/dist/umd/index.js
  var require_umd = __commonJS({
    "node_modules/make-event-props/dist/umd/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = exports.allEvents = exports.otherEvents = exports.transitionEvents = exports.animationEvents = exports.imageEvents = exports.mediaEvents = exports.wheelEvents = exports.uiEvents = exports.touchEvents = exports.selectionEvents = exports.pointerEvents = exports.mouseEvents = exports.genericEvents = exports.formEvents = exports.focusEvents = exports.keyboardEvents = exports.compositionEvents = exports.clipboardEvents = void 0;
      var clipboardEvents = ["onCopy", "onCut", "onPaste"];
      exports.clipboardEvents = clipboardEvents;
      var compositionEvents = ["onCompositionEnd", "onCompositionStart", "onCompositionUpdate"];
      exports.compositionEvents = compositionEvents;
      var keyboardEvents = ["onKeyDown", "onKeyPress", "onKeyUp"];
      exports.keyboardEvents = keyboardEvents;
      var focusEvents = ["onFocus", "onBlur"];
      exports.focusEvents = focusEvents;
      var formEvents = ["onChange", "onInput", "onInvalid", "onReset", "onSubmit"];
      exports.formEvents = formEvents;
      var genericEvents = ["onError", "onLoad"];
      exports.genericEvents = genericEvents;
      var mouseEvents = ["onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp"];
      exports.mouseEvents = mouseEvents;
      var pointerEvents = ["onPointerDown", "onPointerMove", "onPointerUp", "onPointerCancel", "onGotPointerCapture", "onLostPointerCapture", "onPointerEnter", "onPointerLeave", "onPointerOver", "onPointerOut"];
      exports.pointerEvents = pointerEvents;
      var selectionEvents = ["onSelect"];
      exports.selectionEvents = selectionEvents;
      var touchEvents = ["onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart"];
      exports.touchEvents = touchEvents;
      var uiEvents = ["onScroll"];
      exports.uiEvents = uiEvents;
      var wheelEvents = ["onWheel"];
      exports.wheelEvents = wheelEvents;
      var mediaEvents = ["onAbort", "onCanPlay", "onCanPlayThrough", "onDurationChange", "onEmptied", "onEncrypted", "onEnded", "onError", "onLoadedData", "onLoadedMetadata", "onLoadStart", "onPause", "onPlay", "onPlaying", "onProgress", "onRateChange", "onSeeked", "onSeeking", "onStalled", "onSuspend", "onTimeUpdate", "onVolumeChange", "onWaiting"];
      exports.mediaEvents = mediaEvents;
      var imageEvents = ["onLoad", "onError"];
      exports.imageEvents = imageEvents;
      var animationEvents = ["onAnimationStart", "onAnimationEnd", "onAnimationIteration"];
      exports.animationEvents = animationEvents;
      var transitionEvents = ["onTransitionEnd"];
      exports.transitionEvents = transitionEvents;
      var otherEvents = ["onToggle"];
      exports.otherEvents = otherEvents;
      var allEvents = [].concat(clipboardEvents, compositionEvents, keyboardEvents, focusEvents, formEvents, genericEvents, mouseEvents, pointerEvents, selectionEvents, touchEvents, uiEvents, wheelEvents, mediaEvents, imageEvents, animationEvents, transitionEvents, otherEvents);
      exports.allEvents = allEvents;
      var makeEventProps = function makeEventProps2(props2, getArgs) {
        var eventProps = {};
        allEvents.forEach(function(eventName) {
          if (!(eventName in props2)) {
            return;
          }
          if (!getArgs) {
            eventProps[eventName] = props2[eventName];
            return;
          }
          eventProps[eventName] = function(event) {
            return props2[eventName](event, getArgs(eventName));
          };
        });
        return eventProps;
      };
      var _default = makeEventProps;
      exports["default"] = _default;
    }
  });

  // node_modules/merge-class-names/dist/umd/index.js
  var require_umd2 = __commonJS({
    "node_modules/merge-class-names/dist/umd/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = mergeClassNames;
      function mergeClassNames() {
        return Array.prototype.slice.call(arguments).reduce(function(classList, arg) {
          return classList.concat(arg);
        }, []).filter(function(arg) {
          return typeof arg === "string";
        }).join(" ");
      }
    }
  });

  // node_modules/lodash.memoize/index.js
  var require_lodash = __commonJS({
    "node_modules/lodash.memoize/index.js"(exports, module) {
      var FUNC_ERROR_TEXT = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal || freeSelf || Function("return this")();
      function getValue2(object, key) {
        return object == null ? void 0 : object[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {
          }
        }
        return result;
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root2["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var splice = arrayProto.splice;
      var Map2 = getNative(root2, "Map");
      var nativeCreate = getNative(Object, "create");
      function Hash(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object, key) {
        var value = getValue2(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      function isKeyable(value) {
        var type2 = typeof value;
        return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result);
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject(value) {
        var type2 = typeof value;
        return !!value && (type2 == "object" || type2 == "function");
      }
      module.exports = memoize;
    }
  });

  // node_modules/get-user-locale/dist/umd/index.js
  var require_umd3 = __commonJS({
    "node_modules/get-user-locale/dist/umd/index.js"(exports) {
      "use strict";
      exports.__esModule = true;
      exports.getUserLocales = exports.getUserLocale = exports["default"] = void 0;
      var _lodash = _interopRequireDefault(require_lodash());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function resolver(options) {
        return JSON.stringify(options);
      }
      function uniqDefined(arr) {
        return arr.filter(function(el, index) {
          return el && arr.indexOf(el) === index;
        });
      }
      function normalizeLocales(arr) {
        return arr.map(function(el) {
          if (!el || el.indexOf("-") === -1 || el.toLowerCase() !== el) {
            return el;
          }
          var splitEl = el.split("-");
          return splitEl[0] + "-" + splitEl[1].toUpperCase();
        });
      }
      function getUserLocalesInternal(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$useFallbackLocal = _ref.useFallbackLocale, useFallbackLocale = _ref$useFallbackLocal === void 0 ? true : _ref$useFallbackLocal, _ref$fallbackLocale = _ref.fallbackLocale, fallbackLocale = _ref$fallbackLocale === void 0 ? "en-US" : _ref$fallbackLocale;
        var languageList = [];
        if (typeof window !== "undefined") {
          var _window = window, navigator2 = _window.navigator;
          languageList = languageList.concat(navigator2.languages, navigator2.language, navigator2.userLanguage, navigator2.browserLanguage, navigator2.systemLanguage);
        }
        if (useFallbackLocale) {
          languageList.push(fallbackLocale);
        }
        return normalizeLocales(uniqDefined(languageList));
      }
      var getUserLocales = (0, _lodash["default"])(getUserLocalesInternal, resolver);
      exports.getUserLocales = getUserLocales;
      function getUserLocaleInternal(options) {
        return getUserLocales(options)[0] || null;
      }
      var getUserLocale = (0, _lodash["default"])(getUserLocaleInternal, resolver);
      exports.getUserLocale = getUserLocale;
      var _default = getUserLocale;
      exports["default"] = _default;
    }
  });

  // node_modules/@wojtekmaj/date-utils/dist/umd/index.js
  var require_umd4 = __commonJS({
    "node_modules/@wojtekmaj/date-utils/dist/umd/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getYear = getYear;
      exports.getMonth = getMonth;
      exports.getMonthHuman = getMonthHuman;
      exports.getDate = getDate;
      exports.getHours = getHours;
      exports.getMinutes = getMinutes;
      exports.getSeconds = getSeconds;
      exports.getCenturyStart = getCenturyStart;
      exports.getDecadeStart = getDecadeStart;
      exports.getYearStart = getYearStart;
      exports.getMonthStart = getMonthStart;
      exports.getDayStart = getDayStart;
      exports.getDaysInMonth = getDaysInMonth;
      exports.getHoursMinutes = getHoursMinutes;
      exports.getHoursMinutesSeconds = getHoursMinutesSeconds;
      exports.getISOLocalMonth = getISOLocalMonth;
      exports.getISOLocalDate = getISOLocalDate;
      exports.getISOLocalDateTime = getISOLocalDateTime;
      exports.getDayRange = exports.getNextDayEnd = exports.getPreviousDayEnd = exports.getDayEnd = exports.getNextDayStart = exports.getPreviousDayStart = exports.getMonthRange = exports.getNextMonthEnd = exports.getPreviousMonthEnd = exports.getMonthEnd = exports.getNextMonthStart = exports.getPreviousMonthStart = exports.getYearRange = exports.getNextYearEnd = exports.getPreviousYearEnd = exports.getYearEnd = exports.getNextYearStart = exports.getPreviousYearStart = exports.getDecadeRange = exports.getNextDecadeEnd = exports.getPreviousDecadeEnd = exports.getDecadeEnd = exports.getNextDecadeStart = exports.getPreviousDecadeStart = exports.getCenturyRange = exports.getNextCenturyEnd = exports.getPreviousCenturyEnd = exports.getCenturyEnd = exports.getNextCenturyStart = exports.getPreviousCenturyStart = void 0;
      function makeGetEdgeOfNeighbor(getPeriod, getEdgeOfPeriod, defaultOffset) {
        return function makeGetEdgeOfNeighborInternal(date) {
          var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOffset;
          var previousPeriod = getPeriod(date) + offset;
          return getEdgeOfPeriod(previousPeriod);
        };
      }
      function makeGetEnd(getBeginOfNextPeriod) {
        return function makeGetEndInternal(date) {
          return new Date(getBeginOfNextPeriod(date).getTime() - 1);
        };
      }
      function makeGetRange(functions) {
        return function makeGetRangeInternal(date) {
          return functions.map(function(fn) {
            return fn(date);
          });
        };
      }
      function getYear(date) {
        if (date instanceof Date) {
          return date.getFullYear();
        }
        if (typeof date === "number") {
          return date;
        }
        var year = parseInt(date, 10);
        if (typeof date === "string" && !isNaN(year)) {
          return year;
        }
        throw new Error("Failed to get year from date: ".concat(date, "."));
      }
      function getMonth(date) {
        if (date instanceof Date) {
          return date.getMonth();
        }
        throw new Error("Failed to get month from date: ".concat(date, "."));
      }
      function getMonthHuman(date) {
        if (date instanceof Date) {
          return date.getMonth() + 1;
        }
        throw new Error("Failed to get human-readable month from date: ".concat(date, "."));
      }
      function getDate(date) {
        if (date instanceof Date) {
          return date.getDate();
        }
        throw new Error("Failed to get year from date: ".concat(date, "."));
      }
      function getHours(date) {
        if (date instanceof Date) {
          return date.getHours();
        }
        if (typeof date === "string") {
          var datePieces = date.split(":");
          if (datePieces.length >= 2) {
            var hoursString = datePieces[0];
            var hours = parseInt(hoursString, 10);
            if (!isNaN(hours)) {
              return hours;
            }
          }
        }
        throw new Error("Failed to get hours from date: ".concat(date, "."));
      }
      function getMinutes(date) {
        if (date instanceof Date) {
          return date.getMinutes();
        }
        if (typeof date === "string") {
          var datePieces = date.split(":");
          if (datePieces.length >= 2) {
            var minutesString = datePieces[1] || 0;
            var minutes = parseInt(minutesString, 10);
            if (!isNaN(minutes)) {
              return minutes;
            }
          }
        }
        throw new Error("Failed to get minutes from date: ".concat(date, "."));
      }
      function getSeconds(date) {
        if (date instanceof Date) {
          return date.getSeconds();
        }
        if (typeof date === "string") {
          var datePieces = date.split(":");
          if (datePieces.length >= 2) {
            var secondsString = datePieces[2] || 0;
            var seconds = parseInt(secondsString, 10);
            if (!isNaN(seconds)) {
              return seconds;
            }
          }
        }
        throw new Error("Failed to get seconds from date: ".concat(date, "."));
      }
      function getCenturyStart(date) {
        var year = getYear(date);
        var centuryStartYear = year + (-year + 1) % 100;
        var centuryStartDate = new Date();
        centuryStartDate.setFullYear(centuryStartYear, 0, 1);
        centuryStartDate.setHours(0, 0, 0, 0);
        return centuryStartDate;
      }
      var getPreviousCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, -100);
      exports.getPreviousCenturyStart = getPreviousCenturyStart;
      var getNextCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, 100);
      exports.getNextCenturyStart = getNextCenturyStart;
      var getCenturyEnd = makeGetEnd(getNextCenturyStart);
      exports.getCenturyEnd = getCenturyEnd;
      var getPreviousCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, -100);
      exports.getPreviousCenturyEnd = getPreviousCenturyEnd;
      var getNextCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, 100);
      exports.getNextCenturyEnd = getNextCenturyEnd;
      var getCenturyRange = makeGetRange([getCenturyStart, getCenturyEnd]);
      exports.getCenturyRange = getCenturyRange;
      function getDecadeStart(date) {
        var year = getYear(date);
        var decadeStartYear = year + (-year + 1) % 10;
        var decadeStartDate = new Date();
        decadeStartDate.setFullYear(decadeStartYear, 0, 1);
        decadeStartDate.setHours(0, 0, 0, 0);
        return decadeStartDate;
      }
      var getPreviousDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, -10);
      exports.getPreviousDecadeStart = getPreviousDecadeStart;
      var getNextDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, 10);
      exports.getNextDecadeStart = getNextDecadeStart;
      var getDecadeEnd = makeGetEnd(getNextDecadeStart);
      exports.getDecadeEnd = getDecadeEnd;
      var getPreviousDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, -10);
      exports.getPreviousDecadeEnd = getPreviousDecadeEnd;
      var getNextDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, 10);
      exports.getNextDecadeEnd = getNextDecadeEnd;
      var getDecadeRange = makeGetRange([getDecadeStart, getDecadeEnd]);
      exports.getDecadeRange = getDecadeRange;
      function getYearStart(date) {
        var year = getYear(date);
        var yearStartDate = new Date();
        yearStartDate.setFullYear(year, 0, 1);
        yearStartDate.setHours(0, 0, 0, 0);
        return yearStartDate;
      }
      var getPreviousYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, -1);
      exports.getPreviousYearStart = getPreviousYearStart;
      var getNextYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, 1);
      exports.getNextYearStart = getNextYearStart;
      var getYearEnd = makeGetEnd(getNextYearStart);
      exports.getYearEnd = getYearEnd;
      var getPreviousYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, -1);
      exports.getPreviousYearEnd = getPreviousYearEnd;
      var getNextYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, 1);
      exports.getNextYearEnd = getNextYearEnd;
      var getYearRange = makeGetRange([getYearStart, getYearEnd]);
      exports.getYearRange = getYearRange;
      function makeGetEdgeOfNeighborMonth(getEdgeOfPeriod, defaultOffset) {
        return function makeGetEdgeOfNeighborMonthInternal(date) {
          var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOffset;
          var year = getYear(date);
          var month = getMonth(date) + offset;
          var previousPeriod = new Date();
          previousPeriod.setFullYear(year, month, 1);
          previousPeriod.setHours(0, 0, 0, 0);
          return getEdgeOfPeriod(previousPeriod);
        };
      }
      function getMonthStart(date) {
        var year = getYear(date);
        var month = getMonth(date);
        var monthStartDate = new Date();
        monthStartDate.setFullYear(year, month, 1);
        monthStartDate.setHours(0, 0, 0, 0);
        return monthStartDate;
      }
      var getPreviousMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, -1);
      exports.getPreviousMonthStart = getPreviousMonthStart;
      var getNextMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, 1);
      exports.getNextMonthStart = getNextMonthStart;
      var getMonthEnd = makeGetEnd(getNextMonthStart);
      exports.getMonthEnd = getMonthEnd;
      var getPreviousMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, -1);
      exports.getPreviousMonthEnd = getPreviousMonthEnd;
      var getNextMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, 1);
      exports.getNextMonthEnd = getNextMonthEnd;
      var getMonthRange = makeGetRange([getMonthStart, getMonthEnd]);
      exports.getMonthRange = getMonthRange;
      function makeGetEdgeOfNeighborDay(getEdgeOfPeriod, defaultOffset) {
        return function makeGetEdgeOfNeighborDayInternal(date) {
          var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOffset;
          var year = getYear(date);
          var month = getMonth(date);
          var day = getDate(date) + offset;
          var previousPeriod = new Date();
          previousPeriod.setFullYear(year, month, day);
          previousPeriod.setHours(0, 0, 0, 0);
          return getEdgeOfPeriod(previousPeriod);
        };
      }
      function getDayStart(date) {
        var year = getYear(date);
        var month = getMonth(date);
        var day = getDate(date);
        var dayStartDate = new Date();
        dayStartDate.setFullYear(year, month, day);
        dayStartDate.setHours(0, 0, 0, 0);
        return dayStartDate;
      }
      var getPreviousDayStart = makeGetEdgeOfNeighborDay(getDayStart, -1);
      exports.getPreviousDayStart = getPreviousDayStart;
      var getNextDayStart = makeGetEdgeOfNeighborDay(getDayStart, 1);
      exports.getNextDayStart = getNextDayStart;
      var getDayEnd = makeGetEnd(getNextDayStart);
      exports.getDayEnd = getDayEnd;
      var getPreviousDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, -1);
      exports.getPreviousDayEnd = getPreviousDayEnd;
      var getNextDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, 1);
      exports.getNextDayEnd = getNextDayEnd;
      var getDayRange = makeGetRange([getDayStart, getDayEnd]);
      exports.getDayRange = getDayRange;
      function getDaysInMonth(date) {
        return getDate(getMonthEnd(date));
      }
      function padStart(num) {
        var val = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
        var numStr = "".concat(num);
        if (numStr.length >= val) {
          return num;
        }
        return "0000".concat(numStr).slice(-val);
      }
      function getHoursMinutes(date) {
        var hours = padStart(getHours(date));
        var minutes = padStart(getMinutes(date));
        return "".concat(hours, ":").concat(minutes);
      }
      function getHoursMinutesSeconds(date) {
        var hours = padStart(getHours(date));
        var minutes = padStart(getMinutes(date));
        var seconds = padStart(getSeconds(date));
        return "".concat(hours, ":").concat(minutes, ":").concat(seconds);
      }
      function getISOLocalMonth(date) {
        var year = padStart(getYear(date), 4);
        var month = padStart(getMonthHuman(date));
        return "".concat(year, "-").concat(month);
      }
      function getISOLocalDate(date) {
        var year = padStart(getYear(date), 4);
        var month = padStart(getMonthHuman(date));
        var day = padStart(getDate(date));
        return "".concat(year, "-").concat(month, "-").concat(day);
      }
      function getISOLocalDateTime(date) {
        return "".concat(getISOLocalDate(date), "T").concat(getHoursMinutesSeconds(date));
      }
    }
  });

  // node_modules/react-calendar/dist/umd/shared/const.js
  var require_const = __commonJS({
    "node_modules/react-calendar/dist/umd/shared/const.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.WEEKDAYS = exports.CALENDAR_TYPE_LOCALES = exports.CALENDAR_TYPES = void 0;
      var _CALENDAR_TYPE_LOCALE;
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var CALENDAR_TYPES = {
        ARABIC: "Arabic",
        HEBREW: "Hebrew",
        ISO_8601: "ISO 8601",
        US: "US"
      };
      exports.CALENDAR_TYPES = CALENDAR_TYPES;
      var CALENDAR_TYPE_LOCALES = (_CALENDAR_TYPE_LOCALE = {}, _defineProperty(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.US, ["en-CA", "en-US", "es-AR", "es-BO", "es-CL", "es-CO", "es-CR", "es-DO", "es-EC", "es-GT", "es-HN", "es-MX", "es-NI", "es-PA", "es-PE", "es-PR", "es-SV", "es-VE", "pt-BR"]), _defineProperty(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.ARABIC, [
        "ar",
        "ar-AE",
        "ar-BH",
        "ar-DZ",
        "ar-EG",
        "ar-IQ",
        "ar-JO",
        "ar-KW",
        "ar-LY",
        "ar-OM",
        "ar-QA",
        "ar-SA",
        "ar-SD",
        "ar-SY",
        "ar-YE",
        "dv",
        "dv-MV",
        "ps",
        "ps-AR"
      ]), _defineProperty(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.HEBREW, ["he", "he-IL"]), _CALENDAR_TYPE_LOCALE);
      exports.CALENDAR_TYPE_LOCALES = CALENDAR_TYPE_LOCALES;
      var WEEKDAYS = _toConsumableArray(Array(7)).map(function(el, index) {
        return index;
      });
      exports.WEEKDAYS = WEEKDAYS;
    }
  });

  // node_modules/react-calendar/dist/umd/shared/dateFormatter.js
  var require_dateFormatter = __commonJS({
    "node_modules/react-calendar/dist/umd/shared/dateFormatter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.formatYear = exports.formatWeekday = exports.formatShortWeekday = exports.formatMonthYear = exports.formatMonth = exports.formatLongDate = exports.formatDay = exports.formatDate = void 0;
      var _getUserLocale = _interopRequireDefault(require_umd3());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var formatterCache = /* @__PURE__ */ new Map();
      function getFormatter(options) {
        return function(locale, date) {
          var localeWithDefault = locale || (0, _getUserLocale["default"])();
          if (!formatterCache.has(localeWithDefault)) {
            formatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
          }
          var formatterCacheLocale = formatterCache.get(localeWithDefault);
          if (!formatterCacheLocale.has(options)) {
            formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault, options).format);
          }
          return formatterCacheLocale.get(options)(date);
        };
      }
      function toSafeHour(date) {
        var safeDate = new Date(date);
        return new Date(safeDate.setHours(12));
      }
      function getSafeFormatter(options) {
        return function(locale, date) {
          return getFormatter(options)(locale, toSafeHour(date));
        };
      }
      var formatDateOptions = {
        day: "numeric",
        month: "numeric",
        year: "numeric"
      };
      var formatDayOptions = {
        day: "numeric"
      };
      var formatLongDateOptions = {
        day: "numeric",
        month: "long",
        year: "numeric"
      };
      var formatMonthOptions = {
        month: "long"
      };
      var formatMonthYearOptions = {
        month: "long",
        year: "numeric"
      };
      var formatShortWeekdayOptions = {
        weekday: "short"
      };
      var formatWeekdayOptions = {
        weekday: "long"
      };
      var formatYearOptions = {
        year: "numeric"
      };
      var formatDate = getSafeFormatter(formatDateOptions);
      exports.formatDate = formatDate;
      var formatDay = getSafeFormatter(formatDayOptions);
      exports.formatDay = formatDay;
      var formatLongDate = getSafeFormatter(formatLongDateOptions);
      exports.formatLongDate = formatLongDate;
      var formatMonth = getSafeFormatter(formatMonthOptions);
      exports.formatMonth = formatMonth;
      var formatMonthYear = getSafeFormatter(formatMonthYearOptions);
      exports.formatMonthYear = formatMonthYear;
      var formatShortWeekday = getSafeFormatter(formatShortWeekdayOptions);
      exports.formatShortWeekday = formatShortWeekday;
      var formatWeekday = getSafeFormatter(formatWeekdayOptions);
      exports.formatWeekday = formatWeekday;
      var formatYear = getSafeFormatter(formatYearOptions);
      exports.formatYear = formatYear;
    }
  });

  // node_modules/react-calendar/dist/umd/shared/dates.js
  var require_dates = __commonJS({
    "node_modules/react-calendar/dist/umd/shared/dates.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getBegin = getBegin;
      exports.getBeginNext = getBeginNext;
      exports.getBeginNext2 = void 0;
      exports.getBeginOfCenturyYear = getBeginOfCenturyYear;
      exports.getBeginOfDecadeYear = getBeginOfDecadeYear;
      exports.getBeginOfWeek = getBeginOfWeek;
      exports.getBeginPrevious = getBeginPrevious;
      exports.getBeginPrevious2 = void 0;
      exports.getCenturyLabel = getCenturyLabel;
      exports.getDayOfWeek = getDayOfWeek;
      exports.getDecadeLabel = getDecadeLabel;
      exports.getEnd = getEnd;
      exports.getEndPrevious = getEndPrevious;
      exports.getEndPrevious2 = void 0;
      exports.getRange = getRange;
      exports.getValueRange = getValueRange;
      exports.getWeekNumber = getWeekNumber;
      exports.isWeekend = isWeekend;
      var _dateUtils = require_umd4();
      var _const = require_const();
      var _dateFormatter = require_dateFormatter();
      var SUNDAY = _const.WEEKDAYS[0];
      var FRIDAY = _const.WEEKDAYS[5];
      var SATURDAY = _const.WEEKDAYS[6];
      function getDayOfWeek(date) {
        var calendarType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _const.CALENDAR_TYPES.ISO_8601;
        var weekday = date.getDay();
        switch (calendarType) {
          case _const.CALENDAR_TYPES.ISO_8601:
            return (weekday + 6) % 7;
          case _const.CALENDAR_TYPES.ARABIC:
            return (weekday + 1) % 7;
          case _const.CALENDAR_TYPES.HEBREW:
          case _const.CALENDAR_TYPES.US:
            return weekday;
          default:
            throw new Error("Unsupported calendar type.");
        }
      }
      function getBeginOfCenturyYear(date) {
        var beginOfCentury = (0, _dateUtils.getCenturyStart)(date);
        return (0, _dateUtils.getYear)(beginOfCentury);
      }
      function getBeginOfDecadeYear(date) {
        var beginOfDecade = (0, _dateUtils.getDecadeStart)(date);
        return (0, _dateUtils.getYear)(beginOfDecade);
      }
      function getBeginOfWeek(date) {
        var calendarType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _const.CALENDAR_TYPES.ISO_8601;
        var year = (0, _dateUtils.getYear)(date);
        var monthIndex = (0, _dateUtils.getMonth)(date);
        var day = date.getDate() - getDayOfWeek(date, calendarType);
        return new Date(year, monthIndex, day);
      }
      function getWeekNumber(date) {
        var calendarType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _const.CALENDAR_TYPES.ISO_8601;
        var calendarTypeForWeekNumber = calendarType === _const.CALENDAR_TYPES.US ? _const.CALENDAR_TYPES.US : _const.CALENDAR_TYPES.ISO_8601;
        var beginOfWeek = getBeginOfWeek(date, calendarType);
        var year = (0, _dateUtils.getYear)(date) + 1;
        var dayInWeekOne;
        var beginOfFirstWeek;
        do {
          dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === _const.CALENDAR_TYPES.ISO_8601 ? 4 : 1);
          beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarType);
          year -= 1;
        } while (date < beginOfFirstWeek);
        return Math.round((beginOfWeek - beginOfFirstWeek) / (864e5 * 7)) + 1;
      }
      function getBegin(rangeType, date) {
        switch (rangeType) {
          case "century":
            return (0, _dateUtils.getCenturyStart)(date);
          case "decade":
            return (0, _dateUtils.getDecadeStart)(date);
          case "year":
            return (0, _dateUtils.getYearStart)(date);
          case "month":
            return (0, _dateUtils.getMonthStart)(date);
          case "day":
            return (0, _dateUtils.getDayStart)(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getBeginPrevious(rangeType, date) {
        switch (rangeType) {
          case "century":
            return (0, _dateUtils.getPreviousCenturyStart)(date);
          case "decade":
            return (0, _dateUtils.getPreviousDecadeStart)(date);
          case "year":
            return (0, _dateUtils.getPreviousYearStart)(date);
          case "month":
            return (0, _dateUtils.getPreviousMonthStart)(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getBeginNext(rangeType, date) {
        switch (rangeType) {
          case "century":
            return (0, _dateUtils.getNextCenturyStart)(date);
          case "decade":
            return (0, _dateUtils.getNextDecadeStart)(date);
          case "year":
            return (0, _dateUtils.getNextYearStart)(date);
          case "month":
            return (0, _dateUtils.getNextMonthStart)(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      var getBeginPrevious2 = function getBeginPrevious22(rangeType, date) {
        switch (rangeType) {
          case "decade":
            return (0, _dateUtils.getPreviousDecadeStart)(date, -100);
          case "year":
            return (0, _dateUtils.getPreviousYearStart)(date, -10);
          case "month":
            return (0, _dateUtils.getPreviousMonthStart)(date, -12);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      };
      exports.getBeginPrevious2 = getBeginPrevious2;
      var getBeginNext2 = function getBeginNext22(rangeType, date) {
        switch (rangeType) {
          case "decade":
            return (0, _dateUtils.getNextDecadeStart)(date, 100);
          case "year":
            return (0, _dateUtils.getNextYearStart)(date, 10);
          case "month":
            return (0, _dateUtils.getNextMonthStart)(date, 12);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      };
      exports.getBeginNext2 = getBeginNext2;
      function getEnd(rangeType, date) {
        switch (rangeType) {
          case "century":
            return (0, _dateUtils.getCenturyEnd)(date);
          case "decade":
            return (0, _dateUtils.getDecadeEnd)(date);
          case "year":
            return (0, _dateUtils.getYearEnd)(date);
          case "month":
            return (0, _dateUtils.getMonthEnd)(date);
          case "day":
            return (0, _dateUtils.getDayEnd)(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getEndPrevious(rangeType, date) {
        switch (rangeType) {
          case "century":
            return (0, _dateUtils.getPreviousCenturyEnd)(date);
          case "decade":
            return (0, _dateUtils.getPreviousDecadeEnd)(date);
          case "year":
            return (0, _dateUtils.getPreviousYearEnd)(date);
          case "month":
            return (0, _dateUtils.getPreviousMonthEnd)(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      var getEndPrevious2 = function getEndPrevious22(rangeType, date) {
        switch (rangeType) {
          case "decade":
            return (0, _dateUtils.getPreviousDecadeEnd)(date, -100);
          case "year":
            return (0, _dateUtils.getPreviousYearEnd)(date, -10);
          case "month":
            return (0, _dateUtils.getPreviousMonthEnd)(date, -12);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      };
      exports.getEndPrevious2 = getEndPrevious2;
      function getRange(rangeType, date) {
        switch (rangeType) {
          case "century":
            return (0, _dateUtils.getCenturyRange)(date);
          case "decade":
            return (0, _dateUtils.getDecadeRange)(date);
          case "year":
            return (0, _dateUtils.getYearRange)(date);
          case "month":
            return (0, _dateUtils.getMonthRange)(date);
          case "day":
            return (0, _dateUtils.getDayRange)(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getValueRange(rangeType, date1, date2) {
        var rawNextValue = [date1, date2].sort(function(a, b) {
          return a - b;
        });
        return [getBegin(rangeType, rawNextValue[0]), getEnd(rangeType, rawNextValue[1])];
      }
      function toYearLabel(locale) {
        var formatYear = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _dateFormatter.formatYear;
        var dates = arguments.length > 2 ? arguments[2] : void 0;
        return dates.map(function(date) {
          return formatYear(locale, date);
        }).join(" \u2013 ");
      }
      function getCenturyLabel(locale, formatYear, date) {
        return toYearLabel(locale, formatYear, (0, _dateUtils.getCenturyRange)(date));
      }
      function getDecadeLabel(locale, formatYear, date) {
        return toYearLabel(locale, formatYear, (0, _dateUtils.getDecadeRange)(date));
      }
      function isWeekend(date) {
        var calendarType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _const.CALENDAR_TYPES.ISO_8601;
        var weekday = date.getDay();
        switch (calendarType) {
          case _const.CALENDAR_TYPES.ARABIC:
          case _const.CALENDAR_TYPES.HEBREW:
            return weekday === FRIDAY || weekday === SATURDAY;
          case _const.CALENDAR_TYPES.ISO_8601:
          case _const.CALENDAR_TYPES.US:
            return weekday === SATURDAY || weekday === SUNDAY;
          default:
            throw new Error("Unsupported calendar type.");
        }
      }
    }
  });

  // node_modules/react-calendar/dist/umd/shared/propTypes.js
  var require_propTypes = __commonJS({
    "node_modules/react-calendar/dist/umd/shared/propTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.tileProps = exports.tileGroupProps = exports.isViews = exports.isView = exports.isValue = exports.isRef = exports.isMinDate = exports.isMaxDate = exports.isClassName = exports.isCalendarType = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _const = require_const();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      var calendarTypes = Object.values(_const.CALENDAR_TYPES);
      var allViews = ["century", "decade", "year", "month"];
      var isCalendarType = _propTypes["default"].oneOf(calendarTypes);
      exports.isCalendarType = isCalendarType;
      var isClassName = _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]);
      exports.isClassName = isClassName;
      var isMinDate = function isMinDate2(props2, propName, componentName) {
        var minDate2 = props2[propName];
        if (!minDate2) {
          return null;
        }
        if (!(minDate2 instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate2), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var maxDate = props2.maxDate;
        if (maxDate && minDate2 > maxDate) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate2), "` supplied to `").concat(componentName, "`, minDate cannot be larger than maxDate."));
        }
        return null;
      };
      exports.isMinDate = isMinDate;
      var isMaxDate = function isMaxDate2(props2, propName, componentName) {
        var maxDate = props2[propName];
        if (!maxDate) {
          return null;
        }
        if (!(maxDate instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var minDate2 = props2.minDate;
        if (minDate2 && maxDate < minDate2) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, maxDate cannot be smaller than minDate."));
        }
        return null;
      };
      exports.isMaxDate = isMaxDate;
      var isRef = _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].shape({
        current: _propTypes["default"].any
      })]);
      exports.isRef = isRef;
      var isValue = _propTypes["default"].oneOfType([_propTypes["default"].instanceOf(Date), _propTypes["default"].arrayOf(_propTypes["default"].instanceOf(Date))]);
      exports.isValue = isValue;
      var isViews = _propTypes["default"].arrayOf(_propTypes["default"].oneOf(allViews));
      exports.isViews = isViews;
      var isView = function isView2(props2, propName, componentName) {
        var view = props2[propName];
        var views = props2.views;
        var allowedViews = views || allViews;
        if (view !== void 0 && allowedViews.indexOf(view) === -1) {
          return new Error("Invalid prop `".concat(propName, "` of value `").concat(view, "` supplied to `").concat(componentName, "`, expected one of [").concat(allowedViews.map(function(a) {
            return '"'.concat(a, '"');
          }).join(", "), "]."));
        }
        return null;
      };
      exports.isView = isView;
      isView.isRequired = function(props2, propName, componentName) {
        var view = props2[propName];
        if (!view) {
          return new Error("The prop `".concat(propName, "` is marked as required in `").concat(componentName, "`, but its value is `").concat(view, "`."));
        }
        return isView(props2, propName, componentName);
      };
      var tileGroupProps = {
        activeStartDate: _propTypes["default"].instanceOf(Date).isRequired,
        hover: _propTypes["default"].instanceOf(Date),
        locale: _propTypes["default"].string,
        maxDate: isMaxDate,
        minDate: isMinDate,
        onClick: _propTypes["default"].func,
        onMouseOver: _propTypes["default"].func,
        tileClassName: _propTypes["default"].oneOfType([_propTypes["default"].func, isClassName]),
        tileContent: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node]),
        value: isValue,
        valueType: _propTypes["default"].string
      };
      exports.tileGroupProps = tileGroupProps;
      var tileProps = {
        activeStartDate: _propTypes["default"].instanceOf(Date).isRequired,
        classes: _propTypes["default"].arrayOf(_propTypes["default"].string).isRequired,
        date: _propTypes["default"].instanceOf(Date).isRequired,
        locale: _propTypes["default"].string,
        maxDate: isMaxDate,
        minDate: isMinDate,
        onClick: _propTypes["default"].func,
        onMouseOver: _propTypes["default"].func,
        style: _propTypes["default"].objectOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])),
        tileClassName: _propTypes["default"].oneOfType([_propTypes["default"].func, isClassName]),
        tileContent: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node]),
        tileDisabled: _propTypes["default"].func
      };
      exports.tileProps = tileProps;
    }
  });

  // node_modules/react-calendar/dist/umd/Calendar/Navigation.js
  var require_Navigation = __commonJS({
    "node_modules/react-calendar/dist/umd/Calendar/Navigation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Navigation;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _getUserLocale = require_umd3();
      var _dates = require_dates();
      var _dateFormatter = require_dateFormatter();
      var _propTypes2 = require_propTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var className = "react-calendar__navigation";
      function Navigation(_ref) {
        var activeStartDate = _ref.activeStartDate, drillUp = _ref.drillUp, _ref$formatMonthYear = _ref.formatMonthYear, formatMonthYear = _ref$formatMonthYear === void 0 ? _dateFormatter.formatMonthYear : _ref$formatMonthYear, _ref$formatYear = _ref.formatYear, formatYear = _ref$formatYear === void 0 ? _dateFormatter.formatYear : _ref$formatYear, locale = _ref.locale, maxDate = _ref.maxDate, minDate2 = _ref.minDate, _ref$navigationAriaLa = _ref.navigationAriaLabel, navigationAriaLabel = _ref$navigationAriaLa === void 0 ? "" : _ref$navigationAriaLa, navigationAriaLive = _ref.navigationAriaLive, navigationLabel = _ref.navigationLabel, _ref$next2AriaLabel = _ref.next2AriaLabel, next2AriaLabel = _ref$next2AriaLabel === void 0 ? "" : _ref$next2AriaLabel, _ref$next2Label = _ref.next2Label, next2Label = _ref$next2Label === void 0 ? "\xBB" : _ref$next2Label, _ref$nextAriaLabel = _ref.nextAriaLabel, nextAriaLabel = _ref$nextAriaLabel === void 0 ? "" : _ref$nextAriaLabel, _ref$nextLabel = _ref.nextLabel, nextLabel = _ref$nextLabel === void 0 ? "\u203A" : _ref$nextLabel, _ref$prev2AriaLabel = _ref.prev2AriaLabel, prev2AriaLabel = _ref$prev2AriaLabel === void 0 ? "" : _ref$prev2AriaLabel, _ref$prev2Label = _ref.prev2Label, prev2Label = _ref$prev2Label === void 0 ? "\xAB" : _ref$prev2Label, _ref$prevAriaLabel = _ref.prevAriaLabel, prevAriaLabel = _ref$prevAriaLabel === void 0 ? "" : _ref$prevAriaLabel, _ref$prevLabel = _ref.prevLabel, prevLabel = _ref$prevLabel === void 0 ? "\u2039" : _ref$prevLabel, setActiveStartDate = _ref.setActiveStartDate, showDoubleView = _ref.showDoubleView, view = _ref.view, views = _ref.views;
        var drillUpAvailable = views.indexOf(view) > 0;
        var shouldShowPrevNext2Buttons = view !== "century";
        var previousActiveStartDate = (0, _dates.getBeginPrevious)(view, activeStartDate);
        var previousActiveStartDate2 = shouldShowPrevNext2Buttons && (0, _dates.getBeginPrevious2)(view, activeStartDate);
        var nextActiveStartDate = (0, _dates.getBeginNext)(view, activeStartDate);
        var nextActiveStartDate2 = shouldShowPrevNext2Buttons && (0, _dates.getBeginNext2)(view, activeStartDate);
        var prevButtonDisabled = function() {
          if (previousActiveStartDate.getFullYear() < 0) {
            return true;
          }
          var previousActiveEndDate = (0, _dates.getEndPrevious)(view, activeStartDate);
          return minDate2 && minDate2 >= previousActiveEndDate;
        }();
        var prev2ButtonDisabled = shouldShowPrevNext2Buttons && function() {
          if (previousActiveStartDate2.getFullYear() < 0) {
            return true;
          }
          var previousActiveEndDate = (0, _dates.getEndPrevious2)(view, activeStartDate);
          return minDate2 && minDate2 >= previousActiveEndDate;
        }();
        var nextButtonDisabled = maxDate && maxDate < nextActiveStartDate;
        var next2ButtonDisabled = shouldShowPrevNext2Buttons && maxDate && maxDate < nextActiveStartDate2;
        function onClickPrevious() {
          setActiveStartDate(previousActiveStartDate, "prev");
        }
        function onClickPrevious2() {
          setActiveStartDate(previousActiveStartDate2, "prev2");
        }
        function onClickNext() {
          setActiveStartDate(nextActiveStartDate, "next");
        }
        function onClickNext2() {
          setActiveStartDate(nextActiveStartDate2, "next2");
        }
        function renderLabel(date) {
          var label = function() {
            switch (view) {
              case "century":
                return (0, _dates.getCenturyLabel)(locale, formatYear, date);
              case "decade":
                return (0, _dates.getDecadeLabel)(locale, formatYear, date);
              case "year":
                return formatYear(locale, date);
              case "month":
                return formatMonthYear(locale, date);
              default:
                throw new Error("Invalid view: ".concat(view, "."));
            }
          }();
          return navigationLabel ? navigationLabel({
            date,
            label,
            locale: locale || (0, _getUserLocale.getUserLocale)(),
            view
          }) : label;
        }
        function renderButton() {
          var labelClassName = "".concat(className, "__label");
          return /* @__PURE__ */ _react["default"].createElement("button", {
            "aria-label": navigationAriaLabel,
            "aria-live": navigationAriaLive,
            className: labelClassName,
            disabled: !drillUpAvailable,
            onClick: drillUp,
            style: {
              flexGrow: 1
            },
            type: "button"
          }, /* @__PURE__ */ _react["default"].createElement("span", {
            className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--from")
          }, renderLabel(activeStartDate)), showDoubleView && /* @__PURE__ */ _react["default"].createElement(_react["default"].Fragment, null, /* @__PURE__ */ _react["default"].createElement("span", {
            className: "".concat(labelClassName, "__divider")
          }, " \u2013 "), /* @__PURE__ */ _react["default"].createElement("span", {
            className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--to")
          }, renderLabel(nextActiveStartDate))));
        }
        return /* @__PURE__ */ _react["default"].createElement("div", {
          className
        }, prev2Label !== null && shouldShowPrevNext2Buttons && /* @__PURE__ */ _react["default"].createElement("button", {
          "aria-label": prev2AriaLabel,
          className: "".concat(className, "__arrow ").concat(className, "__prev2-button"),
          disabled: prev2ButtonDisabled,
          onClick: onClickPrevious2,
          type: "button"
        }, prev2Label), prevLabel !== null && /* @__PURE__ */ _react["default"].createElement("button", {
          "aria-label": prevAriaLabel,
          className: "".concat(className, "__arrow ").concat(className, "__prev-button"),
          disabled: prevButtonDisabled,
          onClick: onClickPrevious,
          type: "button"
        }, prevLabel), renderButton(), nextLabel !== null && /* @__PURE__ */ _react["default"].createElement("button", {
          "aria-label": nextAriaLabel,
          className: "".concat(className, "__arrow ").concat(className, "__next-button"),
          disabled: nextButtonDisabled,
          onClick: onClickNext,
          type: "button"
        }, nextLabel), next2Label !== null && shouldShowPrevNext2Buttons && /* @__PURE__ */ _react["default"].createElement("button", {
          "aria-label": next2AriaLabel,
          className: "".concat(className, "__arrow ").concat(className, "__next2-button"),
          disabled: next2ButtonDisabled,
          onClick: onClickNext2,
          type: "button"
        }, next2Label));
      }
      Navigation.propTypes = {
        activeStartDate: _propTypes["default"].instanceOf(Date).isRequired,
        drillUp: _propTypes["default"].func.isRequired,
        formatMonthYear: _propTypes["default"].func,
        formatYear: _propTypes["default"].func,
        locale: _propTypes["default"].string,
        maxDate: _propTypes["default"].instanceOf(Date),
        minDate: _propTypes["default"].instanceOf(Date),
        navigationAriaLabel: _propTypes["default"].string,
        navigationAriaLive: _propTypes["default"].string,
        navigationLabel: _propTypes["default"].func,
        next2AriaLabel: _propTypes["default"].string,
        next2Label: _propTypes["default"].node,
        nextAriaLabel: _propTypes["default"].string,
        nextLabel: _propTypes["default"].node,
        prev2AriaLabel: _propTypes["default"].string,
        prev2Label: _propTypes["default"].node,
        prevAriaLabel: _propTypes["default"].string,
        prevLabel: _propTypes["default"].node,
        setActiveStartDate: _propTypes["default"].func.isRequired,
        showDoubleView: _propTypes["default"].bool,
        view: _propTypes2.isView.isRequired,
        views: _propTypes2.isViews.isRequired
      };
    }
  });

  // node_modules/react-calendar/dist/umd/Flex.js
  var require_Flex = __commonJS({
    "node_modules/react-calendar/dist/umd/Flex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Flex;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _excluded32 = ["children", "className", "direction", "count", "offset", "style", "wrap"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function toPercent(num) {
        return "".concat(num, "%");
      }
      function Flex(_ref) {
        var children = _ref.children, className = _ref.className, direction = _ref.direction, count = _ref.count, offset = _ref.offset, style2 = _ref.style, wrap2 = _ref.wrap, otherProps = _objectWithoutProperties(_ref, _excluded32);
        return /* @__PURE__ */ _react["default"].createElement("div", _extends2({
          className,
          style: _objectSpread({
            display: "flex",
            flexDirection: direction,
            flexWrap: wrap2 ? "wrap" : "no-wrap"
          }, style2)
        }, otherProps), _react["default"].Children.map(children, function(child, index) {
          return /* @__PURE__ */ _react["default"].cloneElement(child, _objectSpread(_objectSpread({}, child.props), {}, {
            style: {
              flexBasis: toPercent(100 / count),
              flexShrink: 0,
              flexGrow: 0,
              overflow: "hidden",
              marginLeft: offset && index === 0 ? toPercent(100 * offset / count) : null
            }
          }));
        }));
      }
      Flex.propTypes = {
        children: _propTypes["default"].node,
        className: _propTypes["default"].string,
        count: _propTypes["default"].number.isRequired,
        direction: _propTypes["default"].string,
        offset: _propTypes["default"].number,
        style: _propTypes["default"].objectOf(_propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])),
        wrap: _propTypes["default"].bool
      };
    }
  });

  // node_modules/react-calendar/dist/umd/shared/utils.js
  var require_utils5 = __commonJS({
    "node_modules/react-calendar/dist/umd/shared/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.between = between;
      exports.doRangesOverlap = doRangesOverlap;
      exports.getTileClasses = getTileClasses;
      exports.isRangeWithinRange = isRangeWithinRange;
      exports.isValueWithinRange = isValueWithinRange;
      var _dates = require_dates();
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function between(value, min, max) {
        if (min && min > value) {
          return min;
        }
        if (max && max < value) {
          return max;
        }
        return value;
      }
      function isValueWithinRange(value, range) {
        return range[0] <= value && range[1] >= value;
      }
      function isRangeWithinRange(greaterRange, smallerRange) {
        return greaterRange[0] <= smallerRange[0] && greaterRange[1] >= smallerRange[1];
      }
      function doRangesOverlap(range1, range2) {
        return isValueWithinRange(range1[0], range2) || isValueWithinRange(range1[1], range2);
      }
      function getRangeClassNames(valueRange, dateRange, baseClassName) {
        var isRange = doRangesOverlap(dateRange, valueRange);
        var classes = [];
        if (isRange) {
          classes.push(baseClassName);
          var isRangeStart = isValueWithinRange(valueRange[0], dateRange);
          var isRangeEnd = isValueWithinRange(valueRange[1], dateRange);
          if (isRangeStart) {
            classes.push("".concat(baseClassName, "Start"));
          }
          if (isRangeEnd) {
            classes.push("".concat(baseClassName, "End"));
          }
          if (isRangeStart && isRangeEnd) {
            classes.push("".concat(baseClassName, "BothEnds"));
          }
        }
        return classes;
      }
      function getTileClasses() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, value = _ref.value, valueType = _ref.valueType, date = _ref.date, dateType = _ref.dateType, hover = _ref.hover;
        var className = "react-calendar__tile";
        var classes = [className];
        if (!date) {
          return classes;
        }
        if (!Array.isArray(date) && !dateType) {
          throw new Error("getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.");
        }
        var now = new Date();
        var dateRange = Array.isArray(date) ? date : (0, _dates.getRange)(dateType, date);
        if (isValueWithinRange(now, dateRange)) {
          classes.push("".concat(className, "--now"));
        }
        if (!value) {
          return classes;
        }
        if (!Array.isArray(value) && !valueType) {
          throw new Error("getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.");
        }
        var valueRange = Array.isArray(value) ? value : (0, _dates.getRange)(valueType, value);
        if (isRangeWithinRange(valueRange, dateRange)) {
          classes.push("".concat(className, "--active"));
        } else if (doRangesOverlap(valueRange, dateRange)) {
          classes.push("".concat(className, "--hasActive"));
        }
        var valueRangeClassNames = getRangeClassNames(valueRange, dateRange, "".concat(className, "--range"));
        classes.push.apply(classes, _toConsumableArray(valueRangeClassNames));
        var valueArray = [].concat(value);
        if (hover && valueArray.length === 1) {
          var hoverRange = hover > valueRange[0] ? [valueRange[0], hover] : [hover, valueRange[0]];
          var hoverRangeClassNames = getRangeClassNames(hoverRange, dateRange, "".concat(className, "--hover"));
          classes.push.apply(classes, _toConsumableArray(hoverRangeClassNames));
        }
        return classes;
      }
    }
  });

  // node_modules/react-calendar/dist/umd/TileGroup.js
  var require_TileGroup = __commonJS({
    "node_modules/react-calendar/dist/umd/TileGroup.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = TileGroup;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _Flex = _interopRequireDefault(require_Flex());
      var _utils = require_utils5();
      var _propTypes2 = require_propTypes();
      var _excluded32 = ["className", "count", "dateTransform", "dateType", "end", "hover", "offset", "start", "step", "tile", "value", "valueType"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function TileGroup(_ref) {
        var className = _ref.className, _ref$count = _ref.count, count = _ref$count === void 0 ? 3 : _ref$count, dateTransform = _ref.dateTransform, dateType = _ref.dateType, end = _ref.end, hover = _ref.hover, offset = _ref.offset, start = _ref.start, _ref$step = _ref.step, step = _ref$step === void 0 ? 1 : _ref$step, Tile = _ref.tile, value = _ref.value, valueType = _ref.valueType, tileProps = _objectWithoutProperties(_ref, _excluded32);
        var tiles = [];
        for (var point = start; point <= end; point += step) {
          var date = dateTransform(point);
          tiles.push(/* @__PURE__ */ _react["default"].createElement(Tile, _extends2({
            key: date.getTime(),
            classes: (0, _utils.getTileClasses)({
              value,
              valueType,
              date,
              dateType,
              hover
            }),
            date,
            point
          }, tileProps)));
        }
        return /* @__PURE__ */ _react["default"].createElement(_Flex["default"], {
          className,
          count,
          offset,
          wrap: true
        }, tiles);
      }
      TileGroup.propTypes = _objectSpread(_objectSpread({}, _propTypes2.tileGroupProps), {}, {
        activeStartDate: _propTypes["default"].instanceOf(Date),
        count: _propTypes["default"].number,
        dateTransform: _propTypes["default"].func.isRequired,
        dateType: _propTypes["default"].string,
        offset: _propTypes["default"].number,
        step: _propTypes["default"].number,
        tile: _propTypes["default"].func.isRequired
      });
    }
  });

  // node_modules/react-calendar/dist/umd/Tile.js
  var require_Tile = __commonJS({
    "node_modules/react-calendar/dist/umd/Tile.js"(exports) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _react = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _propTypes2 = require_propTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props2) {
        for (var i = 0; i < props2.length; i++) {
          var descriptor = props2[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf2(subClass, superClass);
      }
      function _setPrototypeOf2(o, p) {
        _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf2(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized2(self2);
      }
      function _assertThisInitialized2(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function datesAreDifferent(date1, date2) {
        return date1 && !date2 || !date1 && date2 || date1 && date2 && date1.getTime() !== date2.getTime();
      }
      function getValue2(nextProps, prop) {
        var activeStartDate = nextProps.activeStartDate, date = nextProps.date, view = nextProps.view;
        return typeof prop === "function" ? prop({
          activeStartDate,
          date,
          view
        }) : prop;
      }
      var Tile = /* @__PURE__ */ function(_Component) {
        _inherits(Tile2, _Component);
        var _super = _createSuper(Tile2);
        function Tile2() {
          var _this;
          _classCallCheck(this, Tile2);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty(_assertThisInitialized2(_this), "state", {});
          return _this;
        }
        _createClass(Tile2, [{
          key: "render",
          value: function render() {
            var _this$props = this.props, activeStartDate = _this$props.activeStartDate, children = _this$props.children, classes = _this$props.classes, date = _this$props.date, formatAbbr = _this$props.formatAbbr, locale = _this$props.locale, maxDate = _this$props.maxDate, maxDateTransform = _this$props.maxDateTransform, minDate2 = _this$props.minDate, minDateTransform = _this$props.minDateTransform, onClick = _this$props.onClick, onMouseOver = _this$props.onMouseOver, style2 = _this$props.style, tileDisabled = _this$props.tileDisabled, view = _this$props.view;
            var _this$state = this.state, tileClassName = _this$state.tileClassName, tileContent = _this$state.tileContent;
            return /* @__PURE__ */ _react["default"].createElement("button", {
              className: (0, _mergeClassNames["default"])(classes, tileClassName),
              disabled: minDate2 && minDateTransform(minDate2) > date || maxDate && maxDateTransform(maxDate) < date || tileDisabled && tileDisabled({
                activeStartDate,
                date,
                view
              }),
              onClick: onClick && function(event) {
                return onClick(date, event);
              },
              onFocus: onMouseOver && function() {
                return onMouseOver(date);
              },
              onMouseOver: onMouseOver && function() {
                return onMouseOver(date);
              },
              style: style2,
              type: "button"
            }, formatAbbr ? /* @__PURE__ */ _react["default"].createElement("abbr", {
              "aria-label": formatAbbr(locale, date)
            }, children) : children, tileContent);
          }
        }], [{
          key: "getDerivedStateFromProps",
          value: function getDerivedStateFromProps(nextProps, prevState) {
            var activeStartDate = nextProps.activeStartDate, tileClassName = nextProps.tileClassName, tileContent = nextProps.tileContent;
            var nextState = {};
            if (tileClassName !== prevState.tileClassNameProps || datesAreDifferent(activeStartDate, prevState.activeStartDateProps)) {
              nextState.tileClassName = getValue2(nextProps, tileClassName);
              nextState.tileClassNameProps = tileClassName;
            }
            if (tileContent !== prevState.tileContentProps || datesAreDifferent(activeStartDate, prevState.activeStartDateProps)) {
              nextState.tileContent = getValue2(nextProps, tileContent);
              nextState.tileContentProps = tileContent;
            }
            nextState.activeStartDateProps = activeStartDate;
            return nextState;
          }
        }]);
        return Tile2;
      }(_react.Component);
      exports["default"] = Tile;
      Tile.propTypes = _objectSpread(_objectSpread({}, _propTypes2.tileProps), {}, {
        children: _propTypes["default"].node.isRequired,
        formatAbbr: _propTypes["default"].func,
        maxDateTransform: _propTypes["default"].func.isRequired,
        minDateTransform: _propTypes["default"].func.isRequired
      });
    }
  });

  // node_modules/react-calendar/dist/umd/CenturyView/Decade.js
  var require_Decade = __commonJS({
    "node_modules/react-calendar/dist/umd/CenturyView/Decade.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Decade;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Tile = _interopRequireDefault(require_Tile());
      var _dates = require_dates();
      var _dateFormatter = require_dateFormatter();
      var _propTypes2 = require_propTypes();
      var _excluded32 = ["classes", "formatYear"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var className = "react-calendar__century-view__decades__decade";
      function Decade(_ref) {
        var classes = _ref.classes, _ref$formatYear = _ref.formatYear, formatYear = _ref$formatYear === void 0 ? _dateFormatter.formatYear : _ref$formatYear, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var date = otherProps.date, locale = otherProps.locale;
        return /* @__PURE__ */ _react["default"].createElement(_Tile["default"], _extends2({}, otherProps, {
          classes: [].concat(classes, className),
          maxDateTransform: _dateUtils.getDecadeEnd,
          minDateTransform: _dateUtils.getDecadeStart,
          view: "century"
        }), (0, _dates.getDecadeLabel)(locale, formatYear, date));
      }
      Decade.propTypes = _objectSpread(_objectSpread({}, _propTypes2.tileProps), {}, {
        formatYear: _propTypes["default"].func
      });
    }
  });

  // node_modules/react-calendar/dist/umd/CenturyView/Decades.js
  var require_Decades = __commonJS({
    "node_modules/react-calendar/dist/umd/CenturyView/Decades.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Decades;
      var _react = _interopRequireDefault(require_react());
      var _dateUtils = require_umd4();
      var _TileGroup = _interopRequireDefault(require_TileGroup());
      var _Decade = _interopRequireDefault(require_Decade());
      var _dates = require_dates();
      var _propTypes = require_propTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function Decades(props2) {
        var activeStartDate = props2.activeStartDate;
        var start = (0, _dates.getBeginOfCenturyYear)(activeStartDate);
        var end = start + 99;
        return /* @__PURE__ */ _react["default"].createElement(_TileGroup["default"], _extends2({}, props2, {
          className: "react-calendar__century-view__decades",
          dateTransform: _dateUtils.getDecadeStart,
          dateType: "decade",
          end,
          start,
          step: 10,
          tile: _Decade["default"]
        }));
      }
      Decades.propTypes = _objectSpread({}, _propTypes.tileGroupProps);
    }
  });

  // node_modules/react-calendar/dist/umd/CenturyView.js
  var require_CenturyView = __commonJS({
    "node_modules/react-calendar/dist/umd/CenturyView.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = CenturyView;
      var _react = _interopRequireDefault(require_react());
      var _Decades = _interopRequireDefault(require_Decades());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function CenturyView(props2) {
        function renderDecades() {
          return /* @__PURE__ */ _react["default"].createElement(_Decades["default"], props2);
        }
        return /* @__PURE__ */ _react["default"].createElement("div", {
          className: "react-calendar__century-view"
        }, renderDecades());
      }
    }
  });

  // node_modules/react-calendar/dist/umd/DecadeView/Year.js
  var require_Year = __commonJS({
    "node_modules/react-calendar/dist/umd/DecadeView/Year.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Year;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Tile = _interopRequireDefault(require_Tile());
      var _dateFormatter = require_dateFormatter();
      var _propTypes2 = require_propTypes();
      var _excluded32 = ["classes", "formatYear"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var className = "react-calendar__decade-view__years__year";
      function Year(_ref) {
        var classes = _ref.classes, _ref$formatYear = _ref.formatYear, formatYear = _ref$formatYear === void 0 ? _dateFormatter.formatYear : _ref$formatYear, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var date = otherProps.date, locale = otherProps.locale;
        return /* @__PURE__ */ _react["default"].createElement(_Tile["default"], _extends2({}, otherProps, {
          classes: [].concat(classes, className),
          maxDateTransform: _dateUtils.getYearEnd,
          minDateTransform: _dateUtils.getYearStart,
          view: "decade"
        }), formatYear(locale, date));
      }
      Year.propTypes = _objectSpread(_objectSpread({}, _propTypes2.tileProps), {}, {
        formatYear: _propTypes["default"].func
      });
    }
  });

  // node_modules/react-calendar/dist/umd/DecadeView/Years.js
  var require_Years = __commonJS({
    "node_modules/react-calendar/dist/umd/DecadeView/Years.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Years;
      var _react = _interopRequireDefault(require_react());
      var _TileGroup = _interopRequireDefault(require_TileGroup());
      var _Year = _interopRequireDefault(require_Year());
      var _dates = require_dates();
      var _propTypes = require_propTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function Years(props2) {
        var activeStartDate = props2.activeStartDate;
        var start = (0, _dates.getBeginOfDecadeYear)(activeStartDate);
        var end = start + 9;
        return /* @__PURE__ */ _react["default"].createElement(_TileGroup["default"], _extends2({}, props2, {
          className: "react-calendar__decade-view__years",
          dateTransform: function dateTransform(year) {
            var date = new Date();
            date.setFullYear(year, 0, 1);
            date.setHours(0, 0, 0, 0);
            return date;
          },
          dateType: "year",
          end,
          start,
          tile: _Year["default"]
        }));
      }
      Years.propTypes = _objectSpread({}, _propTypes.tileGroupProps);
    }
  });

  // node_modules/react-calendar/dist/umd/DecadeView.js
  var require_DecadeView = __commonJS({
    "node_modules/react-calendar/dist/umd/DecadeView.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = DecadeView;
      var _react = _interopRequireDefault(require_react());
      var _Years = _interopRequireDefault(require_Years());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function DecadeView(props2) {
        function renderYears() {
          return /* @__PURE__ */ _react["default"].createElement(_Years["default"], props2);
        }
        return /* @__PURE__ */ _react["default"].createElement("div", {
          className: "react-calendar__decade-view"
        }, renderYears());
      }
    }
  });

  // node_modules/react-calendar/dist/umd/YearView/Month.js
  var require_Month = __commonJS({
    "node_modules/react-calendar/dist/umd/YearView/Month.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Month;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Tile = _interopRequireDefault(require_Tile());
      var _dateFormatter = require_dateFormatter();
      var _propTypes2 = require_propTypes();
      var _excluded32 = ["classes", "formatMonth", "formatMonthYear"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var className = "react-calendar__year-view__months__month";
      function Month(_ref) {
        var classes = _ref.classes, _ref$formatMonth = _ref.formatMonth, formatMonth = _ref$formatMonth === void 0 ? _dateFormatter.formatMonth : _ref$formatMonth, _ref$formatMonthYear = _ref.formatMonthYear, formatMonthYear = _ref$formatMonthYear === void 0 ? _dateFormatter.formatMonthYear : _ref$formatMonthYear, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var date = otherProps.date, locale = otherProps.locale;
        return /* @__PURE__ */ _react["default"].createElement(_Tile["default"], _extends2({}, otherProps, {
          classes: [].concat(classes, className),
          formatAbbr: formatMonthYear,
          maxDateTransform: _dateUtils.getMonthEnd,
          minDateTransform: _dateUtils.getMonthStart,
          view: "year"
        }), formatMonth(locale, date));
      }
      Month.propTypes = _objectSpread(_objectSpread({}, _propTypes2.tileProps), {}, {
        formatMonth: _propTypes["default"].func,
        formatMonthYear: _propTypes["default"].func
      });
    }
  });

  // node_modules/react-calendar/dist/umd/YearView/Months.js
  var require_Months = __commonJS({
    "node_modules/react-calendar/dist/umd/YearView/Months.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Months;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _TileGroup = _interopRequireDefault(require_TileGroup());
      var _Month = _interopRequireDefault(require_Month());
      var _propTypes2 = require_propTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function Months(props2) {
        var activeStartDate = props2.activeStartDate;
        var start = 0;
        var end = 11;
        var year = (0, _dateUtils.getYear)(activeStartDate);
        return /* @__PURE__ */ _react["default"].createElement(_TileGroup["default"], _extends2({}, props2, {
          className: "react-calendar__year-view__months",
          dateTransform: function dateTransform(monthIndex) {
            var date = new Date();
            date.setFullYear(year, monthIndex, 1);
            date.setHours(0, 0, 0, 0);
            return date;
          },
          dateType: "month",
          end,
          start,
          tile: _Month["default"]
        }));
      }
      Months.propTypes = _objectSpread(_objectSpread({}, _propTypes2.tileGroupProps), {}, {
        locale: _propTypes["default"].string
      });
    }
  });

  // node_modules/react-calendar/dist/umd/YearView.js
  var require_YearView = __commonJS({
    "node_modules/react-calendar/dist/umd/YearView.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = YearView;
      var _react = _interopRequireDefault(require_react());
      var _Months = _interopRequireDefault(require_Months());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function YearView(props2) {
        function renderMonths() {
          return /* @__PURE__ */ _react["default"].createElement(_Months["default"], props2);
        }
        return /* @__PURE__ */ _react["default"].createElement("div", {
          className: "react-calendar__year-view"
        }, renderMonths());
      }
    }
  });

  // node_modules/react-calendar/dist/umd/MonthView/Day.js
  var require_Day = __commonJS({
    "node_modules/react-calendar/dist/umd/MonthView/Day.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Day;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Tile = _interopRequireDefault(require_Tile());
      var _dates = require_dates();
      var _dateFormatter = require_dateFormatter();
      var _propTypes2 = require_propTypes();
      var _excluded32 = ["formatDay", "formatLongDate", "calendarType", "classes", "currentMonthIndex"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var className = "react-calendar__month-view__days__day";
      function Day(_ref) {
        var _ref$formatDay = _ref.formatDay, formatDay = _ref$formatDay === void 0 ? _dateFormatter.formatDay : _ref$formatDay, _ref$formatLongDate = _ref.formatLongDate, formatLongDate = _ref$formatLongDate === void 0 ? _dateFormatter.formatLongDate : _ref$formatLongDate, calendarType = _ref.calendarType, classes = _ref.classes, currentMonthIndex = _ref.currentMonthIndex, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var date = otherProps.date, locale = otherProps.locale;
        return /* @__PURE__ */ _react["default"].createElement(_Tile["default"], _extends2({}, otherProps, {
          classes: [].concat(classes, className, (0, _dates.isWeekend)(date, calendarType) ? "".concat(className, "--weekend") : null, date.getMonth() !== currentMonthIndex ? "".concat(className, "--neighboringMonth") : null),
          formatAbbr: formatLongDate,
          maxDateTransform: _dateUtils.getDayEnd,
          minDateTransform: _dateUtils.getDayStart,
          view: "month"
        }), formatDay(locale, date));
      }
      Day.propTypes = _objectSpread(_objectSpread({}, _propTypes2.tileProps), {}, {
        currentMonthIndex: _propTypes["default"].number.isRequired,
        formatDay: _propTypes["default"].func,
        formatLongDate: _propTypes["default"].func
      });
    }
  });

  // node_modules/react-calendar/dist/umd/MonthView/Days.js
  var require_Days = __commonJS({
    "node_modules/react-calendar/dist/umd/MonthView/Days.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Days;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _TileGroup = _interopRequireDefault(require_TileGroup());
      var _Day = _interopRequireDefault(require_Day());
      var _dates = require_dates();
      var _propTypes2 = require_propTypes();
      var _excluded32 = ["showFixedNumberOfWeeks", "showNeighboringMonth"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function Days(props2) {
        var activeStartDate = props2.activeStartDate, calendarType = props2.calendarType;
        var showFixedNumberOfWeeks = props2.showFixedNumberOfWeeks, showNeighboringMonth = props2.showNeighboringMonth, otherProps = _objectWithoutProperties(props2, _excluded32);
        var year = (0, _dateUtils.getYear)(activeStartDate);
        var monthIndex = (0, _dateUtils.getMonth)(activeStartDate);
        var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;
        var dayOfWeek = (0, _dates.getDayOfWeek)(activeStartDate, calendarType);
        var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;
        var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;
        var end = function() {
          if (showFixedNumberOfWeeks) {
            return start + 6 * 7 - 1;
          }
          var daysInMonth = (0, _dateUtils.getDaysInMonth)(activeStartDate);
          if (showNeighboringMonth) {
            var activeEndDate = new Date();
            activeEndDate.setFullYear(year, monthIndex, daysInMonth);
            activeEndDate.setHours(0, 0, 0, 0);
            var daysUntilEndOfTheWeek = 7 - (0, _dates.getDayOfWeek)(activeEndDate, calendarType) - 1;
            return daysInMonth + daysUntilEndOfTheWeek;
          }
          return daysInMonth;
        }();
        return /* @__PURE__ */ _react["default"].createElement(_TileGroup["default"], _extends2({}, otherProps, {
          className: "react-calendar__month-view__days",
          count: 7,
          currentMonthIndex: monthIndex,
          dateTransform: function dateTransform(day) {
            var date = new Date();
            date.setFullYear(year, monthIndex, day);
            date.setHours(0, 0, 0, 0);
            return date;
          },
          dateType: "day",
          end,
          offset,
          start,
          tile: _Day["default"]
        }));
      }
      Days.propTypes = _objectSpread({
        calendarType: _propTypes2.isCalendarType.isRequired,
        showFixedNumberOfWeeks: _propTypes["default"].bool,
        showNeighboringMonth: _propTypes["default"].bool
      }, _propTypes2.tileGroupProps);
    }
  });

  // node_modules/react-calendar/dist/umd/MonthView/Weekdays.js
  var require_Weekdays = __commonJS({
    "node_modules/react-calendar/dist/umd/MonthView/Weekdays.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Weekdays;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _dateUtils = require_umd4();
      var _Flex = _interopRequireDefault(require_Flex());
      var _dates = require_dates();
      var _dateFormatter = require_dateFormatter();
      var _propTypes2 = require_propTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var className = "react-calendar__month-view__weekdays";
      var weekdayClassName = "".concat(className, "__weekday");
      function Weekdays(props2) {
        var calendarType = props2.calendarType, _props$formatShortWee = props2.formatShortWeekday, formatShortWeekday = _props$formatShortWee === void 0 ? _dateFormatter.formatShortWeekday : _props$formatShortWee, _props$formatWeekday = props2.formatWeekday, formatWeekday = _props$formatWeekday === void 0 ? _dateFormatter.formatWeekday : _props$formatWeekday, locale = props2.locale, onMouseLeave = props2.onMouseLeave;
        var anyDate = new Date();
        var beginOfMonth = (0, _dateUtils.getMonthStart)(anyDate);
        var year = (0, _dateUtils.getYear)(beginOfMonth);
        var monthIndex = (0, _dateUtils.getMonth)(beginOfMonth);
        var weekdays = [];
        for (var weekday = 1; weekday <= 7; weekday += 1) {
          var weekdayDate = new Date(year, monthIndex, weekday - (0, _dates.getDayOfWeek)(beginOfMonth, calendarType));
          var abbr = formatWeekday(locale, weekdayDate);
          weekdays.push(/* @__PURE__ */ _react["default"].createElement("div", {
            key: weekday,
            className: (0, _mergeClassNames["default"])(weekdayClassName, (0, _dates.isWeekend)(weekdayDate, calendarType) && "".concat(weekdayClassName, "--weekend"))
          }, /* @__PURE__ */ _react["default"].createElement("abbr", {
            "aria-label": abbr,
            title: abbr
          }, formatShortWeekday(locale, weekdayDate).replace(".", ""))));
        }
        return /* @__PURE__ */ _react["default"].createElement(_Flex["default"], {
          className,
          count: 7,
          onFocus: onMouseLeave,
          onMouseOver: onMouseLeave
        }, weekdays);
      }
      Weekdays.propTypes = {
        calendarType: _propTypes2.isCalendarType.isRequired,
        formatShortWeekday: _propTypes["default"].func,
        formatWeekday: _propTypes["default"].func,
        locale: _propTypes["default"].string,
        onMouseLeave: _propTypes["default"].func
      };
    }
  });

  // node_modules/react-calendar/dist/umd/MonthView/WeekNumber.js
  var require_WeekNumber = __commonJS({
    "node_modules/react-calendar/dist/umd/MonthView/WeekNumber.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = WeekNumber;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _excluded32 = ["date", "onClickWeekNumber", "weekNumber"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      var className = "react-calendar__tile";
      function WeekNumber(_ref) {
        var date = _ref.date, onClickWeekNumber = _ref.onClickWeekNumber, weekNumber = _ref.weekNumber, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var props2 = _objectSpread({
          className
        }, otherProps);
        var children = /* @__PURE__ */ _react["default"].createElement("span", null, weekNumber);
        return onClickWeekNumber ? /* @__PURE__ */ _react["default"].createElement("button", _extends2({}, props2, {
          onClick: function onClick(event) {
            return onClickWeekNumber(weekNumber, date, event);
          },
          type: "button"
        }), children) : /* @__PURE__ */ _react["default"].createElement("div", props2, children);
      }
      WeekNumber.propTypes = {
        date: _propTypes["default"].instanceOf(Date).isRequired,
        onClickWeekNumber: _propTypes["default"].func,
        weekNumber: _propTypes["default"].node.isRequired
      };
    }
  });

  // node_modules/react-calendar/dist/umd/MonthView/WeekNumbers.js
  var require_WeekNumbers = __commonJS({
    "node_modules/react-calendar/dist/umd/MonthView/WeekNumbers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = WeekNumbers;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _WeekNumber = _interopRequireDefault(require_WeekNumber());
      var _Flex = _interopRequireDefault(require_Flex());
      var _dates = require_dates();
      var _propTypes2 = require_propTypes();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function WeekNumbers(props2) {
        var activeStartDate = props2.activeStartDate, calendarType = props2.calendarType, onClickWeekNumber = props2.onClickWeekNumber, onMouseLeave = props2.onMouseLeave, showFixedNumberOfWeeks = props2.showFixedNumberOfWeeks;
        var numberOfWeeks = function() {
          if (showFixedNumberOfWeeks) {
            return 6;
          }
          var numberOfDays = (0, _dateUtils.getDaysInMonth)(activeStartDate);
          var startWeekday = (0, _dates.getDayOfWeek)(activeStartDate, calendarType);
          var days = numberOfDays - (7 - startWeekday);
          return 1 + Math.ceil(days / 7);
        }();
        var dates = function() {
          var year = (0, _dateUtils.getYear)(activeStartDate);
          var monthIndex = (0, _dateUtils.getMonth)(activeStartDate);
          var day = (0, _dateUtils.getDate)(activeStartDate);
          var result = [];
          for (var index = 0; index < numberOfWeeks; index += 1) {
            result.push((0, _dates.getBeginOfWeek)(new Date(year, monthIndex, day + index * 7), calendarType));
          }
          return result;
        }();
        var weekNumbers = dates.map(function(date) {
          return (0, _dates.getWeekNumber)(date, calendarType);
        });
        return /* @__PURE__ */ _react["default"].createElement(_Flex["default"], {
          className: "react-calendar__month-view__weekNumbers",
          count: numberOfWeeks,
          direction: "column",
          onFocus: onMouseLeave,
          onMouseOver: onMouseLeave,
          style: {
            flexBasis: "calc(100% * (1 / 8)",
            flexShrink: 0
          }
        }, weekNumbers.map(function(weekNumber, weekIndex) {
          return /* @__PURE__ */ _react["default"].createElement(_WeekNumber["default"], {
            key: weekNumber,
            date: dates[weekIndex],
            onClickWeekNumber,
            weekNumber
          });
        }));
      }
      WeekNumbers.propTypes = {
        activeStartDate: _propTypes["default"].instanceOf(Date).isRequired,
        calendarType: _propTypes2.isCalendarType.isRequired,
        onClickWeekNumber: _propTypes["default"].func,
        onMouseLeave: _propTypes["default"].func,
        showFixedNumberOfWeeks: _propTypes["default"].bool
      };
    }
  });

  // node_modules/react-calendar/dist/umd/MonthView.js
  var require_MonthView = __commonJS({
    "node_modules/react-calendar/dist/umd/MonthView.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = MonthView;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _Days = _interopRequireDefault(require_Days());
      var _Weekdays = _interopRequireDefault(require_Weekdays());
      var _WeekNumbers = _interopRequireDefault(require_WeekNumbers());
      var _const = require_const();
      var _propTypes2 = require_propTypes();
      var _excluded32 = ["calendarType", "formatShortWeekday", "formatWeekday", "onClickWeekNumber", "showWeekNumbers"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function getCalendarTypeFromLocale(locale) {
        return Object.keys(_const.CALENDAR_TYPE_LOCALES).find(function(calendarType) {
          return _const.CALENDAR_TYPE_LOCALES[calendarType].includes(locale);
        }) || _const.CALENDAR_TYPES.ISO_8601;
      }
      function MonthView(props2) {
        var activeStartDate = props2.activeStartDate, locale = props2.locale, onMouseLeave = props2.onMouseLeave, showFixedNumberOfWeeks = props2.showFixedNumberOfWeeks;
        var _props$calendarType = props2.calendarType, calendarType = _props$calendarType === void 0 ? getCalendarTypeFromLocale(locale) : _props$calendarType, formatShortWeekday = props2.formatShortWeekday, formatWeekday = props2.formatWeekday, onClickWeekNumber = props2.onClickWeekNumber, showWeekNumbers = props2.showWeekNumbers, childProps = _objectWithoutProperties(props2, _excluded32);
        function renderWeekdays() {
          return /* @__PURE__ */ _react["default"].createElement(_Weekdays["default"], {
            calendarType,
            formatShortWeekday,
            formatWeekday,
            locale,
            onMouseLeave
          });
        }
        function renderWeekNumbers() {
          if (!showWeekNumbers) {
            return null;
          }
          return /* @__PURE__ */ _react["default"].createElement(_WeekNumbers["default"], {
            activeStartDate,
            calendarType,
            onClickWeekNumber,
            onMouseLeave,
            showFixedNumberOfWeeks
          });
        }
        function renderDays() {
          return /* @__PURE__ */ _react["default"].createElement(_Days["default"], _extends2({
            calendarType
          }, childProps));
        }
        var className = "react-calendar__month-view";
        return /* @__PURE__ */ _react["default"].createElement("div", {
          className: (0, _mergeClassNames["default"])(className, showWeekNumbers ? "".concat(className, "--weekNumbers") : "")
        }, /* @__PURE__ */ _react["default"].createElement("div", {
          style: {
            display: "flex",
            alignItems: "flex-end"
          }
        }, renderWeekNumbers(), /* @__PURE__ */ _react["default"].createElement("div", {
          style: {
            flexGrow: 1,
            width: "100%"
          }
        }, renderWeekdays(), renderDays())));
      }
      MonthView.propTypes = {
        activeStartDate: _propTypes["default"].instanceOf(Date).isRequired,
        calendarType: _propTypes2.isCalendarType,
        formatShortWeekday: _propTypes["default"].func,
        formatWeekday: _propTypes["default"].func,
        locale: _propTypes["default"].string,
        onClickWeekNumber: _propTypes["default"].func,
        onMouseLeave: _propTypes["default"].func,
        showFixedNumberOfWeeks: _propTypes["default"].bool,
        showWeekNumbers: _propTypes["default"].bool
      };
    }
  });

  // node_modules/react-calendar/dist/umd/Calendar.js
  var require_Calendar = __commonJS({
    "node_modules/react-calendar/dist/umd/Calendar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _react = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _Navigation = _interopRequireDefault(require_Navigation());
      var _CenturyView = _interopRequireDefault(require_CenturyView());
      var _DecadeView = _interopRequireDefault(require_DecadeView());
      var _YearView = _interopRequireDefault(require_YearView());
      var _MonthView = _interopRequireDefault(require_MonthView());
      var _dates = require_dates();
      var _propTypes2 = require_propTypes();
      var _utils = require_utils5();
      var _excluded32 = ["activeStartDate", "defaultActiveStartDate", "defaultValue", "defaultView", "maxDetail", "minDetail", "value", "view"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props2) {
        for (var i = 0; i < props2.length; i++) {
          var descriptor = props2[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf2(subClass, superClass);
      }
      function _setPrototypeOf2(o, p) {
        _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf2(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized2(self2);
      }
      function _assertThisInitialized2(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      var defaultMinDate = new Date();
      defaultMinDate.setFullYear(1, 0, 1);
      defaultMinDate.setHours(0, 0, 0, 0);
      var defaultMaxDate = new Date(864e13);
      var baseClassName = "react-calendar";
      var allViews = ["century", "decade", "year", "month"];
      var allValueTypes = [].concat(_toConsumableArray(allViews.slice(1)), ["day"]);
      function toDate(value) {
        if (value instanceof Date) {
          return value;
        }
        return new Date(value);
      }
      function getLimitedViews(minDetail, maxDetail) {
        return allViews.slice(allViews.indexOf(minDetail), allViews.indexOf(maxDetail) + 1);
      }
      function isViewAllowed(view, minDetail, maxDetail) {
        var views = getLimitedViews(minDetail, maxDetail);
        return views.indexOf(view) !== -1;
      }
      function getView(view, minDetail, maxDetail) {
        if (isViewAllowed(view, minDetail, maxDetail)) {
          return view;
        }
        return maxDetail;
      }
      function getValueType(maxDetail) {
        return allValueTypes[allViews.indexOf(maxDetail)];
      }
      function getValue2(value, index) {
        if (!value) {
          return null;
        }
        var rawValue = Array.isArray(value) && value.length === 2 ? value[index] : value;
        if (!rawValue) {
          return null;
        }
        var valueDate = toDate(rawValue);
        if (isNaN(valueDate.getTime())) {
          throw new Error("Invalid date: ".concat(value));
        }
        return valueDate;
      }
      function getDetailValue(_ref, index) {
        var value = _ref.value, minDate2 = _ref.minDate, maxDate = _ref.maxDate, maxDetail = _ref.maxDetail;
        var valuePiece = getValue2(value, index);
        if (!valuePiece) {
          return null;
        }
        var valueType = getValueType(maxDetail);
        var detailValueFrom = [_dates.getBegin, _dates.getEnd][index](valueType, valuePiece);
        return (0, _utils.between)(detailValueFrom, minDate2, maxDate);
      }
      var getDetailValueFrom = function getDetailValueFrom2(args) {
        return getDetailValue(args, 0);
      };
      var getDetailValueTo = function getDetailValueTo2(args) {
        return getDetailValue(args, 1);
      };
      var getDetailValueArray = function getDetailValueArray2(args) {
        var value = args.value;
        if (Array.isArray(value)) {
          return value;
        }
        return [getDetailValueFrom, getDetailValueTo].map(function(fn) {
          return fn(args);
        });
      };
      function getActiveStartDate(props2) {
        var maxDate = props2.maxDate, maxDetail = props2.maxDetail, minDate2 = props2.minDate, minDetail = props2.minDetail, value = props2.value, view = props2.view;
        var rangeType = getView(view, minDetail, maxDetail);
        var valueFrom = getDetailValueFrom({
          value,
          minDate: minDate2,
          maxDate,
          maxDetail
        }) || new Date();
        return (0, _dates.getBegin)(rangeType, valueFrom);
      }
      function getInitialActiveStartDate(props2) {
        var activeStartDate = props2.activeStartDate, defaultActiveStartDate = props2.defaultActiveStartDate, defaultValue = props2.defaultValue, defaultView = props2.defaultView, maxDetail = props2.maxDetail, minDetail = props2.minDetail, value = props2.value, view = props2.view, otherProps = _objectWithoutProperties(props2, _excluded32);
        var rangeType = getView(view, minDetail, maxDetail);
        var valueFrom = activeStartDate || defaultActiveStartDate;
        if (valueFrom) {
          return (0, _dates.getBegin)(rangeType, valueFrom);
        }
        return getActiveStartDate(_objectSpread({
          maxDetail,
          minDetail,
          value: value || defaultValue,
          view: view || defaultView
        }, otherProps));
      }
      var getIsSingleValue = function getIsSingleValue2(value) {
        return value && [].concat(value).length === 1;
      };
      var Calendar = /* @__PURE__ */ function(_Component) {
        _inherits(Calendar2, _Component);
        var _super = _createSuper(Calendar2);
        function Calendar2() {
          var _this;
          _classCallCheck(this, Calendar2);
          for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
            _args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(_args));
          _defineProperty(_assertThisInitialized2(_this), "state", {
            activeStartDate: _this.props.defaultActiveStartDate,
            value: _this.props.defaultValue,
            view: _this.props.defaultView
          });
          _defineProperty(_assertThisInitialized2(_this), "setStateAndCallCallbacks", function(nextState, event, callback) {
            var _assertThisInitialize = _assertThisInitialized2(_this), previousActiveStartDate = _assertThisInitialize.activeStartDate, previousView = _assertThisInitialize.view;
            var _this$props = _this.props, allowPartialRange = _this$props.allowPartialRange, onActiveStartDateChange = _this$props.onActiveStartDateChange, onChange = _this$props.onChange, onViewChange = _this$props.onViewChange, selectRange = _this$props.selectRange;
            var prevArgs = {
              activeStartDate: previousActiveStartDate,
              view: previousView
            };
            _this.setState(nextState, function() {
              var args = {
                action: nextState.action,
                activeStartDate: nextState.activeStartDate || _this.activeStartDate,
                value: nextState.value || _this.value,
                view: nextState.view || _this.view
              };
              function shouldUpdate(key) {
                return key in nextState && (_typeof(nextState[key]) !== _typeof(prevArgs[key]) || (nextState[key] instanceof Date ? nextState[key].getTime() !== prevArgs[key].getTime() : nextState[key] !== prevArgs[key]));
              }
              if (shouldUpdate("activeStartDate")) {
                if (onActiveStartDateChange)
                  onActiveStartDateChange(args);
              }
              if (shouldUpdate("view")) {
                if (onViewChange)
                  onViewChange(args);
              }
              if (shouldUpdate("value")) {
                if (onChange) {
                  if (selectRange) {
                    var isSingleValue = getIsSingleValue(nextState.value);
                    if (!isSingleValue) {
                      onChange(nextState.value, event);
                    } else if (allowPartialRange) {
                      onChange([nextState.value], event);
                    }
                  } else {
                    onChange(nextState.value, event);
                  }
                }
              }
              if (callback)
                callback(args);
            });
          });
          _defineProperty(_assertThisInitialized2(_this), "setActiveStartDate", function(nextActiveStartDate, action) {
            _this.setStateAndCallCallbacks({
              action,
              activeStartDate: nextActiveStartDate
            });
          });
          _defineProperty(_assertThisInitialized2(_this), "drillDown", function(nextActiveStartDate, event) {
            if (!_this.drillDownAvailable) {
              return;
            }
            _this.onClickTile(nextActiveStartDate, event);
            var _assertThisInitialize2 = _assertThisInitialized2(_this), view = _assertThisInitialize2.view, views = _assertThisInitialize2.views;
            var onDrillDown = _this.props.onDrillDown;
            var nextView = views[views.indexOf(view) + 1];
            _this.setStateAndCallCallbacks({
              action: "drillDown",
              activeStartDate: nextActiveStartDate,
              view: nextView
            }, void 0, onDrillDown);
          });
          _defineProperty(_assertThisInitialized2(_this), "drillUp", function() {
            if (!_this.drillUpAvailable) {
              return;
            }
            var _assertThisInitialize3 = _assertThisInitialized2(_this), activeStartDate = _assertThisInitialize3.activeStartDate, view = _assertThisInitialize3.view, views = _assertThisInitialize3.views;
            var onDrillUp = _this.props.onDrillUp;
            var nextView = views[views.indexOf(view) - 1];
            var nextActiveStartDate = (0, _dates.getBegin)(nextView, activeStartDate);
            _this.setStateAndCallCallbacks({
              action: "drillUp",
              activeStartDate: nextActiveStartDate,
              view: nextView
            }, void 0, onDrillUp);
          });
          _defineProperty(_assertThisInitialized2(_this), "onChange", function(value, event) {
            var _assertThisInitialize4 = _assertThisInitialized2(_this), previousValue = _assertThisInitialize4.value;
            var _this$props2 = _this.props, goToRangeStartOnSelect = _this$props2.goToRangeStartOnSelect, selectRange = _this$props2.selectRange;
            _this.onClickTile(value, event);
            var isFirstValueInRange = selectRange && !getIsSingleValue(previousValue);
            var nextValue;
            if (selectRange) {
              var _assertThisInitialize5 = _assertThisInitialized2(_this), valueType = _assertThisInitialize5.valueType;
              if (isFirstValueInRange) {
                nextValue = (0, _dates.getBegin)(valueType, value);
              } else {
                nextValue = (0, _dates.getValueRange)(valueType, previousValue, value);
              }
            } else {
              nextValue = _this.getProcessedValue(value);
            }
            var nextActiveStartDate = !selectRange || isFirstValueInRange || goToRangeStartOnSelect ? getActiveStartDate(_objectSpread(_objectSpread({}, _this.props), {}, {
              value: nextValue
            })) : null;
            event.persist();
            _this.setStateAndCallCallbacks({
              action: "onChange",
              activeStartDate: nextActiveStartDate,
              value: nextValue
            }, event);
          });
          _defineProperty(_assertThisInitialized2(_this), "onClickTile", function(value, event) {
            var _assertThisInitialize6 = _assertThisInitialized2(_this), view = _assertThisInitialize6.view;
            var _this$props3 = _this.props, onClickDay = _this$props3.onClickDay, onClickDecade = _this$props3.onClickDecade, onClickMonth = _this$props3.onClickMonth, onClickYear = _this$props3.onClickYear;
            var callback = function() {
              switch (view) {
                case "century":
                  return onClickDecade;
                case "decade":
                  return onClickYear;
                case "year":
                  return onClickMonth;
                case "month":
                  return onClickDay;
                default:
                  throw new Error("Invalid view: ".concat(view, "."));
              }
            }();
            if (callback)
              callback(value, event);
          });
          _defineProperty(_assertThisInitialized2(_this), "onMouseOver", function(value) {
            _this.setState(function(prevState) {
              if (prevState.hover && prevState.hover.getTime() === value.getTime()) {
                return null;
              }
              return {
                hover: value
              };
            });
          });
          _defineProperty(_assertThisInitialized2(_this), "onMouseLeave", function() {
            _this.setState({
              hover: null
            });
          });
          return _this;
        }
        _createClass(Calendar2, [{
          key: "activeStartDate",
          get: function get() {
            var activeStartDateProps = this.props.activeStartDate;
            var activeStartDateState = this.state.activeStartDate;
            return activeStartDateProps || activeStartDateState || getInitialActiveStartDate(this.props);
          }
        }, {
          key: "value",
          get: function get() {
            var _this$props4 = this.props, selectRange = _this$props4.selectRange, valueProps = _this$props4.value;
            var valueState = this.state.value;
            if (selectRange && getIsSingleValue(valueState)) {
              return valueState;
            }
            return valueProps !== void 0 ? valueProps : valueState;
          }
        }, {
          key: "valueType",
          get: function get() {
            var maxDetail = this.props.maxDetail;
            return getValueType(maxDetail);
          }
        }, {
          key: "view",
          get: function get() {
            var _this$props5 = this.props, minDetail = _this$props5.minDetail, maxDetail = _this$props5.maxDetail, viewProps = _this$props5.view;
            var viewState = this.state.view;
            return getView(viewProps || viewState, minDetail, maxDetail);
          }
        }, {
          key: "views",
          get: function get() {
            var _this$props6 = this.props, minDetail = _this$props6.minDetail, maxDetail = _this$props6.maxDetail;
            return getLimitedViews(minDetail, maxDetail);
          }
        }, {
          key: "hover",
          get: function get() {
            var selectRange = this.props.selectRange;
            var hover = this.state.hover;
            return selectRange ? hover : null;
          }
        }, {
          key: "drillDownAvailable",
          get: function get() {
            var view = this.view, views = this.views;
            return views.indexOf(view) < views.length - 1;
          }
        }, {
          key: "drillUpAvailable",
          get: function get() {
            var view = this.view, views = this.views;
            return views.indexOf(view) > 0;
          }
        }, {
          key: "getProcessedValue",
          value: function getProcessedValue(value) {
            var _this$props7 = this.props, minDate2 = _this$props7.minDate, maxDate = _this$props7.maxDate, maxDetail = _this$props7.maxDetail, returnValue = _this$props7.returnValue;
            var processFunction = function() {
              switch (returnValue) {
                case "start":
                  return getDetailValueFrom;
                case "end":
                  return getDetailValueTo;
                case "range":
                  return getDetailValueArray;
                default:
                  throw new Error("Invalid returnValue.");
              }
            }();
            return processFunction({
              value,
              minDate: minDate2,
              maxDate,
              maxDetail
            });
          }
        }, {
          key: "renderContent",
          value: function renderContent(next) {
            var currentActiveStartDate = this.activeStartDate, onMouseOver = this.onMouseOver, valueType = this.valueType, value = this.value, view = this.view;
            var _this$props8 = this.props, calendarType = _this$props8.calendarType, locale = _this$props8.locale, maxDate = _this$props8.maxDate, minDate2 = _this$props8.minDate, selectRange = _this$props8.selectRange, tileClassName = _this$props8.tileClassName, tileContent = _this$props8.tileContent, tileDisabled = _this$props8.tileDisabled;
            var hover = this.hover;
            var activeStartDate = next ? (0, _dates.getBeginNext)(view, currentActiveStartDate) : (0, _dates.getBegin)(view, currentActiveStartDate);
            var onClick = this.drillDownAvailable ? this.drillDown : this.onChange;
            var commonProps = {
              activeStartDate,
              hover,
              locale,
              maxDate,
              minDate: minDate2,
              onClick,
              onMouseOver: selectRange ? onMouseOver : null,
              tileClassName,
              tileContent,
              tileDisabled,
              value,
              valueType
            };
            switch (view) {
              case "century": {
                var formatYear = this.props.formatYear;
                return /* @__PURE__ */ _react["default"].createElement(_CenturyView["default"], _extends2({
                  formatYear
                }, commonProps));
              }
              case "decade": {
                var _formatYear = this.props.formatYear;
                return /* @__PURE__ */ _react["default"].createElement(_DecadeView["default"], _extends2({
                  formatYear: _formatYear
                }, commonProps));
              }
              case "year": {
                var _this$props9 = this.props, formatMonth = _this$props9.formatMonth, formatMonthYear = _this$props9.formatMonthYear;
                return /* @__PURE__ */ _react["default"].createElement(_YearView["default"], _extends2({
                  formatMonth,
                  formatMonthYear
                }, commonProps));
              }
              case "month": {
                var _this$props10 = this.props, formatDay = _this$props10.formatDay, formatLongDate = _this$props10.formatLongDate, formatShortWeekday = _this$props10.formatShortWeekday, formatWeekday = _this$props10.formatWeekday, onClickWeekNumber = _this$props10.onClickWeekNumber, showDoubleView = _this$props10.showDoubleView, showFixedNumberOfWeeks = _this$props10.showFixedNumberOfWeeks, showNeighboringMonth = _this$props10.showNeighboringMonth, showWeekNumbers = _this$props10.showWeekNumbers;
                var onMouseLeave = this.onMouseLeave;
                return /* @__PURE__ */ _react["default"].createElement(_MonthView["default"], _extends2({
                  calendarType,
                  formatDay,
                  formatLongDate,
                  formatShortWeekday,
                  formatWeekday,
                  onClickWeekNumber,
                  onMouseLeave: selectRange ? onMouseLeave : null,
                  showFixedNumberOfWeeks: typeof showFixedNumberOfWeeks !== "undefined" ? showFixedNumberOfWeeks : showDoubleView,
                  showNeighboringMonth,
                  showWeekNumbers
                }, commonProps));
              }
              default:
                throw new Error("Invalid view: ".concat(view, "."));
            }
          }
        }, {
          key: "renderNavigation",
          value: function renderNavigation() {
            var showNavigation = this.props.showNavigation;
            if (!showNavigation) {
              return null;
            }
            var activeStartDate = this.activeStartDate, view = this.view, views = this.views;
            var _this$props11 = this.props, formatMonthYear = _this$props11.formatMonthYear, formatYear = _this$props11.formatYear, locale = _this$props11.locale, maxDate = _this$props11.maxDate, minDate2 = _this$props11.minDate, navigationAriaLabel = _this$props11.navigationAriaLabel, navigationAriaLive = _this$props11.navigationAriaLive, navigationLabel = _this$props11.navigationLabel, next2AriaLabel = _this$props11.next2AriaLabel, next2Label = _this$props11.next2Label, nextAriaLabel = _this$props11.nextAriaLabel, nextLabel = _this$props11.nextLabel, prev2AriaLabel = _this$props11.prev2AriaLabel, prev2Label = _this$props11.prev2Label, prevAriaLabel = _this$props11.prevAriaLabel, prevLabel = _this$props11.prevLabel, showDoubleView = _this$props11.showDoubleView;
            return /* @__PURE__ */ _react["default"].createElement(_Navigation["default"], {
              activeStartDate,
              drillUp: this.drillUp,
              formatMonthYear,
              formatYear,
              locale,
              maxDate,
              minDate: minDate2,
              navigationAriaLabel,
              navigationAriaLive,
              navigationLabel,
              next2AriaLabel,
              next2Label,
              nextAriaLabel,
              nextLabel,
              prev2AriaLabel,
              prev2Label,
              prevAriaLabel,
              prevLabel,
              setActiveStartDate: this.setActiveStartDate,
              showDoubleView,
              view,
              views
            });
          }
        }, {
          key: "render",
          value: function render() {
            var _this$props12 = this.props, className = _this$props12.className, inputRef = _this$props12.inputRef, selectRange = _this$props12.selectRange, showDoubleView = _this$props12.showDoubleView;
            var onMouseLeave = this.onMouseLeave, value = this.value;
            var valueArray = [].concat(value);
            return /* @__PURE__ */ _react["default"].createElement("div", {
              className: (0, _mergeClassNames["default"])(baseClassName, selectRange && valueArray.length === 1 && "".concat(baseClassName, "--selectRange"), showDoubleView && "".concat(baseClassName, "--doubleView"), className),
              ref: inputRef
            }, this.renderNavigation(), /* @__PURE__ */ _react["default"].createElement("div", {
              className: "".concat(baseClassName, "__viewContainer"),
              onBlur: selectRange ? onMouseLeave : null,
              onMouseLeave: selectRange ? onMouseLeave : null
            }, this.renderContent(), showDoubleView && this.renderContent(true)));
          }
        }]);
        return Calendar2;
      }(_react.Component);
      exports["default"] = Calendar;
      Calendar.defaultProps = {
        goToRangeStartOnSelect: true,
        maxDate: defaultMaxDate,
        maxDetail: "month",
        minDate: defaultMinDate,
        minDetail: "century",
        returnValue: "start",
        showNavigation: true,
        showNeighboringMonth: true
      };
      var isActiveStartDate = _propTypes["default"].instanceOf(Date);
      var isLooseValue = _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes2.isValue]);
      Calendar.propTypes = {
        activeStartDate: isActiveStartDate,
        allowPartialRange: _propTypes["default"].bool,
        calendarType: _propTypes2.isCalendarType,
        className: _propTypes2.isClassName,
        defaultActiveStartDate: isActiveStartDate,
        defaultValue: isLooseValue,
        defaultView: _propTypes2.isView,
        formatDay: _propTypes["default"].func,
        formatLongDate: _propTypes["default"].func,
        formatMonth: _propTypes["default"].func,
        formatMonthYear: _propTypes["default"].func,
        formatShortWeekday: _propTypes["default"].func,
        formatWeekday: _propTypes["default"].func,
        formatYear: _propTypes["default"].func,
        goToRangeStartOnSelect: _propTypes["default"].bool,
        inputRef: _propTypes2.isRef,
        locale: _propTypes["default"].string,
        maxDate: _propTypes2.isMaxDate,
        maxDetail: _propTypes["default"].oneOf(allViews),
        minDate: _propTypes2.isMinDate,
        minDetail: _propTypes["default"].oneOf(allViews),
        navigationAriaLabel: _propTypes["default"].string,
        navigationAriaLive: _propTypes["default"].oneOf(["off", "polite", "assertive"]),
        navigationLabel: _propTypes["default"].func,
        next2AriaLabel: _propTypes["default"].string,
        next2Label: _propTypes["default"].node,
        nextAriaLabel: _propTypes["default"].string,
        nextLabel: _propTypes["default"].node,
        onActiveStartDateChange: _propTypes["default"].func,
        onChange: _propTypes["default"].func,
        onClickDay: _propTypes["default"].func,
        onClickDecade: _propTypes["default"].func,
        onClickMonth: _propTypes["default"].func,
        onClickWeekNumber: _propTypes["default"].func,
        onClickYear: _propTypes["default"].func,
        onDrillDown: _propTypes["default"].func,
        onDrillUp: _propTypes["default"].func,
        onViewChange: _propTypes["default"].func,
        prev2AriaLabel: _propTypes["default"].string,
        prev2Label: _propTypes["default"].node,
        prevAriaLabel: _propTypes["default"].string,
        prevLabel: _propTypes["default"].node,
        returnValue: _propTypes["default"].oneOf(["start", "end", "range"]),
        selectRange: _propTypes["default"].bool,
        showDoubleView: _propTypes["default"].bool,
        showFixedNumberOfWeeks: _propTypes["default"].bool,
        showNavigation: _propTypes["default"].bool,
        showNeighboringMonth: _propTypes["default"].bool,
        showWeekNumbers: _propTypes["default"].bool,
        tileClassName: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes2.isClassName]),
        tileContent: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node]),
        tileDisabled: _propTypes["default"].func,
        value: isLooseValue,
        view: _propTypes2.isView
      };
    }
  });

  // node_modules/react-calendar/dist/umd/index.js
  var require_umd5 = __commonJS({
    "node_modules/react-calendar/dist/umd/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "Calendar", {
        enumerable: true,
        get: function get() {
          return _Calendar["default"];
        }
      });
      Object.defineProperty(exports, "CenturyView", {
        enumerable: true,
        get: function get() {
          return _CenturyView["default"];
        }
      });
      Object.defineProperty(exports, "DecadeView", {
        enumerable: true,
        get: function get() {
          return _DecadeView["default"];
        }
      });
      Object.defineProperty(exports, "MonthView", {
        enumerable: true,
        get: function get() {
          return _MonthView["default"];
        }
      });
      Object.defineProperty(exports, "Navigation", {
        enumerable: true,
        get: function get() {
          return _Navigation["default"];
        }
      });
      Object.defineProperty(exports, "YearView", {
        enumerable: true,
        get: function get() {
          return _YearView["default"];
        }
      });
      exports["default"] = void 0;
      var _Calendar = _interopRequireDefault(require_Calendar());
      var _Navigation = _interopRequireDefault(require_Navigation());
      var _CenturyView = _interopRequireDefault(require_CenturyView());
      var _DecadeView = _interopRequireDefault(require_DecadeView());
      var _YearView = _interopRequireDefault(require_YearView());
      var _MonthView = _interopRequireDefault(require_MonthView());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _default = _Calendar["default"];
      exports["default"] = _default;
    }
  });

  // node_modules/detect-element-overflow/dist/umd/index.js
  var require_umd6 = __commonJS({
    "node_modules/detect-element-overflow/dist/umd/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var getRect = function getRect2(element) {
        return element.getBoundingClientRect();
      };
      var detectElementOverflow = function detectElementOverflow2(element, container2) {
        return {
          get collidedTop() {
            return getRect(element).top < getRect(container2).top;
          },
          get collidedBottom() {
            return getRect(element).bottom > getRect(container2).bottom;
          },
          get collidedLeft() {
            return getRect(element).left < getRect(container2).left;
          },
          get collidedRight() {
            return getRect(element).right > getRect(container2).right;
          },
          get overflowTop() {
            return getRect(container2).top - getRect(element).top;
          },
          get overflowBottom() {
            return getRect(element).bottom - getRect(container2).bottom;
          },
          get overflowLeft() {
            return getRect(container2).left - getRect(element).left;
          },
          get overflowRight() {
            return getRect(element).right - getRect(container2).right;
          }
        };
      };
      var _default = detectElementOverflow;
      exports["default"] = _default;
    }
  });

  // node_modules/tiny-warning/dist/tiny-warning.cjs.js
  var require_tiny_warning_cjs = __commonJS({
    "node_modules/tiny-warning/dist/tiny-warning.cjs.js"(exports, module) {
      "use strict";
      var isProduction = false;
      function warning(condition, message) {
        if (!isProduction) {
          if (condition) {
            return;
          }
          var text = "Warning: " + message;
          if (typeof console !== "undefined") {
            console.warn(text);
          }
          try {
            throw Error(text);
          } catch (x) {
          }
        }
      }
      module.exports = warning;
    }
  });

  // node_modules/react-fit/dist/umd/Fit.js
  var require_Fit = __commonJS({
    "node_modules/react-fit/dist/umd/Fit.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _react = _interopRequireWildcard(require_react());
      var _reactDom = require_react_dom();
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _detectElementOverflow = _interopRequireDefault(require_umd6());
      var _tinyWarning = _interopRequireDefault(require_tiny_warning_cjs());
      var _excluded32 = ["invertAxis", "invertSecondaryAxis"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props2) {
        for (var i = 0; i < props2.length; i++) {
          var descriptor = props2[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        if (superClass)
          _setPrototypeOf2(subClass, superClass);
      }
      function _setPrototypeOf2(o, p) {
        _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf2(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized2(self2);
      }
      function _assertThisInitialized2(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof2(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof = function _typeof2(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof(obj);
      }
      var isBrowser = typeof window !== "undefined";
      var isDisplayContentsSupported = isBrowser && "CSS" in window && "supports" in window.CSS && CSS.supports("display", "contents");
      var isMutationObserverSupported = isBrowser && "MutationObserver" in window;
      function capitalize2(a) {
        return a[0].toUpperCase() + a.slice(1);
      }
      function findScrollContainer(element) {
        if (!element) {
          return void 0;
        }
        var parent = element.parentElement;
        while (parent) {
          var _window$getComputedSt = window.getComputedStyle(parent), overflow = _window$getComputedSt.overflow;
          if (overflow.split(" ").every(function(o) {
            return o === "auto" || o === "scroll";
          })) {
            return parent;
          }
          parent = parent.parentElement;
        }
        return document.documentElement;
      }
      function alignAxis(_ref) {
        var axis = _ref.axis, container2 = _ref.container, element = _ref.element, invertAxis = _ref.invertAxis, secondary = _ref.secondary, scrollContainer = _ref.scrollContainer, spacing = _ref.spacing;
        var style2 = window.getComputedStyle(element);
        var parent = container2.parentElement;
        var scrollContainerCollisions = (0, _detectElementOverflow["default"])(parent, scrollContainer);
        var documentCollisions = (0, _detectElementOverflow["default"])(parent, document.documentElement);
        var isX = axis === "x";
        var startProperty = isX ? "left" : "top";
        var endProperty = isX ? "right" : "bottom";
        var sizeProperty = isX ? "width" : "height";
        var overflowStartProperty = "overflow".concat(capitalize2(startProperty));
        var overflowEndProperty = "overflow".concat(capitalize2(endProperty));
        var scrollProperty = "scroll".concat(capitalize2(startProperty));
        var uppercasedSizeProperty = capitalize2(sizeProperty);
        var offsetSizeProperty = "offset".concat(uppercasedSizeProperty);
        var clientSizeProperty = "client".concat(uppercasedSizeProperty);
        var minSizeProperty = "min-".concat(sizeProperty);
        var scrollbarWidth = scrollContainer[offsetSizeProperty] - scrollContainer[clientSizeProperty];
        var startSpacing = _typeof(spacing) === "object" ? spacing[startProperty] : spacing;
        var availableStartSpace = -Math.max(scrollContainerCollisions[overflowStartProperty], documentCollisions[overflowStartProperty] + document.documentElement[scrollProperty]) - startSpacing;
        var endSpacing = _typeof(spacing) === "object" ? spacing[endProperty] : spacing;
        var availableEndSpace = -Math.max(scrollContainerCollisions[overflowEndProperty], documentCollisions[overflowEndProperty] - document.documentElement[scrollProperty]) - endSpacing - scrollbarWidth;
        if (secondary) {
          availableStartSpace += parent[clientSizeProperty];
          availableEndSpace += parent[clientSizeProperty];
        }
        var offsetSize = element[offsetSizeProperty];
        function displayStart() {
          element.style[startProperty] = "auto";
          element.style[endProperty] = secondary ? "0" : "100%";
        }
        function displayEnd() {
          element.style[startProperty] = secondary ? "0" : "100%";
          element.style[endProperty] = "auto";
        }
        function displayIfFits(availableSpace, display) {
          var fits2 = offsetSize <= availableSpace;
          if (fits2) {
            display();
          }
          return fits2;
        }
        function displayStartIfFits() {
          return displayIfFits(availableStartSpace, displayStart);
        }
        function displayEndIfFits() {
          return displayIfFits(availableEndSpace, displayEnd);
        }
        function displayWhereverShrinkedFits() {
          var moreSpaceStart = availableStartSpace > availableEndSpace;
          var minSize = style2[minSizeProperty] && parseInt(style2[minSizeProperty], 10);
          function shrinkToSize(size) {
            (0, _tinyWarning["default"])(!minSize || size >= minSize, "<Fit />'s child will not fit anywhere with its current ".concat(minSizeProperty, " of ").concat(minSize, "px."));
            var newSize = Math.max(size, minSize || 0);
            (0, _tinyWarning["default"])(false, "<Fit />'s child needed to have its ".concat(sizeProperty, " decreased to ").concat(newSize, "px."));
            element.style[sizeProperty] = "".concat(newSize, "px");
          }
          if (moreSpaceStart) {
            shrinkToSize(availableStartSpace);
            displayStart();
          } else {
            shrinkToSize(availableEndSpace);
            displayEnd();
          }
        }
        var fits;
        if (invertAxis) {
          fits = displayStartIfFits() || displayEndIfFits();
        } else {
          fits = displayEndIfFits() || displayStartIfFits();
        }
        if (!fits) {
          displayWhereverShrinkedFits();
        }
      }
      function alignMainAxis(args) {
        alignAxis(args);
      }
      function alignSecondaryAxis(args) {
        alignAxis(_objectSpread(_objectSpread({}, args), {}, {
          axis: args.axis === "x" ? "y" : "x",
          secondary: true
        }));
      }
      function alignBothAxis(args) {
        var invertAxis = args.invertAxis, invertSecondaryAxis = args.invertSecondaryAxis, commonArgs = _objectWithoutProperties(args, _excluded32);
        alignMainAxis(_objectSpread(_objectSpread({}, commonArgs), {}, {
          invertAxis
        }));
        alignSecondaryAxis(_objectSpread(_objectSpread({}, commonArgs), {}, {
          invertAxis: invertSecondaryAxis
        }));
      }
      var Fit = /* @__PURE__ */ function(_Component) {
        _inherits(Fit2, _Component);
        var _super = _createSuper(Fit2);
        function Fit2() {
          var _this;
          _classCallCheck(this, Fit2);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty(_assertThisInitialized2(_this), "onMutation", function() {
            _this.fit();
          });
          _defineProperty(_assertThisInitialized2(_this), "mutationObserver", isMutationObserverSupported && new MutationObserver(_this.onMutation));
          _defineProperty(_assertThisInitialized2(_this), "fit", function() {
            var _assertThisInitialize = _assertThisInitialized2(_this), scrollContainer = _assertThisInitialize.scrollContainer, container2 = _assertThisInitialize.container, element = _assertThisInitialize.element;
            if (!element) {
              return;
            }
            var elementWidth = element.clientWidth;
            var elementHeight = element.clientHeight;
            if (_this.elementWidth === elementWidth && _this.elementHeight === elementHeight) {
              return;
            }
            _this.elementWidth = elementWidth;
            _this.elementHeight = elementHeight;
            var parent = container2.parentElement;
            if (!parent) {
              return;
            }
            var style2 = window.getComputedStyle(element);
            var position = style2.position;
            if (position !== "absolute") {
              (0, _tinyWarning["default"])(false, "<Fit />'s child does not have absolute position. You should apply `position: absolute` to it.");
              element.style.position = "absolute";
            }
            var parentStyle = window.getComputedStyle(parent);
            var parentPosition = parentStyle.position;
            if (parentPosition !== "relative" && parentPosition !== "absolute") {
              (0, _tinyWarning["default"])(false, "<Fit />'s parent does not have relative position. You should apply `position: relative` to it.");
              parent.style.position = "relative";
            }
            var _this$props = _this.props, invertAxis = _this$props.invertAxis, invertSecondaryAxis = _this$props.invertSecondaryAxis, mainAxis = _this$props.mainAxis, spacing = _this$props.spacing;
            alignBothAxis({
              container: container2,
              element,
              invertAxis,
              invertSecondaryAxis,
              axis: mainAxis,
              scrollContainer,
              spacing
            });
          });
          return _this;
        }
        _createClass(Fit2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            if (!isDisplayContentsSupported) {
              var element = (0, _reactDom.findDOMNode)(this);
              this.container = element;
              this.element = element;
              this.scrollContainer = findScrollContainer(element);
            }
            this.fit();
            if (isMutationObserverSupported) {
              this.mutationObserver.observe(this.element, {
                attributes: true,
                attributeFilter: ["class", "style"]
              });
            }
          }
        }, {
          key: "render",
          value: function render() {
            var _this2 = this;
            var children = this.props.children;
            var child = _react["default"].Children.only(children);
            if (isDisplayContentsSupported) {
              return /* @__PURE__ */ _react["default"].createElement("span", {
                ref: function ref(container2) {
                  _this2.container = container2;
                  var element = container2 && container2.firstChild;
                  _this2.element = element;
                  _this2.scrollContainer = findScrollContainer(element);
                },
                style: {
                  display: "contents"
                }
              }, child);
            }
            return child;
          }
        }]);
        return Fit2;
      }(_react.Component);
      exports["default"] = Fit;
      Fit.propTypes = {
        children: _propTypes["default"].node,
        invertAxis: _propTypes["default"].bool,
        invertSecondaryAxis: _propTypes["default"].bool,
        mainAxis: _propTypes["default"].oneOf(["x", "y"]),
        spacing: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].shape({
          bottom: _propTypes["default"].number.isRequired,
          left: _propTypes["default"].number.isRequired,
          right: _propTypes["default"].number.isRequired,
          top: _propTypes["default"].number.isRequired
        })])
      };
      Fit.defaultProps = {
        mainAxis: "y",
        spacing: 8
      };
    }
  });

  // node_modules/react-clock/dist/umd/shared/utils.js
  var require_utils6 = __commonJS({
    "node_modules/react-clock/dist/umd/shared/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isDefined = isDefined;
      function isDefined(variable) {
        return typeof variable !== "undefined";
      }
    }
  });

  // node_modules/react-clock/dist/umd/shared/propTypes.js
  var require_propTypes2 = __commonJS({
    "node_modules/react-clock/dist/umd/shared/propTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isOppositeHandLength = exports.isMarkWidth = exports.isMarkLength = exports.isHandWidth = exports.isHandLength = void 0;
      var _utils = require_utils6();
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      var isNumberBetween = function isNumberBetween2(min, max) {
        return function(props2, propName, componentName) {
          var value = props2[propName];
          if ((0, _utils.isDefined)(value)) {
            if (typeof value !== "number") {
              return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(value), "` supplied to `").concat(componentName, "`, expected `number`."));
            }
            if (value < min || value > max) {
              return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(value), "` supplied to `").concat(componentName, "`, length must be between ").concat(min, " and ").concat(max, "."));
            }
          }
          return null;
        };
      };
      var isHandLength = isNumberBetween(0, 100);
      exports.isHandLength = isHandLength;
      var isOppositeHandLength = isNumberBetween(-100, 100);
      exports.isOppositeHandLength = isOppositeHandLength;
      var isHandWidth = function isHandWidth2(props2, propName, componentName) {
        var width = props2[propName];
        if ((0, _utils.isDefined)(width)) {
          if (typeof width !== "number") {
            return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(width), "` supplied to `").concat(componentName, "`, expected `number`."));
          }
          if (width < 0) {
            return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(width), "` supplied to `").concat(componentName, "`, width must be greater or equal to 0."));
          }
        }
        return null;
      };
      exports.isHandWidth = isHandWidth;
      var isMarkLength = isHandLength;
      exports.isMarkLength = isMarkLength;
      var isMarkWidth = isHandWidth;
      exports.isMarkWidth = isMarkWidth;
    }
  });

  // node_modules/react-clock/dist/umd/Hand.js
  var require_Hand = __commonJS({
    "node_modules/react-clock/dist/umd/Hand.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Hand;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _propTypes2 = require_propTypes2();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function Hand(_ref) {
        var _ref$angle = _ref.angle, angle = _ref$angle === void 0 ? 0 : _ref$angle, name = _ref.name, _ref$length = _ref.length, length = _ref$length === void 0 ? 100 : _ref$length, _ref$oppositeLength = _ref.oppositeLength, oppositeLength = _ref$oppositeLength === void 0 ? 10 : _ref$oppositeLength, _ref$width = _ref.width, width = _ref$width === void 0 ? 1 : _ref$width;
        return /* @__PURE__ */ _react["default"].createElement("div", {
          className: "react-clock__hand react-clock__".concat(name, "-hand"),
          style: {
            transform: "rotate(".concat(angle, "deg)")
          }
        }, /* @__PURE__ */ _react["default"].createElement("div", {
          className: "react-clock__hand__body react-clock__".concat(name, "-hand__body"),
          style: {
            width: "".concat(width, "px"),
            top: "".concat(50 - length / 2, "%"),
            bottom: "".concat(50 - oppositeLength / 2, "%")
          }
        }));
      }
      Hand.propTypes = {
        angle: _propTypes["default"].number,
        length: _propTypes2.isHandLength,
        name: _propTypes["default"].string.isRequired,
        oppositeLength: _propTypes2.isHandLength,
        width: _propTypes["default"].number
      };
    }
  });

  // node_modules/react-clock/dist/umd/Mark.js
  var require_Mark = __commonJS({
    "node_modules/react-clock/dist/umd/Mark.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Mark;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _propTypes2 = require_propTypes2();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function Mark(_ref) {
        var _ref$angle = _ref.angle, angle = _ref$angle === void 0 ? 0 : _ref$angle, _ref$length = _ref.length, length = _ref$length === void 0 ? 10 : _ref$length, name = _ref.name, _ref$width = _ref.width, width = _ref$width === void 0 ? 1 : _ref$width, number = _ref.number;
        return /* @__PURE__ */ _react["default"].createElement("div", {
          className: "react-clock__mark react-clock__".concat(name, "-mark"),
          style: {
            transform: "rotate(".concat(angle, "deg)")
          }
        }, /* @__PURE__ */ _react["default"].createElement("div", {
          className: "react-clock__mark__body react-clock__".concat(name, "-mark__body"),
          style: {
            width: "".concat(width, "px"),
            top: 0,
            bottom: "".concat(100 - length / 2, "%")
          }
        }), number && /* @__PURE__ */ _react["default"].createElement("div", {
          className: "react-clock__mark__number",
          style: {
            transform: "rotate(-".concat(angle, "deg)"),
            top: "".concat(length / 2, "%")
          }
        }, number));
      }
      Mark.propTypes = {
        angle: _propTypes["default"].number,
        length: _propTypes2.isMarkLength,
        name: _propTypes["default"].string.isRequired,
        number: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
        width: _propTypes2.isMarkWidth
      };
    }
  });

  // node_modules/react-clock/dist/umd/MinuteMark.js
  var require_MinuteMark = __commonJS({
    "node_modules/react-clock/dist/umd/MinuteMark.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = MinuteMark;
      var _react = _interopRequireDefault(require_react());
      var _Mark = _interopRequireDefault(require_Mark());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function MinuteMark(props2) {
        return /* @__PURE__ */ _react["default"].createElement(_Mark["default"], props2);
      }
    }
  });

  // node_modules/react-clock/dist/umd/shared/hourFormatter.js
  var require_hourFormatter = __commonJS({
    "node_modules/react-clock/dist/umd/shared/hourFormatter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.formatHour = void 0;
      var _getUserLocale = _interopRequireDefault(require_umd3());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var formatHour = function formatHour2(locale, hour) {
        return hour.toLocaleString(locale || (0, _getUserLocale["default"])());
      };
      exports.formatHour = formatHour;
    }
  });

  // node_modules/react-clock/dist/umd/HourMark.js
  var require_HourMark = __commonJS({
    "node_modules/react-clock/dist/umd/HourMark.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = HourMark;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _Mark = _interopRequireDefault(require_Mark());
      var _hourFormatter = require_hourFormatter();
      var _excluded32 = ["formatHour", "locale", "number"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function HourMark(_ref) {
        var _ref$formatHour = _ref.formatHour, formatHour = _ref$formatHour === void 0 ? _hourFormatter.formatHour : _ref$formatHour, locale = _ref.locale, number = _ref.number, otherProps = _objectWithoutProperties(_ref, _excluded32);
        return /* @__PURE__ */ _react["default"].createElement(_Mark["default"], _extends2({
          number: number && formatHour(locale, number)
        }, otherProps));
      }
      HourMark.propTypes = {
        formatHour: _propTypes["default"].func,
        locale: _propTypes["default"].string,
        number: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
      };
    }
  });

  // node_modules/react-clock/dist/umd/Clock.js
  var require_Clock = __commonJS({
    "node_modules/react-clock/dist/umd/Clock.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Clock;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _dateUtils = require_umd4();
      var _Hand = _interopRequireDefault(require_Hand());
      var _MinuteMark = _interopRequireDefault(require_MinuteMark());
      var _HourMark = _interopRequireDefault(require_HourMark());
      var _propTypes2 = require_propTypes2();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function Clock(_ref) {
        var className = _ref.className, formatHour = _ref.formatHour, _ref$hourHandLength = _ref.hourHandLength, hourHandLength = _ref$hourHandLength === void 0 ? 50 : _ref$hourHandLength, hourHandOppositeLength = _ref.hourHandOppositeLength, _ref$hourHandWidth = _ref.hourHandWidth, hourHandWidth = _ref$hourHandWidth === void 0 ? 4 : _ref$hourHandWidth, _ref$hourMarksLength = _ref.hourMarksLength, hourMarksLength = _ref$hourMarksLength === void 0 ? 10 : _ref$hourMarksLength, _ref$hourMarksWidth = _ref.hourMarksWidth, hourMarksWidth = _ref$hourMarksWidth === void 0 ? 3 : _ref$hourMarksWidth, locale = _ref.locale, _ref$minuteHandLength = _ref.minuteHandLength, minuteHandLength = _ref$minuteHandLength === void 0 ? 70 : _ref$minuteHandLength, minuteHandOppositeLength = _ref.minuteHandOppositeLength, _ref$minuteHandWidth = _ref.minuteHandWidth, minuteHandWidth = _ref$minuteHandWidth === void 0 ? 2 : _ref$minuteHandWidth, _ref$minuteMarksLengt = _ref.minuteMarksLength, minuteMarksLength = _ref$minuteMarksLengt === void 0 ? 6 : _ref$minuteMarksLengt, _ref$minuteMarksWidth = _ref.minuteMarksWidth, minuteMarksWidth = _ref$minuteMarksWidth === void 0 ? 1 : _ref$minuteMarksWidth, _ref$renderHourMarks = _ref.renderHourMarks, renderHourMarks = _ref$renderHourMarks === void 0 ? true : _ref$renderHourMarks, _ref$renderMinuteHand = _ref.renderMinuteHand, renderMinuteHand = _ref$renderMinuteHand === void 0 ? true : _ref$renderMinuteHand, _ref$renderMinuteMark = _ref.renderMinuteMarks, renderMinuteMarks = _ref$renderMinuteMark === void 0 ? true : _ref$renderMinuteMark, renderNumbers = _ref.renderNumbers, _ref$renderSecondHand = _ref.renderSecondHand, renderSecondHand = _ref$renderSecondHand === void 0 ? true : _ref$renderSecondHand, _ref$secondHandLength = _ref.secondHandLength, secondHandLength = _ref$secondHandLength === void 0 ? 90 : _ref$secondHandLength, secondHandOppositeLength = _ref.secondHandOppositeLength, _ref$secondHandWidth = _ref.secondHandWidth, secondHandWidth = _ref$secondHandWidth === void 0 ? 1 : _ref$secondHandWidth, _ref$size = _ref.size, size = _ref$size === void 0 ? 150 : _ref$size, value = _ref.value;
        function renderMinuteMarksFn() {
          if (!renderMinuteMarks) {
            return null;
          }
          var minuteMarks = [];
          for (var i = 1; i <= 60; i += 1) {
            var isHourMark = renderHourMarks && !(i % 5);
            if (!isHourMark) {
              minuteMarks.push(/* @__PURE__ */ _react["default"].createElement(_MinuteMark["default"], {
                key: "minute_".concat(i),
                angle: i * 6,
                length: minuteMarksLength,
                name: "minute",
                width: minuteMarksWidth
              }));
            }
          }
          return minuteMarks;
        }
        function renderHourMarksFn() {
          if (!renderHourMarks) {
            return null;
          }
          var hourMarks = [];
          for (var i = 1; i <= 12; i += 1) {
            hourMarks.push(/* @__PURE__ */ _react["default"].createElement(_HourMark["default"], {
              key: "hour_".concat(i),
              angle: i * 30,
              formatHour,
              length: hourMarksLength,
              locale,
              name: "hour",
              number: renderNumbers ? i : null,
              width: hourMarksWidth
            }));
          }
          return hourMarks;
        }
        function renderFace() {
          return /* @__PURE__ */ _react["default"].createElement("div", {
            className: "react-clock__face"
          }, renderMinuteMarksFn(), renderHourMarksFn());
        }
        function renderHourHandFn() {
          var angle = value ? (0, _dateUtils.getHours)(value) * 30 + (0, _dateUtils.getMinutes)(value) / 2 + (0, _dateUtils.getSeconds)(value) / 600 : 0;
          return /* @__PURE__ */ _react["default"].createElement(_Hand["default"], {
            angle,
            length: hourHandLength,
            name: "hour",
            oppositeLength: hourHandOppositeLength,
            width: hourHandWidth
          });
        }
        function renderMinuteHandFn() {
          if (!renderMinuteHand) {
            return null;
          }
          var angle = value ? (0, _dateUtils.getHours)(value) * 360 + (0, _dateUtils.getMinutes)(value) * 6 + (0, _dateUtils.getSeconds)(value) / 10 : 0;
          return /* @__PURE__ */ _react["default"].createElement(_Hand["default"], {
            angle,
            length: minuteHandLength,
            name: "minute",
            oppositeLength: minuteHandOppositeLength,
            width: minuteHandWidth
          });
        }
        function renderSecondHandFn() {
          if (!renderSecondHand) {
            return null;
          }
          var angle = value ? (0, _dateUtils.getMinutes)(value) * 360 + (0, _dateUtils.getSeconds)(value) * 6 : 0;
          return /* @__PURE__ */ _react["default"].createElement(_Hand["default"], {
            angle,
            length: secondHandLength,
            name: "second",
            oppositeLength: secondHandOppositeLength,
            width: secondHandWidth
          });
        }
        return /* @__PURE__ */ _react["default"].createElement("time", {
          className: (0, _mergeClassNames["default"])("react-clock", className),
          dateTime: value instanceof Date ? value.toISOString() : value,
          style: {
            width: "".concat(size, "px"),
            height: "".concat(size, "px")
          }
        }, renderFace(), renderHourHandFn(), renderMinuteHandFn(), renderSecondHandFn());
      }
      Clock.propTypes = {
        className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
        formatHour: _propTypes["default"].func,
        hourHandLength: _propTypes2.isHandLength,
        hourHandOppositeLength: _propTypes2.isOppositeHandLength,
        hourHandWidth: _propTypes2.isHandWidth,
        hourMarksLength: _propTypes2.isMarkLength,
        hourMarksWidth: _propTypes2.isMarkWidth,
        locale: _propTypes["default"].string,
        minuteHandLength: _propTypes2.isHandLength,
        minuteHandOppositeLength: _propTypes2.isOppositeHandLength,
        minuteHandWidth: _propTypes2.isHandWidth,
        minuteMarksLength: _propTypes2.isMarkLength,
        minuteMarksWidth: _propTypes2.isMarkWidth,
        renderHourMarks: _propTypes["default"].bool,
        renderMinuteHand: _propTypes["default"].bool,
        renderMinuteMarks: _propTypes["default"].bool,
        renderNumbers: _propTypes["default"].bool,
        renderSecondHand: _propTypes["default"].bool,
        secondHandLength: _propTypes2.isHandLength,
        secondHandOppositeLength: _propTypes2.isOppositeHandLength,
        secondHandWidth: _propTypes2.isHandWidth,
        size: _propTypes["default"].number,
        value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date)])
      };
    }
  });

  // node_modules/react-clock/dist/umd/index.js
  var require_umd7 = __commonJS({
    "node_modules/react-clock/dist/umd/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _Clock = _interopRequireDefault(require_Clock());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _default = _Clock["default"];
      exports["default"] = _default;
    }
  });

  // node_modules/update-input-width/dist/umd/index.js
  var require_umd8 = __commonJS({
    "node_modules/update-input-width/dist/umd/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getFontShorthand = getFontShorthand;
      exports.measureText = measureText;
      exports.updateInputWidth = updateInputWidth;
      exports["default"] = void 0;
      var allowedVariants = ["normal", "small-caps"];
      function getFontShorthand(element) {
        if (!element) {
          return "";
        }
        var style2 = window.getComputedStyle(element);
        if (style2.font) {
          return style2.font;
        }
        var isFontDefined = style2["font-family"] !== "";
        if (!isFontDefined) {
          return "";
        }
        var fontVariant = allowedVariants.includes(style2["font-variant"]) ? style2["font-variant"] : "normal";
        return "".concat(style2["font-style"], " ").concat(fontVariant, " ").concat(style2["font-weight"], " ").concat(style2["font-size"], " / ").concat(style2["line-height"], " ").concat(style2["font-family"]);
      }
      function measureText(text, font) {
        var canvas = measureText.canvas || (measureText.canvas = document.createElement("canvas"));
        var context = canvas.getContext("2d");
        if (!context) {
          return null;
        }
        context.font = font;
        var _context$measureText = context.measureText(text), width = _context$measureText.width;
        return Math.ceil(width);
      }
      function updateInputWidth(element) {
        if (typeof window === "undefined" || !element) {
          return null;
        }
        var font = getFontShorthand(element);
        var text = element.value || element.placeholder;
        var width = measureText(text, font);
        if (width === null) {
          return null;
        }
        element.style.width = "".concat(width, "px");
        return width;
      }
      var _default = updateInputWidth;
      exports["default"] = _default;
    }
  });

  // node_modules/react-date-picker/dist/shared/propTypes.js
  var require_propTypes3 = __commonJS({
    "node_modules/react-date-picker/dist/shared/propTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isValueType = exports.isRef = exports.isMinDate = exports.isMaxDate = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      var allViews = ["century", "decade", "year", "month"];
      var allValueTypes = [].concat(_toConsumableArray(allViews.slice(1)), ["day"]);
      var isValueType = _propTypes["default"].oneOf(allValueTypes);
      exports.isValueType = isValueType;
      var isMinDate = function isMinDate2(props2, propName, componentName) {
        var minDate2 = props2[propName];
        if (!minDate2) {
          return null;
        }
        if (!(minDate2 instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate2), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var maxDate = props2.maxDate;
        if (maxDate && minDate2 > maxDate) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate2), "` supplied to `").concat(componentName, "`, minDate cannot be larger than maxDate."));
        }
        return null;
      };
      exports.isMinDate = isMinDate;
      var isMaxDate = function isMaxDate2(props2, propName, componentName) {
        var maxDate = props2[propName];
        if (!maxDate) {
          return null;
        }
        if (!(maxDate instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var minDate2 = props2.minDate;
        if (minDate2 && maxDate < minDate2) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, maxDate cannot be smaller than minDate."));
        }
        return null;
      };
      exports.isMaxDate = isMaxDate;
      var isRef = _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].shape({
        current: _propTypes["default"].any
      })]);
      exports.isRef = isRef;
    }
  });

  // node_modules/react-date-picker/dist/DateInput/Input.js
  var require_Input = __commonJS({
    "node_modules/react-date-picker/dist/DateInput/Input.js"(exports) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Input;
      var _react = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _updateInputWidth = _interopRequireWildcard(require_umd8());
      var _propTypes2 = require_propTypes3();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var isIEOrEdgeLegacy = typeof window !== "undefined" && /(MSIE|Trident\/|Edge\/)/.test(window.navigator.userAgent);
      var isFirefox = typeof window !== "undefined" && /Firefox/.test(window.navigator.userAgent);
      function onFocus(event) {
        var target = event.target;
        if (isIEOrEdgeLegacy) {
          requestAnimationFrame(function() {
            return target.select();
          });
        } else {
          target.select();
        }
      }
      function updateInputWidthOnLoad(element) {
        if (document.readyState === "complete") {
          return;
        }
        function onLoad() {
          (0, _updateInputWidth["default"])(element);
        }
        window.addEventListener("load", onLoad);
      }
      function updateInputWidthOnFontLoad(element) {
        if (!document.fonts) {
          return;
        }
        var font = (0, _updateInputWidth.getFontShorthand)(element);
        if (!font) {
          return;
        }
        var isFontLoaded = document.fonts.check(font);
        if (isFontLoaded) {
          return;
        }
        function onLoadingDone() {
          (0, _updateInputWidth["default"])(element);
        }
        document.fonts.addEventListener("loadingdone", onLoadingDone);
      }
      function getSelectionString(input) {
        if (input && "selectionStart" in input && input.selectionStart !== null) {
          return input.value.slice(input.selectionStart, input.selectionEnd);
        }
        if ("getSelection" in window) {
          return window.getSelection().toString();
        }
        return null;
      }
      function makeOnKeyPress(maxLength) {
        return function onKeyPress(event) {
          if (isFirefox) {
            return;
          }
          var key = event.key, input = event.target;
          var value = input.value;
          var isNumberKey = key.length === 1 && /\d/.test(key);
          var selection = getSelectionString(input);
          if (!isNumberKey || !(selection || value.length < maxLength)) {
            event.preventDefault();
          }
        };
      }
      function Input(_ref) {
        var ariaLabel = _ref.ariaLabel, autoFocus = _ref.autoFocus, className = _ref.className, disabled = _ref.disabled, inputRef = _ref.inputRef, max = _ref.max, min = _ref.min, name = _ref.name, nameForClass = _ref.nameForClass, onChange = _ref.onChange, onKeyDown = _ref.onKeyDown, _onKeyUp = _ref.onKeyUp, _ref$placeholder = _ref.placeholder, placeholder = _ref$placeholder === void 0 ? "--" : _ref$placeholder, required = _ref.required, showLeadingZeros = _ref.showLeadingZeros, step = _ref.step, value = _ref.value;
        (0, _react.useLayoutEffect)(function() {
          if (!inputRef || !inputRef.current) {
            return;
          }
          (0, _updateInputWidth["default"])(inputRef.current);
          updateInputWidthOnLoad(inputRef.current);
          updateInputWidthOnFontLoad(inputRef.current);
        }, [inputRef, value]);
        var hasLeadingZero = showLeadingZeros && value && value < 10 && (value === "0" || !value.toString().startsWith("0"));
        var maxLength = max ? max.toString().length : null;
        return [hasLeadingZero && /* @__PURE__ */ _react["default"].createElement("span", {
          key: "leadingZero",
          className: "".concat(className, "__leadingZero")
        }, "0"), /* @__PURE__ */ _react["default"].createElement("input", {
          key: "input",
          "aria-label": ariaLabel,
          autoComplete: "off",
          autoFocus,
          className: (0, _mergeClassNames["default"])("".concat(className, "__input"), "".concat(className, "__").concat(nameForClass || name), hasLeadingZero && "".concat(className, "__input--hasLeadingZero")),
          "data-input": "true",
          disabled,
          inputMode: "numeric",
          max,
          min,
          name,
          onChange,
          onFocus,
          onKeyDown,
          onKeyPress: makeOnKeyPress(maxLength),
          onKeyUp: function onKeyUp(event) {
            (0, _updateInputWidth["default"])(event.target);
            if (_onKeyUp) {
              _onKeyUp(event);
            }
          },
          placeholder,
          ref: inputRef,
          required,
          step,
          type: "number",
          value: value !== null ? value : ""
        })];
      }
      Input.propTypes = {
        ariaLabel: _propTypes["default"].string,
        autoFocus: _propTypes["default"].bool,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        inputRef: _propTypes2.isRef,
        max: _propTypes["default"].number,
        min: _propTypes["default"].number,
        name: _propTypes["default"].string,
        nameForClass: _propTypes["default"].string,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        showLeadingZeros: _propTypes["default"].bool,
        step: _propTypes["default"].number,
        value: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-date-picker/dist/shared/utils.js
  var require_utils7 = __commonJS({
    "node_modules/react-date-picker/dist/shared/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.between = between;
      exports.safeMax = safeMax;
      exports.safeMin = safeMin;
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function between(value, min, max) {
        if (min && min > value) {
          return min;
        }
        if (max && max < value) {
          return max;
        }
        return value;
      }
      function isValidNumber(num) {
        return num !== null && num !== false && !Number.isNaN(Number(num));
      }
      function safeMin() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return Math.min.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
      }
      function safeMax() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return Math.max.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
      }
    }
  });

  // node_modules/react-date-picker/dist/DateInput/DayInput.js
  var require_DayInput = __commonJS({
    "node_modules/react-date-picker/dist/DateInput/DayInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = DayInput;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Input = _interopRequireDefault(require_Input());
      var _propTypes2 = require_propTypes3();
      var _utils = require_utils7();
      var _excluded32 = ["maxDate", "minDate", "month", "year"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function DayInput(_ref) {
        var maxDate = _ref.maxDate, minDate2 = _ref.minDate, month = _ref.month, year = _ref.year, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var currentMonthMaxDays = function() {
          if (!month) {
            return 31;
          }
          return (0, _dateUtils.getDaysInMonth)(new Date(year, month - 1, 1));
        }();
        function isSameMonth(date) {
          return date && year === (0, _dateUtils.getYear)(date).toString() && month === (0, _dateUtils.getMonthHuman)(date).toString();
        }
        var maxDay = (0, _utils.safeMin)(currentMonthMaxDays, isSameMonth(maxDate) && (0, _dateUtils.getDate)(maxDate));
        var minDay = (0, _utils.safeMax)(1, isSameMonth(minDate2) && (0, _dateUtils.getDate)(minDate2));
        return /* @__PURE__ */ _react["default"].createElement(_Input["default"], _extends2({
          max: maxDay,
          min: minDay,
          name: "day"
        }, otherProps));
      }
      DayInput.propTypes = {
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        inputRef: _propTypes2.isRef,
        maxDate: _propTypes2.isMaxDate,
        minDate: _propTypes2.isMinDate,
        month: _propTypes["default"].string,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        showLeadingZeros: _propTypes["default"].bool,
        value: _propTypes["default"].string,
        year: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-date-picker/dist/DateInput/MonthInput.js
  var require_MonthInput = __commonJS({
    "node_modules/react-date-picker/dist/DateInput/MonthInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = MonthInput;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Input = _interopRequireDefault(require_Input());
      var _propTypes2 = require_propTypes3();
      var _utils = require_utils7();
      var _excluded32 = ["maxDate", "minDate", "year"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function MonthInput(_ref) {
        var maxDate = _ref.maxDate, minDate2 = _ref.minDate, year = _ref.year, otherProps = _objectWithoutProperties(_ref, _excluded32);
        function isSameYear(date) {
          return date && year === (0, _dateUtils.getYear)(date).toString();
        }
        var maxMonth = (0, _utils.safeMin)(12, isSameYear(maxDate) && (0, _dateUtils.getMonthHuman)(maxDate));
        var minMonth = (0, _utils.safeMax)(1, isSameYear(minDate2) && (0, _dateUtils.getMonthHuman)(minDate2));
        return /* @__PURE__ */ _react["default"].createElement(_Input["default"], _extends2({
          max: maxMonth,
          min: minMonth,
          name: "month"
        }, otherProps));
      }
      MonthInput.propTypes = {
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        inputRef: _propTypes2.isRef,
        maxDate: _propTypes2.isMaxDate,
        minDate: _propTypes2.isMinDate,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        showLeadingZeros: _propTypes["default"].bool,
        value: _propTypes["default"].string,
        year: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-date-picker/dist/shared/dateFormatter.js
  var require_dateFormatter2 = __commonJS({
    "node_modules/react-date-picker/dist/shared/dateFormatter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.formatShortMonth = exports.formatMonth = void 0;
      exports.getFormatter = getFormatter;
      var _getUserLocale = _interopRequireDefault(require_umd3());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var formatterCache = /* @__PURE__ */ new Map();
      function getFormatter(options) {
        return function(locale, date) {
          var localeWithDefault = locale || (0, _getUserLocale["default"])();
          if (!formatterCache.has(localeWithDefault)) {
            formatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
          }
          var formatterCacheLocale = formatterCache.get(localeWithDefault);
          if (!formatterCacheLocale.has(options)) {
            formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault, options).format);
          }
          return formatterCacheLocale.get(options)(date);
        };
      }
      function toSafeHour(date) {
        var safeDate = new Date(date);
        return new Date(safeDate.setHours(12));
      }
      function getSafeFormatter(options) {
        return function(locale, date) {
          return getFormatter(options)(locale, toSafeHour(date));
        };
      }
      var formatMonthOptions = {
        month: "long"
      };
      var formatShortMonthOptions = {
        month: "short"
      };
      var formatMonth = getSafeFormatter(formatMonthOptions);
      exports.formatMonth = formatMonth;
      var formatShortMonth = getSafeFormatter(formatShortMonthOptions);
      exports.formatShortMonth = formatShortMonth;
    }
  });

  // node_modules/react-date-picker/dist/DateInput/MonthSelect.js
  var require_MonthSelect = __commonJS({
    "node_modules/react-date-picker/dist/DateInput/MonthSelect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = MonthSelect;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _dateUtils = require_umd4();
      var _dateFormatter = require_dateFormatter2();
      var _propTypes2 = require_propTypes3();
      var _utils = require_utils7();
      var _excluded32 = ["ariaLabel", "className", "inputRef", "locale", "maxDate", "minDate", "placeholder", "short", "value", "year"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function MonthSelect(_ref) {
        var ariaLabel = _ref.ariaLabel, className = _ref.className, inputRef = _ref.inputRef, locale = _ref.locale, maxDate = _ref.maxDate, minDate2 = _ref.minDate, _ref$placeholder = _ref.placeholder, placeholder = _ref$placeholder === void 0 ? "--" : _ref$placeholder, _short = _ref["short"], value = _ref.value, year = _ref.year, otherProps = _objectWithoutProperties(_ref, _excluded32);
        function isSameYear(date) {
          return date && year === (0, _dateUtils.getYear)(date).toString();
        }
        var maxMonth = (0, _utils.safeMin)(12, isSameYear(maxDate) && (0, _dateUtils.getMonthHuman)(maxDate));
        var minMonth = (0, _utils.safeMax)(1, isSameYear(minDate2) && (0, _dateUtils.getMonthHuman)(minDate2));
        var dates = _toConsumableArray(Array(12)).map(function(el, index) {
          return new Date(2019, index, 1);
        });
        var name = "month";
        var formatter = _short ? _dateFormatter.formatShortMonth : _dateFormatter.formatMonth;
        return /* @__PURE__ */ _react["default"].createElement("select", _extends2({
          "aria-label": ariaLabel,
          className: (0, _mergeClassNames["default"])("".concat(className, "__input"), "".concat(className, "__").concat(name)),
          "data-input": "true",
          "data-select": "true",
          name,
          ref: inputRef,
          value: value !== null ? value : ""
        }, otherProps), !value && /* @__PURE__ */ _react["default"].createElement("option", {
          value: ""
        }, placeholder), dates.map(function(date) {
          var month = (0, _dateUtils.getMonthHuman)(date);
          var disabled = month < minMonth || month > maxMonth;
          return /* @__PURE__ */ _react["default"].createElement("option", {
            key: month,
            disabled,
            value: month
          }, formatter(locale, date));
        }));
      }
      MonthSelect.propTypes = {
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        inputRef: _propTypes2.isRef,
        locale: _propTypes["default"].string,
        maxDate: _propTypes2.isMaxDate,
        minDate: _propTypes2.isMinDate,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        "short": _propTypes["default"].bool,
        value: _propTypes["default"].string,
        year: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-date-picker/dist/DateInput/YearInput.js
  var require_YearInput = __commonJS({
    "node_modules/react-date-picker/dist/DateInput/YearInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = YearInput;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Input = _interopRequireDefault(require_Input());
      var _propTypes2 = require_propTypes3();
      var _utils = require_utils7();
      var _excluded32 = ["maxDate", "minDate", "placeholder", "valueType"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function YearInput(_ref) {
        var maxDate = _ref.maxDate, minDate2 = _ref.minDate, _ref$placeholder = _ref.placeholder, placeholder = _ref$placeholder === void 0 ? "----" : _ref$placeholder, valueType = _ref.valueType, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var maxYear = (0, _utils.safeMin)(275760, maxDate && (0, _dateUtils.getYear)(maxDate));
        var minYear = (0, _utils.safeMax)(1, minDate2 && (0, _dateUtils.getYear)(minDate2));
        var yearStep = function() {
          if (valueType === "century") {
            return 10;
          }
          return 1;
        }();
        return /* @__PURE__ */ _react["default"].createElement(_Input["default"], _extends2({
          max: maxYear,
          min: minYear,
          name: "year",
          placeholder,
          step: yearStep
        }, otherProps));
      }
      YearInput.propTypes = {
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        inputRef: _propTypes2.isRef,
        maxDate: _propTypes2.isMaxDate,
        minDate: _propTypes2.isMinDate,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        value: _propTypes["default"].string,
        valueType: _propTypes2.isValueType
      };
    }
  });

  // node_modules/react-time-picker/dist/shared/propTypes.js
  var require_propTypes4 = __commonJS({
    "node_modules/react-time-picker/dist/shared/propTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isValueType = exports.isTime = exports.isRef = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      var allViews = ["hour", "minute", "second"];
      var allValueTypes = [].concat(allViews);
      var hourOptionalSecondsRegExp = /^(([0-1])?[0-9]|2[0-3]):[0-5][0-9](:([0-5][0-9]))?$/;
      var isTime = function isTime2(props2, propName, componentName) {
        var time = props2[propName];
        if (time) {
          if (!hourOptionalSecondsRegExp.test(time)) {
            return new Error("Invalid prop `".concat(propName, "` of type `").concat(typeof minDate === "undefined" ? "undefined" : _typeof(minDate), "` supplied to `").concat(componentName, "`, expected time in HH:mm(:ss) format."));
          }
        }
        return null;
      };
      exports.isTime = isTime;
      var isValueType = _propTypes["default"].oneOf(allValueTypes);
      exports.isValueType = isValueType;
      var isRef = _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].shape({
        current: _propTypes["default"].any
      })]);
      exports.isRef = isRef;
    }
  });

  // node_modules/react-time-picker/dist/TimeInput/Input.js
  var require_Input2 = __commonJS({
    "node_modules/react-time-picker/dist/TimeInput/Input.js"(exports) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Input;
      var _react = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _updateInputWidth = _interopRequireWildcard(require_umd8());
      var _propTypes2 = require_propTypes4();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var isIEOrEdgeLegacy = typeof window !== "undefined" && /(MSIE|Trident\/|Edge\/)/.test(window.navigator.userAgent);
      var isFirefox = typeof window !== "undefined" && /Firefox/.test(window.navigator.userAgent);
      function onFocus(event) {
        var target = event.target;
        if (isIEOrEdgeLegacy) {
          requestAnimationFrame(function() {
            return target.select();
          });
        } else {
          target.select();
        }
      }
      function updateInputWidthOnLoad(element) {
        if (document.readyState === "complete") {
          return;
        }
        function onLoad() {
          (0, _updateInputWidth["default"])(element);
        }
        window.addEventListener("load", onLoad);
      }
      function updateInputWidthOnFontLoad(element) {
        if (!document.fonts) {
          return;
        }
        var font = (0, _updateInputWidth.getFontShorthand)(element);
        if (!font) {
          return;
        }
        var isFontLoaded = document.fonts.check(font);
        if (isFontLoaded) {
          return;
        }
        function onLoadingDone() {
          (0, _updateInputWidth["default"])(element);
        }
        document.fonts.addEventListener("loadingdone", onLoadingDone);
      }
      function getSelectionString(input) {
        if (input && "selectionStart" in input && input.selectionStart !== null) {
          return input.value.slice(input.selectionStart, input.selectionEnd);
        }
        if ("getSelection" in window) {
          return window.getSelection().toString();
        }
        return null;
      }
      function makeOnKeyPress(maxLength) {
        return function onKeyPress(event) {
          if (isFirefox) {
            return;
          }
          var key = event.key, input = event.target;
          var value = input.value;
          var isNumberKey = key.length === 1 && /\d/.test(key);
          var selection = getSelectionString(input);
          if (!isNumberKey || !(selection || value.length < maxLength)) {
            event.preventDefault();
          }
        };
      }
      function Input(_ref) {
        var ariaLabel = _ref.ariaLabel, autoFocus = _ref.autoFocus, className = _ref.className, disabled = _ref.disabled, inputRef = _ref.inputRef, max = _ref.max, min = _ref.min, name = _ref.name, nameForClass = _ref.nameForClass, onChange = _ref.onChange, onKeyDown = _ref.onKeyDown, _onKeyUp = _ref.onKeyUp, _ref$placeholder = _ref.placeholder, placeholder = _ref$placeholder === void 0 ? "--" : _ref$placeholder, required = _ref.required, showLeadingZeros = _ref.showLeadingZeros, step = _ref.step, value = _ref.value;
        (0, _react.useLayoutEffect)(function() {
          if (!inputRef || !inputRef.current) {
            return;
          }
          (0, _updateInputWidth["default"])(inputRef.current);
          updateInputWidthOnLoad(inputRef.current);
          updateInputWidthOnFontLoad(inputRef.current);
        }, [inputRef, value]);
        var hasLeadingZero = showLeadingZeros && value && value < 10 && (value === "0" || !value.toString().startsWith("0"));
        var maxLength = max ? max.toString().length : null;
        return [hasLeadingZero && /* @__PURE__ */ _react["default"].createElement("span", {
          key: "leadingZero",
          className: "".concat(className, "__leadingZero")
        }, "0"), /* @__PURE__ */ _react["default"].createElement("input", {
          key: "input",
          "aria-label": ariaLabel,
          autoComplete: "off",
          autoFocus,
          className: (0, _mergeClassNames["default"])("".concat(className, "__input"), "".concat(className, "__").concat(nameForClass || name), hasLeadingZero && "".concat(className, "__input--hasLeadingZero")),
          "data-input": "true",
          disabled,
          inputMode: "numeric",
          max,
          min,
          name,
          onChange,
          onFocus,
          onKeyDown,
          onKeyPress: makeOnKeyPress(maxLength),
          onKeyUp: function onKeyUp(event) {
            (0, _updateInputWidth["default"])(event.target);
            if (_onKeyUp) {
              _onKeyUp(event);
            }
          },
          placeholder,
          ref: inputRef,
          required,
          step,
          type: "number",
          value: value !== null ? value : ""
        })];
      }
      Input.propTypes = {
        ariaLabel: _propTypes["default"].string,
        autoFocus: _propTypes["default"].bool,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        inputRef: _propTypes2.isRef,
        max: _propTypes["default"].number,
        min: _propTypes["default"].number,
        name: _propTypes["default"].string,
        nameForClass: _propTypes["default"].string,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        showLeadingZeros: _propTypes["default"].bool,
        step: _propTypes["default"].number,
        value: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-time-picker/dist/shared/dates.js
  var require_dates2 = __commonJS({
    "node_modules/react-time-picker/dist/shared/dates.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.convert12to24 = convert12to24;
      exports.convert24to12 = convert24to12;
      function convert12to24(hour12, amPm) {
        var hour24 = parseInt(hour12, 10);
        if (amPm === "am" && hour24 === 12) {
          hour24 = 0;
        } else if (amPm === "pm" && hour24 < 12) {
          hour24 += 12;
        }
        return hour24;
      }
      function convert24to12(hour24) {
        var hour12 = hour24 % 12 || 12;
        return [hour12, hour24 < 12 ? "am" : "pm"];
      }
    }
  });

  // node_modules/react-time-picker/dist/shared/dateFormatter.js
  var require_dateFormatter3 = __commonJS({
    "node_modules/react-time-picker/dist/shared/dateFormatter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getFormatter = getFormatter;
      exports.getNumberFormatter = getNumberFormatter;
      var _getUserLocale = _interopRequireDefault(require_umd3());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var formatterCache = /* @__PURE__ */ new Map();
      function getFormatter(options) {
        return function(locale, date) {
          var localeWithDefault = locale || (0, _getUserLocale["default"])();
          if (!formatterCache.has(localeWithDefault)) {
            formatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
          }
          var formatterCacheLocale = formatterCache.get(localeWithDefault);
          if (!formatterCacheLocale.has(options)) {
            formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault, options).format);
          }
          return formatterCacheLocale.get(options)(date);
        };
      }
      var numberFormatterCache = /* @__PURE__ */ new Map();
      function getNumberFormatter(options) {
        return function(locale, date) {
          var localeWithDefault = locale || (0, _getUserLocale["default"])();
          if (!numberFormatterCache.has(localeWithDefault)) {
            numberFormatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
          }
          var numberFormatterCacheLocale = numberFormatterCache.get(localeWithDefault);
          if (!numberFormatterCacheLocale.has(options)) {
            numberFormatterCacheLocale.set(options, new Intl.NumberFormat(localeWithDefault, options).format);
          }
          return numberFormatterCacheLocale.get(options)(date);
        };
      }
    }
  });

  // node_modules/react-time-picker/dist/shared/utils.js
  var require_utils8 = __commonJS({
    "node_modules/react-time-picker/dist/shared/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.getAmPmLabels = getAmPmLabels;
      exports.safeMax = safeMax;
      exports.safeMin = safeMin;
      var _dateFormatter = require_dateFormatter3();
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      var nines = ["9", "\u0669"];
      var ninesRegExp = new RegExp("[".concat(nines.join(""), "]"));
      var amPmFormatter = (0, _dateFormatter.getFormatter)({
        hour: "numeric"
      });
      function getAmPmLabels(locale) {
        var amString = amPmFormatter(locale, new Date(2017, 0, 1, 9));
        var pmString = amPmFormatter(locale, new Date(2017, 0, 1, 21));
        var _amString$split = amString.split(ninesRegExp), _amString$split2 = _slicedToArray(_amString$split, 2), am1 = _amString$split2[0], am2 = _amString$split2[1];
        var _pmString$split = pmString.split(ninesRegExp), _pmString$split2 = _slicedToArray(_pmString$split, 2), pm1 = _pmString$split2[0], pm2 = _pmString$split2[1];
        if (pm2 !== void 0) {
          if (am1 !== pm1) {
            return [am1, pm1].map(function(el) {
              return el.trim();
            });
          }
          if (am2 !== pm2) {
            return [am2, pm2].map(function(el) {
              return el.trim();
            });
          }
        }
        return ["AM", "PM"];
      }
      function isValidNumber(num) {
        return num !== null && num !== false && !Number.isNaN(Number(num));
      }
      function safeMin() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return Math.min.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
      }
      function safeMax() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return Math.max.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
      }
    }
  });

  // node_modules/react-time-picker/dist/TimeInput/Hour12Input.js
  var require_Hour12Input = __commonJS({
    "node_modules/react-time-picker/dist/TimeInput/Hour12Input.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Hour12Input;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Input = _interopRequireDefault(require_Input2());
      var _dates = require_dates2();
      var _propTypes2 = require_propTypes4();
      var _utils = require_utils8();
      var _excluded32 = ["amPm", "hour", "maxTime", "minTime", "value"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function Hour12Input(_ref) {
        var amPm = _ref.amPm, hour = _ref.hour, maxTime = _ref.maxTime, minTime = _ref.minTime, value = _ref.value, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var maxHour = (0, _utils.safeMin)(12, maxTime && function() {
          var _convert24to = (0, _dates.convert24to12)((0, _dateUtils.getHours)(maxTime)), _convert24to2 = _slicedToArray(_convert24to, 2), maxHourResult = _convert24to2[0], maxAmPm = _convert24to2[1];
          if (maxAmPm !== amPm) {
            return null;
          }
          return maxHourResult;
        }());
        var minHour = (0, _utils.safeMax)(1, minTime && function() {
          var _convert24to3 = (0, _dates.convert24to12)((0, _dateUtils.getHours)(minTime)), _convert24to4 = _slicedToArray(_convert24to3, 2), minHourResult = _convert24to4[0], minAmPm = _convert24to4[1];
          if (minAmPm !== amPm || minHourResult === 12) {
            return null;
          }
          return minHourResult;
        }());
        var value12 = value ? (0, _dates.convert24to12)(value)[0].toString() : "";
        return /* @__PURE__ */ _react["default"].createElement(_Input["default"], _extends2({
          max: maxHour,
          min: minHour,
          name: "hour12",
          nameForClass: "hour",
          value: value12
        }, otherProps));
      }
      Hour12Input.propTypes = {
        amPm: _propTypes["default"].string,
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        hour: _propTypes["default"].string,
        inputRef: _propTypes2.isRef,
        maxTime: _propTypes2.isTime,
        minTime: _propTypes2.isTime,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        showLeadingZeros: _propTypes["default"].bool,
        value: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-time-picker/dist/TimeInput/Hour24Input.js
  var require_Hour24Input = __commonJS({
    "node_modules/react-time-picker/dist/TimeInput/Hour24Input.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Hour24Input;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Input = _interopRequireDefault(require_Input2());
      var _propTypes2 = require_propTypes4();
      var _utils = require_utils8();
      var _excluded32 = ["hour", "maxTime", "minTime"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function Hour24Input(_ref) {
        var hour = _ref.hour, maxTime = _ref.maxTime, minTime = _ref.minTime, otherProps = _objectWithoutProperties(_ref, _excluded32);
        var maxHour = (0, _utils.safeMin)(23, maxTime && (0, _dateUtils.getHours)(maxTime));
        var minHour = (0, _utils.safeMax)(0, minTime && (0, _dateUtils.getHours)(minTime));
        return /* @__PURE__ */ _react["default"].createElement(_Input["default"], _extends2({
          max: maxHour,
          min: minHour,
          name: "hour24",
          nameForClass: "hour"
        }, otherProps));
      }
      Hour24Input.propTypes = {
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        hour: _propTypes["default"].string,
        inputRef: _propTypes2.isRef,
        maxTime: _propTypes2.isTime,
        minTime: _propTypes2.isTime,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        showLeadingZeros: _propTypes["default"].bool,
        value: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-time-picker/dist/TimeInput/MinuteInput.js
  var require_MinuteInput = __commonJS({
    "node_modules/react-time-picker/dist/TimeInput/MinuteInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = MinuteInput;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Input = _interopRequireDefault(require_Input2());
      var _propTypes2 = require_propTypes4();
      var _utils = require_utils8();
      var _excluded32 = ["hour", "maxTime", "minTime", "showLeadingZeros"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function MinuteInput(_ref) {
        var hour = _ref.hour, maxTime = _ref.maxTime, minTime = _ref.minTime, _ref$showLeadingZeros = _ref.showLeadingZeros, showLeadingZeros = _ref$showLeadingZeros === void 0 ? true : _ref$showLeadingZeros, otherProps = _objectWithoutProperties(_ref, _excluded32);
        function isSameHour(date) {
          return date && hour === (0, _dateUtils.getHours)(date).toString();
        }
        var maxMinute = (0, _utils.safeMin)(59, isSameHour(maxTime) && (0, _dateUtils.getMinutes)(maxTime));
        var minMinute = (0, _utils.safeMax)(0, isSameHour(minTime) && (0, _dateUtils.getMinutes)(minTime));
        return /* @__PURE__ */ _react["default"].createElement(_Input["default"], _extends2({
          max: maxMinute,
          min: minMinute,
          name: "minute",
          showLeadingZeros
        }, otherProps));
      }
      MinuteInput.propTypes = {
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        hour: _propTypes["default"].string,
        inputRef: _propTypes2.isRef,
        maxTime: _propTypes2.isTime,
        minTime: _propTypes2.isTime,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        showLeadingZeros: _propTypes["default"].bool,
        value: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-time-picker/dist/TimeInput/SecondInput.js
  var require_SecondInput = __commonJS({
    "node_modules/react-time-picker/dist/TimeInput/SecondInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = SecondInput;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _Input = _interopRequireDefault(require_Input2());
      var _propTypes2 = require_propTypes4();
      var _utils = require_utils8();
      var _excluded32 = ["hour", "maxTime", "minTime", "minute", "showLeadingZeros"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function SecondInput(_ref) {
        var hour = _ref.hour, maxTime = _ref.maxTime, minTime = _ref.minTime, minute = _ref.minute, _ref$showLeadingZeros = _ref.showLeadingZeros, showLeadingZeros = _ref$showLeadingZeros === void 0 ? true : _ref$showLeadingZeros, otherProps = _objectWithoutProperties(_ref, _excluded32);
        function isSameMinute(date) {
          return date && hour === (0, _dateUtils.getHours)(date).toString() && minute === (0, _dateUtils.getMinutes)(date).toString();
        }
        var maxSecond = (0, _utils.safeMin)(59, isSameMinute(maxTime) && (0, _dateUtils.getSeconds)(maxTime));
        var minSecond = (0, _utils.safeMax)(0, isSameMinute(minTime) && (0, _dateUtils.getSeconds)(minTime));
        return /* @__PURE__ */ _react["default"].createElement(_Input["default"], _extends2({
          max: maxSecond,
          min: minSecond,
          name: "second",
          showLeadingZeros
        }, otherProps));
      }
      SecondInput.propTypes = {
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        hour: _propTypes["default"].string,
        inputRef: _propTypes2.isRef,
        maxTime: _propTypes2.isTime,
        minTime: _propTypes2.isTime,
        minute: _propTypes["default"].string,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        onKeyUp: _propTypes["default"].func,
        placeholder: _propTypes["default"].string,
        required: _propTypes["default"].bool,
        showLeadingZeros: _propTypes["default"].bool,
        value: _propTypes["default"].string
      };
    }
  });

  // node_modules/react-time-picker/dist/TimeInput/AmPm.js
  var require_AmPm = __commonJS({
    "node_modules/react-time-picker/dist/TimeInput/AmPm.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = AmPm;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _dateUtils = require_umd4();
      var _dates = require_dates2();
      var _propTypes2 = require_propTypes4();
      var _utils = require_utils8();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function AmPm(_ref) {
        var ariaLabel = _ref.ariaLabel, className = _ref.className, disabled = _ref.disabled, inputRef = _ref.inputRef, locale = _ref.locale, maxTime = _ref.maxTime, minTime = _ref.minTime, onChange = _ref.onChange, onKeyDown = _ref.onKeyDown, required = _ref.required, value = _ref.value;
        var amDisabled = minTime && (0, _dates.convert24to12)((0, _dateUtils.getHours)(minTime))[1] === "pm";
        var pmDisabled = maxTime && (0, _dates.convert24to12)((0, _dateUtils.getHours)(maxTime))[1] === "am";
        var name = "amPm";
        var _getAmPmLabels = (0, _utils.getAmPmLabels)(locale), _getAmPmLabels2 = _slicedToArray(_getAmPmLabels, 2), amLabel = _getAmPmLabels2[0], pmLabel = _getAmPmLabels2[1];
        return /* @__PURE__ */ _react["default"].createElement("select", {
          "aria-label": ariaLabel,
          className: (0, _mergeClassNames["default"])("".concat(className, "__input"), "".concat(className, "__").concat(name)),
          "data-input": "true",
          "data-select": "true",
          disabled,
          name,
          onChange,
          onKeyDown,
          ref: inputRef,
          required,
          value: value !== null ? value : ""
        }, !value && /* @__PURE__ */ _react["default"].createElement("option", {
          value: ""
        }, "--"), /* @__PURE__ */ _react["default"].createElement("option", {
          disabled: amDisabled,
          value: "am"
        }, amLabel), /* @__PURE__ */ _react["default"].createElement("option", {
          disabled: pmDisabled,
          value: "pm"
        }, pmLabel));
      }
      AmPm.propTypes = {
        ariaLabel: _propTypes["default"].string,
        className: _propTypes["default"].string.isRequired,
        disabled: _propTypes["default"].bool,
        inputRef: _propTypes2.isRef,
        locale: _propTypes["default"].string,
        maxTime: _propTypes2.isTime,
        minTime: _propTypes2.isTime,
        onChange: _propTypes["default"].func,
        onKeyDown: _propTypes["default"].func,
        required: _propTypes["default"].bool,
        value: _propTypes["default"].oneOf(["am", "pm"])
      };
    }
  });

  // node_modules/react-datetime-picker/dist/Divider.js
  var require_Divider = __commonJS({
    "node_modules/react-datetime-picker/dist/Divider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = Divider3;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function Divider3(_ref) {
        var children = _ref.children;
        return /* @__PURE__ */ _react["default"].createElement("span", {
          className: "react-datetime-picker__inputGroup__divider"
        }, children);
      }
      Divider3.propTypes = {
        children: _propTypes["default"].node
      };
    }
  });

  // node_modules/react-datetime-picker/dist/shared/propTypes.js
  var require_propTypes5 = __commonJS({
    "node_modules/react-datetime-picker/dist/shared/propTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isValueType = exports.isMinDate = exports.isMaxDate = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      var allViews = ["hour", "minute", "second"];
      var allValueTypes = [].concat(allViews);
      var isMinDate = function isMinDate2(props2, propName, componentName) {
        var minDate2 = props2[propName];
        if (!minDate2) {
          return null;
        }
        if (!(minDate2 instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate2), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var maxDate = props2.maxDate;
        if (maxDate && minDate2 > maxDate) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate2), "` supplied to `").concat(componentName, "`, minDate cannot be larger than maxDate."));
        }
        return null;
      };
      exports.isMinDate = isMinDate;
      var isMaxDate = function isMaxDate2(props2, propName, componentName) {
        var maxDate = props2[propName];
        if (!maxDate) {
          return null;
        }
        if (!(maxDate instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var minDate2 = props2.minDate;
        if (minDate2 && maxDate < minDate2) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, maxDate cannot be smaller than minDate."));
        }
        return null;
      };
      exports.isMaxDate = isMaxDate;
      var isValueType = _propTypes["default"].oneOf(allValueTypes);
      exports.isValueType = isValueType;
    }
  });

  // node_modules/react-datetime-picker/dist/DateTimeInput/NativeInput.js
  var require_NativeInput = __commonJS({
    "node_modules/react-datetime-picker/dist/DateTimeInput/NativeInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = NativeInput;
      var _react = _interopRequireDefault(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _propTypes2 = require_propTypes5();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function NativeInput(_ref) {
        var ariaLabel = _ref.ariaLabel, disabled = _ref.disabled, maxDate = _ref.maxDate, minDate2 = _ref.minDate, name = _ref.name, onChange = _ref.onChange, required = _ref.required, value = _ref.value, valueType = _ref.valueType;
        var nativeValueParser = function() {
          switch (valueType) {
            case "hour":
              return function(receivedValue) {
                return "".concat((0, _dateUtils.getISOLocalDate)(receivedValue), "T").concat((0, _dateUtils.getHours)(receivedValue), ":00");
              };
            case "minute":
              return function(receivedValue) {
                return "".concat((0, _dateUtils.getISOLocalDate)(receivedValue), "T").concat((0, _dateUtils.getHoursMinutes)(receivedValue));
              };
            case "second":
              return _dateUtils.getISOLocalDateTime;
            default:
              throw new Error("Invalid valueType.");
          }
        }();
        var step = function() {
          switch (valueType) {
            case "hour":
              return 3600;
            case "minute":
              return 60;
            case "second":
              return 1;
            default:
              throw new Error("Invalid valueType.");
          }
        }();
        function stopPropagation(event) {
          event.stopPropagation();
        }
        return /* @__PURE__ */ _react["default"].createElement("input", {
          "aria-label": ariaLabel,
          disabled,
          max: maxDate ? nativeValueParser(maxDate) : null,
          min: minDate2 ? nativeValueParser(minDate2) : null,
          name,
          onChange,
          onFocus: stopPropagation,
          required,
          step,
          style: {
            visibility: "hidden",
            position: "absolute",
            zIndex: "-999"
          },
          type: "datetime-local",
          value: value ? nativeValueParser(value) : ""
        });
      }
      NativeInput.propTypes = {
        ariaLabel: _propTypes["default"].string,
        disabled: _propTypes["default"].bool,
        maxDate: _propTypes2.isMaxDate,
        minDate: _propTypes2.isMinDate,
        name: _propTypes["default"].string,
        onChange: _propTypes["default"].func,
        required: _propTypes["default"].bool,
        value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date)]),
        valueType: _propTypes2.isValueType
      };
    }
  });

  // node_modules/react-datetime-picker/dist/shared/dateFormatter.js
  var require_dateFormatter4 = __commonJS({
    "node_modules/react-datetime-picker/dist/shared/dateFormatter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.formatDate = void 0;
      exports.getFormatter = getFormatter;
      exports.getNumberFormatter = getNumberFormatter;
      var _getUserLocale = _interopRequireDefault(require_umd3());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var formatterCache = /* @__PURE__ */ new Map();
      function getFormatter(options) {
        return function(locale, date) {
          var localeWithDefault = locale || (0, _getUserLocale["default"])();
          if (!formatterCache.has(localeWithDefault)) {
            formatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
          }
          var formatterCacheLocale = formatterCache.get(localeWithDefault);
          if (!formatterCacheLocale.has(options)) {
            formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault, options).format);
          }
          return formatterCacheLocale.get(options)(date);
        };
      }
      var numberFormatterCache = /* @__PURE__ */ new Map();
      function getNumberFormatter(options) {
        return function(locale, date) {
          var localeWithDefault = locale || (0, _getUserLocale["default"])();
          if (!numberFormatterCache.has(localeWithDefault)) {
            numberFormatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
          }
          var numberFormatterCacheLocale = numberFormatterCache.get(localeWithDefault);
          if (!numberFormatterCacheLocale.has(options)) {
            numberFormatterCacheLocale.set(options, new Intl.NumberFormat(localeWithDefault, options).format);
          }
          return numberFormatterCacheLocale.get(options)(date);
        };
      }
      var formatDateOptions = {
        day: "numeric",
        month: "numeric",
        year: "numeric"
      };
      var formatDate = getFormatter(formatDateOptions);
      exports.formatDate = formatDate;
    }
  });

  // node_modules/react-datetime-picker/dist/shared/dates.js
  var require_dates3 = __commonJS({
    "node_modules/react-datetime-picker/dist/shared/dates.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.convert12to24 = convert12to24;
      exports.convert24to12 = convert24to12;
      function convert12to24(hour12, amPm) {
        var hour24 = parseInt(hour12, 10);
        if (amPm === "am" && hour24 === 12) {
          hour24 = 0;
        } else if (amPm === "pm" && hour24 < 12) {
          hour24 += 12;
        }
        return hour24;
      }
      function convert24to12(hour24) {
        var hour12 = hour24 % 12 || 12;
        return [hour12, hour24 < 12 ? "am" : "pm"];
      }
    }
  });

  // node_modules/react-datetime-picker/dist/shared/utils.js
  var require_utils9 = __commonJS({
    "node_modules/react-datetime-picker/dist/shared/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.between = between;
      exports.getAmPmLabels = getAmPmLabels;
      var _dateFormatter = require_dateFormatter4();
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function between(value, min, max) {
        if (min && min > value) {
          return min;
        }
        if (max && max < value) {
          return max;
        }
        return value;
      }
      var nines = ["9", "\u0669"];
      var ninesRegExp = new RegExp("[".concat(nines.join(""), "]"));
      var amPmFormatter = (0, _dateFormatter.getFormatter)({
        hour: "numeric"
      });
      function getAmPmLabels(locale) {
        var amString = amPmFormatter(locale, new Date(2017, 0, 1, 9));
        var pmString = amPmFormatter(locale, new Date(2017, 0, 1, 21));
        var _amString$split = amString.split(ninesRegExp), _amString$split2 = _slicedToArray(_amString$split, 2), am1 = _amString$split2[0], am2 = _amString$split2[1];
        var _pmString$split = pmString.split(ninesRegExp), _pmString$split2 = _slicedToArray(_pmString$split, 2), pm1 = _pmString$split2[0], pm2 = _pmString$split2[1];
        if (pm2 !== void 0) {
          if (am1 !== pm1) {
            return [am1, pm1].map(function(el) {
              return el.trim();
            });
          }
          if (am2 !== pm2) {
            return [am2, pm2].map(function(el) {
              return el.trim();
            });
          }
        }
        return ["AM", "PM"];
      }
    }
  });

  // node_modules/react-datetime-picker/dist/DateTimeInput.js
  var require_DateTimeInput = __commonJS({
    "node_modules/react-datetime-picker/dist/DateTimeInput.js"(exports) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _react = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _dateUtils = require_umd4();
      var _DayInput = _interopRequireDefault(require_DayInput());
      var _MonthInput = _interopRequireDefault(require_MonthInput());
      var _MonthSelect = _interopRequireDefault(require_MonthSelect());
      var _YearInput = _interopRequireDefault(require_YearInput());
      var _Hour12Input = _interopRequireDefault(require_Hour12Input());
      var _Hour24Input = _interopRequireDefault(require_Hour24Input());
      var _MinuteInput = _interopRequireDefault(require_MinuteInput());
      var _SecondInput = _interopRequireDefault(require_SecondInput());
      var _AmPm = _interopRequireDefault(require_AmPm());
      var _Divider = _interopRequireDefault(require_Divider());
      var _NativeInput = _interopRequireDefault(require_NativeInput());
      var _dateFormatter = require_dateFormatter4();
      var _dates = require_dates3();
      var _propTypes2 = require_propTypes5();
      var _utils = require_utils9();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props2) {
        for (var i = 0; i < props2.length; i++) {
          var descriptor = props2[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf2(subClass, superClass);
      }
      function _setPrototypeOf2(o, p) {
        _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf2(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized2(self2);
      }
      function _assertThisInitialized2(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter2) {
        if (typeof Symbol !== "undefined" && iter2[Symbol.iterator] != null || iter2["@@iterator"] != null)
          return Array.from(iter2);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      var getFormatterOptionsCache = {};
      var defaultMinDate = new Date();
      defaultMinDate.setFullYear(1, 0, 1);
      defaultMinDate.setHours(0, 0, 0, 0);
      var defaultMaxDate = new Date(864e13);
      var allViews = ["hour", "minute", "second"];
      function toDate(value) {
        if (value instanceof Date) {
          return value;
        }
        return new Date(value);
      }
      function datesAreDifferent(date1, date2) {
        return date1 && !date2 || !date1 && date2 || date1 && date2 && date1.getTime() !== date2.getTime();
      }
      function isSameDate(date, year, month, day) {
        return year === (0, _dateUtils.getYear)(date).toString() && month === (0, _dateUtils.getMonthHuman)(date).toString() && day === (0, _dateUtils.getDate)(date).toString();
      }
      function getValue2(value, index) {
        if (!value) {
          return null;
        }
        var rawValue = Array.isArray(value) && value.length === 2 ? value[index] : value;
        if (!rawValue) {
          return null;
        }
        var valueDate = toDate(rawValue);
        if (isNaN(valueDate.getTime())) {
          throw new Error("Invalid date: ".concat(value));
        }
        return valueDate;
      }
      function getDetailValue(_ref, index) {
        var value = _ref.value, minDate2 = _ref.minDate, maxDate = _ref.maxDate;
        var valuePiece = getValue2(value, index);
        if (!valuePiece) {
          return null;
        }
        return (0, _utils.between)(valuePiece, minDate2, maxDate);
      }
      var getDetailValueFrom = function getDetailValueFrom2(args) {
        return getDetailValue(args, 0);
      };
      var getDetailValueTo = function getDetailValueTo2(args) {
        return getDetailValue(args, 1);
      };
      function isInternalInput(element) {
        return element.dataset.input === "true";
      }
      function findInput(element, property) {
        var nextElement = element;
        do {
          nextElement = nextElement[property];
        } while (nextElement && !isInternalInput(nextElement));
        return nextElement;
      }
      function focus(element) {
        if (element) {
          element.focus();
        }
      }
      function _renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances) {
        var usedFunctions = [];
        var pattern = new RegExp(Object.keys(elementFunctions).map(function(el) {
          return "".concat(el, "+");
        }).join("|"), "g");
        var matches = placeholder.match(pattern);
        return placeholder.split(pattern).reduce(function(arr, element, index) {
          var divider = element && /* @__PURE__ */ _react["default"].createElement(_Divider["default"], {
            key: "separator_".concat(index)
          }, element);
          var res = [].concat(_toConsumableArray(arr), [divider]);
          var currentMatch = matches && matches[index];
          if (currentMatch) {
            var renderFunction = elementFunctions[currentMatch] || elementFunctions[Object.keys(elementFunctions).find(function(elementFunction) {
              return currentMatch.match(elementFunction);
            })];
            if (!allowMultipleInstances && usedFunctions.includes(renderFunction)) {
              res.push(currentMatch);
            } else {
              res.push(renderFunction(currentMatch, index));
              usedFunctions.push(renderFunction);
            }
          }
          return res;
        }, []);
      }
      var formatNumber = (0, _dateFormatter.getNumberFormatter)({
        useGrouping: false
      });
      var DateTimeInput = /* @__PURE__ */ function(_PureComponent) {
        _inherits(DateTimeInput2, _PureComponent);
        var _super = _createSuper(DateTimeInput2);
        function DateTimeInput2() {
          var _this;
          _classCallCheck(this, DateTimeInput2);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty(_assertThisInitialized2(_this), "state", {
            amPm: null,
            year: null,
            month: null,
            day: null,
            hour: null,
            minute: null,
            second: null
          });
          _defineProperty(_assertThisInitialized2(_this), "dayInput", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "monthInput", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "yearInput", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "amPmInput", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "hour12Input", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "hour24Input", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "minuteInput", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "secondInput", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "onClick", function(event) {
            if (event.target === event.currentTarget) {
              var firstInput = event.target.children[1];
              focus(firstInput);
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "onKeyDown", function(event) {
            switch (event.key) {
              case "ArrowLeft":
              case "ArrowRight":
              case _this.dateDivider:
              case _this.timeDivider: {
                event.preventDefault();
                var input = event.target;
                var property = event.key === "ArrowLeft" ? "previousElementSibling" : "nextElementSibling";
                var nextInput = findInput(input, property);
                focus(nextInput);
                break;
              }
              default:
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "onKeyUp", function(event) {
            var key = event.key, input = event.target;
            var isNumberKey = !isNaN(parseInt(key, 10));
            if (!isNumberKey) {
              return;
            }
            var value = input.value;
            var max = input.getAttribute("max");
            if (value * 10 > max || value.length >= max.length) {
              var property = "nextElementSibling";
              var nextInput = findInput(input, property);
              focus(nextInput);
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "onChange", function(event) {
            var _event$target = event.target, name = _event$target.name, value = _event$target.value;
            switch (name) {
              case "hour12": {
                _this.setState(function(prevState) {
                  return {
                    hour: value ? (0, _dates.convert12to24)(parseInt(value, 10), prevState.amPm).toString() : ""
                  };
                }, _this.onChangeExternal);
                break;
              }
              case "hour24": {
                _this.setState({
                  hour: value
                }, _this.onChangeExternal);
                break;
              }
              default: {
                _this.setState(_defineProperty({}, name, value), _this.onChangeExternal);
              }
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "onChangeNative", function(event) {
            var onChange = _this.props.onChange;
            var value = event.target.value;
            if (!onChange) {
              return;
            }
            var processedValue = function() {
              if (!value) {
                return null;
              }
              var _value$split = value.split("T"), _value$split2 = _slicedToArray(_value$split, 2), valueDate = _value$split2[0], valueTime = _value$split2[1];
              var _valueDate$split = valueDate.split("-"), _valueDate$split2 = _slicedToArray(_valueDate$split, 3), yearString = _valueDate$split2[0], monthString = _valueDate$split2[1], dayString = _valueDate$split2[2];
              var year = parseInt(yearString, 10);
              var monthIndex = parseInt(monthString, 10) - 1 || 0;
              var day = parseInt(dayString, 10) || 1;
              var _valueTime$split = valueTime.split(":"), _valueTime$split2 = _slicedToArray(_valueTime$split, 3), hourString = _valueTime$split2[0], minuteString = _valueTime$split2[1], secondString = _valueTime$split2[2];
              var hour = parseInt(hourString, 10) || 0;
              var minute = parseInt(minuteString, 10) || 0;
              var second = parseInt(secondString, 10) || 0;
              var proposedValue = new Date();
              proposedValue.setFullYear(year, monthIndex, day);
              proposedValue.setHours(hour, minute, second, 0);
              return proposedValue;
            }();
            onChange(processedValue, false);
          });
          _defineProperty(_assertThisInitialized2(_this), "onChangeAmPm", function(event) {
            var value = event.target.value;
            _this.setState({
              amPm: value
            }, _this.onChangeExternal);
          });
          _defineProperty(_assertThisInitialized2(_this), "onChangeExternal", function() {
            var onChange = _this.props.onChange;
            if (!onChange) {
              return;
            }
            var formElements = [_this.amPmInput.current, _this.dayInput.current, _this.monthInput.current, _this.yearInput.current, _this.hour12Input.current, _this.hour24Input.current, _this.minuteInput.current, _this.secondInput.current].filter(Boolean);
            var formElementsWithoutSelect = formElements.slice(1);
            var values2 = {};
            formElements.forEach(function(formElement) {
              values2[formElement.name] = formElement.value;
            });
            if (formElementsWithoutSelect.every(function(formElement) {
              return !formElement.value;
            })) {
              onChange(null, false);
            } else if (formElements.every(function(formElement) {
              return formElement.value && formElement.validity.valid;
            })) {
              var year = parseInt(values2.year, 10) || new Date().getFullYear();
              var monthIndex = parseInt(values2.month || 1, 10) - 1;
              var day = parseInt(values2.day || 1, 10);
              var hour = parseInt(values2.hour24 || (0, _dates.convert12to24)(values2.hour12, values2.amPm) || 0, 10);
              var minute = parseInt(values2.minute || 0, 10);
              var second = parseInt(values2.second || 0, 10);
              var proposedValue = new Date();
              proposedValue.setFullYear(year, monthIndex, day);
              proposedValue.setHours(hour, minute, second, 0);
              var processedValue = proposedValue;
              onChange(processedValue, false);
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "renderDay", function(currentMatch, index) {
            var _this$props = _this.props, autoFocus = _this$props.autoFocus, dayAriaLabel = _this$props.dayAriaLabel, dayPlaceholder = _this$props.dayPlaceholder, showLeadingZeros = _this$props.showLeadingZeros;
            var _this$state = _this.state, day = _this$state.day, month = _this$state.month, year = _this$state.year;
            if (currentMatch && currentMatch.length > 2) {
              throw new Error("Unsupported token: ".concat(currentMatch));
            }
            var showLeadingZerosFromFormat = currentMatch && currentMatch.length === 2;
            return /* @__PURE__ */ _react["default"].createElement(_DayInput["default"], _extends2({
              key: "day"
            }, _this.commonInputProps, {
              ariaLabel: dayAriaLabel,
              autoFocus: index === 0 && autoFocus,
              inputRef: _this.dayInput,
              month,
              placeholder: dayPlaceholder,
              showLeadingZeros: showLeadingZerosFromFormat || showLeadingZeros,
              value: day,
              year
            }));
          });
          _defineProperty(_assertThisInitialized2(_this), "renderMonth", function(currentMatch, index) {
            var _this$props2 = _this.props, autoFocus = _this$props2.autoFocus, locale = _this$props2.locale, monthAriaLabel = _this$props2.monthAriaLabel, monthPlaceholder = _this$props2.monthPlaceholder, showLeadingZeros = _this$props2.showLeadingZeros;
            var _this$state2 = _this.state, month = _this$state2.month, year = _this$state2.year;
            if (currentMatch && currentMatch.length > 4) {
              throw new Error("Unsupported token: ".concat(currentMatch));
            }
            if (currentMatch.length > 2) {
              return /* @__PURE__ */ _react["default"].createElement(_MonthSelect["default"], _extends2({
                key: "month"
              }, _this.commonInputProps, {
                ariaLabel: monthAriaLabel,
                autoFocus: index === 0 && autoFocus,
                inputRef: _this.monthInput,
                locale,
                placeholder: monthPlaceholder,
                "short": currentMatch.length === 3,
                value: month,
                year
              }));
            }
            var showLeadingZerosFromFormat = currentMatch && currentMatch.length === 2;
            return /* @__PURE__ */ _react["default"].createElement(_MonthInput["default"], _extends2({
              key: "month"
            }, _this.commonInputProps, {
              ariaLabel: monthAriaLabel,
              autoFocus: index === 0 && autoFocus,
              inputRef: _this.monthInput,
              placeholder: monthPlaceholder,
              showLeadingZeros: showLeadingZerosFromFormat || showLeadingZeros,
              value: month,
              year
            }));
          });
          _defineProperty(_assertThisInitialized2(_this), "renderYear", function(currentMatch, index) {
            var _this$props3 = _this.props, autoFocus = _this$props3.autoFocus, yearAriaLabel = _this$props3.yearAriaLabel, yearPlaceholder = _this$props3.yearPlaceholder;
            var year = _this.state.year;
            return /* @__PURE__ */ _react["default"].createElement(_YearInput["default"], _extends2({
              key: "year"
            }, _this.commonInputProps, {
              ariaLabel: yearAriaLabel,
              autoFocus: index === 0 && autoFocus,
              inputRef: _this.yearInput,
              placeholder: yearPlaceholder,
              value: year,
              valueType: "day"
            }));
          });
          _defineProperty(_assertThisInitialized2(_this), "renderHour", function(currentMatch, index) {
            if (/h/.test(currentMatch)) {
              return _this.renderHour12(currentMatch, index);
            }
            return _this.renderHour24(currentMatch, index);
          });
          _defineProperty(_assertThisInitialized2(_this), "renderHour12", function(currentMatch, index) {
            var _this$props4 = _this.props, autoFocus = _this$props4.autoFocus, hourAriaLabel = _this$props4.hourAriaLabel, hourPlaceholder = _this$props4.hourPlaceholder;
            var _this$state3 = _this.state, amPm = _this$state3.amPm, hour = _this$state3.hour;
            if (currentMatch && currentMatch.length > 2) {
              throw new Error("Unsupported token: ".concat(currentMatch));
            }
            var showLeadingZeros = currentMatch && currentMatch.length === 2;
            return /* @__PURE__ */ _react["default"].createElement(_Hour12Input["default"], _extends2({
              key: "hour12"
            }, _this.commonInputProps, {
              amPm,
              ariaLabel: hourAriaLabel,
              autoFocus: index === 0 && autoFocus,
              inputRef: _this.hour12Input,
              placeholder: hourPlaceholder,
              showLeadingZeros,
              value: hour
            }));
          });
          _defineProperty(_assertThisInitialized2(_this), "renderHour24", function(currentMatch, index) {
            var _this$props5 = _this.props, autoFocus = _this$props5.autoFocus, hourAriaLabel = _this$props5.hourAriaLabel, hourPlaceholder = _this$props5.hourPlaceholder;
            var hour = _this.state.hour;
            if (currentMatch && currentMatch.length > 2) {
              throw new Error("Unsupported token: ".concat(currentMatch));
            }
            var showLeadingZeros = currentMatch && currentMatch.length === 2;
            return /* @__PURE__ */ _react["default"].createElement(_Hour24Input["default"], _extends2({
              key: "hour24"
            }, _this.commonInputProps, {
              ariaLabel: hourAriaLabel,
              autoFocus: index === 0 && autoFocus,
              inputRef: _this.hour24Input,
              placeholder: hourPlaceholder,
              showLeadingZeros,
              value: hour
            }));
          });
          _defineProperty(_assertThisInitialized2(_this), "renderMinute", function(currentMatch, index) {
            var _this$props6 = _this.props, autoFocus = _this$props6.autoFocus, minuteAriaLabel = _this$props6.minuteAriaLabel, minutePlaceholder = _this$props6.minutePlaceholder;
            var _this$state4 = _this.state, hour = _this$state4.hour, minute = _this$state4.minute;
            if (currentMatch && currentMatch.length > 2) {
              throw new Error("Unsupported token: ".concat(currentMatch));
            }
            var showLeadingZeros = currentMatch && currentMatch.length === 2;
            return /* @__PURE__ */ _react["default"].createElement(_MinuteInput["default"], _extends2({
              key: "minute"
            }, _this.commonInputProps, {
              ariaLabel: minuteAriaLabel,
              autoFocus: index === 0 && autoFocus,
              hour,
              inputRef: _this.minuteInput,
              placeholder: minutePlaceholder,
              showLeadingZeros,
              value: minute
            }));
          });
          _defineProperty(_assertThisInitialized2(_this), "renderSecond", function(currentMatch, index) {
            var _this$props7 = _this.props, autoFocus = _this$props7.autoFocus, secondAriaLabel = _this$props7.secondAriaLabel, secondPlaceholder = _this$props7.secondPlaceholder;
            var _this$state5 = _this.state, hour = _this$state5.hour, minute = _this$state5.minute, second = _this$state5.second;
            if (currentMatch && currentMatch.length > 2) {
              throw new Error("Unsupported token: ".concat(currentMatch));
            }
            var showLeadingZeros = currentMatch ? currentMatch.length === 2 : true;
            return /* @__PURE__ */ _react["default"].createElement(_SecondInput["default"], _extends2({
              key: "second"
            }, _this.commonInputProps, {
              ariaLabel: secondAriaLabel,
              autoFocus: index === 0 && autoFocus,
              hour,
              inputRef: _this.secondInput,
              minute,
              placeholder: secondPlaceholder,
              showLeadingZeros,
              value: second
            }));
          });
          _defineProperty(_assertThisInitialized2(_this), "renderAmPm", function(currentMatch, index) {
            var _this$props8 = _this.props, amPmAriaLabel = _this$props8.amPmAriaLabel, autoFocus = _this$props8.autoFocus, locale = _this$props8.locale;
            var amPm = _this.state.amPm;
            return /* @__PURE__ */ _react["default"].createElement(_AmPm["default"], _extends2({
              key: "ampm"
            }, _this.commonInputProps, {
              ariaLabel: amPmAriaLabel,
              autoFocus: index === 0 && autoFocus,
              inputRef: _this.amPmInput,
              locale,
              onChange: _this.onChangeAmPm,
              value: amPm
            }));
          });
          return _this;
        }
        _createClass(DateTimeInput2, [{
          key: "formatTime",
          get: function get() {
            var maxDetail = this.props.maxDetail;
            var level = allViews.indexOf(maxDetail);
            var formatterOptions = getFormatterOptionsCache[level] || function() {
              var options = {
                hour: "numeric"
              };
              if (level >= 1) {
                options.minute = "numeric";
              }
              if (level >= 2) {
                options.second = "numeric";
              }
              getFormatterOptionsCache[level] = options;
              return options;
            }();
            return (0, _dateFormatter.getFormatter)(formatterOptions);
          }
        }, {
          key: "formatNumber",
          get: function get() {
            return formatNumber;
          }
        }, {
          key: "dateDivider",
          get: function get() {
            return this.datePlaceholder.match(/[^0-9a-z]/i)[0];
          }
        }, {
          key: "timeDivider",
          get: function get() {
            return this.timePlaceholder.match(/[^0-9a-z]/i)[0];
          }
        }, {
          key: "datePlaceholder",
          get: function get() {
            var locale = this.props.locale;
            var year = 2017;
            var monthIndex = 11;
            var day = 11;
            var date = new Date(year, monthIndex, day);
            var formattedDate = (0, _dateFormatter.formatDate)(locale, date);
            var datePieces = ["year", "month", "day"];
            var datePieceReplacements = ["y", "M", "d"];
            function formatDatePiece(name, dateToFormat) {
              var formatterOptions = getFormatterOptionsCache[name] || function() {
                var options = _defineProperty({
                  useGrouping: false
                }, name, "numeric");
                getFormatterOptionsCache[name] = options;
                return options;
              }();
              return (0, _dateFormatter.getFormatter)(formatterOptions)(locale, dateToFormat).match(/\d{1,}/);
            }
            var placeholder = formattedDate;
            datePieces.forEach(function(datePiece, index) {
              var formattedDatePiece = formatDatePiece(datePiece, date);
              var datePieceReplacement = datePieceReplacements[index];
              placeholder = placeholder.replace(formattedDatePiece, datePieceReplacement);
            });
            placeholder = placeholder.replace("17", "y");
            return placeholder;
          }
        }, {
          key: "timePlaceholder",
          get: function get() {
            var locale = this.props.locale;
            var hour24 = 21;
            var hour12 = 9;
            var minute = 13;
            var second = 14;
            var date = new Date(2017, 0, 1, hour24, minute, second);
            return this.formatTime(locale, date).replace(this.formatNumber(locale, hour12), "h").replace(this.formatNumber(locale, hour24), "H").replace(this.formatNumber(locale, minute), "mm").replace(this.formatNumber(locale, second), "ss").replace(new RegExp((0, _utils.getAmPmLabels)(locale).join("|")), "a");
          }
        }, {
          key: "placeholder",
          get: function get() {
            var format = this.props.format;
            if (format) {
              return format;
            }
            return "".concat(this.datePlaceholder, "\xA0").concat(this.timePlaceholder);
          }
        }, {
          key: "maxTime",
          get: function get() {
            var maxDate = this.props.maxDate;
            if (!maxDate) {
              return null;
            }
            var _this$state6 = this.state, year = _this$state6.year, month = _this$state6.month, day = _this$state6.day;
            if (!isSameDate(maxDate, year, month, day)) {
              return null;
            }
            return (0, _dateUtils.getHoursMinutesSeconds)(maxDate);
          }
        }, {
          key: "minTime",
          get: function get() {
            var minDate2 = this.props.minDate;
            if (!minDate2) {
              return null;
            }
            var _this$state7 = this.state, year = _this$state7.year, month = _this$state7.month, day = _this$state7.day;
            if (!isSameDate(minDate2, year, month, day)) {
              return null;
            }
            return (0, _dateUtils.getHoursMinutesSeconds)(minDate2);
          }
        }, {
          key: "commonInputProps",
          get: function get() {
            var _this$props9 = this.props, className = _this$props9.className, disabled = _this$props9.disabled, isWidgetOpen = _this$props9.isWidgetOpen, maxDate = _this$props9.maxDate, minDate2 = _this$props9.minDate, required = _this$props9.required;
            return {
              className,
              disabled,
              maxDate: maxDate || defaultMaxDate,
              minDate: minDate2 || defaultMinDate,
              onChange: this.onChange,
              onKeyDown: this.onKeyDown,
              onKeyUp: this.onKeyUp,
              placeholder: "--",
              required: required || isWidgetOpen
            };
          }
        }, {
          key: "commonTimeInputProps",
          get: function get() {
            var maxTime = this.maxTime, minTime = this.minTime;
            return {
              maxTime,
              minTime
            };
          }
        }, {
          key: "valueType",
          get: function get() {
            var maxDetail = this.props.maxDetail;
            return maxDetail;
          }
        }, {
          key: "renderCustomInputs",
          value: function renderCustomInputs() {
            var placeholder = this.placeholder;
            var format = this.props.format;
            var elementFunctions = {
              d: this.renderDay,
              M: this.renderMonth,
              y: this.renderYear,
              h: this.renderHour,
              H: this.renderHour,
              m: this.renderMinute,
              s: this.renderSecond,
              a: this.renderAmPm
            };
            var allowMultipleInstances = typeof format !== "undefined";
            return _renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances);
          }
        }, {
          key: "renderNativeInput",
          value: function renderNativeInput() {
            var _this$props10 = this.props, disabled = _this$props10.disabled, maxDate = _this$props10.maxDate, minDate2 = _this$props10.minDate, name = _this$props10.name, nativeInputAriaLabel = _this$props10.nativeInputAriaLabel, required = _this$props10.required;
            var value = this.state.value;
            return /* @__PURE__ */ _react["default"].createElement(_NativeInput["default"], {
              key: "time",
              ariaLabel: nativeInputAriaLabel,
              disabled,
              maxDate: maxDate || defaultMaxDate,
              minDate: minDate2 || defaultMinDate,
              name,
              onChange: this.onChangeNative,
              required,
              value,
              valueType: this.valueType
            });
          }
        }, {
          key: "render",
          value: function render() {
            var className = this.props.className;
            return /* @__PURE__ */ _react["default"].createElement("div", {
              className,
              onClick: this.onClick
            }, this.renderNativeInput(), this.renderCustomInputs());
          }
        }], [{
          key: "getDerivedStateFromProps",
          value: function getDerivedStateFromProps(nextProps, prevState) {
            var minDate2 = nextProps.minDate, maxDate = nextProps.maxDate;
            var nextState = {};
            if (nextProps.isWidgetOpen !== prevState.isWidgetOpen) {
              nextState.isWidgetOpen = nextProps.isWidgetOpen;
            }
            var nextValue = getDetailValueFrom({
              value: nextProps.value,
              minDate: minDate2,
              maxDate
            });
            var values2 = [nextValue, prevState.value];
            if (nextState.isCalendarOpen || datesAreDifferent.apply(void 0, _toConsumableArray(values2.map(function(value) {
              return getDetailValueFrom({
                value,
                minDate: minDate2,
                maxDate
              });
            }))) || datesAreDifferent.apply(void 0, _toConsumableArray(values2.map(function(value) {
              return getDetailValueTo({
                value,
                minDate: minDate2,
                maxDate
              });
            })))) {
              if (nextValue) {
                var _convert24to = (0, _dates.convert24to12)((0, _dateUtils.getHours)(nextValue));
                var _convert24to2 = _slicedToArray(_convert24to, 2);
                nextState.amPm = _convert24to2[1];
                nextState.year = (0, _dateUtils.getYear)(nextValue).toString();
                nextState.month = (0, _dateUtils.getMonthHuman)(nextValue).toString();
                nextState.day = (0, _dateUtils.getDate)(nextValue).toString();
                nextState.hour = (0, _dateUtils.getHours)(nextValue).toString();
                nextState.minute = (0, _dateUtils.getMinutes)(nextValue).toString();
                nextState.second = (0, _dateUtils.getSeconds)(nextValue).toString();
              } else {
                nextState.amPm = null;
                nextState.year = null;
                nextState.month = null;
                nextState.day = null;
                nextState.hour = null;
                nextState.minute = null;
                nextState.second = null;
              }
              nextState.value = nextValue;
            }
            return nextState;
          }
        }]);
        return DateTimeInput2;
      }(_react.PureComponent);
      exports["default"] = DateTimeInput;
      DateTimeInput.defaultProps = {
        maxDetail: "minute",
        name: "datetime"
      };
      var isValue = _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date)]);
      DateTimeInput.propTypes = {
        amPmAriaLabel: _propTypes["default"].string,
        autoFocus: _propTypes["default"].bool,
        className: _propTypes["default"].string.isRequired,
        dayAriaLabel: _propTypes["default"].string,
        dayPlaceholder: _propTypes["default"].string,
        disabled: _propTypes["default"].bool,
        format: _propTypes["default"].string,
        hourAriaLabel: _propTypes["default"].string,
        hourPlaceholder: _propTypes["default"].string,
        isWidgetOpen: _propTypes["default"].bool,
        locale: _propTypes["default"].string,
        maxDate: _propTypes2.isMaxDate,
        maxDetail: _propTypes["default"].oneOf(allViews),
        minDate: _propTypes2.isMinDate,
        minuteAriaLabel: _propTypes["default"].string,
        minutePlaceholder: _propTypes["default"].string,
        monthAriaLabel: _propTypes["default"].string,
        monthPlaceholder: _propTypes["default"].string,
        name: _propTypes["default"].string,
        nativeInputAriaLabel: _propTypes["default"].string,
        onChange: _propTypes["default"].func,
        required: _propTypes["default"].bool,
        secondAriaLabel: _propTypes["default"].string,
        secondPlaceholder: _propTypes["default"].string,
        showLeadingZeros: _propTypes["default"].bool,
        value: _propTypes["default"].oneOfType([isValue, _propTypes["default"].arrayOf(isValue)]),
        yearAriaLabel: _propTypes["default"].string,
        yearPlaceholder: _propTypes["default"].string
      };
    }
  });

  // node_modules/@wojtekmaj/react-datetimerange-picker/dist/shared/propTypes.js
  var require_propTypes6 = __commonJS({
    "node_modules/@wojtekmaj/react-datetimerange-picker/dist/shared/propTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isMinDate = exports.isMaxDate = void 0;
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      var isMinDate = function isMinDate2(props2, propName, componentName) {
        var minDate2 = props2[propName];
        if (!minDate2) {
          return null;
        }
        if (!(minDate2 instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate2), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var maxDate = props2.maxDate;
        if (maxDate && minDate2 > maxDate) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate2), "` supplied to `").concat(componentName, "`, minDate cannot be larger than maxDate."));
        }
        return null;
      };
      exports.isMinDate = isMinDate;
      var isMaxDate = function isMaxDate2(props2, propName, componentName) {
        var maxDate = props2[propName];
        if (!maxDate) {
          return null;
        }
        if (!(maxDate instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var minDate2 = props2.minDate;
        if (minDate2 && maxDate < minDate2) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, maxDate cannot be smaller than minDate."));
        }
        return null;
      };
      exports.isMaxDate = isMaxDate;
    }
  });

  // node_modules/@wojtekmaj/react-datetimerange-picker/dist/DateTimeRangePicker.js
  var require_DateTimeRangePicker = __commonJS({
    "node_modules/@wojtekmaj/react-datetimerange-picker/dist/DateTimeRangePicker.js"(exports) {
      "use strict";
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _react = _interopRequireWildcard(require_react());
      var _reactDom = require_react_dom();
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _makeEventProps = _interopRequireDefault(require_umd());
      var _mergeClassNames = _interopRequireDefault(require_umd2());
      var _reactCalendar = _interopRequireDefault(require_umd5());
      var _reactFit = _interopRequireDefault(require_Fit());
      var _reactClock = _interopRequireDefault(require_umd7());
      var _DateTimeInput = _interopRequireDefault(require_DateTimeInput());
      var _propTypes2 = require_propTypes6();
      var _excluded32 = ["calendarClassName", "className", "maxDetail", "onChange", "portalContainer", "value"];
      var _excluded210 = ["clockClassName", "className", "maxDetail", "onChange", "portalContainer", "value"];
      var _excluded33 = ["onChange"];
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null)
          return {};
        var target = _objectWithoutPropertiesLoose2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
              continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys2 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys2.push.apply(keys2, symbols);
        }
        return keys2;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
        if (_i == null)
          return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _s, _e;
        try {
          for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null)
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props2) {
        for (var i = 0; i < props2.length; i++) {
          var descriptor = props2[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf2(subClass, superClass);
      }
      function _setPrototypeOf2(o, p) {
        _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf2(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized2(self2);
      }
      function _assertThisInitialized2(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var allViews = ["hour", "minute", "second"];
      var baseClassName = "react-datetimerange-picker";
      var outsideActionEvents = ["mousedown", "focusin", "touchstart"];
      var DateTimeRangePicker3 = /* @__PURE__ */ function(_PureComponent) {
        _inherits(DateTimeRangePicker4, _PureComponent);
        var _super = _createSuper(DateTimeRangePicker4);
        function DateTimeRangePicker4() {
          var _this;
          _classCallCheck(this, DateTimeRangePicker4);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty(_assertThisInitialized2(_this), "state", {});
          _defineProperty(_assertThisInitialized2(_this), "wrapper", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "widgetWrapper", /* @__PURE__ */ (0, _react.createRef)());
          _defineProperty(_assertThisInitialized2(_this), "onOutsideAction", function(event) {
            var _assertThisInitialize = _assertThisInitialized2(_this), wrapper = _assertThisInitialize.wrapper, widgetWrapper = _assertThisInitialize.widgetWrapper;
            var target = "composedPath" in event ? event.composedPath()[0] : event.target;
            if (wrapper.current && !wrapper.current.contains(target) && (!widgetWrapper.current || !widgetWrapper.current.contains(target))) {
              _this.closeWidgets();
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "onDateChange", function(_ref) {
            var _ref2 = _slicedToArray(_ref, 2), valueFrom = _ref2[0], valueTo = _ref2[1];
            var closeWidgets = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var value = _this.props.value;
            var _concat = [].concat(value), _concat2 = _slicedToArray(_concat, 2), prevValueFrom = _concat2[0], prevValueTo = _concat2[1];
            var nextValueFrom = function() {
              if (!prevValueFrom) {
                return valueFrom;
              }
              var valueWithHour = new Date(valueFrom);
              valueWithHour.setHours(prevValueFrom.getHours(), prevValueFrom.getMinutes(), prevValueFrom.getSeconds(), prevValueFrom.getMilliseconds());
              return valueWithHour;
            }();
            var nextValueTo = function() {
              if (!prevValueTo) {
                return valueTo;
              }
              var valueWithHour = new Date(valueTo);
              valueWithHour.setHours(prevValueTo.getHours(), prevValueTo.getMinutes(), prevValueTo.getSeconds(), prevValueTo.getMilliseconds());
              return valueWithHour;
            }();
            _this.onChange([nextValueFrom, nextValueTo], closeWidgets);
          });
          _defineProperty(_assertThisInitialized2(_this), "onChange", function(value) {
            var closeWidgets = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.props.closeWidgets;
            var onChange = _this.props.onChange;
            if (closeWidgets) {
              _this.closeWidgets();
            }
            if (onChange) {
              onChange(value);
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "onChangeFrom", function(valueFrom, closeWidgets) {
            var value = _this.props.value;
            var _concat3 = [].concat(value), _concat4 = _slicedToArray(_concat3, 2), valueTo = _concat4[1];
            _this.onChange([valueFrom, valueTo], closeWidgets);
          });
          _defineProperty(_assertThisInitialized2(_this), "onChangeTo", function(valueTo, closeWidgets) {
            var value = _this.props.value;
            var _concat5 = [].concat(value), _concat6 = _slicedToArray(_concat5, 1), valueFrom = _concat6[0];
            _this.onChange([valueFrom, valueTo], closeWidgets);
          });
          _defineProperty(_assertThisInitialized2(_this), "onFocus", function(event) {
            var _this$props = _this.props, disabled = _this$props.disabled, onFocus = _this$props.onFocus, openWidgetsOnFocus = _this$props.openWidgetsOnFocus;
            if (onFocus) {
              onFocus(event);
            }
            if (disabled) {
              return;
            }
            if (openWidgetsOnFocus) {
              if (event.target.dataset.select === "true") {
                return;
              }
              switch (event.target.name) {
                case "day":
                case "month":
                case "year":
                  _this.openCalendar();
                  break;
                case "hour12":
                case "hour24":
                case "minute":
                case "second":
                  _this.openClock();
                  break;
                default:
              }
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "onKeyDown", function(event) {
            if (event.key === "Escape") {
              _this.closeWidgets();
            }
          });
          _defineProperty(_assertThisInitialized2(_this), "openClock", function() {
            _this.setState({
              isCalendarOpen: false,
              isClockOpen: true
            });
          });
          _defineProperty(_assertThisInitialized2(_this), "openCalendar", function() {
            _this.setState({
              isCalendarOpen: true,
              isClockOpen: false
            });
          });
          _defineProperty(_assertThisInitialized2(_this), "toggleCalendar", function() {
            _this.setState(function(prevState) {
              return {
                isCalendarOpen: !prevState.isCalendarOpen,
                isClockOpen: false
              };
            });
          });
          _defineProperty(_assertThisInitialized2(_this), "closeWidgets", function() {
            _this.setState(function(prevState) {
              if (!prevState.isCalendarOpen && !prevState.isClockOpen) {
                return null;
              }
              return {
                isCalendarOpen: false,
                isClockOpen: false
              };
            });
          });
          _defineProperty(_assertThisInitialized2(_this), "stopPropagation", function(event) {
            return event.stopPropagation();
          });
          _defineProperty(_assertThisInitialized2(_this), "clear", function() {
            return _this.onChange(null);
          });
          return _this;
        }
        _createClass(DateTimeRangePicker4, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.handleOutsideActionListeners();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            var _this$state = this.state, isCalendarOpen = _this$state.isCalendarOpen, isClockOpen = _this$state.isClockOpen;
            var _this$props2 = this.props, onCalendarClose = _this$props2.onCalendarClose, onCalendarOpen = _this$props2.onCalendarOpen, onClockClose = _this$props2.onClockClose, onClockOpen = _this$props2.onClockOpen;
            var isWidgetOpen = isCalendarOpen || isClockOpen;
            var prevIsWidgetOpen = prevState.isCalendarOpen || prevState.isClockOpen;
            if (isWidgetOpen !== prevIsWidgetOpen) {
              this.handleOutsideActionListeners();
            }
            if (isCalendarOpen !== prevState.isCalendarOpen) {
              var callback = isCalendarOpen ? onCalendarOpen : onCalendarClose;
              if (callback)
                callback();
            }
            if (isClockOpen !== prevState.isClockOpen) {
              var _callback = isClockOpen ? onClockOpen : onClockClose;
              if (_callback)
                _callback();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.handleOutsideActionListeners(false);
          }
        }, {
          key: "eventProps",
          get: function get() {
            return (0, _makeEventProps["default"])(this.props);
          }
        }, {
          key: "handleOutsideActionListeners",
          value: function handleOutsideActionListeners(shouldListen) {
            var _this2 = this;
            var _this$state2 = this.state, isCalendarOpen = _this$state2.isCalendarOpen, isClockOpen = _this$state2.isClockOpen;
            var isWidgetOpen = isCalendarOpen || isClockOpen;
            var shouldListenWithFallback = typeof shouldListen !== "undefined" ? shouldListen : isWidgetOpen;
            var fnName = shouldListenWithFallback ? "addEventListener" : "removeEventListener";
            outsideActionEvents.forEach(function(eventName) {
              return document[fnName](eventName, _this2.onOutsideAction);
            });
            document[fnName]("keydown", this.onKeyDown);
          }
        }, {
          key: "renderInputs",
          value: function renderInputs() {
            var _this$props3 = this.props, amPmAriaLabel = _this$props3.amPmAriaLabel, autoFocus = _this$props3.autoFocus, calendarAriaLabel = _this$props3.calendarAriaLabel, calendarIcon = _this$props3.calendarIcon, clearAriaLabel = _this$props3.clearAriaLabel, clearIcon = _this$props3.clearIcon, dayAriaLabel = _this$props3.dayAriaLabel, dayPlaceholder = _this$props3.dayPlaceholder, disableCalendar = _this$props3.disableCalendar, disabled = _this$props3.disabled, format = _this$props3.format, hourAriaLabel = _this$props3.hourAriaLabel, hourPlaceholder = _this$props3.hourPlaceholder, locale = _this$props3.locale, maxDate = _this$props3.maxDate, maxDetail = _this$props3.maxDetail, minDate2 = _this$props3.minDate, minuteAriaLabel = _this$props3.minuteAriaLabel, minutePlaceholder = _this$props3.minutePlaceholder, monthAriaLabel = _this$props3.monthAriaLabel, monthPlaceholder = _this$props3.monthPlaceholder, name = _this$props3.name, nativeInputAriaLabel = _this$props3.nativeInputAriaLabel, rangeDivider = _this$props3.rangeDivider, required = _this$props3.required, secondAriaLabel = _this$props3.secondAriaLabel, secondPlaceholder = _this$props3.secondPlaceholder, showLeadingZeros = _this$props3.showLeadingZeros, value = _this$props3.value, yearAriaLabel = _this$props3.yearAriaLabel, yearPlaceholder = _this$props3.yearPlaceholder;
            var _this$state3 = this.state, isCalendarOpen = _this$state3.isCalendarOpen, isClockOpen = _this$state3.isClockOpen;
            var _concat7 = [].concat(value), _concat8 = _slicedToArray(_concat7, 2), valueFrom = _concat8[0], valueTo = _concat8[1];
            var ariaLabelProps = {
              amPmAriaLabel,
              dayAriaLabel,
              hourAriaLabel,
              minuteAriaLabel,
              monthAriaLabel,
              nativeInputAriaLabel,
              secondAriaLabel,
              yearAriaLabel
            };
            var placeholderProps = {
              dayPlaceholder,
              hourPlaceholder,
              minutePlaceholder,
              monthPlaceholder,
              secondPlaceholder,
              yearPlaceholder
            };
            var commonProps = _objectSpread(_objectSpread(_objectSpread({}, ariaLabelProps), placeholderProps), {}, {
              className: "".concat(baseClassName, "__inputGroup"),
              disabled,
              format,
              isWidgetOpen: isCalendarOpen || isClockOpen,
              locale,
              maxDate,
              maxDetail,
              minDate: minDate2,
              required,
              showLeadingZeros
            });
            return /* @__PURE__ */ _react["default"].createElement("div", {
              className: "".concat(baseClassName, "__wrapper")
            }, /* @__PURE__ */ _react["default"].createElement(_DateTimeInput["default"], _extends2({}, commonProps, {
              autoFocus,
              name: "".concat(name, "_from"),
              onChange: this.onChangeFrom,
              returnValue: "start",
              value: valueFrom
            })), /* @__PURE__ */ _react["default"].createElement("span", {
              className: "".concat(baseClassName, "__range-divider")
            }, rangeDivider), /* @__PURE__ */ _react["default"].createElement(_DateTimeInput["default"], _extends2({}, commonProps, {
              name: "".concat(name, "_to"),
              onChange: this.onChangeTo,
              returnValue: "end",
              value: valueTo
            })), clearIcon !== null && /* @__PURE__ */ _react["default"].createElement("button", {
              "aria-label": clearAriaLabel,
              className: "".concat(baseClassName, "__clear-button ").concat(baseClassName, "__button"),
              disabled,
              onClick: this.clear,
              onFocus: this.stopPropagation,
              type: "button"
            }, clearIcon), calendarIcon !== null && !disableCalendar && /* @__PURE__ */ _react["default"].createElement("button", {
              "aria-label": calendarAriaLabel,
              className: "".concat(baseClassName, "__calendar-button ").concat(baseClassName, "__button"),
              disabled,
              onBlur: this.resetValue,
              onClick: this.toggleCalendar,
              onFocus: this.stopPropagation,
              type: "button"
            }, calendarIcon));
          }
        }, {
          key: "renderCalendar",
          value: function renderCalendar() {
            var _this3 = this;
            var disableCalendar = this.props.disableCalendar;
            var isCalendarOpen = this.state.isCalendarOpen;
            if (isCalendarOpen === null || disableCalendar) {
              return null;
            }
            var _this$props4 = this.props, calendarClassName = _this$props4.calendarClassName, dateTimeRangePickerClassName = _this$props4.className, dateTimeRangePickerMaxDetail = _this$props4.maxDetail, onChange = _this$props4.onChange, portalContainer = _this$props4.portalContainer, value = _this$props4.value, calendarProps = _objectWithoutProperties(_this$props4, _excluded32);
            var className = "".concat(baseClassName, "__calendar");
            var classNames = (0, _mergeClassNames["default"])(className, "".concat(className, "--").concat(isCalendarOpen ? "open" : "closed"));
            var calendar = /* @__PURE__ */ _react["default"].createElement(_reactCalendar["default"], _extends2({
              className: calendarClassName,
              onChange: function onChange2(value2) {
                return _this3.onDateChange(value2);
              },
              selectRange: true,
              value: value || null
            }, calendarProps));
            return portalContainer ? /* @__PURE__ */ (0, _reactDom.createPortal)(/* @__PURE__ */ _react["default"].createElement("div", {
              ref: this.widgetWrapper,
              className: classNames
            }, calendar), portalContainer) : /* @__PURE__ */ _react["default"].createElement(_reactFit["default"], null, /* @__PURE__ */ _react["default"].createElement("div", {
              ref: function ref(_ref3) {
                if (_ref3 && !isCalendarOpen) {
                  _ref3.removeAttribute("style");
                }
              },
              className: classNames
            }, calendar));
          }
        }, {
          key: "renderClock",
          value: function renderClock() {
            var disableClock = this.props.disableClock;
            var isClockOpen = this.state.isClockOpen;
            if (isClockOpen === null || disableClock) {
              return null;
            }
            var _this$props5 = this.props, clockClassName = _this$props5.clockClassName, dateTimeRangePickerClassName = _this$props5.className, maxDetail = _this$props5.maxDetail, onChange = _this$props5.onChange, portalContainer = _this$props5.portalContainer, value = _this$props5.value, clockProps = _objectWithoutProperties(_this$props5, _excluded210);
            var className = "".concat(baseClassName, "__clock");
            var classNames = (0, _mergeClassNames["default"])(className, "".concat(className, "--").concat(isClockOpen ? "open" : "closed"));
            var _concat9 = [].concat(value), _concat10 = _slicedToArray(_concat9, 1), valueFrom = _concat10[0];
            var maxDetailIndex = allViews.indexOf(maxDetail);
            var clock = /* @__PURE__ */ _react["default"].createElement(_reactClock["default"], _extends2({
              className: clockClassName,
              renderMinuteHand: maxDetailIndex > 0,
              renderSecondHand: maxDetailIndex > 1,
              value: valueFrom
            }, clockProps));
            return portalContainer ? /* @__PURE__ */ (0, _reactDom.createPortal)(/* @__PURE__ */ _react["default"].createElement("div", {
              ref: this.widgetWrapper,
              className: classNames
            }, clock), portalContainer) : /* @__PURE__ */ _react["default"].createElement(_reactFit["default"], null, /* @__PURE__ */ _react["default"].createElement("div", {
              ref: function ref(_ref4) {
                if (_ref4 && !isClockOpen) {
                  _ref4.removeAttribute("style");
                }
              },
              className: classNames
            }, clock));
          }
        }, {
          key: "render",
          value: function render() {
            var eventProps = this.eventProps;
            var _this$props6 = this.props, className = _this$props6.className, disabled = _this$props6.disabled;
            var _this$state4 = this.state, isCalendarOpen = _this$state4.isCalendarOpen, isClockOpen = _this$state4.isClockOpen;
            var onChange = eventProps.onChange, eventPropsWithoutOnChange = _objectWithoutProperties(eventProps, _excluded33);
            return /* @__PURE__ */ _react["default"].createElement("div", _extends2({
              className: (0, _mergeClassNames["default"])(baseClassName, "".concat(baseClassName, "--").concat(isCalendarOpen || isClockOpen ? "open" : "closed"), "".concat(baseClassName, "--").concat(disabled ? "disabled" : "enabled"), className)
            }, eventPropsWithoutOnChange, {
              onFocus: this.onFocus,
              ref: this.wrapper
            }), this.renderInputs(), this.renderCalendar(), this.renderClock());
          }
        }], [{
          key: "getDerivedStateFromProps",
          value: function getDerivedStateFromProps(nextProps, prevState) {
            var nextState = {};
            if (nextProps.isCalendarOpen !== prevState.isCalendarOpenProps) {
              nextState.isCalendarOpen = nextProps.isCalendarOpen;
              nextState.isCalendarOpenProps = nextProps.isCalendarOpen;
            }
            if (nextProps.isClockOpen !== prevState.isClockOpenProps) {
              nextState.isClockOpen = nextProps.isClockOpen;
              nextState.isClockOpenProps = nextProps.isClockOpen;
            }
            return nextState;
          }
        }]);
        return DateTimeRangePicker4;
      }(_react.PureComponent);
      exports["default"] = DateTimeRangePicker3;
      var iconProps = {
        xmlns: "http://www.w3.org/2000/svg",
        width: 19,
        height: 19,
        viewBox: "0 0 19 19",
        stroke: "black",
        strokeWidth: 2
      };
      var CalendarIcon = /* @__PURE__ */ _react["default"].createElement("svg", _extends2({}, iconProps, {
        className: "".concat(baseClassName, "__calendar-button__icon ").concat(baseClassName, "__button__icon")
      }), /* @__PURE__ */ _react["default"].createElement("rect", {
        fill: "none",
        height: "15",
        width: "15",
        x: "2",
        y: "2"
      }), /* @__PURE__ */ _react["default"].createElement("line", {
        x1: "6",
        x2: "6",
        y1: "0",
        y2: "4"
      }), /* @__PURE__ */ _react["default"].createElement("line", {
        x1: "13",
        x2: "13",
        y1: "0",
        y2: "4"
      }));
      var ClearIcon = /* @__PURE__ */ _react["default"].createElement("svg", _extends2({}, iconProps, {
        className: "".concat(baseClassName, "__clear-button__icon ").concat(baseClassName, "__button__icon")
      }), /* @__PURE__ */ _react["default"].createElement("line", {
        x1: "4",
        x2: "15",
        y1: "4",
        y2: "15"
      }), /* @__PURE__ */ _react["default"].createElement("line", {
        x1: "15",
        x2: "4",
        y1: "4",
        y2: "15"
      }));
      DateTimeRangePicker3.defaultProps = {
        calendarIcon: CalendarIcon,
        clearIcon: ClearIcon,
        closeWidgets: true,
        isCalendarOpen: null,
        isClockOpen: null,
        maxDetail: "minute",
        name: "datetimerange",
        openWidgetsOnFocus: true,
        rangeDivider: "\u2013"
      };
      var isValue = _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date)]);
      DateTimeRangePicker3.propTypes = {
        amPmAriaLabel: _propTypes["default"].string,
        autoFocus: _propTypes["default"].bool,
        calendarAriaLabel: _propTypes["default"].string,
        calendarClassName: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
        calendarIcon: _propTypes["default"].node,
        className: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
        clearAriaLabel: _propTypes["default"].string,
        clearIcon: _propTypes["default"].node,
        clockClassName: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].string)]),
        closeWidgets: _propTypes["default"].bool,
        dayAriaLabel: _propTypes["default"].string,
        dayPlaceholder: _propTypes["default"].string,
        disableCalendar: _propTypes["default"].bool,
        disableClock: _propTypes["default"].bool,
        disabled: _propTypes["default"].bool,
        format: _propTypes["default"].string,
        hourAriaLabel: _propTypes["default"].string,
        hourPlaceholder: _propTypes["default"].string,
        isCalendarOpen: _propTypes["default"].bool,
        isClockOpen: _propTypes["default"].bool,
        locale: _propTypes["default"].string,
        maxDate: _propTypes2.isMaxDate,
        maxDetail: _propTypes["default"].oneOf(allViews),
        minDate: _propTypes2.isMinDate,
        minuteAriaLabel: _propTypes["default"].string,
        minutePlaceholder: _propTypes["default"].string,
        monthAriaLabel: _propTypes["default"].string,
        monthPlaceholder: _propTypes["default"].string,
        name: _propTypes["default"].string,
        nativeInputAriaLabel: _propTypes["default"].string,
        onCalendarClose: _propTypes["default"].func,
        onCalendarOpen: _propTypes["default"].func,
        onChange: _propTypes["default"].func,
        onClockClose: _propTypes["default"].func,
        onClockOpen: _propTypes["default"].func,
        onFocus: _propTypes["default"].func,
        openWidgetsOnFocus: _propTypes["default"].bool,
        portalContainer: _propTypes["default"].object,
        rangeDivider: _propTypes["default"].node,
        required: _propTypes["default"].bool,
        secondAriaLabel: _propTypes["default"].string,
        secondPlaceholder: _propTypes["default"].string,
        showLeadingZeros: _propTypes["default"].bool,
        value: _propTypes["default"].oneOfType([isValue, _propTypes["default"].arrayOf(isValue)]),
        yearAriaLabel: _propTypes["default"].string,
        yearPlaceholder: _propTypes["default"].string
      };
    }
  });

  // node_modules/@wojtekmaj/react-datetimerange-picker/dist/DateTimeRangePicker.css
  var require_3 = __commonJS({
    "node_modules/@wojtekmaj/react-datetimerange-picker/dist/DateTimeRangePicker.css"(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/@wojtekmaj/react-datetimerange-picker/dist/entry.js
  var require_entry = __commonJS({
    "node_modules/@wojtekmaj/react-datetimerange-picker/dist/entry.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      require_();
      require_2();
      var _DateTimeRangePicker = _interopRequireDefault(require_DateTimeRangePicker());
      require_3();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _default = _DateTimeRangePicker["default"];
      exports["default"] = _default;
    }
  });

  // node_modules/delay/index.js
  var require_delay = __commonJS({
    "node_modules/delay/index.js"(exports, module) {
      "use strict";
      var randomInteger = (minimum, maximum) => Math.floor(Math.random() * (maximum - minimum + 1) + minimum);
      var createAbortError = () => {
        const error = new Error("Delay aborted");
        error.name = "AbortError";
        return error;
      };
      var createDelay = ({ clearTimeout: defaultClear, setTimeout: set, willResolve }) => (ms, { value, signal } = {}) => {
        if (signal && signal.aborted) {
          return Promise.reject(createAbortError());
        }
        let timeoutId;
        let settle;
        let rejectFn;
        const clear = defaultClear || clearTimeout;
        const signalListener = () => {
          clear(timeoutId);
          rejectFn(createAbortError());
        };
        const cleanup = () => {
          if (signal) {
            signal.removeEventListener("abort", signalListener);
          }
        };
        const delayPromise = new Promise((resolve, reject) => {
          settle = () => {
            cleanup();
            if (willResolve) {
              resolve(value);
            } else {
              reject(value);
            }
          };
          rejectFn = reject;
          timeoutId = (set || setTimeout)(settle, ms);
        });
        if (signal) {
          signal.addEventListener("abort", signalListener, { once: true });
        }
        delayPromise.clear = () => {
          clear(timeoutId);
          timeoutId = null;
          settle();
        };
        return delayPromise;
      };
      var createWithTimers = (clearAndSet) => {
        const delay3 = createDelay({ ...clearAndSet, willResolve: true });
        delay3.reject = createDelay({ ...clearAndSet, willResolve: false });
        delay3.range = (minimum, maximum, options) => delay3(randomInteger(minimum, maximum), options);
        return delay3;
      };
      var delay2 = createWithTimers();
      delay2.createWithTimers = createWithTimers;
      module.exports = delay2;
      module.exports.default = delay2;
    }
  });

  // src/website/index.tsx
  var React58 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@mui/material/esm/styles/createTheme.js
  var import_utils3 = __toESM(require_utils());
  var import_base = __toESM(require_node3());
  var import_system2 = __toESM(require_system());

  // node_modules/@mui/material/esm/styles/createMixins.js
  function createMixins(breakpoints, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [breakpoints.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/esm/styles/createPalette.js
  var import_utils = __toESM(require_utils());
  var import_system = __toESM(require_system());

  // node_modules/@mui/material/esm/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/esm/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@mui/material/esm/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/esm/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/esm/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/esm/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/esm/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/esm/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/esm/styles/createPalette.js
  var _excluded = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    text: {
      primary: "rgba(0, 0, 0, 0.87)",
      secondary: "rgba(0, 0, 0, 0.6)",
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    divider: "rgba(0, 0, 0, 0.12)",
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    action: {
      active: "rgba(0, 0, 0, 0.54)",
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      disabled: "rgba(0, 0, 0, 0.26)",
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = (0, import_system.lighten)(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = (0, import_system.darken)(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette, other = _objectWithoutPropertiesLoose(palette, _excluded);
    const primary = palette.primary || getDefaultPrimary(mode);
    const secondary = palette.secondary || getDefaultSecondary(mode);
    const error = palette.error || getDefaultError(mode);
    const info = palette.info || getDefaultInfo(mode);
    const success = palette.success || getDefaultSuccess(mode);
    const warning = palette.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = (0, import_system.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = (0, import_system.getContrastRatio)(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color = _extends({}, color);
      if (!color.main && color[mainShade]) {
        color.main = color[mainShade];
      }
      if (!color.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, import_utils.formatMuiErrorMessage)(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, import_utils.formatMuiErrorMessage)(12, name ? ` (${name})` : "", JSON.stringify(color.main)));
      }
      addLightOrDark(color, "light", lightShade, tonalOffset);
      addLightOrDark(color, "dark", darkShade, tonalOffset);
      if (!color.contrastText) {
        color.contrastText = getContrastText(color.main);
      }
      return color;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = (0, import_utils.deepmerge)(_extends({
      common: _extends({}, common_default),
      mode,
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      error: augmentColor({
        color: error,
        name: "error"
      }),
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      info: augmentColor({
        color: info,
        name: "info"
      }),
      success: augmentColor({
        color: success,
        name: "success"
      }),
      grey: grey_default,
      contrastThreshold,
      getContrastText,
      augmentColor,
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/esm/styles/createTypography.js
  var import_utils2 = __toESM(require_utils());
  var _excluded2 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette, typography) {
    const _ref = typeof typography === "function" ? typography(palette) : typography, {
      fontFamily = defaultFontFamily,
      fontSize = 14,
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      htmlFontSize = 16,
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded2);
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return (0, import_utils2.deepmerge)(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
    });
  }

  // node_modules/@mui/material/esm/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@mui/material/esm/styles/createTransitions.js
  var _excluded3 = ["duration", "easing", "delay"];
  var easing = {
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    standard: 300,
    complex: 375,
    enteringScreen: 225,
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height) {
    if (!height) {
      return 0;
    }
    const constant = height / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props2 = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay: delay2 = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded3);
      if (true) {
        const isString = (value) => typeof value === "string";
        const isNumber = (value) => !isNaN(parseFloat(value));
        if (!isString(props2) && !Array.isArray(props2)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber(delay2) && !isString(delay2)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props2) ? props2 : [props2]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay2 === "string" ? delay2 : formatMs(delay2)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/esm/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // node_modules/@mui/material/esm/styles/createTheme.js
  var _excluded4 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded4);
    if (options.vars) {
      throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, import_utils.formatMuiErrorMessage)(18));
    }
    const palette = createPalette(paletteInput);
    const systemTheme = (0, import_system2.createTheme)(options);
    let muiTheme = (0, import_utils3.deepmerge)(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette,
      shadows: shadows_default.slice(),
      typography: createTypography(palette, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex_default)
    });
    muiTheme = (0, import_utils3.deepmerge)(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => (0, import_utils3.deepmerge)(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node, component) => {
        let key;
        for (key in node) {
          const child = node[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = (0, import_base.generateUtilityClass)("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/material/esm/styles/useTheme.js
  var React = __toESM(require_react());
  var import_system3 = __toESM(require_system());

  // node_modules/@mui/material/esm/styles/defaultTheme.js
  var defaultTheme = createTheme_default();
  var defaultTheme_default = defaultTheme;

  // node_modules/@mui/material/esm/styles/useTheme.js
  function useTheme() {
    const theme2 = (0, import_system3.useTheme)(defaultTheme_default);
    if (true) {
      React.useDebugValue(theme2);
    }
    return theme2;
  }

  // node_modules/@mui/material/esm/styles/useThemeProps.js
  var import_system4 = __toESM(require_system());
  function useThemeProps({
    props: props2,
    name
  }) {
    return (0, import_system4.useThemeProps)({
      props: props2,
      name,
      defaultTheme: defaultTheme_default
    });
  }

  // node_modules/@mui/material/esm/styles/styled.js
  var import_system5 = __toESM(require_system());
  var rootShouldForwardProp = (prop) => (0, import_system5.shouldForwardProp)(prop) && prop !== "classes";
  var slotShouldForwardProp = import_system5.shouldForwardProp;
  var styled = (0, import_system5.createStyled)({
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp
  });
  var styled_default = styled;

  // node_modules/@mui/material/esm/styles/ThemeProvider.js
  var import_system6 = __toESM(require_system());

  // node_modules/@mui/material/esm/Paper/Paper.js
  var React2 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());
  var import_clsx = __toESM(require_clsx());
  var import_utils4 = __toESM(require_utils());
  var import_base3 = __toESM(require_node3());
  var import_system7 = __toESM(require_system());

  // node_modules/@mui/material/esm/Paper/paperClasses.js
  var import_base2 = __toESM(require_node3());
  function getPaperUtilityClass(slot) {
    return (0, import_base2.generateUtilityClass)("MuiPaper", slot);
  }
  var paperClasses = (0, import_base2.generateUtilityClasses)("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);

  // node_modules/@mui/material/esm/Paper/Paper.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var _excluded5 = ["className", "component", "elevation", "square", "variant"];
  var getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  var useUtilityClasses = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return (0, import_base3.unstable_composeClasses)(slots, getPaperUtilityClass, classes);
  };
  var PaperRoot = styled_default("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, styles3[ownerState.variant], !ownerState.square && styles3.rounded, ownerState.variant === "elevation" && styles3[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends({
      backgroundColor: (theme2.vars || theme2).palette.background.paper,
      color: (theme2.vars || theme2).palette.text.primary,
      transition: theme2.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme2.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme2.vars || theme2).palette.divider}`
    }, ownerState.variant === "elevation" && _extends({
      boxShadow: (theme2.vars || theme2).shadows[ownerState.elevation]
    }, !theme2.vars && theme2.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${(0, import_system7.alpha)("#fff", getOverlayAlpha(ownerState.elevation))}, ${(0, import_system7.alpha)("#fff", getOverlayAlpha(ownerState.elevation))})`
    }, theme2.vars && {
      backgroundImage: (_theme$vars$overlays = theme2.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  var Paper = /* @__PURE__ */ React2.forwardRef(function Paper2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded5);
    const ownerState = _extends({}, props2, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses(ownerState);
    if (true) {
      const theme2 = useTheme();
      if (theme2.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PaperRoot, _extends({
      as: component,
      ownerState,
      className: (0, import_clsx.default)(classes.root, className),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    children: import_prop_types.default.node,
    classes: import_prop_types.default.object,
    className: import_prop_types.default.string,
    component: import_prop_types.default.elementType,
    elevation: (0, import_utils4.chainPropTypes)(import_utils4.integerPropType, (props2) => {
      const {
        elevation,
        variant
      } = props2;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    square: import_prop_types.default.bool,
    sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
    variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["elevation", "outlined"]), import_prop_types.default.string])
  } : void 0;
  var Paper_default = Paper;

  // node_modules/@mui/material/esm/CssBaseline/CssBaseline.js
  var React4 = __toESM(require_react());
  var import_prop_types3 = __toESM(require_prop_types());

  // node_modules/@mui/material/esm/GlobalStyles/GlobalStyles.js
  var React3 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_system8 = __toESM(require_system());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  function GlobalStyles(props2) {
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_system8.GlobalStyles, _extends({}, props2, {
      defaultTheme: defaultTheme_default
    }));
  }
  true ? GlobalStyles.propTypes = {
    styles: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.number, import_prop_types2.default.object, import_prop_types2.default.shape({
      __emotion_styles: import_prop_types2.default.any.isRequired
    }), import_prop_types2.default.string, import_prop_types2.default.bool])
  } : void 0;
  var GlobalStyles_default = GlobalStyles;

  // node_modules/@mui/material/esm/CssBaseline/CssBaseline.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var html = (theme2, enableColorScheme) => _extends({
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    boxSizing: "border-box",
    WebkitTextSizeAdjust: "100%"
  }, enableColorScheme && !theme2.vars && {
    colorScheme: theme2.palette.mode
  });
  var body = (theme2) => _extends({
    color: (theme2.vars || theme2).palette.text.primary
  }, theme2.typography.body1, {
    backgroundColor: (theme2.vars || theme2).palette.background.default,
    "@media print": {
      backgroundColor: (theme2.vars || theme2).palette.common.white
    }
  });
  var styles = (theme2, enableColorScheme = false) => {
    var _theme$components, _theme$components$Mui;
    const colorSchemeStyles = {};
    if (enableColorScheme && theme2.colorSchemes) {
      Object.entries(theme2.colorSchemes).forEach(([key, scheme]) => {
        var _scheme$palette;
        colorSchemeStyles[theme2.getColorSchemeSelector(key).replace(/\s*&/, "")] = {
          colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
        };
      });
    }
    let defaultStyles = _extends({
      html: html(theme2, enableColorScheme),
      "*, *::before, *::after": {
        boxSizing: "inherit"
      },
      "strong, b": {
        fontWeight: theme2.typography.fontWeightBold
      },
      body: _extends({
        margin: 0
      }, body(theme2), {
        "&::backdrop": {
          backgroundColor: (theme2.vars || theme2).palette.background.default
        }
      })
    }, colorSchemeStyles);
    const themeOverrides = (_theme$components = theme2.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;
    if (themeOverrides) {
      defaultStyles = [defaultStyles, themeOverrides];
    }
    return defaultStyles;
  };
  function CssBaseline(inProps) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiCssBaseline"
    });
    const {
      children,
      enableColorScheme = false
    } = props2;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(React4.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime3.jsx)(GlobalStyles_default, {
        styles: (theme2) => styles(theme2, enableColorScheme)
      }), children]
    });
  }
  true ? CssBaseline.propTypes = {
    children: import_prop_types3.default.node,
    enableColorScheme: import_prop_types3.default.bool
  } : void 0;
  var CssBaseline_default = CssBaseline;

  // src/website/root.tsx
  var React57 = __toESM(require_react());

  // node_modules/@mui/material/esm/Box/Box.js
  var import_system9 = __toESM(require_system());
  var import_prop_types4 = __toESM(require_prop_types());

  // node_modules/@mui/material/esm/className/index.js
  var import_utils5 = __toESM(require_utils());

  // node_modules/@mui/material/esm/Box/Box.js
  var defaultTheme2 = createTheme_default();
  var Box = (0, import_system9.createBox)({
    defaultTheme: defaultTheme2,
    defaultClassName: "MuiBox-root",
    generateClassName: import_utils5.unstable_ClassNameGenerator.generate
  });
  true ? Box.propTypes = {
    children: import_prop_types4.default.node,
    component: import_prop_types4.default.elementType,
    sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object])
  } : void 0;
  var Box_default = Box;

  // node_modules/@mui/material/esm/Toolbar/Toolbar.js
  var React5 = __toESM(require_react());
  var import_prop_types5 = __toESM(require_prop_types());
  var import_clsx2 = __toESM(require_clsx());
  var import_base5 = __toESM(require_node3());

  // node_modules/@mui/material/esm/Toolbar/toolbarClasses.js
  var import_base4 = __toESM(require_node3());
  function getToolbarUtilityClass(slot) {
    return (0, import_base4.generateUtilityClass)("MuiToolbar", slot);
  }
  var toolbarClasses = (0, import_base4.generateUtilityClasses)("MuiToolbar", ["root", "gutters", "regular", "dense"]);

  // node_modules/@mui/material/esm/Toolbar/Toolbar.js
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var _excluded6 = ["className", "component", "disableGutters", "variant"];
  var useUtilityClasses2 = (ownerState) => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return (0, import_base5.unstable_composeClasses)(slots, getToolbarUtilityClass, classes);
  };
  var ToolbarRoot = styled_default("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, !ownerState.disableGutters && styles3.gutters, styles3[ownerState.variant]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    position: "relative",
    display: "flex",
    alignItems: "center"
  }, !ownerState.disableGutters && {
    paddingLeft: theme2.spacing(2),
    paddingRight: theme2.spacing(2),
    [theme2.breakpoints.up("sm")]: {
      paddingLeft: theme2.spacing(3),
      paddingRight: theme2.spacing(3)
    }
  }, ownerState.variant === "dense" && {
    minHeight: 48
  }), ({
    theme: theme2,
    ownerState
  }) => ownerState.variant === "regular" && theme2.mixins.toolbar);
  var Toolbar = /* @__PURE__ */ React5.forwardRef(function Toolbar2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className,
      component = "div",
      disableGutters = false,
      variant = "regular"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded6);
    const ownerState = _extends({}, props2, {
      component,
      disableGutters,
      variant
    });
    const classes = useUtilityClasses2(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(ToolbarRoot, _extends({
      as: component,
      className: (0, import_clsx2.default)(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? Toolbar.propTypes = {
    children: import_prop_types5.default.node,
    classes: import_prop_types5.default.object,
    className: import_prop_types5.default.string,
    component: import_prop_types5.default.elementType,
    disableGutters: import_prop_types5.default.bool,
    sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
    variant: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["dense", "regular"]), import_prop_types5.default.string])
  } : void 0;
  var Toolbar_default = Toolbar;

  // node_modules/@mui/material/esm/Container/Container.js
  var import_prop_types6 = __toESM(require_prop_types());
  var import_system10 = __toESM(require_system());

  // node_modules/@mui/material/esm/utils/capitalize.js
  var import_utils6 = __toESM(require_utils());
  var capitalize_default = import_utils6.unstable_capitalize;

  // node_modules/@mui/material/esm/Container/Container.js
  var Container = (0, import_system10.createContainer)({
    createStyledComponent: styled_default("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props2, styles3) => {
        const {
          ownerState
        } = props2;
        return [styles3.root, styles3[`maxWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fixed && styles3.fixed, ownerState.disableGutters && styles3.disableGutters];
      }
    }),
    useThemeProps: (inProps) => useThemeProps({
      props: inProps,
      name: "MuiContainer"
    })
  });
  true ? Container.propTypes = {
    children: import_prop_types6.default.node,
    classes: import_prop_types6.default.object,
    component: import_prop_types6.default.elementType,
    disableGutters: import_prop_types6.default.bool,
    fixed: import_prop_types6.default.bool,
    maxWidth: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types6.default.string]),
    sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object])
  } : void 0;
  var Container_default = Container;

  // src/website/appBar.tsx
  var React30 = __toESM(require_react());

  // node_modules/@mui/material/esm/AppBar/AppBar.js
  var React6 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_clsx3 = __toESM(require_clsx());
  var import_base7 = __toESM(require_node3());

  // node_modules/@mui/material/esm/AppBar/appBarClasses.js
  var import_base6 = __toESM(require_node3());
  function getAppBarUtilityClass(slot) {
    return (0, import_base6.generateUtilityClass)("MuiAppBar", slot);
  }
  var appBarClasses = (0, import_base6.generateUtilityClasses)("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent"]);

  // node_modules/@mui/material/esm/AppBar/AppBar.js
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var _excluded7 = ["className", "color", "enableColorOnDark", "position"];
  var useUtilityClasses3 = (ownerState) => {
    const {
      color,
      position,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color)}`, `position${capitalize_default(position)}`]
    };
    return (0, import_base7.unstable_composeClasses)(slots, getAppBarUtilityClass, classes);
  };
  var joinVars = (var1, var2) => `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})`;
  var AppBarRoot = styled_default(Paper_default, {
    name: "MuiAppBar",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, styles3[`position${capitalize_default(ownerState.position)}`], styles3[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    const backgroundColorDefault = theme2.palette.mode === "light" ? theme2.palette.grey[100] : theme2.palette.grey[900];
    return _extends({
      display: "flex",
      flexDirection: "column",
      width: "100%",
      boxSizing: "border-box",
      flexShrink: 0
    }, ownerState.position === "fixed" && {
      position: "fixed",
      zIndex: (theme2.vars || theme2).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0,
      "@media print": {
        position: "absolute"
      }
    }, ownerState.position === "absolute" && {
      position: "absolute",
      zIndex: (theme2.vars || theme2).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "sticky" && {
      position: "sticky",
      zIndex: (theme2.vars || theme2).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "static" && {
      position: "static"
    }, ownerState.position === "relative" && {
      position: "relative"
    }, !theme2.vars && _extends({}, ownerState.color === "default" && {
      backgroundColor: backgroundColorDefault,
      color: theme2.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
      backgroundColor: theme2.palette[ownerState.color].main,
      color: theme2.palette[ownerState.color].contrastText
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }, theme2.palette.mode === "dark" && !ownerState.enableColorOnDark && {
      backgroundColor: null,
      color: null
    }, ownerState.color === "transparent" && _extends({
      backgroundColor: "transparent",
      color: "inherit"
    }, theme2.palette.mode === "dark" && {
      backgroundImage: "none"
    })), theme2.vars && _extends({}, ownerState.color === "default" && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme2.vars.palette.AppBar.defaultBg : joinVars(theme2.vars.palette.AppBar.darkBg, theme2.vars.palette.AppBar.defaultBg),
      "--AppBar-color": ownerState.enableColorOnDark ? theme2.vars.palette.text.primary : joinVars(theme2.vars.palette.AppBar.darkColor, theme2.vars.palette.text.primary)
    }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme2.vars.palette[ownerState.color].main : joinVars(theme2.vars.palette.AppBar.darkBg, theme2.vars.palette[ownerState.color].main),
      "--AppBar-color": ownerState.enableColorOnDark ? theme2.vars.palette[ownerState.color].contrastText : joinVars(theme2.vars.palette.AppBar.darkColor, theme2.vars.palette[ownerState.color].contrastText)
    }, {
      backgroundColor: "var(--AppBar-background)",
      color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
    }, ownerState.color === "transparent" && {
      backgroundImage: "none",
      backgroundColor: "transparent",
      color: "inherit"
    }));
  });
  var AppBar = /* @__PURE__ */ React6.forwardRef(function AppBar2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiAppBar"
    });
    const {
      className,
      color = "primary",
      enableColorOnDark = false,
      position = "fixed"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded7);
    const ownerState = _extends({}, props2, {
      color,
      position,
      enableColorOnDark
    });
    const classes = useUtilityClasses3(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(AppBarRoot, _extends({
      square: true,
      component: "header",
      ownerState,
      elevation: 4,
      className: (0, import_clsx3.default)(classes.root, className, position === "fixed" && "mui-fixed"),
      ref
    }, other));
  });
  true ? AppBar.propTypes = {
    children: import_prop_types7.default.node,
    classes: import_prop_types7.default.object,
    className: import_prop_types7.default.string,
    color: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["default", "inherit", "primary", "secondary", "transparent"]), import_prop_types7.default.string]),
    enableColorOnDark: import_prop_types7.default.bool,
    position: import_prop_types7.default.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object])
  } : void 0;
  var AppBar_default = AppBar;

  // node_modules/@mui/material/esm/Typography/Typography.js
  var React7 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_clsx4 = __toESM(require_clsx());
  var import_system11 = __toESM(require_system());
  var import_base9 = __toESM(require_node3());

  // node_modules/@mui/material/esm/Typography/typographyClasses.js
  var import_base8 = __toESM(require_node3());
  function getTypographyUtilityClass(slot) {
    return (0, import_base8.generateUtilityClass)("MuiTypography", slot);
  }
  var typographyClasses = (0, import_base8.generateUtilityClasses)("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);

  // node_modules/@mui/material/esm/Typography/Typography.js
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var _excluded8 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  var useUtilityClasses4 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return (0, import_base9.unstable_composeClasses)(slots, getTypographyUtilityClass, classes);
  };
  var TypographyRoot = styled_default("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, ownerState.variant && styles3[ownerState.variant], ownerState.align !== "inherit" && styles3[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles3.noWrap, ownerState.gutterBottom && styles3.gutterBottom, ownerState.paragraph && styles3.paragraph];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant && theme2.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  var colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  var transformDeprecatedColors = (color) => {
    return colorTransformations[color] || color;
  };
  var Typography = /* @__PURE__ */ React7.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiTypography"
    });
    const color = transformDeprecatedColors(themeProps.color);
    const props2 = (0, import_system11.unstable_extendSxProp)(_extends({}, themeProps, {
      color
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded8);
    const ownerState = _extends({}, props2, {
      align,
      color,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses4(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(TypographyRoot, _extends({
      as: Component,
      ref,
      ownerState,
      className: (0, import_clsx4.default)(classes.root, className)
    }, other));
  });
  true ? Typography.propTypes = {
    align: import_prop_types8.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    children: import_prop_types8.default.node,
    classes: import_prop_types8.default.object,
    className: import_prop_types8.default.string,
    component: import_prop_types8.default.elementType,
    gutterBottom: import_prop_types8.default.bool,
    noWrap: import_prop_types8.default.bool,
    paragraph: import_prop_types8.default.bool,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    variant: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types8.default.string]),
    variantMapping: import_prop_types8.default.object
  } : void 0;
  var Typography_default = Typography;

  // node_modules/@mui/material/esm/IconButton/IconButton.js
  var React14 = __toESM(require_react());
  var import_prop_types15 = __toESM(require_prop_types());
  var import_clsx8 = __toESM(require_clsx());
  var import_utils11 = __toESM(require_utils());
  var import_base13 = __toESM(require_node3());
  var import_system13 = __toESM(require_system());

  // node_modules/@mui/material/esm/ButtonBase/ButtonBase.js
  var React13 = __toESM(require_react());
  var import_prop_types14 = __toESM(require_prop_types());
  var import_clsx7 = __toESM(require_clsx());
  var import_utils10 = __toESM(require_utils());
  var import_composeClasses = __toESM(require_composeClasses3());

  // node_modules/@mui/material/esm/utils/useForkRef.js
  var import_utils7 = __toESM(require_utils());
  var useForkRef_default = import_utils7.unstable_useForkRef;

  // node_modules/@mui/material/esm/utils/useEventCallback.js
  var import_utils8 = __toESM(require_utils());
  var useEventCallback_default = import_utils8.unstable_useEventCallback;

  // node_modules/@mui/material/esm/utils/useIsFocusVisible.js
  var import_utils9 = __toESM(require_utils());
  var useIsFocusVisible_default = import_utils9.unstable_useIsFocusVisible;

  // node_modules/@mui/material/esm/ButtonBase/TouchRipple.js
  var React12 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types10 = __toESM(require_prop_types());
  var import_react2 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types9 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.shape({
    enter: import_prop_types9.default.number,
    exit: import_prop_types9.default.number,
    appear: import_prop_types9.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types9.default.oneOfType([import_prop_types9.default.string, import_prop_types9.default.shape({
    enter: import_prop_types9.default.string,
    exit: import_prop_types9.default.string,
    active: import_prop_types9.default.string
  }), import_prop_types9.default.shape({
    enter: import_prop_types9.default.string,
    enterDone: import_prop_types9.default.string,
    enterActive: import_prop_types9.default.string,
    exit: import_prop_types9.default.string,
    exitDone: import_prop_types9.default.string,
    exitActive: import_prop_types9.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react = __toESM(require_react());
  var TransitionGroupContext_default = import_react.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node) {
    return node.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props2, context) {
      var _this;
      _this = _React$Component.call(this, props2, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props2.enter : props2.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props2.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props2.unmountOnExit || props2.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node)
              forceReflow(node);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return /* @__PURE__ */ import_react2.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : import_react2.default.cloneElement(import_react2.default.Children.only(children), childProps));
    };
    return Transition2;
  }(import_react2.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    nodeRef: import_prop_types10.default.shape({
      current: typeof Element === "undefined" ? import_prop_types10.default.any : function(propValue, key, componentName, location2, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types10.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location2, propFullName, secret);
      }
    }),
    children: import_prop_types10.default.oneOfType([import_prop_types10.default.func.isRequired, import_prop_types10.default.element.isRequired]).isRequired,
    in: import_prop_types10.default.bool,
    mountOnEnter: import_prop_types10.default.bool,
    unmountOnExit: import_prop_types10.default.bool,
    appear: import_prop_types10.default.bool,
    enter: import_prop_types10.default.bool,
    exit: import_prop_types10.default.bool,
    timeout: function timeout(props2) {
      var pt = timeoutsShape;
      if (!props2.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props2].concat(args));
    },
    addEndListener: import_prop_types10.default.func,
    onEnter: import_prop_types10.default.func,
    onEntering: import_prop_types10.default.func,
    onEntered: import_prop_types10.default.func,
    onExit: import_prop_types10.default.func,
    onExiting: import_prop_types10.default.func,
    onExited: import_prop_types10.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types11 = __toESM(require_prop_types());
  var import_react4 = __toESM(require_react());

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react3 = __toESM(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react3.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children)
      import_react3.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props2) {
    return props2[prop] != null ? props2[prop] : child.props[prop];
  }
  function getInitialChildMapping(props2, onExited) {
    return getChildMapping(props2.children, function(child) {
      return (0, import_react3.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props2),
        enter: getProp(child, "enter", props2),
        exit: getProp(child, "exit", props2)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react3.isValidElement)(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react3.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react3.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react3.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react3.isValidElement)(prevChild)) {
        children[key] = (0, import_react3.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props2, context) {
      var _this;
      _this = _React$Component.call(this, props2, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component = _this$props.component, childFactory2 = _this$props.childFactory, props2 = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory2);
      delete props2.appear;
      delete props2.enter;
      delete props2.exit;
      if (Component === null) {
        return /* @__PURE__ */ import_react4.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react4.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react4.default.createElement(Component, props2, children));
    };
    return TransitionGroup2;
  }(import_react4.default.Component);
  TransitionGroup.propTypes = true ? {
    component: import_prop_types11.default.any,
    children: import_prop_types11.default.node,
    appear: import_prop_types11.default.bool,
    enter: import_prop_types11.default.bool,
    exit: import_prop_types11.default.bool,
    childFactory: import_prop_types11.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // node_modules/@mui/material/esm/ButtonBase/TouchRipple.js
  var import_clsx6 = __toESM(require_clsx());
  var import_system12 = __toESM(require_system());

  // node_modules/@mui/material/esm/ButtonBase/Ripple.js
  var React11 = __toESM(require_react());
  var import_prop_types12 = __toESM(require_prop_types());
  var import_clsx5 = __toESM(require_clsx());
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  function Ripple(props2) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout: timeout2
    } = props2;
    const [leaving, setLeaving] = React11.useState(false);
    const rippleClassName = (0, import_clsx5.default)(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = (0, import_clsx5.default)(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React11.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout2);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout2]);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", {
        className: childClassName
      })
    });
  }
  true ? Ripple.propTypes = {
    classes: import_prop_types12.default.object.isRequired,
    className: import_prop_types12.default.string,
    in: import_prop_types12.default.bool,
    onExited: import_prop_types12.default.func,
    pulsate: import_prop_types12.default.bool,
    rippleSize: import_prop_types12.default.number,
    rippleX: import_prop_types12.default.number,
    rippleY: import_prop_types12.default.number,
    timeout: import_prop_types12.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // node_modules/@mui/material/esm/ButtonBase/touchRippleClasses.js
  var import_base10 = __toESM(require_node3());
  var touchRippleClasses = (0, import_base10.generateUtilityClasses)("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  var touchRippleClasses_default = touchRippleClasses;

  // node_modules/@mui/material/esm/ButtonBase/TouchRipple.js
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var _excluded9 = ["center", "classes", "className"];
  var _ = (t) => t;
  var _t;
  var _t2;
  var _t3;
  var _t4;
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var enterKeyframe = (0, import_system12.keyframes)(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  var exitKeyframe = (0, import_system12.keyframes)(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  var pulsateKeyframe = (0, import_system12.keyframes)(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  var TouchRippleRoot = styled_default("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  var TouchRippleRipple = styled_default(Ripple_default, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses_default.rippleVisible, enterKeyframe, DURATION, ({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut, touchRippleClasses_default.ripplePulsate, ({
    theme: theme2
  }) => theme2.transitions.duration.shorter, touchRippleClasses_default.child, touchRippleClasses_default.childLeaving, exitKeyframe, DURATION, ({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut, touchRippleClasses_default.childPulsate, pulsateKeyframe, ({
    theme: theme2
  }) => theme2.transitions.easing.easeInOut);
  var TouchRipple = /* @__PURE__ */ React12.forwardRef(function TouchRipple2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded9);
    const [ripples, setRipples] = React12.useState([]);
    const nextKey = React12.useRef(0);
    const rippleCallback = React12.useRef(null);
    React12.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React12.useRef(false);
    const startTimer = React12.useRef(null);
    const startTimerCommit = React12.useRef(null);
    const container2 = React12.useRef(null);
    React12.useEffect(() => {
      return () => {
        clearTimeout(startTimer.current);
      };
    }, []);
    const startCommit = React12.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(TouchRippleRipple, {
        classes: {
          ripple: (0, import_clsx6.default)(classes.ripple, touchRippleClasses_default.ripple),
          rippleVisible: (0, import_clsx6.default)(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
          ripplePulsate: (0, import_clsx6.default)(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
          child: (0, import_clsx6.default)(classes.child, touchRippleClasses_default.child),
          childLeaving: (0, import_clsx6.default)(classes.childLeaving, touchRippleClasses_default.childLeaving),
          childPulsate: (0, import_clsx6.default)(classes.childPulsate, touchRippleClasses_default.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start = React12.useCallback((event = {}, options = {}, cb) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container2.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(() => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    const pulsate = React12.useCallback(() => {
      start({}, {
        pulsate: true
      });
    }, [start]);
    const stop = React12.useCallback((event, cb) => {
      clearTimeout(startTimer.current);
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(() => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React12.useImperativeHandle(ref, () => ({
      pulsate,
      start,
      stop
    }), [pulsate, start, stop]);
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(TouchRippleRoot, _extends({
      className: (0, import_clsx6.default)(touchRippleClasses_default.root, classes.root, className),
      ref: container2
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(TransitionGroup_default, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  true ? TouchRipple.propTypes = {
    center: import_prop_types13.default.bool,
    classes: import_prop_types13.default.object,
    className: import_prop_types13.default.string
  } : void 0;
  var TouchRipple_default = TouchRipple;

  // node_modules/@mui/material/esm/ButtonBase/buttonBaseClasses.js
  var import_base11 = __toESM(require_node3());
  function getButtonBaseUtilityClass(slot) {
    return (0, import_base11.generateUtilityClass)("MuiButtonBase", slot);
  }
  var buttonBaseClasses = (0, import_base11.generateUtilityClasses)("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  var buttonBaseClasses_default = buttonBaseClasses;

  // node_modules/@mui/material/esm/ButtonBase/ButtonBase.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var _excluded10 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  var useUtilityClasses5 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = (0, import_composeClasses.default)(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  var ButtonBaseRoot = styled_default("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props2, styles3) => styles3.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    outline: 0,
    border: 0,
    margin: 0,
    borderRadius: 0,
    padding: 0,
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    WebkitAppearance: "none",
    textDecoration: "none",
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
    },
    [`&.${buttonBaseClasses_default.disabled}`]: {
      pointerEvents: "none",
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  var ButtonBase = /* @__PURE__ */ React13.forwardRef(function ButtonBase2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type: type2
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded10);
    const buttonRef = React13.useRef(null);
    const rippleRef = React13.useRef(null);
    const handleRippleRef = useForkRef_default(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React13.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React13.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React13.useState(false);
    React13.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React13.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback_default((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback_default((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React13.useRef(false);
    const handleKeyDown = useEventCallback_default((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback_default((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type2 === void 0 ? "button" : type2;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef_default(ref, focusVisibleRef, buttonRef);
    if (true) {
      React13.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props2, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses5(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: (0, import_clsx7.default)(classes.root, className),
      ownerState,
      onBlur: handleBlur,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type: type2
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TouchRipple_default, _extends({
        ref: handleRippleRef,
        center: centerRipple
      }, TouchRippleProps)) : null]
    }));
  });
  true ? ButtonBase.propTypes = {
    action: import_utils10.refType,
    centerRipple: import_prop_types14.default.bool,
    children: import_prop_types14.default.node,
    classes: import_prop_types14.default.object,
    className: import_prop_types14.default.string,
    component: import_utils10.elementTypeAcceptingRef,
    disabled: import_prop_types14.default.bool,
    disableRipple: import_prop_types14.default.bool,
    disableTouchRipple: import_prop_types14.default.bool,
    focusRipple: import_prop_types14.default.bool,
    focusVisibleClassName: import_prop_types14.default.string,
    href: import_prop_types14.default.any,
    LinkComponent: import_prop_types14.default.elementType,
    onBlur: import_prop_types14.default.func,
    onClick: import_prop_types14.default.func,
    onContextMenu: import_prop_types14.default.func,
    onDragLeave: import_prop_types14.default.func,
    onFocus: import_prop_types14.default.func,
    onFocusVisible: import_prop_types14.default.func,
    onKeyDown: import_prop_types14.default.func,
    onKeyUp: import_prop_types14.default.func,
    onMouseDown: import_prop_types14.default.func,
    onMouseLeave: import_prop_types14.default.func,
    onMouseUp: import_prop_types14.default.func,
    onTouchEnd: import_prop_types14.default.func,
    onTouchMove: import_prop_types14.default.func,
    onTouchStart: import_prop_types14.default.func,
    sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
    tabIndex: import_prop_types14.default.number,
    TouchRippleProps: import_prop_types14.default.object,
    touchRippleRef: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.shape({
      current: import_prop_types14.default.shape({
        pulsate: import_prop_types14.default.func.isRequired,
        start: import_prop_types14.default.func.isRequired,
        stop: import_prop_types14.default.func.isRequired
      })
    })]),
    type: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["button", "reset", "submit"]), import_prop_types14.default.string])
  } : void 0;
  var ButtonBase_default = ButtonBase;

  // node_modules/@mui/material/esm/IconButton/iconButtonClasses.js
  var import_base12 = __toESM(require_node3());
  function getIconButtonUtilityClass(slot) {
    return (0, import_base12.generateUtilityClass)("MuiIconButton", slot);
  }
  var iconButtonClasses = (0, import_base12.generateUtilityClasses)("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  var iconButtonClasses_default = iconButtonClasses;

  // node_modules/@mui/material/esm/IconButton/IconButton.js
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var _excluded11 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  var useUtilityClasses6 = (ownerState) => {
    const {
      classes,
      disabled,
      color,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color !== "default" && `color${capitalize_default(color)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`]
    };
    return (0, import_base13.unstable_composeClasses)(slots, getIconButtonUtilityClass, classes);
  };
  var IconButtonRoot = styled_default(ButtonBase_default, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, ownerState.color !== "default" && styles3[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles3[`edge${capitalize_default(ownerState.edge)}`], styles3[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme2.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    color: (theme2.vars || theme2).palette.action.active,
    transition: theme2.transitions.create("background-color", {
      duration: theme2.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.action.activeChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_system13.alpha)(theme2.palette.action.active, theme2.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme: theme2,
    ownerState
  }) => _extends({}, ownerState.color === "inherit" && {
    color: "inherit"
  }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
    color: (theme2.vars || theme2).palette[ownerState.color].main
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_system13.alpha)(theme2.palette[ownerState.color].main, theme2.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }), ownerState.size === "small" && {
    padding: 5,
    fontSize: theme2.typography.pxToRem(18)
  }, ownerState.size === "large" && {
    padding: 12,
    fontSize: theme2.typography.pxToRem(28)
  }, {
    [`&.${iconButtonClasses_default.disabled}`]: {
      backgroundColor: "transparent",
      color: (theme2.vars || theme2).palette.action.disabled
    }
  }));
  var IconButton = /* @__PURE__ */ React14.forwardRef(function IconButton2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded11);
    const ownerState = _extends({}, props2, {
      edge,
      color,
      disabled,
      disableFocusRipple,
      size
    });
    const classes = useUtilityClasses6(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(IconButtonRoot, _extends({
      className: (0, import_clsx8.default)(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref,
      ownerState
    }, other, {
      children
    }));
  });
  true ? IconButton.propTypes = {
    children: (0, import_utils11.chainPropTypes)(import_prop_types15.default.node, (props2) => {
      const found = React14.Children.toArray(props2.children).some((child) => /* @__PURE__ */ React14.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    classes: import_prop_types15.default.object,
    className: import_prop_types15.default.string,
    color: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types15.default.string]),
    disabled: import_prop_types15.default.bool,
    disableFocusRipple: import_prop_types15.default.bool,
    disableRipple: import_prop_types15.default.bool,
    edge: import_prop_types15.default.oneOf(["end", "start", false]),
    size: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["small", "medium", "large"]), import_prop_types15.default.string]),
    sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object])
  } : void 0;
  var IconButton_default = IconButton;

  // src/website/appBar.tsx
  var import_Menu = __toESM(require_Menu());

  // src/website/drawer.tsx
  var React29 = __toESM(require_react());

  // node_modules/@mui/material/esm/Drawer/Drawer.js
  var React21 = __toESM(require_react());
  var import_prop_types21 = __toESM(require_prop_types());
  var import_clsx11 = __toESM(require_clsx());
  var import_utils23 = __toESM(require_utils());
  var import_base19 = __toESM(require_node3());

  // node_modules/@mui/material/esm/Modal/index.js
  var Modal_exports = {};
  __export(Modal_exports, {
    default: () => Modal_default,
    modalClasses: () => modalClasses
  });
  __reExport(Modal_exports, __toESM(require_ModalUnstyled2()));

  // node_modules/@mui/material/esm/Modal/Modal.js
  var React17 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());
  var import_ModalUnstyled = __toESM(require_ModalUnstyled2());
  var import_utils14 = __toESM(require_utils2());
  var import_utils15 = __toESM(require_utils());

  // node_modules/@mui/material/esm/Backdrop/Backdrop.js
  var React16 = __toESM(require_react());
  var import_prop_types17 = __toESM(require_prop_types());
  var import_clsx9 = __toESM(require_clsx());
  var import_base15 = __toESM(require_node3());

  // node_modules/@mui/material/esm/Fade/Fade.js
  var React15 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());
  var import_utils12 = __toESM(require_utils());

  // node_modules/@mui/material/esm/transitions/utils.js
  var reflow = (node) => node.scrollTop;
  function getTransitionProps(props2, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout2,
      easing: easing2,
      style: style2 = {}
    } = props2;
    return {
      duration: (_style$transitionDura = style2.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      easing: (_style$transitionTimi = style2.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style2.transitionDelay
    };
  }

  // node_modules/@mui/material/esm/Fade/Fade.js
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var _excluded12 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var Fade = /* @__PURE__ */ React15.forwardRef(function Fade2(props2, ref) {
    const theme2 = useTheme();
    const defaultTimeout = {
      enter: theme2.transitions.duration.enteringScreen,
      exit: theme2.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout: timeout2 = defaultTimeout,
      TransitionComponent = Transition_default
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded12);
    const enableStrictModeCompat = true;
    const nodeRef = React15.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node);
        } else {
          callback(node, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      reflow(node);
      const transitionProps = getTransitionProps({
        style: style2,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
      node.style.transition = theme2.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node) => {
      const transitionProps = getTransitionProps({
        style: style2,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node.style.webkitTransition = theme2.transitions.create("opacity", transitionProps);
      node.style.transition = theme2.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React15.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles2[state], style2, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Fade.propTypes = {
    addEndListener: import_prop_types16.default.func,
    appear: import_prop_types16.default.bool,
    children: import_utils12.elementAcceptingRef.isRequired,
    easing: import_prop_types16.default.oneOfType([import_prop_types16.default.shape({
      enter: import_prop_types16.default.string,
      exit: import_prop_types16.default.string
    }), import_prop_types16.default.string]),
    in: import_prop_types16.default.bool,
    onEnter: import_prop_types16.default.func,
    onEntered: import_prop_types16.default.func,
    onEntering: import_prop_types16.default.func,
    onExit: import_prop_types16.default.func,
    onExited: import_prop_types16.default.func,
    onExiting: import_prop_types16.default.func,
    style: import_prop_types16.default.object,
    timeout: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.shape({
      appear: import_prop_types16.default.number,
      enter: import_prop_types16.default.number,
      exit: import_prop_types16.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@mui/material/esm/Backdrop/backdropClasses.js
  var import_base14 = __toESM(require_node3());
  function getBackdropUtilityClass(slot) {
    return (0, import_base14.generateUtilityClass)("MuiBackdrop", slot);
  }
  var backdropClasses = (0, import_base14.generateUtilityClasses)("MuiBackdrop", ["root", "invisible"]);

  // node_modules/@mui/material/esm/Backdrop/Backdrop.js
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var _excluded13 = ["children", "component", "components", "componentsProps", "className", "invisible", "open", "transitionDuration", "TransitionComponent"];
  var useUtilityClasses7 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return (0, import_base15.unstable_composeClasses)(slots, getBackdropUtilityClass, classes);
  };
  var BackdropRoot = styled_default("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, ownerState.invisible && styles3.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  var Backdrop = /* @__PURE__ */ React16.forwardRef(function Backdrop2(inProps, ref) {
    var _components$Root, _componentsProps$root;
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      component = "div",
      components = {},
      componentsProps = {},
      className,
      invisible = false,
      open,
      transitionDuration,
      TransitionComponent = Fade_default
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded13);
    const ownerState = _extends({}, props2, {
      component,
      invisible
    });
    const classes = useUtilityClasses7(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(BackdropRoot, {
        "aria-hidden": true,
        as: (_components$Root = components.Root) != null ? _components$Root : component,
        className: (0, import_clsx9.default)(classes.root, className),
        ownerState: _extends({}, ownerState, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState),
        classes,
        ref,
        children
      })
    }));
  });
  true ? Backdrop.propTypes = {
    children: import_prop_types17.default.node,
    classes: import_prop_types17.default.object,
    className: import_prop_types17.default.string,
    component: import_prop_types17.default.elementType,
    components: import_prop_types17.default.shape({
      Root: import_prop_types17.default.elementType
    }),
    componentsProps: import_prop_types17.default.shape({
      root: import_prop_types17.default.object
    }),
    invisible: import_prop_types17.default.bool,
    open: import_prop_types17.default.bool.isRequired,
    sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object]),
    transitionDuration: import_prop_types17.default.oneOfType([import_prop_types17.default.number, import_prop_types17.default.shape({
      appear: import_prop_types17.default.number,
      enter: import_prop_types17.default.number,
      exit: import_prop_types17.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // node_modules/@mui/material/esm/Modal/Modal.js
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var _excluded14 = ["BackdropComponent", "BackdropProps", "closeAfterTransition", "children", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "theme"];
  var modalClasses = import_ModalUnstyled.modalUnstyledClasses;
  var extendUtilityClasses = (ownerState) => {
    return ownerState.classes;
  };
  var ModalRoot = styled_default("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, !ownerState.open && ownerState.exited && styles3.hidden];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: (theme2.vars || theme2).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  var ModalBackdrop = styled_default(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props2, styles3) => {
      return styles3.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal = /* @__PURE__ */ React17.forwardRef(function Modal2(inProps, ref) {
    var _ref, _components$Root;
    const props2 = useThemeProps({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      closeAfterTransition = false,
      children,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      theme: theme2
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded14);
    const [exited, setExited] = React17.useState(true);
    const commonProps = {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    };
    const ownerState = _extends({}, props2, commonProps, {
      exited
    });
    const classes = extendUtilityClasses(ownerState);
    const Root2 = (_ref = (_components$Root = components.Root) != null ? _components$Root : component) != null ? _ref : ModalRoot;
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_ModalUnstyled.default, _extends({
      components: _extends({
        Root: Root2,
        Backdrop: BackdropComponent
      }, components),
      componentsProps: {
        root: () => _extends({}, (0, import_utils14.resolveComponentProps)(componentsProps.root, ownerState), !(0, import_utils14.isHostComponent)(Root2) && {
          as: component,
          theme: theme2
        }),
        backdrop: () => _extends({}, BackdropProps, (0, import_utils14.resolveComponentProps)(componentsProps.backdrop, ownerState))
      },
      onTransitionEnter: () => setExited(false),
      onTransitionExited: () => setExited(true),
      ref
    }, other, {
      classes
    }, commonProps, {
      children
    }));
  });
  true ? Modal.propTypes = {
    BackdropComponent: import_prop_types18.default.elementType,
    BackdropProps: import_prop_types18.default.object,
    children: import_utils15.elementAcceptingRef.isRequired,
    classes: import_prop_types18.default.object,
    closeAfterTransition: import_prop_types18.default.bool,
    component: import_prop_types18.default.elementType,
    components: import_prop_types18.default.shape({
      Backdrop: import_prop_types18.default.elementType,
      Root: import_prop_types18.default.elementType
    }),
    componentsProps: import_prop_types18.default.shape({
      backdrop: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object]),
      root: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])
    }),
    container: import_prop_types18.default.oneOfType([import_utils15.HTMLElementType, import_prop_types18.default.func]),
    disableAutoFocus: import_prop_types18.default.bool,
    disableEnforceFocus: import_prop_types18.default.bool,
    disableEscapeKeyDown: import_prop_types18.default.bool,
    disablePortal: import_prop_types18.default.bool,
    disableRestoreFocus: import_prop_types18.default.bool,
    disableScrollLock: import_prop_types18.default.bool,
    hideBackdrop: import_prop_types18.default.bool,
    keepMounted: import_prop_types18.default.bool,
    onBackdropClick: import_prop_types18.default.func,
    onClose: import_prop_types18.default.func,
    open: import_prop_types18.default.bool.isRequired,
    sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object])
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@mui/material/esm/Slide/Slide.js
  var React20 = __toESM(require_react());
  var import_prop_types20 = __toESM(require_prop_types());
  var import_utils20 = __toESM(require_utils());

  // node_modules/@mui/material/esm/utils/debounce.js
  var import_utils16 = __toESM(require_utils());
  var debounce_default = import_utils16.unstable_debounce;

  // node_modules/@mui/material/esm/utils/createSvgIcon.js
  var React19 = __toESM(require_react());

  // node_modules/@mui/material/esm/SvgIcon/SvgIcon.js
  var React18 = __toESM(require_react());
  var import_prop_types19 = __toESM(require_prop_types());
  var import_clsx10 = __toESM(require_clsx());
  var import_base17 = __toESM(require_node3());

  // node_modules/@mui/material/esm/SvgIcon/svgIconClasses.js
  var import_base16 = __toESM(require_node3());
  function getSvgIconUtilityClass(slot) {
    return (0, import_base16.generateUtilityClass)("MuiSvgIcon", slot);
  }
  var svgIconClasses = (0, import_base16.generateUtilityClasses)("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

  // node_modules/@mui/material/esm/SvgIcon/SvgIcon.js
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var _excluded15 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  var useUtilityClasses8 = (ownerState) => {
    const {
      color,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color !== "inherit" && `color${capitalize_default(color)}`, `fontSize${capitalize_default(fontSize)}`]
    };
    return (0, import_base17.unstable_composeClasses)(slots, getSvgIconUtilityClass, classes);
  };
  var SvgIconRoot = styled_default("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, ownerState.color !== "inherit" && styles3[`color${capitalize_default(ownerState.color)}`], styles3[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      fill: "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme2.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme2.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme2.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme2.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme2.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
      }[ownerState.fontSize],
      color: (_palette$ownerState$c = (_palette = (theme2.vars || theme2).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
        action: (_palette2 = (theme2.vars || theme2).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
        disabled: (_palette3 = (theme2.vars || theme2).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  var SvgIcon = /* @__PURE__ */ React18.forwardRef(function SvgIcon2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color = "inherit",
      component = "svg",
      fontSize = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded15);
    const ownerState = _extends({}, props2, {
      color,
      component,
      fontSize,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses8(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(SvgIconRoot, _extends({
      as: component,
      className: (0, import_clsx10.default)(classes.root, className),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, {
      ownerState,
      children: [children, titleAccess ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("title", {
        children: titleAccess
      }) : null]
    }));
  });
  true ? SvgIcon.propTypes = {
    children: import_prop_types19.default.node,
    classes: import_prop_types19.default.object,
    className: import_prop_types19.default.string,
    color: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types19.default.string]),
    component: import_prop_types19.default.elementType,
    fontSize: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types19.default.string]),
    htmlColor: import_prop_types19.default.string,
    inheritViewBox: import_prop_types19.default.bool,
    shapeRendering: import_prop_types19.default.string,
    sx: import_prop_types19.default.oneOfType([import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object, import_prop_types19.default.bool])), import_prop_types19.default.func, import_prop_types19.default.object]),
    titleAccess: import_prop_types19.default.string,
    viewBox: import_prop_types19.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = SvgIcon;

  // node_modules/@mui/material/esm/utils/createSvgIcon.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    const Component = (props2, ref) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(SvgIcon_default, _extends({
      "data-testid": `${displayName}Icon`,
      ref
    }, props2, {
      children: path
    }));
    if (true) {
      Component.displayName = `${displayName}Icon`;
    }
    Component.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ React19.memo(/* @__PURE__ */ React19.forwardRef(Component));
  }

  // node_modules/@mui/material/esm/utils/ownerWindow.js
  var import_utils17 = __toESM(require_utils());
  var ownerWindow_default = import_utils17.unstable_ownerWindow;

  // node_modules/@mui/material/esm/utils/requirePropFactory.js
  var import_utils18 = __toESM(require_utils());
  var requirePropFactory_default = import_utils18.unstable_requirePropFactory;

  // node_modules/@mui/material/esm/utils/useEnhancedEffect.js
  var import_utils19 = __toESM(require_utils());
  var useEnhancedEffect_default = import_utils19.unstable_useEnhancedEffect;

  // node_modules/@mui/material/esm/Slide/Slide.js
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var _excluded16 = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getTranslateValue(direction, node, resolvedContainer) {
    const rect = node.getBoundingClientRect();
    const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
    const containerWindow = ownerWindow_default(node);
    let transform;
    if (node.fakeTransform) {
      transform = node.fakeTransform;
    } else {
      const computedStyle = containerWindow.getComputedStyle(node);
      transform = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
    }
    let offsetX = 0;
    let offsetY = 0;
    if (transform && transform !== "none" && typeof transform === "string") {
      const transformValues = transform.split("(")[1].split(")")[0].split(",");
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }
    if (direction === "left") {
      if (containerRect) {
        return `translateX(${containerRect.right + offsetX - rect.left}px)`;
      }
      return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
    }
    if (direction === "right") {
      if (containerRect) {
        return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
      }
      return `translateX(-${rect.left + rect.width - offsetX}px)`;
    }
    if (direction === "up") {
      if (containerRect) {
        return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
      }
      return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
    }
    if (containerRect) {
      return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
    }
    return `translateY(-${rect.top + rect.height - offsetY}px)`;
  }
  function resolveContainer(containerPropProp) {
    return typeof containerPropProp === "function" ? containerPropProp() : containerPropProp;
  }
  function setTranslateValue(direction, node, containerProp) {
    const resolvedContainer = resolveContainer(containerProp);
    const transform = getTranslateValue(direction, node, resolvedContainer);
    if (transform) {
      node.style.webkitTransform = transform;
      node.style.transform = transform;
    }
  }
  var Slide = /* @__PURE__ */ React20.forwardRef(function Slide2(props2, ref) {
    const theme2 = useTheme();
    const defaultEasing = {
      enter: theme2.transitions.easing.easeOut,
      exit: theme2.transitions.easing.sharp
    };
    const defaultTimeout = {
      enter: theme2.transitions.duration.enteringScreen,
      exit: theme2.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      container: containerProp,
      direction = "down",
      easing: easingProp = defaultEasing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style2,
      timeout: timeout2 = defaultTimeout,
      TransitionComponent = Transition_default
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded16);
    const childrenRef = React20.useRef(null);
    const handleRef = useForkRef_default(children.ref, childrenRef, ref);
    const normalizedTransitionCallback = (callback) => (isAppearing) => {
      if (callback) {
        if (isAppearing === void 0) {
          callback(childrenRef.current);
        } else {
          callback(childrenRef.current, isAppearing);
        }
      }
    };
    const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
      setTranslateValue(direction, node, containerProp);
      reflow(node);
      if (onEnter) {
        onEnter(node, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
      const transitionProps = getTransitionProps({
        timeout: timeout2,
        style: style2,
        easing: easingProp
      }, {
        mode: "enter"
      });
      node.style.webkitTransition = theme2.transitions.create("-webkit-transform", _extends({}, transitionProps));
      node.style.transition = theme2.transitions.create("transform", _extends({}, transitionProps));
      node.style.webkitTransform = "none";
      node.style.transform = "none";
      if (onEntering) {
        onEntering(node, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node) => {
      const transitionProps = getTransitionProps({
        timeout: timeout2,
        style: style2,
        easing: easingProp
      }, {
        mode: "exit"
      });
      node.style.webkitTransition = theme2.transitions.create("-webkit-transform", transitionProps);
      node.style.transition = theme2.transitions.create("transform", transitionProps);
      setTranslateValue(direction, node, containerProp);
      if (onExit) {
        onExit(node);
      }
    });
    const handleExited = normalizedTransitionCallback((node) => {
      node.style.webkitTransition = "";
      node.style.transition = "";
      if (onExited) {
        onExited(node);
      }
    });
    const handleAddEndListener = (next) => {
      if (addEndListener) {
        addEndListener(childrenRef.current, next);
      }
    };
    const updatePosition = React20.useCallback(() => {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current, containerProp);
      }
    }, [direction, containerProp]);
    React20.useEffect(() => {
      if (inProp || direction === "down" || direction === "right") {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current, containerProp);
        }
      });
      const containerWindow = ownerWindow_default(childrenRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [direction, inProp, containerProp]);
    React20.useEffect(() => {
      if (!inProp) {
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TransitionComponent, _extends({
      nodeRef: childrenRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      appear,
      in: inProp,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React20.cloneElement(children, _extends({
          ref: handleRef,
          style: _extends({
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, style2, children.props.style)
        }, childProps));
      }
    }));
  });
  true ? Slide.propTypes = {
    addEndListener: import_prop_types20.default.func,
    appear: import_prop_types20.default.bool,
    children: import_utils20.elementAcceptingRef.isRequired,
    container: (0, import_utils20.chainPropTypes)(import_prop_types20.default.oneOfType([import_utils20.HTMLElementType, import_prop_types20.default.func]), (props2) => {
      if (props2.open) {
        const resolvedContainer = resolveContainer(props2.container);
        if (resolvedContainer && resolvedContainer.nodeType === 1) {
          const box = resolvedContainer.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== "function" || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join("\n"));
        }
      }
      return null;
    }),
    direction: import_prop_types20.default.oneOf(["down", "left", "right", "up"]),
    easing: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      enter: import_prop_types20.default.string,
      exit: import_prop_types20.default.string
    }), import_prop_types20.default.string]),
    in: import_prop_types20.default.bool,
    onEnter: import_prop_types20.default.func,
    onEntered: import_prop_types20.default.func,
    onEntering: import_prop_types20.default.func,
    onExit: import_prop_types20.default.func,
    onExited: import_prop_types20.default.func,
    onExiting: import_prop_types20.default.func,
    style: import_prop_types20.default.object,
    timeout: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      appear: import_prop_types20.default.number,
      enter: import_prop_types20.default.number,
      exit: import_prop_types20.default.number
    })])
  } : void 0;
  var Slide_default = Slide;

  // node_modules/@mui/material/esm/Drawer/drawerClasses.js
  var import_base18 = __toESM(require_node3());
  function getDrawerUtilityClass(slot) {
    return (0, import_base18.generateUtilityClass)("MuiDrawer", slot);
  }
  var drawerClasses = (0, import_base18.generateUtilityClasses)("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]);

  // node_modules/@mui/material/esm/Drawer/Drawer.js
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var _excluded17 = ["BackdropProps"];
  var _excluded22 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
  var overridesResolver = (props2, styles3) => {
    const {
      ownerState
    } = props2;
    return [styles3.root, (ownerState.variant === "permanent" || ownerState.variant === "persistent") && styles3.docked, styles3.modal];
  };
  var useUtilityClasses9 = (ownerState) => {
    const {
      classes,
      anchor,
      variant
    } = ownerState;
    const slots = {
      root: ["root"],
      docked: [(variant === "permanent" || variant === "persistent") && "docked"],
      modal: ["modal"],
      paper: ["paper", `paperAnchor${capitalize_default(anchor)}`, variant !== "temporary" && `paperAnchorDocked${capitalize_default(anchor)}`]
    };
    return (0, import_base19.unstable_composeClasses)(slots, getDrawerUtilityClass, classes);
  };
  var DrawerRoot = styled_default(Modal_default, {
    name: "MuiDrawer",
    slot: "Root",
    overridesResolver
  })(({
    theme: theme2
  }) => ({
    zIndex: (theme2.vars || theme2).zIndex.drawer
  }));
  var DrawerDockedRoot = styled_default("div", {
    shouldForwardProp: rootShouldForwardProp,
    name: "MuiDrawer",
    slot: "Docked",
    skipVariantsResolver: false,
    overridesResolver
  })({
    flex: "0 0 auto"
  });
  var DrawerPaper = styled_default(Paper_default, {
    name: "MuiDrawer",
    slot: "Paper",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.paper, styles3[`paperAnchor${capitalize_default(ownerState.anchor)}`], ownerState.variant !== "temporary" && styles3[`paperAnchorDocked${capitalize_default(ownerState.anchor)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    overflowY: "auto",
    display: "flex",
    flexDirection: "column",
    height: "100%",
    flex: "1 0 auto",
    zIndex: (theme2.vars || theme2).zIndex.drawer,
    WebkitOverflowScrolling: "touch",
    position: "fixed",
    top: 0,
    outline: 0
  }, ownerState.anchor === "left" && {
    left: 0
  }, ownerState.anchor === "top" && {
    top: 0,
    left: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "right" && {
    right: 0
  }, ownerState.anchor === "bottom" && {
    top: "auto",
    left: 0,
    bottom: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "left" && ownerState.variant !== "temporary" && {
    borderRight: `1px solid ${(theme2.vars || theme2).palette.divider}`
  }, ownerState.anchor === "top" && ownerState.variant !== "temporary" && {
    borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`
  }, ownerState.anchor === "right" && ownerState.variant !== "temporary" && {
    borderLeft: `1px solid ${(theme2.vars || theme2).palette.divider}`
  }, ownerState.anchor === "bottom" && ownerState.variant !== "temporary" && {
    borderTop: `1px solid ${(theme2.vars || theme2).palette.divider}`
  }));
  var oppositeDirection = {
    left: "right",
    right: "left",
    top: "down",
    bottom: "up"
  };
  function isHorizontal(anchor) {
    return ["left", "right"].indexOf(anchor) !== -1;
  }
  function getAnchor(theme2, anchor) {
    return theme2.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
  }
  var Drawer = /* @__PURE__ */ React21.forwardRef(function Drawer2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiDrawer"
    });
    const theme2 = useTheme();
    const defaultTransitionDuration = {
      enter: theme2.transitions.duration.enteringScreen,
      exit: theme2.transitions.duration.leavingScreen
    };
    const {
      anchor: anchorProp = "left",
      BackdropProps,
      children,
      className,
      elevation = 16,
      hideBackdrop = false,
      ModalProps: {
        BackdropProps: BackdropPropsProp
      } = {},
      onClose,
      open = false,
      PaperProps = {},
      SlideProps,
      TransitionComponent = Slide_default,
      transitionDuration = defaultTransitionDuration,
      variant = "temporary"
    } = props2, ModalProps = _objectWithoutPropertiesLoose(props2.ModalProps, _excluded17), other = _objectWithoutPropertiesLoose(props2, _excluded22);
    const mounted = React21.useRef(false);
    React21.useEffect(() => {
      mounted.current = true;
    }, []);
    const anchorInvariant = getAnchor(theme2, anchorProp);
    const anchor = anchorProp;
    const ownerState = _extends({}, props2, {
      anchor,
      elevation,
      open,
      variant
    }, other);
    const classes = useUtilityClasses9(ownerState);
    const drawer = /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(DrawerPaper, _extends({
      elevation: variant === "temporary" ? elevation : 0,
      square: true
    }, PaperProps, {
      className: (0, import_clsx11.default)(classes.paper, PaperProps.className),
      ownerState,
      children
    }));
    if (variant === "permanent") {
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(DrawerDockedRoot, _extends({
        className: (0, import_clsx11.default)(classes.root, classes.docked, className),
        ownerState,
        ref
      }, other, {
        children: drawer
      }));
    }
    const slidingDrawer = /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(TransitionComponent, _extends({
      in: open,
      direction: oppositeDirection[anchorInvariant],
      timeout: transitionDuration,
      appear: mounted.current
    }, SlideProps, {
      children: drawer
    }));
    if (variant === "persistent") {
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(DrawerDockedRoot, _extends({
        className: (0, import_clsx11.default)(classes.root, classes.docked, className),
        ownerState,
        ref
      }, other, {
        children: slidingDrawer
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(DrawerRoot, _extends({
      BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
        transitionDuration
      }),
      className: (0, import_clsx11.default)(classes.root, classes.modal, className),
      open,
      ownerState,
      onClose,
      hideBackdrop,
      ref
    }, other, ModalProps, {
      children: slidingDrawer
    }));
  });
  true ? Drawer.propTypes = {
    anchor: import_prop_types21.default.oneOf(["bottom", "left", "right", "top"]),
    BackdropProps: import_prop_types21.default.object,
    children: import_prop_types21.default.node,
    classes: import_prop_types21.default.object,
    className: import_prop_types21.default.string,
    elevation: import_utils23.integerPropType,
    hideBackdrop: import_prop_types21.default.bool,
    ModalProps: import_prop_types21.default.object,
    onClose: import_prop_types21.default.func,
    open: import_prop_types21.default.bool,
    PaperProps: import_prop_types21.default.object,
    SlideProps: import_prop_types21.default.object,
    sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object]),
    transitionDuration: import_prop_types21.default.oneOfType([import_prop_types21.default.number, import_prop_types21.default.shape({
      appear: import_prop_types21.default.number,
      enter: import_prop_types21.default.number,
      exit: import_prop_types21.default.number
    })]),
    variant: import_prop_types21.default.oneOf(["permanent", "persistent", "temporary"])
  } : void 0;
  var Drawer_default = Drawer;

  // node_modules/@mui/material/esm/List/List.js
  var React23 = __toESM(require_react());
  var import_prop_types22 = __toESM(require_prop_types());
  var import_clsx12 = __toESM(require_clsx());
  var import_base21 = __toESM(require_node3());

  // node_modules/@mui/material/esm/List/ListContext.js
  var React22 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React22.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@mui/material/esm/List/listClasses.js
  var import_base20 = __toESM(require_node3());
  function getListUtilityClass(slot) {
    return (0, import_base20.generateUtilityClass)("MuiList", slot);
  }
  var listClasses = (0, import_base20.generateUtilityClasses)("MuiList", ["root", "padding", "dense", "subheader"]);

  // node_modules/@mui/material/esm/List/List.js
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var _excluded18 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  var useUtilityClasses10 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return (0, import_base21.unstable_composeClasses)(slots, getListUtilityClass, classes);
  };
  var ListRoot = styled_default("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, !ownerState.disablePadding && styles3.padding, ownerState.dense && styles3.dense, ownerState.subheader && styles3.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  var List = /* @__PURE__ */ React23.forwardRef(function List2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded18);
    const context = React23.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props2, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses10(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(ListRoot, _extends({
        as: component,
        className: (0, import_clsx12.default)(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  true ? List.propTypes = {
    children: import_prop_types22.default.node,
    classes: import_prop_types22.default.object,
    className: import_prop_types22.default.string,
    component: import_prop_types22.default.elementType,
    dense: import_prop_types22.default.bool,
    disablePadding: import_prop_types22.default.bool,
    subheader: import_prop_types22.default.node,
    sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object])
  } : void 0;
  var List_default = List;

  // node_modules/@mui/material/esm/Divider/Divider.js
  var React24 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());
  var import_clsx13 = __toESM(require_clsx());
  var import_base23 = __toESM(require_node3());
  var import_system14 = __toESM(require_system());

  // node_modules/@mui/material/esm/Divider/dividerClasses.js
  var import_base22 = __toESM(require_node3());
  function getDividerUtilityClass(slot) {
    return (0, import_base22.generateUtilityClass)("MuiDivider", slot);
  }
  var dividerClasses = (0, import_base22.generateUtilityClasses)("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);

  // node_modules/@mui/material/esm/Divider/Divider.js
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var _excluded19 = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
  var useUtilityClasses11 = (ownerState) => {
    const {
      absolute,
      children,
      classes,
      flexItem,
      light: light2,
      orientation,
      textAlign,
      variant
    } = ownerState;
    const slots = {
      root: ["root", absolute && "absolute", variant, light2 && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign === "right" && orientation !== "vertical" && "textAlignRight", textAlign === "left" && orientation !== "vertical" && "textAlignLeft"],
      wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
    };
    return (0, import_base23.unstable_composeClasses)(slots, getDividerUtilityClass, classes);
  };
  var DividerRoot = styled_default("div", {
    name: "MuiDivider",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, ownerState.absolute && styles3.absolute, styles3[ownerState.variant], ownerState.light && styles3.light, ownerState.orientation === "vertical" && styles3.vertical, ownerState.flexItem && styles3.flexItem, ownerState.children && styles3.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles3.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles3.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles3.textAlignLeft];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    margin: 0,
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: "solid",
    borderColor: (theme2.vars || theme2).palette.divider,
    borderBottomWidth: "thin"
  }, ownerState.absolute && {
    position: "absolute",
    bottom: 0,
    left: 0,
    width: "100%"
  }, ownerState.light && {
    borderColor: theme2.vars ? `rgba(${theme2.vars.palette.dividerChannel} / 0.08)` : (0, import_system14.alpha)(theme2.palette.divider, 0.08)
  }, ownerState.variant === "inset" && {
    marginLeft: 72
  }, ownerState.variant === "middle" && ownerState.orientation === "horizontal" && {
    marginLeft: theme2.spacing(2),
    marginRight: theme2.spacing(2)
  }, ownerState.variant === "middle" && ownerState.orientation === "vertical" && {
    marginTop: theme2.spacing(1),
    marginBottom: theme2.spacing(1)
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    borderBottomWidth: 0,
    borderRightWidth: "thin"
  }, ownerState.flexItem && {
    alignSelf: "stretch",
    height: "auto"
  }), ({
    theme: theme2,
    ownerState
  }) => _extends({}, ownerState.children && {
    display: "flex",
    whiteSpace: "nowrap",
    textAlign: "center",
    border: 0,
    "&::before, &::after": {
      position: "relative",
      width: "100%",
      borderTop: `thin solid ${(theme2.vars || theme2).palette.divider}`,
      top: "50%",
      content: '""',
      transform: "translateY(50%)"
    }
  }), ({
    theme: theme2,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation === "vertical" && {
    flexDirection: "column",
    "&::before, &::after": {
      height: "100%",
      top: "0%",
      left: "50%",
      borderTop: 0,
      borderLeft: `thin solid ${(theme2.vars || theme2).palette.divider}`,
      transform: "translateX(0%)"
    }
  }), ({
    ownerState
  }) => _extends({}, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "90%"
    },
    "&::after": {
      width: "10%"
    }
  }, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "10%"
    },
    "&::after": {
      width: "90%"
    }
  }));
  var DividerWrapper = styled_default("span", {
    name: "MuiDivider",
    slot: "Wrapper",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.wrapper, ownerState.orientation === "vertical" && styles3.wrapperVertical];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "inline-block",
    paddingLeft: `calc(${theme2.spacing(1)} * 1.2)`,
    paddingRight: `calc(${theme2.spacing(1)} * 1.2)`
  }, ownerState.orientation === "vertical" && {
    paddingTop: `calc(${theme2.spacing(1)} * 1.2)`,
    paddingBottom: `calc(${theme2.spacing(1)} * 1.2)`
  }));
  var Divider = /* @__PURE__ */ React24.forwardRef(function Divider2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiDivider"
    });
    const {
      absolute = false,
      children,
      className,
      component = children ? "div" : "hr",
      flexItem = false,
      light: light2 = false,
      orientation = "horizontal",
      role = component !== "hr" ? "separator" : void 0,
      textAlign = "center",
      variant = "fullWidth"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded19);
    const ownerState = _extends({}, props2, {
      absolute,
      component,
      flexItem,
      light: light2,
      orientation,
      role,
      textAlign,
      variant
    });
    const classes = useUtilityClasses11(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(DividerRoot, _extends({
      as: component,
      className: (0, import_clsx13.default)(classes.root, className),
      role,
      ref,
      ownerState
    }, other, {
      children: children ? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(DividerWrapper, {
        className: classes.wrapper,
        ownerState,
        children
      }) : null
    }));
  });
  true ? Divider.propTypes = {
    absolute: import_prop_types23.default.bool,
    children: import_prop_types23.default.node,
    classes: import_prop_types23.default.object,
    className: import_prop_types23.default.string,
    component: import_prop_types23.default.elementType,
    flexItem: import_prop_types23.default.bool,
    light: import_prop_types23.default.bool,
    orientation: import_prop_types23.default.oneOf(["horizontal", "vertical"]),
    role: import_prop_types23.default.string,
    sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object]),
    textAlign: import_prop_types23.default.oneOf(["center", "left", "right"]),
    variant: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["fullWidth", "inset", "middle"]), import_prop_types23.default.string])
  } : void 0;
  var Divider_default = Divider;

  // src/website/drawer.tsx
  var import_Download = __toESM(require_Download());
  var import_ChevronLeft = __toESM(require_ChevronLeft());
  var import_BarChart = __toESM(require_BarChart());
  var import_LiveTv = __toESM(require_LiveTv());
  var import_Memory = __toESM(require_Memory());

  // src/website/drawerItem.tsx
  var React28 = __toESM(require_react());

  // node_modules/@mui/material/esm/ListItemButton/ListItemButton.js
  var React25 = __toESM(require_react());
  var import_prop_types24 = __toESM(require_prop_types());
  var import_clsx14 = __toESM(require_clsx());
  var import_base25 = __toESM(require_node3());
  var import_system15 = __toESM(require_system());

  // node_modules/@mui/material/esm/ListItemButton/listItemButtonClasses.js
  var import_base24 = __toESM(require_node3());
  function getListItemButtonUtilityClass(slot) {
    return (0, import_base24.generateUtilityClass)("MuiListItemButton", slot);
  }
  var listItemButtonClasses = (0, import_base24.generateUtilityClasses)("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
  var listItemButtonClasses_default = listItemButtonClasses;

  // node_modules/@mui/material/esm/ListItemButton/ListItemButton.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var _excluded20 = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"];
  var overridesResolver2 = (props2, styles3) => {
    const {
      ownerState
    } = props2;
    return [styles3.root, ownerState.dense && styles3.dense, ownerState.alignItems === "flex-start" && styles3.alignItemsFlexStart, ownerState.divider && styles3.divider, !ownerState.disableGutters && styles3.gutters];
  };
  var useUtilityClasses12 = (ownerState) => {
    const {
      alignItems,
      classes,
      dense,
      disabled,
      disableGutters,
      divider,
      selected
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", !disableGutters && "gutters", divider && "divider", disabled && "disabled", alignItems === "flex-start" && "alignItemsFlexStart", selected && "selected"]
    };
    const composedClasses = (0, import_base25.unstable_composeClasses)(slots, getListItemButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var ListItemButtonRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiListItemButton",
    slot: "Root",
    overridesResolver: overridesResolver2
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "flex",
    flexGrow: 1,
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minWidth: 0,
    boxSizing: "border-box",
    textAlign: "left",
    paddingTop: 8,
    paddingBottom: 8,
    transition: theme2.transitions.create("background-color", {
      duration: theme2.transitions.duration.shortest
    }),
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme2.vars || theme2).palette.action.hover,
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${listItemButtonClasses_default.selected}`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_system15.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity),
      [`&.${listItemButtonClasses_default.focusVisible}`]: {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.focusOpacity}))` : (0, import_system15.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.focusOpacity)
      }
    },
    [`&.${listItemButtonClasses_default.selected}:hover`]: {
      backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / calc(${theme2.vars.palette.action.selectedOpacity} + ${theme2.vars.palette.action.hoverOpacity}))` : (0, import_system15.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity + theme2.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.primary.mainChannel} / ${theme2.vars.palette.action.selectedOpacity})` : (0, import_system15.alpha)(theme2.palette.primary.main, theme2.palette.action.selectedOpacity)
      }
    },
    [`&.${listItemButtonClasses_default.focusVisible}`]: {
      backgroundColor: (theme2.vars || theme2).palette.action.focus
    },
    [`&.${listItemButtonClasses_default.disabled}`]: {
      opacity: (theme2.vars || theme2).palette.action.disabledOpacity
    }
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme2.vars || theme2).palette.divider}`,
    backgroundClip: "padding-box"
  }, ownerState.alignItems === "flex-start" && {
    alignItems: "flex-start"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }));
  var ListItemButton = /* @__PURE__ */ React25.forwardRef(function ListItemButton2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiListItemButton"
    });
    const {
      alignItems = "center",
      autoFocus = false,
      component = "div",
      children,
      dense = false,
      disableGutters = false,
      divider = false,
      focusVisibleClassName,
      selected = false,
      className
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded20);
    const context = React25.useContext(ListContext_default);
    const childContext = {
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    };
    const listItemRef = React25.useRef(null);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a ListItemButton whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props2, {
      alignItems,
      dense: childContext.dense,
      disableGutters,
      divider,
      selected
    });
    const classes = useUtilityClasses12(ownerState);
    const handleRef = useForkRef_default(listItemRef, ref);
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ListItemButtonRoot, _extends({
        ref: handleRef,
        href: other.href || other.to,
        component: (other.href || other.to) && component === "div" ? "a" : component,
        focusVisibleClassName: (0, import_clsx14.default)(classes.focusVisible, focusVisibleClassName),
        ownerState,
        className: (0, import_clsx14.default)(classes.root, className)
      }, other, {
        classes,
        children
      }))
    });
  });
  true ? ListItemButton.propTypes = {
    alignItems: import_prop_types24.default.oneOf(["center", "flex-start"]),
    autoFocus: import_prop_types24.default.bool,
    children: import_prop_types24.default.node,
    classes: import_prop_types24.default.object,
    className: import_prop_types24.default.string,
    component: import_prop_types24.default.elementType,
    dense: import_prop_types24.default.bool,
    disabled: import_prop_types24.default.bool,
    disableGutters: import_prop_types24.default.bool,
    divider: import_prop_types24.default.bool,
    focusVisibleClassName: import_prop_types24.default.string,
    href: import_prop_types24.default.string,
    selected: import_prop_types24.default.bool,
    sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object])
  } : void 0;
  var ListItemButton_default = ListItemButton;

  // node_modules/@mui/material/esm/ListItemIcon/ListItemIcon.js
  var React26 = __toESM(require_react());
  var import_prop_types25 = __toESM(require_prop_types());
  var import_clsx15 = __toESM(require_clsx());
  var import_base27 = __toESM(require_node3());

  // node_modules/@mui/material/esm/ListItemIcon/listItemIconClasses.js
  var import_base26 = __toESM(require_node3());
  function getListItemIconUtilityClass(slot) {
    return (0, import_base26.generateUtilityClass)("MuiListItemIcon", slot);
  }
  var listItemIconClasses = (0, import_base26.generateUtilityClasses)("MuiListItemIcon", ["root", "alignItemsFlexStart"]);

  // node_modules/@mui/material/esm/ListItemIcon/ListItemIcon.js
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var _excluded21 = ["className"];
  var useUtilityClasses13 = (ownerState) => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return (0, import_base27.unstable_composeClasses)(slots, getListItemIconUtilityClass, classes);
  };
  var ListItemIconRoot = styled_default("div", {
    name: "MuiListItemIcon",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, ownerState.alignItems === "flex-start" && styles3.alignItemsFlexStart];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    minWidth: 56,
    color: (theme2.vars || theme2).palette.action.active,
    flexShrink: 0,
    display: "inline-flex"
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  var ListItemIcon = /* @__PURE__ */ React26.forwardRef(function ListItemIcon2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiListItemIcon"
    });
    const {
      className
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded21);
    const context = React26.useContext(ListContext_default);
    const ownerState = _extends({}, props2, {
      alignItems: context.alignItems
    });
    const classes = useUtilityClasses13(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(ListItemIconRoot, _extends({
      className: (0, import_clsx15.default)(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemIcon.propTypes = {
    children: import_prop_types25.default.node,
    classes: import_prop_types25.default.object,
    className: import_prop_types25.default.string,
    sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object])
  } : void 0;
  var ListItemIcon_default = ListItemIcon;

  // node_modules/@mui/material/esm/ListItemText/ListItemText.js
  var React27 = __toESM(require_react());
  var import_prop_types26 = __toESM(require_prop_types());
  var import_clsx16 = __toESM(require_clsx());
  var import_base29 = __toESM(require_node3());

  // node_modules/@mui/material/esm/ListItemText/listItemTextClasses.js
  var import_base28 = __toESM(require_node3());
  function getListItemTextUtilityClass(slot) {
    return (0, import_base28.generateUtilityClass)("MuiListItemText", slot);
  }
  var listItemTextClasses = (0, import_base28.generateUtilityClasses)("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  var listItemTextClasses_default = listItemTextClasses;

  // node_modules/@mui/material/esm/ListItemText/ListItemText.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var _excluded23 = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
  var useUtilityClasses14 = (ownerState) => {
    const {
      classes,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
      primary: ["primary"],
      secondary: ["secondary"]
    };
    return (0, import_base29.unstable_composeClasses)(slots, getListItemTextUtilityClass, classes);
  };
  var ListItemTextRoot = styled_default("div", {
    name: "MuiListItemText",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [{
        [`& .${listItemTextClasses_default.primary}`]: styles3.primary
      }, {
        [`& .${listItemTextClasses_default.secondary}`]: styles3.secondary
      }, styles3.root, ownerState.inset && styles3.inset, ownerState.primary && ownerState.secondary && styles3.multiline, ownerState.dense && styles3.dense];
    }
  })(({
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4
  }, ownerState.primary && ownerState.secondary && {
    marginTop: 6,
    marginBottom: 6
  }, ownerState.inset && {
    paddingLeft: 56
  }));
  var ListItemText = /* @__PURE__ */ React27.forwardRef(function ListItemText2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiListItemText"
    });
    const {
      children,
      className,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded23);
    const {
      dense
    } = React27.useContext(ListContext_default);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = _extends({}, props2, {
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    });
    const classes = useUtilityClasses14(ownerState);
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Typography_default, _extends({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
        display: "block"
      }, primaryTypographyProps, {
        children: primary
      }));
    }
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Typography_default, _extends({
        variant: "body2",
        className: classes.secondary,
        color: "text.secondary",
        display: "block"
      }, secondaryTypographyProps, {
        children: secondary
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(ListItemTextRoot, _extends({
      className: (0, import_clsx16.default)(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [primary, secondary]
    }));
  });
  true ? ListItemText.propTypes = {
    children: import_prop_types26.default.node,
    classes: import_prop_types26.default.object,
    className: import_prop_types26.default.string,
    disableTypography: import_prop_types26.default.bool,
    inset: import_prop_types26.default.bool,
    primary: import_prop_types26.default.node,
    primaryTypographyProps: import_prop_types26.default.object,
    secondary: import_prop_types26.default.node,
    secondaryTypographyProps: import_prop_types26.default.object,
    sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object])
  } : void 0;
  var ListItemText_default = ListItemText;

  // src/website/drawerItem.tsx
  function DrawerItem(props2) {
    const { activeView, view, title, onChangeView, icon } = props2;
    return /* @__PURE__ */ React28.createElement(ListItemButton_default, {
      onClick: () => onChangeView(view),
      selected: view === activeView
    }, /* @__PURE__ */ React28.createElement(ListItemIcon_default, null, icon), /* @__PURE__ */ React28.createElement(ListItemText_default, {
      primary: title
    }));
  }

  // src/website/drawer.tsx
  var drawerWidth = 240;
  var DrawerElem = styled_default(Drawer_default, { shouldForwardProp: (prop) => prop !== "open" })(
    ({ theme: theme2, open }) => ({
      "& .MuiDrawer-paper": __spreadValues({
        position: "relative",
        whiteSpace: "nowrap",
        width: drawerWidth,
        transition: theme2.transitions.create("width", {
          easing: theme2.transitions.easing.sharp,
          duration: theme2.transitions.duration.enteringScreen
        }),
        boxSizing: "border-box"
      }, !open && {
        overflowX: "hidden",
        transition: theme2.transitions.create("width", {
          easing: theme2.transitions.easing.sharp,
          duration: theme2.transitions.duration.leavingScreen
        }),
        width: theme2.spacing(7),
        [theme2.breakpoints.up("sm")]: {
          width: theme2.spacing(9)
        }
      })
    })
  );
  function Drawer3(props2) {
    const { open, toggleDrawer, onChangeView, view } = props2;
    return /* @__PURE__ */ React29.createElement(DrawerElem, {
      variant: "permanent",
      open
    }, /* @__PURE__ */ React29.createElement(Toolbar_default, {
      sx: {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-end",
        px: [1]
      }
    }, /* @__PURE__ */ React29.createElement(IconButton_default, {
      onClick: toggleDrawer
    }, /* @__PURE__ */ React29.createElement(import_ChevronLeft.default, null))), /* @__PURE__ */ React29.createElement(Divider_default, null), /* @__PURE__ */ React29.createElement(List_default, {
      component: "nav"
    }, /* @__PURE__ */ React29.createElement(DrawerItem, {
      title: "Live",
      view: "live",
      onChangeView,
      activeView: view,
      icon: /* @__PURE__ */ React29.createElement(import_LiveTv.default, null)
    }), /* @__PURE__ */ React29.createElement(DrawerItem, {
      title: "Historie",
      view: "graph",
      onChangeView,
      activeView: view,
      icon: /* @__PURE__ */ React29.createElement(import_BarChart.default, null)
    }), /* @__PURE__ */ React29.createElement(DrawerItem, {
      title: "Download",
      view: "download",
      onChangeView,
      activeView: view,
      icon: /* @__PURE__ */ React29.createElement(import_Download.default, null)
    }), /* @__PURE__ */ React29.createElement(Divider_default, {
      sx: { my: 1 }
    }), /* @__PURE__ */ React29.createElement(DrawerItem, {
      title: "System",
      view: "system",
      onChangeView,
      activeView: view,
      icon: /* @__PURE__ */ React29.createElement(import_Memory.default, null)
    })));
  }

  // src/website/appBar.tsx
  var AppBarElem = styled_default(AppBar_default, {
    shouldForwardProp: (prop) => prop !== "open"
  })(({ theme: theme2, open }) => __spreadValues({
    zIndex: theme2.zIndex.drawer + 1,
    transition: theme2.transitions.create(["width", "margin"], {
      easing: theme2.transitions.easing.sharp,
      duration: theme2.transitions.duration.leavingScreen
    })
  }, open && {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme2.transitions.create(["width", "margin"], {
      easing: theme2.transitions.easing.sharp,
      duration: theme2.transitions.duration.enteringScreen
    })
  }));
  function AppBar3(props2) {
    const { open, toggleDrawer } = props2;
    return /* @__PURE__ */ React30.createElement(AppBarElem, {
      position: "absolute",
      open
    }, /* @__PURE__ */ React30.createElement(Toolbar_default, {
      sx: {
        pr: "24px"
      }
    }, /* @__PURE__ */ React30.createElement(IconButton_default, {
      edge: "start",
      color: "inherit",
      "aria-label": "open drawer",
      onClick: toggleDrawer,
      sx: __spreadValues({
        marginRight: "36px"
      }, open && { display: "none" })
    }, /* @__PURE__ */ React30.createElement(import_Menu.default, null)), /* @__PURE__ */ React30.createElement(Typography_default, {
      component: "h1",
      variant: "h6",
      color: "inherit",
      noWrap: true,
      sx: { flexGrow: 1 }
    }, "Dashboard")));
  }

  // src/website/main.tsx
  var React56 = __toESM(require_react());

  // src/website/live.tsx
  var React39 = __toESM(require_react());

  // node_modules/@mui/material/esm/Grid/Grid.js
  var React32 = __toESM(require_react());
  var import_prop_types27 = __toESM(require_prop_types());
  var import_clsx17 = __toESM(require_clsx());
  var import_system16 = __toESM(require_system());
  var import_base31 = __toESM(require_node3());

  // node_modules/@mui/material/esm/Grid/GridContext.js
  var React31 = __toESM(require_react());
  var GridContext = /* @__PURE__ */ React31.createContext();
  if (true) {
    GridContext.displayName = "GridContext";
  }
  var GridContext_default = GridContext;

  // node_modules/@mui/material/esm/Grid/gridClasses.js
  var import_base30 = __toESM(require_node3());
  function getGridUtilityClass(slot) {
    return (0, import_base30.generateUtilityClass)("MuiGrid", slot);
  }
  var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
  var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var gridClasses = (0, import_base30.generateUtilityClasses)("MuiGrid", [
    "root",
    "container",
    "item",
    "zeroMinWidth",
    ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
    ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
    ...WRAPS.map((wrap2) => `wrap-xs-${wrap2}`),
    ...GRID_SIZES.map((size) => `grid-xs-${size}`),
    ...GRID_SIZES.map((size) => `grid-sm-${size}`),
    ...GRID_SIZES.map((size) => `grid-md-${size}`),
    ...GRID_SIZES.map((size) => `grid-lg-${size}`),
    ...GRID_SIZES.map((size) => `grid-xl-${size}`)
  ]);
  var gridClasses_default = gridClasses;

  // node_modules/@mui/material/esm/Grid/Grid.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var _excluded24 = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
  function getOffset(val) {
    const parse = parseFloat(val);
    return `${parse}${String(val).replace(String(parse), "") || "px"}`;
  }
  function generateGrid({
    theme: theme2,
    ownerState
  }) {
    let size;
    return theme2.breakpoints.keys.reduce((globalStyles, breakpoint) => {
      let styles3 = {};
      if (ownerState[breakpoint]) {
        size = ownerState[breakpoint];
      }
      if (!size) {
        return globalStyles;
      }
      if (size === true) {
        styles3 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      } else if (size === "auto") {
        styles3 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      } else {
        const columnsBreakpointValues = (0, import_system16.unstable_resolveBreakpointValues)({
          values: ownerState.columns,
          breakpoints: theme2.breakpoints.values
        });
        const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
        if (columnValue === void 0 || columnValue === null) {
          return globalStyles;
        }
        const width = `${Math.round(size / columnValue * 1e8) / 1e6}%`;
        let more = {};
        if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
          const themeSpacing = theme2.spacing(ownerState.columnSpacing);
          if (themeSpacing !== "0px") {
            const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;
            more = {
              flexBasis: fullWidth,
              maxWidth: fullWidth
            };
          }
        }
        styles3 = _extends({
          flexBasis: width,
          flexGrow: 0,
          maxWidth: width
        }, more);
      }
      if (theme2.breakpoints.values[breakpoint] === 0) {
        Object.assign(globalStyles, styles3);
      } else {
        globalStyles[theme2.breakpoints.up(breakpoint)] = styles3;
      }
      return globalStyles;
    }, {});
  }
  function generateDirection({
    theme: theme2,
    ownerState
  }) {
    const directionValues = (0, import_system16.unstable_resolveBreakpointValues)({
      values: ownerState.direction,
      breakpoints: theme2.breakpoints.values
    });
    return (0, import_system16.handleBreakpoints)({
      theme: theme2
    }, directionValues, (propValue) => {
      const output = {
        flexDirection: propValue
      };
      if (propValue.indexOf("column") === 0) {
        output[`& > .${gridClasses_default.item}`] = {
          maxWidth: "none"
        };
      }
      return output;
    });
  }
  function extractZeroValueBreakpointKeys({
    breakpoints,
    values: values2
  }) {
    let nonZeroKey = "";
    Object.keys(values2).forEach((key) => {
      if (nonZeroKey !== "") {
        return;
      }
      if (values2[key] !== 0) {
        nonZeroKey = key;
      }
    });
    const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {
      return breakpoints[a] - breakpoints[b];
    });
    return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
  }
  function generateRowGap({
    theme: theme2,
    ownerState
  }) {
    const {
      container: container2,
      rowSpacing
    } = ownerState;
    let styles3 = {};
    if (container2 && rowSpacing !== 0) {
      const rowSpacingValues = (0, import_system16.unstable_resolveBreakpointValues)({
        values: rowSpacing,
        breakpoints: theme2.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof rowSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme2.breakpoints.values,
          values: rowSpacingValues
        });
      }
      styles3 = (0, import_system16.handleBreakpoints)({
        theme: theme2
      }, rowSpacingValues, (propValue, breakpoint) => {
        var _zeroValueBreakpointK;
        const themeSpacing = theme2.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            marginTop: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingTop: getOffset(themeSpacing)
            }
          };
        }
        if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
          return {};
        }
        return {
          marginTop: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingTop: 0
          }
        };
      });
    }
    return styles3;
  }
  function generateColumnGap({
    theme: theme2,
    ownerState
  }) {
    const {
      container: container2,
      columnSpacing
    } = ownerState;
    let styles3 = {};
    if (container2 && columnSpacing !== 0) {
      const columnSpacingValues = (0, import_system16.unstable_resolveBreakpointValues)({
        values: columnSpacing,
        breakpoints: theme2.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof columnSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme2.breakpoints.values,
          values: columnSpacingValues
        });
      }
      styles3 = (0, import_system16.handleBreakpoints)({
        theme: theme2
      }, columnSpacingValues, (propValue, breakpoint) => {
        var _zeroValueBreakpointK2;
        const themeSpacing = theme2.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            width: `calc(100% + ${getOffset(themeSpacing)})`,
            marginLeft: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingLeft: getOffset(themeSpacing)
            }
          };
        }
        if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
          return {};
        }
        return {
          width: "100%",
          marginLeft: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingLeft: 0
          }
        };
      });
    }
    return styles3;
  }
  function resolveSpacingStyles(spacing, breakpoints, styles3 = {}) {
    if (!spacing || spacing <= 0) {
      return [];
    }
    if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
      return [styles3[`spacing-xs-${String(spacing)}`]];
    }
    const spacingStyles = [];
    breakpoints.forEach((breakpoint) => {
      const value = spacing[breakpoint];
      if (Number(value) > 0) {
        spacingStyles.push(styles3[`spacing-${breakpoint}-${String(value)}`]);
      }
    });
    return spacingStyles;
  }
  var GridRoot = styled_default("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      const {
        container: container2,
        direction,
        item,
        spacing,
        wrap: wrap2,
        zeroMinWidth,
        breakpoints
      } = ownerState;
      let spacingStyles = [];
      if (container2) {
        spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles3);
      }
      const breakpointsStyles = [];
      breakpoints.forEach((breakpoint) => {
        const value = ownerState[breakpoint];
        if (value) {
          breakpointsStyles.push(styles3[`grid-${breakpoint}-${String(value)}`]);
        }
      });
      return [styles3.root, container2 && styles3.container, item && styles3.item, zeroMinWidth && styles3.zeroMinWidth, ...spacingStyles, direction !== "row" && styles3[`direction-xs-${String(direction)}`], wrap2 !== "wrap" && styles3[`wrap-xs-${String(wrap2)}`], ...breakpointsStyles];
    }
  })(({
    ownerState
  }) => _extends({
    boxSizing: "border-box"
  }, ownerState.container && {
    display: "flex",
    flexWrap: "wrap",
    width: "100%"
  }, ownerState.item && {
    margin: 0
  }, ownerState.zeroMinWidth && {
    minWidth: 0
  }, ownerState.wrap !== "wrap" && {
    flexWrap: ownerState.wrap
  }), generateDirection, generateRowGap, generateColumnGap, generateGrid);
  function resolveSpacingClasses(spacing, breakpoints) {
    if (!spacing || spacing <= 0) {
      return [];
    }
    if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
      return [`spacing-xs-${String(spacing)}`];
    }
    const classes = [];
    breakpoints.forEach((breakpoint) => {
      const value = spacing[breakpoint];
      if (Number(value) > 0) {
        const className = `spacing-${breakpoint}-${String(value)}`;
        classes.push(className);
      }
    });
    return classes;
  }
  var useUtilityClasses15 = (ownerState) => {
    const {
      classes,
      container: container2,
      direction,
      item,
      spacing,
      wrap: wrap2,
      zeroMinWidth,
      breakpoints
    } = ownerState;
    let spacingClasses = [];
    if (container2) {
      spacingClasses = resolveSpacingClasses(spacing, breakpoints);
    }
    const breakpointsClasses = [];
    breakpoints.forEach((breakpoint) => {
      const value = ownerState[breakpoint];
      if (value) {
        breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
      }
    });
    const slots = {
      root: ["root", container2 && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...spacingClasses, direction !== "row" && `direction-xs-${String(direction)}`, wrap2 !== "wrap" && `wrap-xs-${String(wrap2)}`, ...breakpointsClasses]
    };
    return (0, import_base31.unstable_composeClasses)(slots, getGridUtilityClass, classes);
  };
  var Grid = /* @__PURE__ */ React32.forwardRef(function Grid2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiGrid"
    });
    const {
      breakpoints
    } = useTheme();
    const props2 = (0, import_system16.unstable_extendSxProp)(themeProps);
    const {
      className,
      columns: columnsProp,
      columnSpacing: columnSpacingProp,
      component = "div",
      container: container2 = false,
      direction = "row",
      item = false,
      rowSpacing: rowSpacingProp,
      spacing = 0,
      wrap: wrap2 = "wrap",
      zeroMinWidth = false
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded24);
    const rowSpacing = rowSpacingProp || spacing;
    const columnSpacing = columnSpacingProp || spacing;
    const columnsContext = React32.useContext(GridContext_default);
    const columns = container2 ? columnsProp || 12 : columnsContext;
    const breakpointsValues = {};
    const otherFiltered = _extends({}, other);
    breakpoints.keys.forEach((breakpoint) => {
      if (other[breakpoint] != null) {
        breakpointsValues[breakpoint] = other[breakpoint];
        delete otherFiltered[breakpoint];
      }
    });
    const ownerState = _extends({}, props2, {
      columns,
      container: container2,
      direction,
      item,
      rowSpacing,
      columnSpacing,
      wrap: wrap2,
      zeroMinWidth,
      spacing
    }, breakpointsValues, {
      breakpoints: breakpoints.keys
    });
    const classes = useUtilityClasses15(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(GridContext_default.Provider, {
      value: columns,
      children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(GridRoot, _extends({
        ownerState,
        className: (0, import_clsx17.default)(classes.root, className),
        as: component,
        ref
      }, otherFiltered))
    });
  });
  true ? Grid.propTypes = {
    children: import_prop_types27.default.node,
    classes: import_prop_types27.default.object,
    className: import_prop_types27.default.string,
    columns: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.number), import_prop_types27.default.number, import_prop_types27.default.object]),
    columnSpacing: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string])), import_prop_types27.default.number, import_prop_types27.default.object, import_prop_types27.default.string]),
    component: import_prop_types27.default.elementType,
    container: import_prop_types27.default.bool,
    direction: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types27.default.arrayOf(import_prop_types27.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types27.default.object]),
    item: import_prop_types27.default.bool,
    lg: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["auto"]), import_prop_types27.default.number, import_prop_types27.default.bool]),
    md: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["auto"]), import_prop_types27.default.number, import_prop_types27.default.bool]),
    rowSpacing: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string])), import_prop_types27.default.number, import_prop_types27.default.object, import_prop_types27.default.string]),
    sm: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["auto"]), import_prop_types27.default.number, import_prop_types27.default.bool]),
    spacing: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.string])), import_prop_types27.default.number, import_prop_types27.default.object, import_prop_types27.default.string]),
    sx: import_prop_types27.default.oneOfType([import_prop_types27.default.arrayOf(import_prop_types27.default.oneOfType([import_prop_types27.default.func, import_prop_types27.default.object, import_prop_types27.default.bool])), import_prop_types27.default.func, import_prop_types27.default.object]),
    wrap: import_prop_types27.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    xl: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["auto"]), import_prop_types27.default.number, import_prop_types27.default.bool]),
    xs: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["auto"]), import_prop_types27.default.number, import_prop_types27.default.bool]),
    zeroMinWidth: import_prop_types27.default.bool
  } : void 0;
  if (true) {
    const requireProp = requirePropFactory_default("Grid", Grid);
    Grid["propTypes"] = _extends({}, Grid.propTypes, {
      direction: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    });
  }
  var Grid_default = Grid;

  // node_modules/@mui/material/esm/CircularProgress/CircularProgress.js
  var React33 = __toESM(require_react());
  var import_prop_types28 = __toESM(require_prop_types());
  var import_clsx18 = __toESM(require_clsx());
  var import_utils24 = __toESM(require_utils());
  var import_base33 = __toESM(require_node3());
  var import_system17 = __toESM(require_system());

  // node_modules/@mui/material/esm/CircularProgress/circularProgressClasses.js
  var import_base32 = __toESM(require_node3());
  function getCircularProgressUtilityClass(slot) {
    return (0, import_base32.generateUtilityClass)("MuiCircularProgress", slot);
  }
  var circularProgressClasses = (0, import_base32.generateUtilityClasses)("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);

  // node_modules/@mui/material/esm/CircularProgress/CircularProgress.js
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var _excluded25 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
  var _2 = (t) => t;
  var _t5;
  var _t22;
  var _t32;
  var _t42;
  var SIZE = 44;
  var circularRotateKeyframe = (0, import_system17.keyframes)(_t5 || (_t5 = _2`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
  var circularDashKeyframe = (0, import_system17.keyframes)(_t22 || (_t22 = _2`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
  var useUtilityClasses16 = (ownerState) => {
    const {
      classes,
      variant,
      color,
      disableShrink
    } = ownerState;
    const slots = {
      root: ["root", variant, `color${capitalize_default(color)}`],
      svg: ["svg"],
      circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
    };
    return (0, import_base33.unstable_composeClasses)(slots, getCircularProgressUtilityClass, classes);
  };
  var CircularProgressRoot = styled_default("span", {
    name: "MuiCircularProgress",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, styles3[ownerState.variant], styles3[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme: theme2
  }) => _extends({
    display: "inline-block"
  }, ownerState.variant === "determinate" && {
    transition: theme2.transitions.create("transform")
  }, ownerState.color !== "inherit" && {
    color: (theme2.vars || theme2).palette[ownerState.color].main
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && (0, import_system17.css)(_t32 || (_t32 = _2`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
  var CircularProgressSVG = styled_default("svg", {
    name: "MuiCircularProgress",
    slot: "Svg",
    overridesResolver: (props2, styles3) => styles3.svg
  })({
    display: "block"
  });
  var CircularProgressCircle = styled_default("circle", {
    name: "MuiCircularProgress",
    slot: "Circle",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.circle, styles3[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles3.circleDisableShrink];
    }
  })(({
    ownerState,
    theme: theme2
  }) => _extends({
    stroke: "currentColor"
  }, ownerState.variant === "determinate" && {
    transition: theme2.transitions.create("stroke-dashoffset")
  }, ownerState.variant === "indeterminate" && {
    strokeDasharray: "80px, 200px",
    strokeDashoffset: 0
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && (0, import_system17.css)(_t42 || (_t42 = _2`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
  var CircularProgress = /* @__PURE__ */ React33.forwardRef(function CircularProgress2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiCircularProgress"
    });
    const {
      className,
      color = "primary",
      disableShrink = false,
      size = 40,
      style: style2,
      thickness = 3.6,
      value = 0,
      variant = "indeterminate"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded25);
    const ownerState = _extends({}, props2, {
      color,
      disableShrink,
      size,
      thickness,
      value,
      variant
    });
    const classes = useUtilityClasses16(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === "determinate") {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = "rotate(-90deg)";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(CircularProgressRoot, _extends({
      className: (0, import_clsx18.default)(classes.root, className),
      style: _extends({
        width: size,
        height: size
      }, rootStyle, style2),
      ownerState,
      ref,
      role: "progressbar"
    }, rootProps, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(CircularProgressSVG, {
        className: classes.svg,
        ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(CircularProgressCircle, {
          className: classes.circle,
          style: circleStyle,
          ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    }));
  });
  true ? CircularProgress.propTypes = {
    classes: import_prop_types28.default.object,
    className: import_prop_types28.default.string,
    color: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types28.default.string]),
    disableShrink: (0, import_utils24.chainPropTypes)(import_prop_types28.default.bool, (props2) => {
      if (props2.disableShrink && props2.variant && props2.variant !== "indeterminate") {
        return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    size: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.string]),
    style: import_prop_types28.default.object,
    sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object]),
    thickness: import_prop_types28.default.number,
    value: import_prop_types28.default.number,
    variant: import_prop_types28.default.oneOf(["determinate", "indeterminate"])
  } : void 0;
  var CircularProgress_default = CircularProgress;

  // node_modules/@mui/material/esm/FormLabel/FormLabel.js
  var React36 = __toESM(require_react());
  var import_prop_types29 = __toESM(require_prop_types());
  var import_clsx19 = __toESM(require_clsx());
  var import_base35 = __toESM(require_node3());

  // node_modules/@mui/material/esm/FormControl/formControlState.js
  function formControlState({
    props: props2,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props2[state];
      if (muiFormControl) {
        if (typeof props2[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/esm/FormControl/useFormControl.js
  var React35 = __toESM(require_react());

  // node_modules/@mui/material/esm/FormControl/FormControlContext.js
  var React34 = __toESM(require_react());
  var FormControlContext = /* @__PURE__ */ React34.createContext();
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@mui/material/esm/FormControl/useFormControl.js
  function useFormControl() {
    return React35.useContext(FormControlContext_default);
  }

  // node_modules/@mui/material/esm/FormLabel/formLabelClasses.js
  var import_base34 = __toESM(require_node3());
  function getFormLabelUtilityClasses(slot) {
    return (0, import_base34.generateUtilityClass)("MuiFormLabel", slot);
  }
  var formLabelClasses = (0, import_base34.generateUtilityClasses)("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // node_modules/@mui/material/esm/FormLabel/FormLabel.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var _excluded26 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  var useUtilityClasses17 = (ownerState) => {
    const {
      classes,
      color,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return (0, import_base35.unstable_composeClasses)(slots, getFormLabelUtilityClasses, classes);
  };
  var FormLabelRoot = styled_default("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles3) => {
      return _extends({}, styles3.root, ownerState.color === "secondary" && styles3.colorSecondary, ownerState.filled && styles3.filled);
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    color: (theme2.vars || theme2).palette.text.secondary
  }, theme2.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: (theme2.vars || theme2).palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: (theme2.vars || theme2).palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    }
  }));
  var AsteriskComponent = styled_default("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props2, styles3) => styles3.asterisk
  })(({
    theme: theme2
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme2.vars || theme2).palette.error.main
    }
  }));
  var FormLabel = /* @__PURE__ */ React36.forwardRef(function FormLabel2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded26);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props: props2,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props2, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses17(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: (0, import_clsx19.default)(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(AsteriskComponent, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", "*"]
      })]
    }));
  });
  true ? FormLabel.propTypes = {
    children: import_prop_types29.default.node,
    classes: import_prop_types29.default.object,
    className: import_prop_types29.default.string,
    color: import_prop_types29.default.oneOfType([import_prop_types29.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types29.default.string]),
    component: import_prop_types29.default.elementType,
    disabled: import_prop_types29.default.bool,
    error: import_prop_types29.default.bool,
    filled: import_prop_types29.default.bool,
    focused: import_prop_types29.default.bool,
    required: import_prop_types29.default.bool,
    sx: import_prop_types29.default.oneOfType([import_prop_types29.default.arrayOf(import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object, import_prop_types29.default.bool])), import_prop_types29.default.func, import_prop_types29.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // node_modules/@mui/material/esm/Slider/Slider.js
  var React37 = __toESM(require_react());
  var import_prop_types30 = __toESM(require_prop_types());
  var import_clsx20 = __toESM(require_clsx());
  var import_utils25 = __toESM(require_utils());
  var import_base37 = __toESM(require_node3());
  var import_SliderUnstyled = __toESM(require_SliderUnstyled2());
  var import_system18 = __toESM(require_system());

  // node_modules/@mui/material/esm/utils/shouldSpreadAdditionalProps.js
  var import_base36 = __toESM(require_node3());
  var shouldSpreadAdditionalProps = (Slot) => {
    return !Slot || !(0, import_base36.isHostComponent)(Slot);
  };
  var shouldSpreadAdditionalProps_default = shouldSpreadAdditionalProps;

  // node_modules/@mui/material/esm/Slider/Slider.js
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var _excluded27 = ["component", "components", "componentsProps", "color", "size"];
  var sliderClasses = _extends({}, import_SliderUnstyled.sliderUnstyledClasses, (0, import_base37.generateUtilityClasses)("MuiSlider", ["colorPrimary", "colorSecondary", "thumbColorPrimary", "thumbColorSecondary", "sizeSmall", "thumbSizeSmall"]));
  var SliderRoot = styled_default("span", {
    name: "MuiSlider",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, styles3[`color${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles3[`size${capitalize_default(ownerState.size)}`], ownerState.marked && styles3.marked, ownerState.orientation === "vertical" && styles3.vertical, ownerState.track === "inverted" && styles3.trackInverted, ownerState.track === false && styles3.trackFalse];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    borderRadius: 12,
    boxSizing: "content-box",
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    touchAction: "none",
    color: (theme2.vars || theme2).palette[ownerState.color].main,
    WebkitTapHighlightColor: "transparent"
  }, ownerState.orientation === "horizontal" && _extends({
    height: 4,
    width: "100%",
    padding: "13px 0",
    "@media (pointer: coarse)": {
      padding: "20px 0"
    }
  }, ownerState.size === "small" && {
    height: 2
  }, ownerState.marked && {
    marginBottom: 20
  }), ownerState.orientation === "vertical" && _extends({
    height: "100%",
    width: 4,
    padding: "0 13px",
    "@media (pointer: coarse)": {
      padding: "0 20px"
    }
  }, ownerState.size === "small" && {
    width: 2
  }, ownerState.marked && {
    marginRight: 44
  }), {
    "@media print": {
      colorAdjust: "exact"
    },
    [`&.${sliderClasses.disabled}`]: {
      pointerEvents: "none",
      cursor: "default",
      color: (theme2.vars || theme2).palette.grey[400]
    },
    [`&.${sliderClasses.dragging}`]: {
      [`& .${sliderClasses.thumb}, & .${sliderClasses.track}`]: {
        transition: "none"
      }
    }
  }));
  true ? SliderRoot.propTypes = {
    children: import_prop_types30.default.node
  } : void 0;
  var SliderRail = styled_default("span", {
    name: "MuiSlider",
    slot: "Rail",
    overridesResolver: (props2, styles3) => styles3.rail
  })(({
    ownerState
  }) => _extends({
    display: "block",
    position: "absolute",
    borderRadius: "inherit",
    backgroundColor: "currentColor",
    opacity: 0.38
  }, ownerState.orientation === "horizontal" && {
    width: "100%",
    height: "inherit",
    top: "50%",
    transform: "translateY(-50%)"
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    width: "inherit",
    left: "50%",
    transform: "translateX(-50%)"
  }, ownerState.track === "inverted" && {
    opacity: 1
  }));
  true ? SliderRail.propTypes = {
    children: import_prop_types30.default.node
  } : void 0;
  var SliderTrack = styled_default("span", {
    name: "MuiSlider",
    slot: "Track",
    overridesResolver: (props2, styles3) => styles3.track
  })(({
    theme: theme2,
    ownerState
  }) => {
    const color = theme2.palette.mode === "light" ? (0, import_system18.lighten)(theme2.palette[ownerState.color].main, 0.62) : (0, import_system18.darken)(theme2.palette[ownerState.color].main, 0.5);
    return _extends({
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      border: "1px solid currentColor",
      backgroundColor: "currentColor",
      transition: theme2.transitions.create(["left", "width", "bottom", "height"], {
        duration: theme2.transitions.duration.shortest
      })
    }, ownerState.size === "small" && {
      border: "none"
    }, ownerState.orientation === "horizontal" && {
      height: "inherit",
      top: "50%",
      transform: "translateY(-50%)"
    }, ownerState.orientation === "vertical" && {
      width: "inherit",
      left: "50%",
      transform: "translateX(-50%)"
    }, ownerState.track === false && {
      display: "none"
    }, ownerState.track === "inverted" && {
      backgroundColor: theme2.vars ? theme2.vars.palette.Slider[`${ownerState.color}Track`] : color,
      borderColor: theme2.vars ? theme2.vars.palette.Slider[`${ownerState.color}Track`] : color
    });
  });
  true ? SliderTrack.propTypes = {
    children: import_prop_types30.default.node
  } : void 0;
  var SliderThumb = styled_default("span", {
    name: "MuiSlider",
    slot: "Thumb",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.thumb, styles3[`thumbColor${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles3[`thumbSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    position: "absolute",
    width: 20,
    height: 20,
    boxSizing: "border-box",
    borderRadius: "50%",
    outline: 0,
    backgroundColor: "currentColor",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transition: theme2.transitions.create(["box-shadow", "left", "bottom"], {
      duration: theme2.transitions.duration.shortest
    })
  }, ownerState.size === "small" && {
    width: 12,
    height: 12
  }, ownerState.orientation === "horizontal" && {
    top: "50%",
    transform: "translate(-50%, -50%)"
  }, ownerState.orientation === "vertical" && {
    left: "50%",
    transform: "translate(-50%, 50%)"
  }, {
    "&:before": _extends({
      position: "absolute",
      content: '""',
      borderRadius: "inherit",
      width: "100%",
      height: "100%",
      boxShadow: (theme2.vars || theme2).shadows[2]
    }, ownerState.size === "small" && {
      boxShadow: "none"
    }),
    "&::after": {
      position: "absolute",
      content: '""',
      borderRadius: "50%",
      width: 42,
      height: 42,
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)"
    },
    [`&:hover, &.${sliderClasses.focusVisible}`]: {
      boxShadow: `0px 0px 0px 8px ${theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / 0.16)` : (0, import_system18.alpha)(theme2.palette[ownerState.color].main, 0.16)}`,
      "@media (hover: none)": {
        boxShadow: "none"
      }
    },
    [`&.${sliderClasses.active}`]: {
      boxShadow: `0px 0px 0px 14px ${theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / 0.16)` : (0, import_system18.alpha)(theme2.palette[ownerState.color].main, 0.16)}`
    },
    [`&.${sliderClasses.disabled}`]: {
      "&:hover": {
        boxShadow: "none"
      }
    }
  }));
  true ? SliderThumb.propTypes = {
    children: import_prop_types30.default.node
  } : void 0;
  var SliderValueLabel = styled_default(import_SliderUnstyled.SliderValueLabelUnstyled, {
    name: "MuiSlider",
    slot: "ValueLabel",
    overridesResolver: (props2, styles3) => styles3.valueLabel
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    [`&.${sliderClasses.valueLabelOpen}`]: {
      transform: "translateY(-100%) scale(1)"
    },
    zIndex: 1,
    whiteSpace: "nowrap"
  }, theme2.typography.body2, {
    fontWeight: 500,
    transition: theme2.transitions.create(["transform"], {
      duration: theme2.transitions.duration.shortest
    }),
    transform: "translateY(-100%) scale(0)",
    position: "absolute",
    backgroundColor: (theme2.vars || theme2).palette.grey[600],
    borderRadius: 2,
    color: (theme2.vars || theme2).palette.common.white,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "0.25rem 0.75rem"
  }, ownerState.orientation === "horizontal" && {
    top: "-10px",
    transformOrigin: "bottom center",
    "&:before": {
      position: "absolute",
      content: '""',
      width: 8,
      height: 8,
      transform: "translate(-50%, 50%) rotate(45deg)",
      backgroundColor: "inherit",
      bottom: 0,
      left: "50%"
    }
  }, ownerState.orientation === "vertical" && {
    right: "30px",
    top: "24px",
    transformOrigin: "right center",
    "&:before": {
      position: "absolute",
      content: '""',
      width: 8,
      height: 8,
      transform: "translate(-50%, 50%) rotate(45deg)",
      backgroundColor: "inherit",
      right: "-20%",
      top: "25%"
    }
  }, ownerState.size === "small" && {
    fontSize: theme2.typography.pxToRem(12),
    padding: "0.25rem 0.5rem"
  }));
  true ? SliderValueLabel.propTypes = {
    children: import_prop_types30.default.node
  } : void 0;
  var SliderMark = styled_default("span", {
    name: "MuiSlider",
    slot: "Mark",
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markActive",
    overridesResolver: (props2, styles3) => styles3.mark
  })(({
    theme: theme2,
    ownerState,
    markActive
  }) => _extends({
    position: "absolute",
    width: 2,
    height: 2,
    borderRadius: 1,
    backgroundColor: "currentColor"
  }, ownerState.orientation === "horizontal" && {
    top: "50%",
    transform: "translate(-1px, -50%)"
  }, ownerState.orientation === "vertical" && {
    left: "50%",
    transform: "translate(-50%, 1px)"
  }, markActive && {
    backgroundColor: (theme2.vars || theme2).palette.background.paper,
    opacity: 0.8
  }));
  true ? SliderMark.propTypes = {
    children: import_prop_types30.default.node
  } : void 0;
  var SliderMarkLabel = styled_default("span", {
    name: "MuiSlider",
    slot: "MarkLabel",
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markLabelActive",
    overridesResolver: (props2, styles3) => styles3.markLabel
  })(({
    theme: theme2,
    ownerState,
    markLabelActive
  }) => _extends({}, theme2.typography.body2, {
    color: (theme2.vars || theme2).palette.text.secondary,
    position: "absolute",
    whiteSpace: "nowrap"
  }, ownerState.orientation === "horizontal" && {
    top: 30,
    transform: "translateX(-50%)",
    "@media (pointer: coarse)": {
      top: 40
    }
  }, ownerState.orientation === "vertical" && {
    left: 36,
    transform: "translateY(50%)",
    "@media (pointer: coarse)": {
      left: 44
    }
  }, markLabelActive && {
    color: (theme2.vars || theme2).palette.text.primary
  }));
  true ? SliderMarkLabel.propTypes = {
    children: import_prop_types30.default.node
  } : void 0;
  var extendUtilityClasses2 = (ownerState) => {
    const {
      color,
      size,
      classes = {}
    } = ownerState;
    return _extends({}, classes, {
      root: (0, import_clsx20.default)(classes.root, (0, import_SliderUnstyled.getSliderUtilityClass)(`color${capitalize_default(color)}`), classes[`color${capitalize_default(color)}`], size && [(0, import_SliderUnstyled.getSliderUtilityClass)(`size${capitalize_default(size)}`), classes[`size${capitalize_default(size)}`]]),
      thumb: (0, import_clsx20.default)(classes.thumb, (0, import_SliderUnstyled.getSliderUtilityClass)(`thumbColor${capitalize_default(color)}`), classes[`thumbColor${capitalize_default(color)}`], size && [(0, import_SliderUnstyled.getSliderUtilityClass)(`thumbSize${capitalize_default(size)}`), classes[`thumbSize${capitalize_default(size)}`]])
    });
  };
  var Slider = /* @__PURE__ */ React37.forwardRef(function Slider2(inputProps, ref) {
    var _componentsProps$root, _componentsProps$thum, _componentsProps$trac, _componentsProps$valu;
    const props2 = useThemeProps({
      props: inputProps,
      name: "MuiSlider"
    });
    const theme2 = useTheme();
    const isRtl = theme2.direction === "rtl";
    const {
      component = "span",
      components = {},
      componentsProps = {},
      color = "primary",
      size = "medium"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded27);
    const ownerState = _extends({}, props2, {
      color,
      size
    });
    const classes = extendUtilityClasses2(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(import_SliderUnstyled.default, _extends({}, other, {
      isRtl,
      components: _extends({
        Root: SliderRoot,
        Rail: SliderRail,
        Track: SliderTrack,
        Thumb: SliderThumb,
        ValueLabel: SliderValueLabel,
        Mark: SliderMark,
        MarkLabel: SliderMarkLabel
      }, components),
      componentsProps: _extends({}, componentsProps, {
        root: _extends({}, componentsProps.root, shouldSpreadAdditionalProps_default(components.Root) && {
          as: component,
          ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState, {
            color,
            size
          })
        }),
        thumb: _extends({}, componentsProps.thumb, shouldSpreadAdditionalProps_default(components.Thumb) && {
          ownerState: _extends({}, (_componentsProps$thum = componentsProps.thumb) == null ? void 0 : _componentsProps$thum.ownerState, {
            color,
            size
          })
        }),
        track: _extends({}, componentsProps.track, shouldSpreadAdditionalProps_default(components.Track) && {
          ownerState: _extends({}, (_componentsProps$trac = componentsProps.track) == null ? void 0 : _componentsProps$trac.ownerState, {
            color,
            size
          })
        }),
        valueLabel: _extends({}, componentsProps.valueLabel, shouldSpreadAdditionalProps_default(components.ValueLabel) && {
          ownerState: _extends({}, (_componentsProps$valu = componentsProps.valueLabel) == null ? void 0 : _componentsProps$valu.ownerState, {
            color,
            size
          })
        })
      }),
      classes,
      ref
    }));
  });
  true ? Slider.propTypes = {
    "aria-label": (0, import_utils25.chainPropTypes)(import_prop_types30.default.string, (props2) => {
      const range = Array.isArray(props2.value || props2.defaultValue);
      if (range && props2["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    "aria-labelledby": import_prop_types30.default.string,
    "aria-valuetext": (0, import_utils25.chainPropTypes)(import_prop_types30.default.string, (props2) => {
      const range = Array.isArray(props2.value || props2.defaultValue);
      if (range && props2["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    children: import_prop_types30.default.node,
    classes: import_prop_types30.default.object,
    color: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["primary", "secondary"]), import_prop_types30.default.string]),
    components: import_prop_types30.default.shape({
      Input: import_prop_types30.default.elementType,
      Mark: import_prop_types30.default.elementType,
      MarkLabel: import_prop_types30.default.elementType,
      Rail: import_prop_types30.default.elementType,
      Root: import_prop_types30.default.elementType,
      Thumb: import_prop_types30.default.elementType,
      Track: import_prop_types30.default.elementType,
      ValueLabel: import_prop_types30.default.elementType
    }),
    componentsProps: import_prop_types30.default.shape({
      input: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object]),
      mark: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object]),
      markLabel: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object]),
      rail: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object]),
      root: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object]),
      thumb: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object]),
      track: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object]),
      valueLabel: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.shape({
        children: import_prop_types30.default.element,
        className: import_prop_types30.default.string,
        components: import_prop_types30.default.shape({
          Root: import_prop_types30.default.elementType
        }),
        open: import_prop_types30.default.bool,
        style: import_prop_types30.default.object,
        value: import_prop_types30.default.number,
        valueLabelDisplay: import_prop_types30.default.oneOf(["auto", "off", "on"])
      })])
    }),
    defaultValue: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.number), import_prop_types30.default.number]),
    disabled: import_prop_types30.default.bool,
    disableSwap: import_prop_types30.default.bool,
    getAriaLabel: import_prop_types30.default.func,
    getAriaValueText: import_prop_types30.default.func,
    isRtl: import_prop_types30.default.bool,
    marks: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.shape({
      label: import_prop_types30.default.node,
      value: import_prop_types30.default.number.isRequired
    })), import_prop_types30.default.bool]),
    max: import_prop_types30.default.number,
    min: import_prop_types30.default.number,
    name: import_prop_types30.default.string,
    onChange: import_prop_types30.default.func,
    onChangeCommitted: import_prop_types30.default.func,
    orientation: import_prop_types30.default.oneOf(["horizontal", "vertical"]),
    scale: import_prop_types30.default.func,
    size: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["small", "medium"]), import_prop_types30.default.string]),
    step: import_prop_types30.default.number,
    sx: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object, import_prop_types30.default.bool])), import_prop_types30.default.func, import_prop_types30.default.object]),
    tabIndex: import_prop_types30.default.number,
    track: import_prop_types30.default.oneOf(["inverted", "normal", false]),
    value: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.number), import_prop_types30.default.number]),
    valueLabelDisplay: import_prop_types30.default.oneOf(["auto", "off", "on"]),
    valueLabelFormat: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.string])
  } : void 0;
  var Slider_default = Slider;

  // src/website/live.tsx
  var import_PauseCircle = __toESM(require_PauseCircle());
  var import_PlayCircle = __toESM(require_PlayCircle());

  // src/website/lineGraph.tsx
  var React38 = __toESM(require_react());
  var import_react_apexcharts = __toESM(require_react_apexcharts_min());
  var inputOptions = {
    chart: {
      id: "input",
      group: "group",
      zoom: {
        enabled: false
      },
      toolbar: {
        show: false
      }
    },
    stroke: {
      width: 5,
      curve: "straight"
    },
    xaxis: {
      type: "datetime"
    },
    yaxis: {
      decimalsInFloat: 1
    },
    title: {
      text: "Sensoren",
      align: "left"
    },
    legend: {
      position: "top",
      horizontalAlign: "right",
      floating: true,
      offsetY: -25,
      offsetX: -5
    }
  };
  var outputOptions = {
    chart: {
      group: "group",
      zoom: {
        enabled: false
      },
      toolbar: {
        show: false
      }
    },
    stroke: {
      width: 5,
      curve: "stepline"
    },
    xaxis: {
      type: "datetime"
    },
    yaxis: {
      decimalsInFloat: 0,
      tickAmount: 1
    },
    dataLabels: {
      enabled: false
    },
    title: {
      text: "Pumpen",
      align: "left"
    },
    legend: {
      position: "top",
      horizontalAlign: "right",
      floating: true,
      offsetY: -25,
      offsetX: -5
    }
  };
  function LineGraph(props2) {
    const { data } = props2;
    const { inputSeries, outputSeries } = React38.useMemo(() => getSeriesData(data), [data]);
    console.log("Graph showing data", { data, inputSeries, outputSeries });
    return /* @__PURE__ */ React38.createElement(React38.Fragment, null, /* @__PURE__ */ React38.createElement(import_react_apexcharts.default, {
      options: inputOptions,
      series: inputSeries,
      type: "line",
      width: "100%",
      height: 400
    }), /* @__PURE__ */ React38.createElement(import_react_apexcharts.default, {
      options: outputOptions,
      series: outputSeries,
      type: "area",
      width: "100%",
      height: 300
    }));
  }
  function getSeriesData(data) {
    const inputSeries = [
      {
        name: "Speicher unten",
        data: []
      },
      {
        name: "Dach",
        data: []
      },
      {
        name: "Speicher oben",
        data: []
      },
      {
        name: "Speicher mitte",
        data: []
      }
    ];
    const outputSeries = [
      {
        name: "Pumpe 1",
        data: []
      },
      {
        name: "Pumpe 2",
        data: []
      }
    ];
    for (const row of data) {
      inputSeries[0].data.push({ x: row.timestamp, y: row.input[0].val });
      inputSeries[1].data.push({ x: row.timestamp, y: row.input[1].val });
      inputSeries[2].data.push({ x: row.timestamp, y: row.input[2].val });
      inputSeries[3].data.push({ x: row.timestamp, y: row.input[3].val });
      outputSeries[0].data.push({ x: row.timestamp, y: row.output[0].val });
      outputSeries[1].data.push({ x: row.timestamp, y: row.output[1].val });
    }
    for (let i = 0; i < 4; i++) {
      inputSeries[i].data = downsample(inputSeries[i].data, 500);
    }
    outputSeries[0].data = downsample(outputSeries[0].data, 500);
    outputSeries[1].data = downsample(outputSeries[1].data, 500);
    return { inputSeries, outputSeries };
  }
  function downsample(data, threshold) {
    const data_length = data.length;
    if (threshold >= data_length || threshold === 0) {
      return data;
    }
    const sampled = [];
    let sampled_index = 0;
    const every = (data_length - 2) / (threshold - 2);
    let a = 0;
    let max_area_point = { x: 0, y: 0 }, max_area, area;
    let next_a = 0;
    sampled[sampled_index++] = data[a];
    for (let i = 0; i < threshold - 2; i++) {
      let avg_x = 0;
      let avg_y = 0;
      let avg_range_start = Math.floor((i + 1) * every) + 1;
      let avg_range_end = Math.floor((i + 2) * every) + 1;
      avg_range_end = avg_range_end < data_length ? avg_range_end : data_length;
      const avg_range_length = avg_range_end - avg_range_start;
      for (; avg_range_start < avg_range_end; avg_range_start++) {
        avg_x += data[avg_range_start].x * 1;
        avg_y += data[avg_range_start].y * 1;
      }
      avg_x /= avg_range_length;
      avg_y /= avg_range_length;
      let range_offs = Math.floor((i + 0) * every) + 1;
      const range_to = Math.floor((i + 1) * every) + 1;
      const point_a_x = data[a].x * 1;
      const point_a_y = data[a].y * 1;
      max_area = area = -1;
      for (; range_offs < range_to; range_offs++) {
        area = Math.abs(
          (point_a_x - avg_x) * (data[range_offs].y - point_a_y) - (point_a_x - data[range_offs].x) * (avg_y - point_a_y)
        ) * 0.5;
        if (area > max_area) {
          max_area = area;
          max_area_point = data[range_offs];
          next_a = range_offs;
        }
      }
      sampled[sampled_index++] = max_area_point;
      a = next_a;
    }
    sampled[sampled_index++] = data[data_length - 1];
    return sampled;
  }

  // src/website/live.tsx
  var import_dexie_react_hooks = __toESM(require_dexie_react_hooks());

  // src/website/database.ts
  init_dexie();
  var Database = class extends Dexie$1 {
    constructor() {
      super("pump");
      const stores = {
        fileIndex: "filename, fetched",
        data: "timestamp",
        error: "timestamp"
      };
      this.version(1).stores(stores);
    }
    updateFileIndex(filenames) {
      return __async(this, null, function* () {
        yield Promise.allSettled(
          filenames.map((filename) => this.fileIndex.add({ filename, fetched: 0 }))
        );
      });
    }
    setFileIndex(filename) {
      return __async(this, null, function* () {
        yield this.fileIndex.update(filename, { fetched: true });
      });
    }
    getNextFilenames() {
      return __async(this, null, function* () {
        return (yield this.fileIndex.where("fetched").equals(0).reverse().sortBy("filename")).map((fileIndex) => fileIndex.filename);
      });
    }
    addData(data) {
      return __async(this, null, function* () {
        yield this.data.bulkPut(data);
      });
    }
    addError(error) {
      return __async(this, null, function* () {
        yield this.error.bulkPut(error);
      });
    }
    getData(from, to) {
      return __async(this, null, function* () {
        return this.data.where("timestamp").between(from, to, true, true).toArray();
      });
    }
    getMinDataDate() {
      return __async(this, null, function* () {
        var _a;
        return (_a = yield this.data.orderBy("timestamp").first()) == null ? void 0 : _a.timestamp;
      });
    }
  };
  var db = new Database();

  // src/website/live.tsx
  var marks = [
    {
      value: 10 * 60 * 1e3,
      label: "10m"
    },
    {
      value: 30 * 60 * 1e3,
      label: "30m"
    },
    {
      value: 1 * 60 * 60 * 1e3,
      label: "1 std"
    },
    {
      value: 2 * 60 * 60 * 1e3,
      label: "2 std"
    },
    {
      value: 3 * 60 * 60 * 1e3,
      label: "3 std"
    },
    {
      value: 4 * 60 * 60 * 1e3,
      label: "4 std"
    },
    {
      value: 5 * 60 * 60 * 1e3,
      label: "5 std"
    },
    {
      value: 6 * 60 * 60 * 1e3,
      label: "6 std"
    }
  ];
  function Live() {
    const [showTime, setShowTime] = React39.useState(60 * 60 * 1e3);
    const [showInterval, setShowInterval] = React39.useState([Date.now() - showTime, Date.now()]);
    const [timeout2, setTimeout2] = React39.useState(10);
    const [pause, setPause] = React39.useState(false);
    const data = (0, import_dexie_react_hooks.useLiveQuery)(() => db.getData(showInterval[0], showInterval[1]), [showInterval]);
    React39.useEffect(() => {
      setShowInterval([Date.now() - showTime, Date.now()]);
      const updateInterval = setInterval(() => {
        const now = Date.now();
        setShowInterval([now - showTime, now]);
      }, timeout2 * 1e3);
      return () => clearInterval(updateInterval);
    }, [showTime, timeout2]);
    return /* @__PURE__ */ React39.createElement(Grid_default, {
      container: true,
      spacing: 3
    }, /* @__PURE__ */ React39.createElement(Grid_default, {
      item: true,
      xs: 12,
      md: 8,
      lg: 9
    }, /* @__PURE__ */ React39.createElement(Paper_default, {
      sx: { p: 4, px: 5, mb: 4, display: "flex", flexDirection: "column" }
    }, /* @__PURE__ */ React39.createElement(Grid_default, {
      container: true,
      spacing: 4
    }, /* @__PURE__ */ React39.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ React39.createElement(FormLabel_default, null, "Anzeige Zeitraum"), /* @__PURE__ */ React39.createElement(Slider_default, {
      value: showTime,
      onChange: (_3, newVal) => setShowTime(newVal),
      step: null,
      marks,
      min: marks[0].value,
      max: marks[marks.length - 1].value,
      disabled: pause
    })), /* @__PURE__ */ React39.createElement(Grid_default, {
      item: true,
      xs: 11
    }, /* @__PURE__ */ React39.createElement(FormLabel_default, null, pause ? "Update pausiert" : "Update Intervall " + timeout2 + " Sekunden"), /* @__PURE__ */ React39.createElement(Slider_default, {
      "aria-label": "Anzeigeintervall",
      value: timeout2,
      onChange: (_3, newVal) => setTimeout2(newVal),
      min: 2,
      max: 120,
      step: 2,
      disabled: pause
    })), /* @__PURE__ */ React39.createElement(Grid_default, {
      item: true,
      xs: 1,
      display: "flex",
      justifyContent: "end"
    }, pause ? /* @__PURE__ */ React39.createElement(IconButton_default, {
      onClick: () => setPause(false),
      size: "large"
    }, /* @__PURE__ */ React39.createElement(import_PlayCircle.default, {
      fontSize: "inherit",
      color: "primary"
    })) : /* @__PURE__ */ React39.createElement(IconButton_default, {
      onClick: () => setPause(true),
      size: "large"
    }, /* @__PURE__ */ React39.createElement(import_PauseCircle.default, {
      fontSize: "inherit",
      color: "primary"
    }))))), /* @__PURE__ */ React39.createElement(Paper_default, {
      sx: { p: 2, mb: 4 }
    }, data === void 0 ? /* @__PURE__ */ React39.createElement(CircularProgress_default, null) : /* @__PURE__ */ React39.createElement(LineGraph, {
      data
    }))));
  }

  // src/website/graph.tsx
  var React40 = __toESM(require_react());
  var import_dexie_react_hooks2 = __toESM(require_dexie_react_hooks());
  var import_react_datetimerange_picker = __toESM(require_entry());
  function Graph() {
    const [state, setState] = React40.useState([new Date(Date.now() - 1e3 * 3600 * 24), new Date()]);
    const minDate2 = (0, import_dexie_react_hooks2.useLiveQuery)(() => db.getMinDataDate());
    const from = React40.useMemo(() => {
      var _a, _b;
      return (_b = (_a = state == null ? void 0 : state[0]) == null ? void 0 : _a.getTime()) != null ? _b : Date.now() - 1e3 * 60 * 60;
    }, [state]);
    const to = React40.useMemo(() => {
      var _a, _b;
      return (_b = (_a = state == null ? void 0 : state[1]) == null ? void 0 : _a.getTime()) != null ? _b : Date.now();
    }, [state]);
    const data = (0, import_dexie_react_hooks2.useLiveQuery)(() => db.getData(from, to), [from, to]);
    return /* @__PURE__ */ React40.createElement(Grid_default, {
      container: true,
      spacing: 3
    }, /* @__PURE__ */ React40.createElement(Grid_default, {
      item: true,
      xs: 12,
      md: 8,
      lg: 9
    }, /* @__PURE__ */ React40.createElement(Paper_default, {
      sx: { p: 2, mb: 4, display: "flex", flexDirection: "column" }
    }, /* @__PURE__ */ React40.createElement(FormLabel_default, null, "Zeitintervall f\xFCr Anzeige"), /* @__PURE__ */ React40.createElement(import_react_datetimerange_picker.default, {
      locale: "de-DE",
      onChange: (range) => setState(range),
      value: state,
      minDate: new Date(minDate2 != null ? minDate2 : Date.now()),
      maxDate: new Date()
    })), /* @__PURE__ */ React40.createElement(Paper_default, {
      sx: { p: 2, mb: 4 }
    }, data === void 0 ? /* @__PURE__ */ React40.createElement(CircularProgress_default, null) : /* @__PURE__ */ React40.createElement(LineGraph, {
      data
    }))));
  }

  // src/website/download.tsx
  var React47 = __toESM(require_react());
  var import_react_datetimerange_picker2 = __toESM(require_entry());

  // node_modules/react-icons/lib/esm/iconBase.js
  var import_react6 = __toESM(require_react());

  // node_modules/react-icons/lib/esm/iconContext.js
  var import_react5 = __toESM(require_react());
  var DefaultContext = {
    color: void 0,
    size: void 0,
    className: void 0,
    style: void 0,
    attr: void 0
  };
  var IconContext = import_react5.default.createContext && import_react5.default.createContext(DefaultContext);

  // node_modules/react-icons/lib/esm/iconBase.js
  var __assign = function() {
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  var __rest = function(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  };
  function Tree2Element(tree) {
    return tree && tree.map(function(node, i) {
      return import_react6.default.createElement(node.tag, __assign({
        key: i
      }, node.attr), Tree2Element(node.child));
    });
  }
  function GenIcon(data) {
    return function(props2) {
      return import_react6.default.createElement(IconBase, __assign({
        attr: __assign({}, data.attr)
      }, props2), Tree2Element(data.child));
    };
  }
  function IconBase(props2) {
    var elem = function(conf) {
      var attr = props2.attr, size = props2.size, title = props2.title, svgProps = __rest(props2, ["attr", "size", "title"]);
      var computedSize = size || conf.size || "1em";
      var className;
      if (conf.className)
        className = conf.className;
      if (props2.className)
        className = (className ? className + " " : "") + props2.className;
      return import_react6.default.createElement("svg", __assign({
        stroke: "currentColor",
        fill: "currentColor",
        strokeWidth: "0"
      }, conf.attr, attr, svgProps, {
        className,
        style: __assign(__assign({
          color: props2.color || conf.color
        }, conf.style), props2.style),
        height: computedSize,
        width: computedSize,
        xmlns: "http://www.w3.org/2000/svg"
      }), title && import_react6.default.createElement("title", null, title), props2.children);
    };
    return IconContext !== void 0 ? import_react6.default.createElement(IconContext.Consumer, null, function(conf) {
      return elem(conf);
    }) : elem(DefaultContext);
  }

  // node_modules/react-icons/fa/index.esm.js
  function FaDatabase(props2) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M448 73.143v45.714C448 159.143 347.667 192 224 192S0 159.143 0 118.857V73.143C0 32.857 100.333 0 224 0s224 32.857 224 73.143zM448 176v102.857C448 319.143 347.667 352 224 352S0 319.143 0 278.857V176c48.125 33.143 136.208 48.572 224 48.572S399.874 209.143 448 176zm0 160v102.857C448 479.143 347.667 512 224 512S0 479.143 0 438.857V336c48.125 33.143 136.208 48.572 224 48.572S399.874 369.143 448 336z" } }] })(props2);
  }
  function FaFileCode(props2) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 384 512" }, "child": [{ "tag": "path", "attr": { "d": "M384 121.941V128H256V0h6.059c6.365 0 12.47 2.529 16.971 7.029l97.941 97.941A24.005 24.005 0 0 1 384 121.941zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zM123.206 400.505a5.4 5.4 0 0 1-7.633.246l-64.866-60.812a5.4 5.4 0 0 1 0-7.879l64.866-60.812a5.4 5.4 0 0 1 7.633.246l19.579 20.885a5.4 5.4 0 0 1-.372 7.747L101.65 336l40.763 35.874a5.4 5.4 0 0 1 .372 7.747l-19.579 20.884zm51.295 50.479l-27.453-7.97a5.402 5.402 0 0 1-3.681-6.692l61.44-211.626a5.402 5.402 0 0 1 6.692-3.681l27.452 7.97a5.4 5.4 0 0 1 3.68 6.692l-61.44 211.626a5.397 5.397 0 0 1-6.69 3.681zm160.792-111.045l-64.866 60.812a5.4 5.4 0 0 1-7.633-.246l-19.58-20.885a5.4 5.4 0 0 1 .372-7.747L284.35 336l-40.763-35.874a5.4 5.4 0 0 1-.372-7.747l19.58-20.885a5.4 5.4 0 0 1 7.633-.246l64.866 60.812a5.4 5.4 0 0 1-.001 7.879z" } }] })(props2);
  }
  function FaFileCsv(props2) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 384 512" }, "child": [{ "tag": "path", "attr": { "d": "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm-96 144c0 4.42-3.58 8-8 8h-8c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h8c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-8c-26.51 0-48-21.49-48-48v-32c0-26.51 21.49-48 48-48h8c4.42 0 8 3.58 8 8v16zm44.27 104H160c-4.42 0-8-3.58-8-8v-16c0-4.42 3.58-8 8-8h12.27c5.95 0 10.41-3.5 10.41-6.62 0-1.3-.75-2.66-2.12-3.84l-21.89-18.77c-8.47-7.22-13.33-17.48-13.33-28.14 0-21.3 19.02-38.62 42.41-38.62H200c4.42 0 8 3.58 8 8v16c0 4.42-3.58 8-8 8h-12.27c-5.95 0-10.41 3.5-10.41 6.62 0 1.3.75 2.66 2.12 3.84l21.89 18.77c8.47 7.22 13.33 17.48 13.33 28.14.01 21.29-19 38.62-42.39 38.62zM256 264v20.8c0 20.27 5.7 40.17 16 56.88 10.3-16.7 16-36.61 16-56.88V264c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8v20.8c0 35.48-12.88 68.89-36.28 94.09-3.02 3.25-7.27 5.11-11.72 5.11s-8.7-1.86-11.72-5.11c-23.4-25.2-36.28-58.61-36.28-94.09V264c0-4.42 3.58-8 8-8h16c4.42 0 8 3.58 8 8zm121-159L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128v-6.1c0-6.3-2.5-12.4-7-16.9z" } }] })(props2);
  }
  function FaFileExcel(props2) {
    return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 384 512" }, "child": [{ "tag": "path", "attr": { "d": "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm60.1 106.5L224 336l60.1 93.5c5.1 8-.6 18.5-10.1 18.5h-34.9c-4.4 0-8.5-2.4-10.6-6.3C208.9 405.5 192 373 192 373c-6.4 14.8-10 20-36.6 68.8-2.1 3.9-6.1 6.3-10.5 6.3H110c-9.5 0-15.2-10.5-10.1-18.5l60.3-93.5-60.3-93.5c-5.2-8 .6-18.5 10.1-18.5h34.8c4.4 0 8.5 2.4 10.6 6.3 26.1 48.8 20 33.6 36.6 68.5 0 0 6.1-11.7 36.6-68.5 2.1-3.9 6.2-6.3 10.6-6.3H274c9.5-.1 15.2 10.4 10.1 18.4zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z" } }] })(props2);
  }

  // node_modules/@mui/material/esm/Stack/Stack.js
  var React43 = __toESM(require_react());
  var import_prop_types31 = __toESM(require_prop_types());
  var import_system19 = __toESM(require_system());
  var import_utils26 = __toESM(require_utils());
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var _excluded28 = ["component", "direction", "spacing", "divider", "children"];
  function joinChildren(children, separator) {
    const childrenArray = React43.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index) => {
      output.push(child);
      if (index < childrenArray.length - 1) {
        output.push(/* @__PURE__ */ React43.cloneElement(separator, {
          key: `separator-${index}`
        }));
      }
      return output;
    }, []);
  }
  var getSideFromDirection = (direction) => {
    return {
      row: "Left",
      "row-reverse": "Right",
      column: "Top",
      "column-reverse": "Bottom"
    }[direction];
  };
  var style = ({
    ownerState,
    theme: theme2
  }) => {
    let styles3 = _extends({
      display: "flex",
      flexDirection: "column"
    }, (0, import_system19.handleBreakpoints)({
      theme: theme2
    }, (0, import_system19.unstable_resolveBreakpointValues)({
      values: ownerState.direction,
      breakpoints: theme2.breakpoints.values
    }), (propValue) => ({
      flexDirection: propValue
    })));
    if (ownerState.spacing) {
      const transformer = (0, import_system19.createUnarySpacing)(theme2);
      const base = Object.keys(theme2.breakpoints.values).reduce((acc, breakpoint) => {
        if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }
        return acc;
      }, {});
      const directionValues = (0, import_system19.unstable_resolveBreakpointValues)({
        values: ownerState.direction,
        base
      });
      const spacingValues = (0, import_system19.unstable_resolveBreakpointValues)({
        values: ownerState.spacing,
        base
      });
      if (typeof directionValues === "object") {
        Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
          const directionValue = directionValues[breakpoint];
          if (!directionValue) {
            const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : "column";
            directionValues[breakpoint] = previousDirectionValue;
          }
        });
      }
      const styleFromPropValue = (propValue, breakpoint) => {
        return {
          "& > :not(style) + :not(style)": {
            margin: 0,
            [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: (0, import_system19.getValue)(transformer, propValue)
          }
        };
      };
      styles3 = (0, import_utils26.deepmerge)(styles3, (0, import_system19.handleBreakpoints)({
        theme: theme2
      }, spacingValues, styleFromPropValue));
    }
    styles3 = (0, import_system19.mergeBreakpointsInOrder)(theme2.breakpoints, styles3);
    return styles3;
  };
  var StackRoot = styled_default("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      return [styles3.root];
    }
  })(style);
  var Stack = /* @__PURE__ */ React43.forwardRef(function Stack2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiStack"
    });
    const props2 = (0, import_system19.unstable_extendSxProp)(themeProps);
    const {
      component = "div",
      direction = "column",
      spacing = 0,
      divider,
      children
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded28);
    const ownerState = {
      direction,
      spacing
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(StackRoot, _extends({
      as: component,
      ownerState,
      ref
    }, other, {
      children: divider ? joinChildren(children, divider) : children
    }));
  });
  true ? Stack.propTypes = {
    children: import_prop_types31.default.node,
    component: import_prop_types31.default.elementType,
    direction: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types31.default.arrayOf(import_prop_types31.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types31.default.object]),
    divider: import_prop_types31.default.node,
    spacing: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.number, import_prop_types31.default.string])), import_prop_types31.default.number, import_prop_types31.default.object, import_prop_types31.default.string]),
    sx: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object, import_prop_types31.default.bool])), import_prop_types31.default.func, import_prop_types31.default.object])
  } : void 0;
  var Stack_default = Stack;

  // node_modules/@mui/material/esm/ButtonGroup/ButtonGroup.js
  var React45 = __toESM(require_react());
  var import_prop_types32 = __toESM(require_prop_types());
  var import_clsx21 = __toESM(require_clsx());
  var import_base39 = __toESM(require_node3());
  var import_system20 = __toESM(require_system());

  // node_modules/@mui/material/esm/ButtonGroup/buttonGroupClasses.js
  var import_base38 = __toESM(require_node3());
  function getButtonGroupUtilityClass(slot) {
    return (0, import_base38.generateUtilityClass)("MuiButtonGroup", slot);
  }
  var buttonGroupClasses = (0, import_base38.generateUtilityClasses)("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary"]);
  var buttonGroupClasses_default = buttonGroupClasses;

  // node_modules/@mui/material/esm/ButtonGroup/ButtonGroupContext.js
  var React44 = __toESM(require_react());
  var ButtonGroupContext = /* @__PURE__ */ React44.createContext({});
  if (true) {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  var ButtonGroupContext_default = ButtonGroupContext;

  // node_modules/@mui/material/esm/ButtonGroup/ButtonGroup.js
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var _excluded29 = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"];
  var overridesResolver3 = (props2, styles3) => {
    const {
      ownerState
    } = props2;
    return [{
      [`& .${buttonGroupClasses_default.grouped}`]: styles3.grouped
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles3[`grouped${capitalize_default(ownerState.orientation)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles3[`grouped${capitalize_default(ownerState.variant)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles3[`grouped${capitalize_default(ownerState.variant)}${capitalize_default(ownerState.orientation)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles3[`grouped${capitalize_default(ownerState.variant)}${capitalize_default(ownerState.color)}`]
    }, styles3.root, styles3[ownerState.variant], ownerState.disableElevation === true && styles3.disableElevation, ownerState.fullWidth && styles3.fullWidth, ownerState.orientation === "vertical" && styles3.vertical];
  };
  var useUtilityClasses18 = (ownerState) => {
    const {
      classes,
      color,
      disabled,
      disableElevation,
      fullWidth,
      orientation,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, orientation === "vertical" && "vertical", fullWidth && "fullWidth", disableElevation && "disableElevation"],
      grouped: ["grouped", `grouped${capitalize_default(orientation)}`, `grouped${capitalize_default(variant)}`, `grouped${capitalize_default(variant)}${capitalize_default(orientation)}`, `grouped${capitalize_default(variant)}${capitalize_default(color)}`, disabled && "disabled"]
    };
    return (0, import_base39.unstable_composeClasses)(slots, getButtonGroupUtilityClass, classes);
  };
  var ButtonGroupRoot = styled_default("div", {
    name: "MuiButtonGroup",
    slot: "Root",
    overridesResolver: overridesResolver3
  })(({
    theme: theme2,
    ownerState
  }) => _extends({
    display: "inline-flex",
    borderRadius: (theme2.vars || theme2).shape.borderRadius
  }, ownerState.variant === "contained" && {
    boxShadow: (theme2.vars || theme2).shadows[2]
  }, ownerState.disableElevation && {
    boxShadow: "none"
  }, ownerState.fullWidth && {
    width: "100%"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column"
  }, {
    [`& .${buttonGroupClasses_default.grouped}`]: _extends({
      minWidth: 40,
      "&:not(:first-of-type)": _extends({}, ownerState.orientation === "horizontal" && {
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      }, ownerState.orientation === "vertical" && {
        borderTopRightRadius: 0,
        borderTopLeftRadius: 0
      }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
        marginLeft: -1
      }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
        marginTop: -1
      }),
      "&:not(:last-of-type)": _extends({}, ownerState.orientation === "horizontal" && {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      }, ownerState.orientation === "vertical" && {
        borderBottomRightRadius: 0,
        borderBottomLeftRadius: 0
      }, ownerState.variant === "text" && ownerState.orientation === "horizontal" && {
        borderRight: theme2.vars ? `1px solid rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`
      }, ownerState.variant === "text" && ownerState.orientation === "vertical" && {
        borderBottom: theme2.vars ? `1px solid rgba(${theme2.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme2.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        borderColor: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / 0.5)` : (0, import_system20.alpha)(theme2.palette[ownerState.color].main, 0.5)
      }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
        borderRightColor: "transparent"
      }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
        borderBottomColor: "transparent"
      }, ownerState.variant === "contained" && ownerState.orientation === "horizontal" && {
        borderRight: `1px solid ${(theme2.vars || theme2).palette.grey[400]}`,
        [`&.${buttonGroupClasses_default.disabled}`]: {
          borderRight: `1px solid ${(theme2.vars || theme2).palette.action.disabled}`
        }
      }, ownerState.variant === "contained" && ownerState.orientation === "vertical" && {
        borderBottom: `1px solid ${(theme2.vars || theme2).palette.grey[400]}`,
        [`&.${buttonGroupClasses_default.disabled}`]: {
          borderBottom: `1px solid ${(theme2.vars || theme2).palette.action.disabled}`
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        borderColor: (theme2.vars || theme2).palette[ownerState.color].dark
      }, {
        "&:hover": _extends({}, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
          borderRightColor: "currentColor"
        }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
          borderBottomColor: "currentColor"
        })
      }),
      "&:hover": _extends({}, ownerState.variant === "contained" && {
        boxShadow: "none"
      })
    }, ownerState.variant === "contained" && {
      boxShadow: "none"
    })
  }));
  var ButtonGroup = /* @__PURE__ */ React45.forwardRef(function ButtonGroup2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiButtonGroup"
    });
    const {
      children,
      className,
      color = "primary",
      component = "div",
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      disableRipple = false,
      fullWidth = false,
      orientation = "horizontal",
      size = "medium",
      variant = "outlined"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded29);
    const ownerState = _extends({}, props2, {
      color,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      orientation,
      size,
      variant
    });
    const classes = useUtilityClasses18(ownerState);
    const context = React45.useMemo(() => ({
      className: classes.grouped,
      color,
      disabled,
      disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      size,
      variant
    }), [color, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes.grouped]);
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ButtonGroupRoot, _extends({
      as: component,
      role: "group",
      className: (0, import_clsx21.default)(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ButtonGroupContext_default.Provider, {
        value: context,
        children
      })
    }));
  });
  true ? ButtonGroup.propTypes = {
    children: import_prop_types32.default.node,
    classes: import_prop_types32.default.object,
    className: import_prop_types32.default.string,
    color: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types32.default.string]),
    component: import_prop_types32.default.elementType,
    disabled: import_prop_types32.default.bool,
    disableElevation: import_prop_types32.default.bool,
    disableFocusRipple: import_prop_types32.default.bool,
    disableRipple: import_prop_types32.default.bool,
    fullWidth: import_prop_types32.default.bool,
    orientation: import_prop_types32.default.oneOf(["horizontal", "vertical"]),
    size: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["small", "medium", "large"]), import_prop_types32.default.string]),
    sx: import_prop_types32.default.oneOfType([import_prop_types32.default.arrayOf(import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object, import_prop_types32.default.bool])), import_prop_types32.default.func, import_prop_types32.default.object]),
    variant: import_prop_types32.default.oneOfType([import_prop_types32.default.oneOf(["contained", "outlined", "text"]), import_prop_types32.default.string])
  } : void 0;
  var ButtonGroup_default = ButtonGroup;

  // node_modules/@mui/material/esm/Button/Button.js
  var React46 = __toESM(require_react());
  var import_prop_types33 = __toESM(require_prop_types());
  var import_clsx22 = __toESM(require_clsx());
  var import_utils27 = __toESM(require_utils());
  var import_base41 = __toESM(require_node3());
  var import_system21 = __toESM(require_system());

  // node_modules/@mui/material/esm/Button/buttonClasses.js
  var import_base40 = __toESM(require_node3());
  function getButtonUtilityClass(slot) {
    return (0, import_base40.generateUtilityClass)("MuiButton", slot);
  }
  var buttonClasses = (0, import_base40.generateUtilityClasses)("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  var buttonClasses_default = buttonClasses;

  // node_modules/@mui/material/esm/Button/Button.js
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var _excluded30 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  var useUtilityClasses19 = (ownerState) => {
    const {
      color,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize_default(color)}`, `size${capitalize_default(size)}`, `${variant}Size${capitalize_default(size)}`, color === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["startIcon", `iconSize${capitalize_default(size)}`],
      endIcon: ["endIcon", `iconSize${capitalize_default(size)}`]
    };
    const composedClasses = (0, import_base41.unstable_composeClasses)(slots, getButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  var ButtonRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, styles3[ownerState.variant], styles3[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles3[`size${capitalize_default(ownerState.size)}`], styles3[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles3.colorInherit, ownerState.disableElevation && styles3.disableElevation, ownerState.fullWidth && styles3.fullWidth];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    return _extends({}, theme2.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme2.vars || theme2).shape.borderRadius,
      transition: theme2.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme2.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette.text.primaryChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_system21.alpha)(theme2.palette.text.primary, theme2.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_system21.alpha)(theme2.palette[ownerState.color].main, theme2.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme2.vars || theme2).palette[ownerState.color].main}`,
        backgroundColor: theme2.vars ? `rgba(${theme2.vars.palette[ownerState.color].mainChannel} / ${theme2.vars.palette.action.hoverOpacity})` : (0, import_system21.alpha)(theme2.palette[ownerState.color].main, theme2.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: (theme2.vars || theme2).palette.grey.A100,
        boxShadow: (theme2.vars || theme2).shadows[4],
        "@media (hover: none)": {
          boxShadow: (theme2.vars || theme2).shadows[2],
          backgroundColor: (theme2.vars || theme2).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme2.vars || theme2).palette[ownerState.color].dark,
        "@media (hover: none)": {
          backgroundColor: (theme2.vars || theme2).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme2.vars || theme2).shadows[8]
      }),
      [`&.${buttonClasses_default.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme2.vars || theme2).shadows[6]
      }),
      [`&.${buttonClasses_default.disabled}`]: _extends({
        color: (theme2.vars || theme2).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme2.vars || theme2).palette.action.disabledBackground}`
      }, ownerState.variant === "outlined" && ownerState.color === "secondary" && {
        border: `1px solid ${(theme2.vars || theme2).palette.action.disabled}`
      }, ownerState.variant === "contained" && {
        color: (theme2.vars || theme2).palette.action.disabled,
        boxShadow: (theme2.vars || theme2).shadows[0],
        backgroundColor: (theme2.vars || theme2).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme2.vars || theme2).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme2.vars || theme2).palette[ownerState.color].main,
      border: theme2.vars ? `1px solid rgba(${theme2.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${(0, import_system21.alpha)(theme2.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme2.vars ? theme2.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme2.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme2.palette.grey[300]),
      backgroundColor: (theme2.vars || theme2).palette.grey[300],
      boxShadow: (theme2.vars || theme2).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme2.vars || theme2).palette[ownerState.color].contrastText,
      backgroundColor: (theme2.vars || theme2).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme2.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme2.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme2.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme2.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme2.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme2.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.disabled}`]: {
      boxShadow: "none"
    }
  });
  var ButtonStartIcon = styled_default("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.startIcon, styles3[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  var ButtonEndIcon = styled_default("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.endIcon, styles3[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  var Button = /* @__PURE__ */ React46.forwardRef(function Button2(inProps, ref) {
    const contextProps = React46.useContext(ButtonGroupContext_default);
    const resolvedProps = (0, import_utils27.internal_resolveProps)(contextProps, inProps);
    const props2 = useThemeProps({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = "medium",
      startIcon: startIconProp,
      type: type2,
      variant = "text"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded30);
    const ownerState = _extends({}, props2, {
      color,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type: type2,
      variant
    });
    const classes = useUtilityClasses19(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(ButtonRoot, _extends({
      ownerState,
      className: (0, import_clsx22.default)(contextProps.className, classes.root, className),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: (0, import_clsx22.default)(classes.focusVisible, focusVisibleClassName),
      ref,
      type: type2
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  true ? Button.propTypes = {
    children: import_prop_types33.default.node,
    classes: import_prop_types33.default.object,
    className: import_prop_types33.default.string,
    color: import_prop_types33.default.oneOfType([import_prop_types33.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), import_prop_types33.default.string]),
    component: import_prop_types33.default.elementType,
    disabled: import_prop_types33.default.bool,
    disableElevation: import_prop_types33.default.bool,
    disableFocusRipple: import_prop_types33.default.bool,
    disableRipple: import_prop_types33.default.bool,
    endIcon: import_prop_types33.default.node,
    focusVisibleClassName: import_prop_types33.default.string,
    fullWidth: import_prop_types33.default.bool,
    href: import_prop_types33.default.string,
    size: import_prop_types33.default.oneOfType([import_prop_types33.default.oneOf(["small", "medium", "large"]), import_prop_types33.default.string]),
    startIcon: import_prop_types33.default.node,
    sx: import_prop_types33.default.oneOfType([import_prop_types33.default.arrayOf(import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.object, import_prop_types33.default.bool])), import_prop_types33.default.func, import_prop_types33.default.object]),
    type: import_prop_types33.default.oneOfType([import_prop_types33.default.oneOf(["button", "reset", "submit"]), import_prop_types33.default.string]),
    variant: import_prop_types33.default.oneOfType([import_prop_types33.default.oneOf(["contained", "outlined", "text"]), import_prop_types33.default.string])
  } : void 0;
  var Button_default = Button;

  // src/website/download.tsx
  var import_SvgIcon3 = __toESM(require_SvgIcon2());
  var timeMarks = [
    {
      value: 0 /* day */,
      label: "Heute"
    },
    {
      value: 1 /* week */,
      label: "Woche"
    },
    {
      value: 2 /* month */,
      label: "Monat"
    },
    {
      value: 3 /* year */,
      label: "Jahr"
    },
    {
      value: 4 /* all */,
      label: "Alles"
    },
    {
      value: 5 /* range */,
      label: "Zeitrahmen"
    }
  ];
  function Download() {
    const [timeframe, setTimeframe] = React47.useState(2 /* month */);
    const [timeRange, setTimeRange] = React47.useState([new Date(Date.now() - 1e3 * 3600 * 24), new Date()]);
    const [minDate2, setMinDate] = React47.useState(new Date());
    const paperSx = { p: 4, px: 5, mb: 4, display: "flex", flexDirection: "column" };
    const buttonSx = { width: 150 };
    const [from, to] = getFromTo(timeframe, timeRange);
    const baseUrl = "/download?from=" + from + "&to=" + to + "&format=";
    return /* @__PURE__ */ React47.createElement(Stack_default, null, /* @__PURE__ */ React47.createElement(Paper_default, {
      sx: paperSx
    }, /* @__PURE__ */ React47.createElement(FormLabel_default, null, "Speicherdauer"), /* @__PURE__ */ React47.createElement(Box_default, {
      sx: { mb: 4 }
    }, /* @__PURE__ */ React47.createElement(Slider_default, {
      value: timeframe,
      onChange: (_3, newVal) => setTimeframe(newVal),
      step: null,
      marks: timeMarks,
      min: timeMarks[0].value,
      max: timeMarks[timeMarks.length - 1].value
    })), /* @__PURE__ */ React47.createElement(FormLabel_default, null, "Zeitrahmen"), /* @__PURE__ */ React47.createElement(import_react_datetimerange_picker2.default, {
      locale: "de-DE",
      onChange: (range) => setTimeRange(range),
      value: timeRange,
      minDate: minDate2,
      maxDate: new Date(),
      disabled: timeframe !== 5 /* range */
    })), /* @__PURE__ */ React47.createElement(Paper_default, {
      sx: paperSx
    }, /* @__PURE__ */ React47.createElement(FormLabel_default, null, "Download"), /* @__PURE__ */ React47.createElement(ButtonGroup_default, null, /* @__PURE__ */ React47.createElement(Button_default, {
      variant: "contained",
      startIcon: /* @__PURE__ */ React47.createElement(import_SvgIcon3.default, null, /* @__PURE__ */ React47.createElement(FaFileCsv, null)),
      sx: buttonSx,
      size: "large",
      href: baseUrl + "csv",
      download: "Heizung.csv"
    }, "CSV"), /* @__PURE__ */ React47.createElement(Button_default, {
      variant: "contained",
      startIcon: /* @__PURE__ */ React47.createElement(import_SvgIcon3.default, null, /* @__PURE__ */ React47.createElement(FaFileCode, null)),
      sx: buttonSx,
      size: "large",
      href: baseUrl + "json",
      download: "Heizung.json"
    }, "JSON"), /* @__PURE__ */ React47.createElement(Button_default, {
      variant: "contained",
      startIcon: /* @__PURE__ */ React47.createElement(import_SvgIcon3.default, null, /* @__PURE__ */ React47.createElement(FaFileExcel, null)),
      sx: buttonSx,
      size: "large",
      href: baseUrl + "xlsx",
      download: "Heizung.xlsx"
    }, "Excel"), /* @__PURE__ */ React47.createElement(Button_default, {
      variant: "contained",
      startIcon: /* @__PURE__ */ React47.createElement(import_SvgIcon3.default, null, /* @__PURE__ */ React47.createElement(FaDatabase, null)),
      sx: buttonSx,
      size: "large",
      href: "/backup",
      download: "Heizung.db"
    }, "Backup"))));
  }
  function getFromTo(timeframe, range) {
    var _a, _b, _c, _d;
    const now = Date.now();
    switch (timeframe) {
      case 0 /* day */:
        return [now - 24 * 60 * 60 * 1e3, now];
      case 1 /* week */:
        return [now - 7 * 24 * 60 * 60 * 1e3, now];
      case 2 /* month */:
        return [now - 30 * 24 * 60 * 60 * 1e3, now];
      case 3 /* year */:
        return [now - 356 * 24 * 60 * 60 * 1e3, now];
      case 4 /* all */:
        return [
          0,
          now
        ];
      case 5 /* range */:
        return [
          (_b = (_a = range == null ? void 0 : range[0]) == null ? void 0 : _a.getTime()) != null ? _b : now - 24 * 60 * 60 * 1e3,
          (_d = (_c = range == null ? void 0 : range[1]) == null ? void 0 : _c.getTime()) != null ? _d : now
        ];
    }
  }

  // src/website/system.tsx
  var React55 = __toESM(require_react());
  var import_react_apexcharts2 = __toESM(require_react_apexcharts_min());

  // src/website/versionInfo.tsx
  var React54 = __toESM(require_react());

  // node_modules/@mui/material/esm/Alert/Alert.js
  var React53 = __toESM(require_react());
  var import_prop_types34 = __toESM(require_prop_types());
  var import_clsx23 = __toESM(require_clsx());
  var import_base43 = __toESM(require_node3());
  var import_system22 = __toESM(require_system());

  // node_modules/@mui/material/esm/Alert/alertClasses.js
  var import_base42 = __toESM(require_node3());
  function getAlertUtilityClass(slot) {
    return (0, import_base42.generateUtilityClass)("MuiAlert", slot);
  }
  var alertClasses = (0, import_base42.generateUtilityClasses)("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  var alertClasses_default = alertClasses;

  // node_modules/@mui/material/esm/internal/svg-icons/SuccessOutlined.js
  var React48 = __toESM(require_react());
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var SuccessOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime36.jsx)("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");

  // node_modules/@mui/material/esm/internal/svg-icons/ReportProblemOutlined.js
  var React49 = __toESM(require_react());
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var ReportProblemOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime37.jsx)("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");

  // node_modules/@mui/material/esm/internal/svg-icons/ErrorOutline.js
  var React50 = __toESM(require_react());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var ErrorOutline_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime38.jsx)("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");

  // node_modules/@mui/material/esm/internal/svg-icons/InfoOutlined.js
  var React51 = __toESM(require_react());
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var InfoOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime39.jsx)("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");

  // node_modules/@mui/material/esm/internal/svg-icons/Close.js
  var React52 = __toESM(require_react());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var Close_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime40.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");

  // node_modules/@mui/material/esm/Alert/Alert.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var _CloseIcon;
  var _excluded31 = ["action", "children", "className", "closeText", "color", "icon", "iconMapping", "onClose", "role", "severity", "variant"];
  var useUtilityClasses20 = (ownerState) => {
    const {
      variant,
      color,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${variant}${capitalize_default(color || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return (0, import_base43.unstable_composeClasses)(slots, getAlertUtilityClass, classes);
  };
  var AlertRoot = styled_default(Paper_default, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props2, styles3) => {
      const {
        ownerState
      } = props2;
      return [styles3.root, styles3[ownerState.variant], styles3[`${ownerState.variant}${capitalize_default(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme: theme2,
    ownerState
  }) => {
    const getColor = theme2.palette.mode === "light" ? import_system22.darken : import_system22.lighten;
    const getBackgroundColor = theme2.palette.mode === "light" ? import_system22.lighten : import_system22.darken;
    const color = ownerState.color || ownerState.severity;
    return _extends({}, theme2.typography.body2, {
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px"
    }, color && ownerState.variant === "standard" && {
      color: theme2.vars ? theme2.vars.palette.Alert[`${color}Color`] : getColor(theme2.palette[color].light, 0.6),
      backgroundColor: theme2.vars ? theme2.vars.palette.Alert[`${color}StandardBg`] : getBackgroundColor(theme2.palette[color].light, 0.9),
      [`& .${alertClasses_default.icon}`]: theme2.vars ? {
        color: theme2.vars.palette.Alert[`${color}IconColor`]
      } : {
        color: theme2.palette.mode === "dark" ? theme2.palette[color].main : theme2.palette[color].light
      }
    }, color && ownerState.variant === "outlined" && {
      color: theme2.vars ? theme2.vars.palette.Alert[`${color}Color`] : getColor(theme2.palette[color].light, 0.6),
      border: `1px solid ${(theme2.vars || theme2).palette[color].light}`,
      [`& .${alertClasses_default.icon}`]: theme2.vars ? {
        color: theme2.vars.palette.Alert[`${color}IconColor`]
      } : {
        color: theme2.palette.mode === "dark" ? theme2.palette[color].main : theme2.palette[color].light
      }
    }, color && ownerState.variant === "filled" && _extends({
      fontWeight: theme2.typography.fontWeightMedium
    }, theme2.vars ? {
      color: theme2.vars.palette.Alert[`${color}FilledColor`],
      backgroundColor: theme2.vars.palette.Alert[`${color}FilledBg`]
    } : {
      backgroundColor: theme2.palette.mode === "dark" ? theme2.palette[color].dark : theme2.palette[color].main,
      color: theme2.palette.getContrastText(theme2.palette.mode === "dark" ? theme2.palette[color].dark : theme2.palette[color].main)
    }));
  });
  var AlertIcon = styled_default("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props2, styles3) => styles3.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  var AlertMessage = styled_default("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props2, styles3) => styles3.message
  })({
    padding: "8px 0",
    minWidth: 0,
    overflow: "auto"
  });
  var AlertAction = styled_default("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props2, styles3) => styles3.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  var defaultIconMapping = {
    success: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SuccessOutlined_default, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ReportProblemOutlined_default, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ErrorOutline_default, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(InfoOutlined_default, {
      fontSize: "inherit"
    })
  };
  var Alert = /* @__PURE__ */ React53.forwardRef(function Alert2(inProps, ref) {
    const props2 = useThemeProps({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color,
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = "alert",
      severity = "success",
      variant = "standard"
    } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded31);
    const ownerState = _extends({}, props2, {
      color,
      severity,
      variant
    });
    const classes = useUtilityClasses20(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(AlertRoot, _extends({
      role,
      elevation: 0,
      ownerState,
      className: (0, import_clsx23.default)(classes.root, className),
      ref
    }, other, {
      children: [icon !== false ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AlertIcon, {
        ownerState,
        className: classes.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AlertMessage, {
        ownerState,
        className: classes.message,
        children
      }), action != null ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AlertAction, {
        ownerState,
        className: classes.action,
        children: action
      }) : null, action == null && onClose ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AlertAction, {
        ownerState,
        className: classes.action,
        children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(IconButton_default, {
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose,
          children: _CloseIcon || (_CloseIcon = /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Close_default, {
            fontSize: "small"
          }))
        })
      }) : null]
    }));
  });
  true ? Alert.propTypes = {
    action: import_prop_types34.default.node,
    children: import_prop_types34.default.node,
    classes: import_prop_types34.default.object,
    className: import_prop_types34.default.string,
    closeText: import_prop_types34.default.string,
    color: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["error", "info", "success", "warning"]), import_prop_types34.default.string]),
    icon: import_prop_types34.default.node,
    iconMapping: import_prop_types34.default.shape({
      error: import_prop_types34.default.node,
      info: import_prop_types34.default.node,
      success: import_prop_types34.default.node,
      warning: import_prop_types34.default.node
    }),
    onClose: import_prop_types34.default.func,
    role: import_prop_types34.default.string,
    severity: import_prop_types34.default.oneOf(["error", "info", "success", "warning"]),
    sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object]),
    variant: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["filled", "outlined", "standard"]), import_prop_types34.default.string])
  } : void 0;
  var Alert_default = Alert;

  // src/website/versionInfo.tsx
  function VersionInfo() {
    const [remoteVersion, setRemoteVersion] = React54.useState("???");
    const fetchData = () => __async(this, null, function* () {
      setRemoteVersion((yield (yield fetch(
        "https://raw.githubusercontent.com/grau/node_pump_server/main/package.json"
      )).json()).version);
    });
    React54.useEffect(() => {
      fetchData().catch((err) => console.warn("Failed to get version info!", { err }));
      const interval = setInterval(fetchData, 6e4);
      return () => {
        clearInterval(interval);
      };
    });
    return /* @__PURE__ */ React54.createElement(React54.Fragment, null, /* @__PURE__ */ React54.createElement(FormLabel_default, null, "Version"), /* @__PURE__ */ React54.createElement(Paper_default, {
      sx: { p: 4, px: 5, mb: 4, display: "flex", flexDirection: "column" }
    }, "0.1" === remoteVersion ? /* @__PURE__ */ React54.createElement(Alert_default, {
      severity: "success"
    }, "Die installierte Version 0.1 ist aktuell") : /* @__PURE__ */ React54.createElement(Alert_default, {
      severity: "error"
    }, "Installiert ist Version 0.1. Version ", remoteVersion, " ist verf\xFCgbar")));
  }

  // src/website/system.tsx
  var storageOptions = {
    chart: {
      type: "pie"
    },
    title: {
      text: "Massenspeicher",
      align: "left"
    },
    labels: ["Datenbank", "System", "Frei"],
    tooltip: {
      y: {
        formatter: getSizeString
      }
    }
  };
  var memoryOptions = {
    chart: {
      type: "pie"
    },
    title: {
      text: "Arbeitsspeicher",
      align: "left"
    },
    labels: ["Belegt", "Frei"],
    tooltip: {
      y: {
        formatter: getSizeString
      }
    }
  };
  function System() {
    const [data, setData] = React55.useState(null);
    if (data === null) {
      return /* @__PURE__ */ React55.createElement(CircularProgress_default, null);
    }
    const headData = data[data.length - 1];
    const storageUsed = headData.diskSpace.size - headData.diskSpace.free - headData.dbSize;
    const storageData = [headData.dbSize, storageUsed, headData.diskSpace.free];
    const memoryData = [headData.mem.total - headData.mem.free, headData.mem.free];
    return /* @__PURE__ */ React55.createElement(Grid_default, {
      container: true,
      spacing: 3
    }, /* @__PURE__ */ React55.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ React55.createElement(VersionInfo, null)), /* @__PURE__ */ React55.createElement(Grid_default, {
      item: true,
      xs: 12
    }, /* @__PURE__ */ React55.createElement(Paper_default, {
      sx: { p: 4, px: 5, mb: 4, display: "flex", flexDirection: "column" }
    }, /* @__PURE__ */ React55.createElement(FormLabel_default, null, "Systemstatus"), /* @__PURE__ */ React55.createElement(Grid_default, {
      container: true,
      spacing: 3
    }, /* @__PURE__ */ React55.createElement(Grid_default, {
      item: true,
      lg: 6,
      md: 12
    }, /* @__PURE__ */ React55.createElement(import_react_apexcharts2.default, {
      options: storageOptions,
      series: storageData,
      type: "pie",
      width: "100%",
      height: 400
    })), /* @__PURE__ */ React55.createElement(Grid_default, {
      item: true,
      lg: 6,
      md: 12
    }, /* @__PURE__ */ React55.createElement(import_react_apexcharts2.default, {
      options: memoryOptions,
      series: memoryData,
      type: "pie",
      width: "100%",
      height: 400
    }))))));
  }
  function getSizeString(sizeInBytes) {
    const sizeNames = ["B", "kB", "MB", "GB", "TB", "PB", "EB", "ZB"];
    let testSize = 1e3;
    for (const name of sizeNames) {
      if (sizeInBytes < testSize) {
        return Math.round(sizeInBytes / testSize * 1e4) / 10 + name;
      } else {
        testSize *= 1e3;
      }
    }
    return Math.round(sizeInBytes / testSize * 10) / 10 + "YB";
  }

  // src/website/main.tsx
  function Main(props2) {
    const { view } = props2;
    switch (view) {
      case "graph":
        return /* @__PURE__ */ React56.createElement(Graph, null);
      case "download":
        return /* @__PURE__ */ React56.createElement(Download, null);
      case "system":
        return /* @__PURE__ */ React56.createElement(System, null);
      default:
      case "live":
        return /* @__PURE__ */ React56.createElement(Live, null);
    }
  }

  // src/website/root.tsx
  function Root() {
    const [open, setOpen] = React57.useState(true);
    const [view, setView] = React57.useState("live");
    const toggleDrawer = () => {
      setOpen(!open);
    };
    return /* @__PURE__ */ React57.createElement(Box_default, {
      sx: { display: "flex" }
    }, /* @__PURE__ */ React57.createElement(AppBar3, {
      open,
      toggleDrawer
    }), /* @__PURE__ */ React57.createElement(Drawer3, {
      view,
      open,
      toggleDrawer,
      onChangeView: setView
    }), /* @__PURE__ */ React57.createElement(Box_default, {
      component: "main",
      sx: {
        backgroundColor: (theme2) => theme2.palette.mode === "light" ? theme2.palette.grey[100] : theme2.palette.grey[900],
        flexGrow: 1,
        height: "100vh",
        overflow: "auto"
      }
    }, /* @__PURE__ */ React57.createElement(Toolbar_default, null), /* @__PURE__ */ React57.createElement(Container_default, {
      maxWidth: "lg",
      sx: { mt: 4, mb: 4 }
    }, /* @__PURE__ */ React57.createElement(Main, {
      view
    }))));
  }

  // src/website/getData.ts
  var import_delay = __toESM(require_delay());
  function fetchLoop() {
    return __async(this, null, function* () {
      while (true) {
        yield updateFileIndex();
        for (const filename of yield db.getNextFilenames()) {
          console.log("Fetching data file " + filename);
          yield storeFile(filename);
          yield db.setFileIndex(filename);
          console.log("... fetched");
        }
        console.log("Waiting for new files");
        yield (0, import_delay.default)(1e4);
      }
    });
  }
  function updateFileIndex() {
    return __async(this, null, function* () {
      const url = "/data/index.txt";
      const content = yield (yield fetch(url)).text();
      const filenames = content.split("\n").filter((line) => line.length > 0);
      yield db.updateFileIndex(filenames);
    });
  }
  function storeFile(filename) {
    return __async(this, null, function* () {
      const url = "/" + filename;
      const content = yield (yield fetch(url)).text();
      const rows = content.split("\n").filter((line) => line.length > 0);
      if (filename.match(/-error\.csv/)) {
        const errors = rows.map(parseErrorLine);
        yield db.addError(errors);
      } else {
        const data = rows.map(parseDataLine);
        yield db.addData(data);
      }
    });
  }
  function parseErrorLine(line) {
    const [timestamp, data, error, message] = line.split(";");
    return {
      timestamp: parseInt(timestamp),
      data,
      error,
      message
    };
  }
  function parseDataLine(line) {
    const [timestamp, input0, input1, input2, input3, output0, output1, boot, state] = line.split(";");
    return {
      timestamp: parseInt(timestamp),
      input: [
        { id: 0, val: parseInt(input0) },
        { id: 1, val: parseInt(input1) },
        { id: 2, val: parseInt(input2) },
        { id: 3, val: parseInt(input3) }
      ],
      output: [
        { id: 0, val: parseInt(output0) },
        { id: 1, val: parseInt(output1) }
      ],
      boot: boot === "1",
      state: parseInt(state)
    };
  }

  // src/website/index.tsx
  var container = document.getElementById("reactRoot");
  if (!container) {
    throw new Error("No root container node found");
  }
  var theme = createTheme_default({
    palette: {
      action: {
        selectedOpacity: 0.3,
        hoverOpacity: 1,
        focus: "#ff0000",
        focusOpacity: 1
      }
    }
  });
  fetchLoop().catch((err) => console.error("Fetch loop crashed!", { err }));
  var root = (0, import_client.createRoot)(container);
  root.render(/* @__PURE__ */ React58.createElement(React58.StrictMode, null, /* @__PURE__ */ React58.createElement(import_system6.ThemeProvider, {
    theme
  }, /* @__PURE__ */ React58.createElement(CssBaseline_default, null), /* @__PURE__ */ React58.createElement(Root, null))));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * ApexCharts v3.36.0
 * (c) 2018-2022 ApexCharts
 * Released under the MIT License.
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license MUI v5.0.0-alpha.101
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.10.8
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.10.9
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=bundle.js.map
